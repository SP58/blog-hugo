[{"categories":["python"],"content":"List of Python Frameworks Libraries Software and Resources","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":" A curated list of awesome Python frameworks, libraries, software and resources. Awesome Python Admin Panels Algorithms and Design Patterns ASGI Servers Asynchronous Programming Audio Authentication Build Tools Built-in Classes Enhancement Caching ChatOps Tools CMS Code Analysis Command-line Interface Development Command-line Tools Compatibility Computer Vision Concurrency and Parallelism Configuration Cryptography Data Analysis Data Validation Data Visualization Database Drivers Database Date and Time Debugging Tools Deep Learning DevOps Tools Distributed Computing Distribution Documentation Downloader E-commerce Editor Plugins and IDEs Email Enterprise Application Integrations Environment Management Files Foreign Function Interface Forms Functional Programming Game Development Geolocation GUI Development Hardware HTML Manipulation HTTP Clients Image Processing Implementations Interactive Interpreter Internationalization Job Scheduler Logging Machine Learning Miscellaneous Natural Language Processing Network Virtualization News Feed ORM Package Management Package Repositories Penetration testing Permissions Processes Recommender Systems Refactoring RESTful API Robotics RPC Servers Science Search Serialization Serverless Frameworks Shell Specific Formats Processing Static Site Generator Tagging Task Queues Template Engine Testing Text Processing Third-party APIs URL Manipulation Video Web Asset Management Web Content Extracting Web Crawling Web Frameworks WebSocket WSGI Servers Resources Books Newsletters Podcasts Websites Contributing ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:0:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Admin Panels Libraries for administrative interfaces. ajenti - The admin panel your servers deserve. django-grappelli - A jazzy skin for the Django Admin-Interface. django-jet - Modern responsive template for the Django admin interface with improved functionality. django-suit - Alternative Django Admin-Interface (free only for Non-commercial use). django-xadmin - Drop-in replacement of Django admin comes with lots of goodies. flask-admin - Simple and extensible administrative interface framework for Flask. flower - Real-time monitor and web admin for Celery. jet-bridge - Admin panel framework for any application with nice UI (ex Jet Django). wooey - A Django app which creates automatic web UIs for Python scripts. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:1:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Algorithms and Design Patterns Python implementation of data structures, algorithms and design patterns. Also see awesome-algorithms. Algorithms algorithms - Minimal examples of data structures and algorithms. python-ds - A collection of data structure and algorithms for coding interviews. sortedcontainers - Fast and pure-Python implementation of sorted collections. TheAlgorithms - All Algorithms implemented in Python. Design Patterns PyPattyrn - A simple yet effective library for implementing common design patterns. python-patterns - A collection of design patterns in Python. transitions - A lightweight, object-oriented finite state machine implementation. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:2:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"ASGI Servers ASGI-compatible web servers. daphne - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP. uvicorn - A lightning-fast ASGI server implementation, using uvloop and httptools. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:3:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Asynchronous Programming asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks. awesome-asyncio trio - A friendly library for async concurrency and I/O. Twisted - An event-driven networking engine. uvloop - Ultra fast asyncio event loop. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:4:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Audio Libraries for manipulating audio and its metadata. Audio audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding. dejavu - Audio fingerprinting and recognition. kapre - Keras Audio Preprocessors. librosa - Python library for audio and music analysis. matchering - A library for automated reference audio mastering. mingus - An advanced music theory and notation package with MIDI file and playback support. pyAudioAnalysis - Audio feature extraction, classification, segmentation and applications. pydub - Manipulate audio with a simple and easy high level interface. TimeSide - Open web audio processing framework. Metadata beets - A music library manager and MusicBrainz tagger. eyeD3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata. mutagen - A Python module to handle audio metadata. tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:5:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Authentication Libraries for implementing authentications schemes. OAuth authlib - JavaScript Object Signing and Encryption draft implementation. django-allauth - Authentication app for Django that “just works.” django-oauth-toolkit - OAuth 2 goodies for Django. oauthlib - A generic and thorough implementation of the OAuth request-signing logic. python-oauth2 - A fully tested, abstract interface to creating OAuth clients and servers. python-social-auth - An easy-to-setup social authentication mechanism. JWT pyjwt - JSON Web Token implementation in Python. python-jose - A JOSE implementation in Python. python-jwt - A module for generating and verifying JSON Web Tokens. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:6:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Build Tools Compile software from source code. BitBake - A make-like build tool for embedded Linux. buildout - A build system for creating, assembling and deploying applications from multiple parts. PlatformIO - A console tool to build code with different development platforms. pybuilder - A continuous build tool written in pure Python. SCons - A software construction tool. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:7:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Built-in Classes Enhancement Libraries for enhancing Python built-in classes. attrs - Replacement for __init__, __eq__, __repr__, etc. boilerplate in class definitions. bidict - Efficient, Pythonic bidirectional map data structures and related functionality.. Box - Python dictionaries with advanced dot notation access. dataclasses - (Python standard library) Data classes. DottedDict - A library that provides a method of accessing lists and dicts with a dotted path notation. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:8:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"CMS Content Management Systems. django-cms - An Open source enterprise CMS based on the Django. feincms - One of the most advanced Content Management Systems built on Django. indico - A feature-rich event management system, made @ CERN. Kotti - A high-level, Pythonic web application framework built on Pyramid. mezzanine - A powerful, consistent, and flexible content management platform. plone - A CMS built on top of the open source application server Zope. quokka - Flexible, extensible, small CMS powered by Flask and MongoDB. wagtail - A Django content management system. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:9:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Caching Libraries for caching data. beaker - A WSGI middleware for sessions and caching. django-cache-machine - Automatic caching and invalidation for Django models. django-cacheops - A slick ORM cache with automatic granular event-driven invalidation. dogpile.cache - dogpile.cache is a next generation replacement for Beaker made by the same authors. HermesCache - Python caching library with tag-based invalidation and dogpile effect prevention. pylibmc - A Python wrapper around the libmemcached interface. python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:10:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"ChatOps Tools Libraries for chatbot development. errbot - The easiest and most popular chatbot to implement ChatOps. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:11:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Code Analysis Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis. Code Analysis coala - Language independent and easily extendable code analysis application. code2flow - Turn your Python and JavaScript code into DOT flowcharts. prospector - A tool to analyse Python code. pycallgraph - A library that visualises the flow (call graph) of your Python application. vulture - A tool for finding and analysing dead Python code. Code Linters flake8 - A wrapper around pycodestyle, pyflakes and McCabe. awesome-flake8-extensions pylama - A code audit tool for Python and JavaScript. pylint - A fully customizable source code analyzer. wemake-python-styleguide - The strictest and most opinionated python linter ever. Code Formatters black - The uncompromising Python code formatter. isort - A Python utility / library to sort imports. yapf - Yet another Python code formatter from Google. Static Type Checkers, also see awesome-python-typing mypy - Check variable types during compile time. pyre-check - Performant type checking. typeshed - Collection of library stubs for Python, with static types. Static Type Annotations Generators MonkeyType - A system for Python that generates static type annotations by collecting runtime types. pyannotate - Auto-generate PEP-484 annotations. pytype - Pytype checks and infers types for Python code - without requiring type annotations. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:12:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Command-line Interface Development Libraries for building command-line applications. Command-line Application Development cement - CLI Application Framework for Python. click - A package for creating beautiful command line interfaces in a composable way. cliff - A framework for creating command-line programs with multi-level commands. docopt - Pythonic command line arguments parser. python-fire - A library for creating command line interfaces from absolutely any Python object. python-prompt-toolkit - A library for building powerful interactive command lines. Terminal Rendering alive-progress - A new kind of Progress Bar, with real-time throughput, eta and very cool animations. asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations). bashplotlib - Making basic plots in the terminal. colorama - Cross-platform colored terminal text. rich - Python library for rich text and beautiful formatting in the terminal. Also provides a great RichHandler log handler. tqdm - Fast, extensible progress bar for loops and CLI. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:13:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Command-line Tools Useful CLI-based tools for productivity. Productivity Tools copier - A library and command-line utility for rendering projects templates. cookiecutter - A command-line utility that creates projects from cookiecutters (project templates). doitlive - A tool for live presentations in the terminal. howdoi - Instant coding answers via the command line. Invoke - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks. PathPicker - Select files out of bash output. percol - Adds flavor of interactive selection to the traditional pipe concept on UNIX. thefuck - Correcting your previous console command. tmuxp - A tmux session manager. try - A dead simple CLI to try out python packages - it’s never been easier. CLI Enhancements httpie - A command line HTTP client, a user-friendly cURL replacement. iredis - Redis CLI with autocompletion and syntax highlighting. kube-shell - An integrated shell for working with the Kubernetes CLI. litecli - SQLite CLI with autocompletion and syntax highlighting. mycli - MySQL CLI with autocompletion and syntax highlighting. pgcli - PostgreSQL CLI with autocompletion and syntax highlighting. saws - A Supercharged aws-cli. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:14:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Compatibility Libraries for migrating from Python 2 to 3. python-future - The missing compatibility layer between Python 2 and Python 3. modernize - Modernizes Python code for eventual Python 3 migration. six - Python 2 and 3 compatibility utilities. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:15:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Computer Vision Libraries for Computer Vision. EasyOCR - Ready-to-use OCR with 40+ languages supported. Face Recognition - Simple facial recognition library. Kornia - Open Source Differentiable Computer Vision Library for PyTorch. OpenCV - Open Source Computer Vision Library. pytesseract - A wrapper for Google Tesseract OCR. SimpleCV - An open source framework for building computer vision applications. tesserocr - Another simple, Pillow-friendly, wrapper around the tesseract-ocr API for OCR. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:16:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Concurrency and Parallelism Libraries for concurrent and parallel execution. Also see awesome-asyncio. concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables. eventlet - Asynchronous framework with WSGI support. gevent - A coroutine-based Python networking library that uses greenlet. multiprocessing - (Python standard library) Process-based parallelism. scoop - Scalable Concurrent Operations in Python. uvloop - Ultra fast implementation of asyncio event loop on top of libuv. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:17:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Configuration Libraries for storing and parsing configuration options. configobj - INI file parser with validation. configparser - (Python standard library) INI file parser. hydra - Hydra is a framework for elegantly configuring complex applications. profig - Config from multiple formats with value conversion. python-decouple - Strict separation of settings from code. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:18:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Cryptography cryptography - A package designed to expose cryptographic primitives and recipes to Python developers. paramiko - The leading native Python SSHv2 protocol library. passlib - Secure password storage/hashing library, very high level. pynacl - Python binding to the Networking and Cryptography (NaCl) library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:19:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Data Analysis Libraries for data analyzing. AWS Data Wrangler - Pandas on AWS. Blaze - NumPy and Pandas interface to Big Data. Open Mining - Business Intelligence (BI) in Pandas interface. Optimus - Agile Data Science Workflows made easy with PySpark. Orange - Data mining, data visualization, analysis and machine learning through visual programming or scripts. Pandas - A library providing high-performance, easy-to-use data structures and data analysis tools. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:20:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Data Validation Libraries for validating data. Used for forms in many cases. Cerberus - A lightweight and extensible data validation library. colander - Validating and deserializing data obtained via XML, JSON, an HTML form post. jsonschema - An implementation of JSON Schema for Python. schema - A library for validating Python data structures. Schematics - Data Structure Validation. valideer - Lightweight extensible data validation and adaptation library. voluptuous - A Python data validation library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:21:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Data Visualization Libraries for visualizing data. Also see awesome-javascript. Altair - Declarative statistical visualization library for Python. Bokeh - Interactive Web Plotting for Python. bqplot - Interactive Plotting Library for the Jupyter Notebook. Cartopy - A cartographic python library with matplotlib support. Dash - Built on top of Flask, React and Plotly aimed at analytical web applications. awesome-dash diagrams - Diagram as Code. Matplotlib - A Python 2D plotting library. plotnine - A grammar of graphics for Python based on ggplot2. Pygal - A Python SVG Charts Creator. PyGraphviz - Python interface to Graphviz. PyQtGraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets. Seaborn - Statistical data visualization using Matplotlib. VisPy - High-performance scientific visualization based on OpenGL. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:22:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Database Databases implemented in Python. pickleDB - A simple and lightweight key-value store for Python. tinydb - A tiny, document-oriented database. ZODB - A native object database for Python. A key-value and object graph database. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:23:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Database Drivers Libraries for connecting and operating databases. MySQL - awesome-mysql mysqlclient - MySQL connector with Python 3 support (mysql-python fork). PyMySQL - A pure Python MySQL driver compatible to mysql-python. PostgreSQL - awesome-postgres psycopg2 - The most popular PostgreSQL adapter for Python. queries - A wrapper of the psycopg2 library for interacting with PostgreSQL. SQlite - awesome-sqlite sqlite3 - (Python standard library) SQlite interface compliant with DB-API 2.0 SuperSQLite - A supercharged SQLite library built on top of apsw. Other Relational Databases pymssql - A simple database interface to Microsoft SQL Server. clickhouse-driver - Python driver with native interface for ClickHouse. NoSQL Databases cassandra-driver - The Python Driver for Apache Cassandra. happybase - A developer-friendly library for Apache HBase. kafka-python - The Python client for Apache Kafka. py2neo - A client library and toolkit for working with Neo4j. pymongo - The official Python client for MongoDB. redis-py - The Python client for Redis. Asynchronous Clients motor - The async Python driver for MongoDB. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:24:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Date and Time Libraries for working with dates and times. Arrow - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps. Chronyk - A Python 3 library for parsing human-written times and dates. dateutil - Extensions to the standard Python datetime module. delorean - A library for clearing up the inconvenient truths that arise dealing with datetimes. maya - Datetimes for Humans. moment - A Python library for dealing with dates/times. Inspired by Moment.js. Pendulum - Python datetimes made easy. PyTime - An easy-to-use Python module which aims to operate date/time/datetime by string. pytz - World timezone definitions, modern and historical. Brings the tz database into Python. when.py - Providing user-friendly functions to help perform common date and time actions. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:25:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Debugging Tools Libraries for debugging code. pdb-like Debugger ipdb - IPython-enabled pdb. pdb++ - Another drop-in replacement for pdb. pudb - A full-screen, console-based Python debugger. wdb - An improbable web debugger through WebSockets. Tracing lptrace - strace for Python programs. manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt. pyringe - Debugger capable of attaching to and injecting code into Python processes. python-hunter - A flexible code tracing toolkit. Profiler line_profiler - Line-by-line profiling. memory_profiler - Monitor Memory usage of Python code. py-spy - A sampling profiler for Python programs. Written in Rust. pyflame - A ptracing profiler For Python. vprof - Visual Python profiler. Others django-debug-toolbar - Display various debug information for Django. django-devserver - A drop-in replacement for Django’s runserver. flask-debugtoolbar - A port of the django-debug-toolbar to flask. icecream - Inspect variables, expressions, and program execution with a single, simple function call. pyelftools - Parsing and analyzing ELF files and DWARF debugging information. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:26:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Deep Learning Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning. caffe - A fast open framework for deep learning.. keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano. mxnet - A deep learning framework designed for both efficiency and flexibility. pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration. SerpentAI - Game agent framework. Use any video game as a deep learning sandbox. tensorflow - The most popular Deep Learning framework created by Google. Theano - A library for fast numerical computation. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:27:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"DevOps Tools Software and libraries for DevOps. Configuration Management ansible - A radically simple IT automation platform. cloudinit - A multi-distribution package that handles early initialization of a cloud instance. OpenStack - Open source software for building private and public clouds. pyinfra - A versatile CLI tools and python libraries to automate infrastructure. saltstack - Infrastructure automation and management system. SSH-style Deployment cuisine - Chef-like functionality for Fabric. fabric - A simple, Pythonic tool for remote execution and deployment. fabtools - Tools for writing awesome Fabric files. Process Management honcho - A Python clone of Foreman, for managing Procfile-based applications. supervisor - Supervisor process control system for UNIX. Monitoring psutil - A cross-platform process and system utilities module. Backup BorgBackup - A deduplicating archiver with compression and encryption. Others docker-compose - Fast, isolated development environments using Docker. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:28:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Distributed Computing Frameworks and libraries for Distributed Computing. Batch Processing dask - A flexible parallel computing library for analytic computing. luigi - A module that helps you build complex pipelines of batch jobs. mrjob - Run MapReduce jobs on Hadoop or Amazon Web Services. PySpark - Apache Spark Python API. Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem. Stream Processing faust - A stream processing library, porting the ideas from Kafka Streams to Python. streamparse - Run Python code against real-time streams of data via Apache Storm. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:29:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Distribution Libraries to create packaged executables for release distribution. dh-virtualenv - Build and distribute a virtualenv as a Debian package. Nuitka - Compile scripts, modules, packages to an executable or extension module. py2app - Freezes Python scripts (Mac OS X). py2exe - Freezes Python scripts (Windows). pyarmor - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts. PyInstaller - Converts Python programs into stand-alone executables (cross-platform). pynsist - A tool to build Windows installers, installers bundle Python itself. shiv - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:30:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Documentation Libraries for generating project documentation. sphinx - Python Documentation generator. awesome-sphinxdoc pdoc - Epydoc replacement to auto generate API documentation for Python libraries. pycco - The literate-programming-style documentation generator. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:31:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Downloader Libraries for downloading. akshare - A financial data interface library, built for human beings! s3cmd - A command line tool for managing Amazon S3 and CloudFront. s4cmd - Super S3 command line tool, good for higher performance. you-get - A YouTube/Youku/Niconico video downloader written in Python 3. youtube-dl - A small command-line program to download videos from YouTube. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:32:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"E-commerce Frameworks and libraries for e-commerce and payments. alipay - Unofficial Alipay API for Python. Cartridge - A shopping cart app built using the Mezzanine. django-oscar - An open-source e-commerce framework for Django. django-shop - A Django based shop system. forex-python - Foreign exchange rates, Bitcoin price index and currency conversion. merchant - A Django app to accept payments from various payment processors. money - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange. python-currencies - Display money format and its filthy currencies. saleor - An e-commerce storefront for Django. shoop - An open source E-Commerce platform based on Django. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:33:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Editor Plugins and IDEs Emacs elpy - Emacs Python Development Environment. Sublime Text anaconda - Anaconda turns your Sublime Text 3 in a full featured Python development IDE. SublimeJEDI - A Sublime Text plugin to the awesome auto-complete library Jedi. Vim jedi-vim - Vim bindings for the Jedi auto-completion library for Python. python-mode - An all in one plugin for turning Vim into a Python IDE. YouCompleteMe - Includes Jedi-based completion engine for Python. Visual Studio PTVS - Python Tools for Visual Studio. Visual Studio Code Python - The official VSCode extension with rich support for Python. IDE PyCharm - Commercial Python IDE by JetBrains. Has free community edition available. spyder - Open Source Python IDE. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:34:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Email Libraries for sending and parsing email. Mail Servers modoboa - A mail hosting and management platform including a modern Web UI. salmon - A Python Mail Server. Clients imbox - Python IMAP for Humans. yagmail - Yet another Gmail/SMTP client. Others flanker - An email address and Mime parsing library. mailer - High-performance extensible mail delivery framework. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:35:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Enterprise Application Integrations Platforms and tools for systems integrations in enterprise environments Zato - ESB, SOA, REST, APIs and Cloud Integrations in Python. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:36:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Environment Management Libraries for Python version and virtual environment management. pyenv - Simple Python version management. virtualenv - A tool to create isolated Python environments. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:37:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Files Libraries for file manipulation and MIME type detection. mimetypes - (Python standard library) Map filenames to MIME types. path.py - A module wrapper for os.path. pathlib - (Python standard library) An cross-platform, object-oriented path library. PyFilesystem2 - Python’s filesystem abstraction layer. python-magic - A Python interface to the libmagic file type identification library. Unipath - An object-oriented approach to file/directory operations. watchdog - API and shell utilities to monitor file system events. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:38:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Foreign Function Interface Libraries for providing foreign function interface. cffi - Foreign Function Interface for Python calling C code. ctypes - (Python standard library) Foreign Function Interface for Python calling C code. PyCUDA - A Python wrapper for Nvidia’s CUDA API. SWIG - Simplified Wrapper and Interface Generator. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:39:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Forms Libraries for working with forms. Deform - Python HTML form generation library influenced by the formish form generation library. django-bootstrap3 - Bootstrap 3 integration with Django. django-bootstrap4 - Bootstrap 4 integration with Django. django-crispy-forms - A Django app which lets you create beautiful forms in a very elegant and DRY way. django-remote-forms - A platform independent Django form serializer. WTForms - A flexible forms validation and rendering library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:40:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Functional Programming Functional Programming with Python. Coconut - A variant of Python built for simple, elegant, Pythonic functional programming. CyToolz - Cython implementation of Toolz: High performance functional utilities. fn.py - Functional programming in Python: implementation of missing features to enjoy FP. funcy - A fancy and practical functional tools. more-itertools - More routines for operating on iterables, beyond itertools. returns - A set of type-safe monads, transformers, and composition utilities. Toolz - A collection of functional utilities for iterators, functions, and dictionaries. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:41:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"GUI Development Libraries for working with graphical user interface applications. curses - Built-in wrapper for ncurses used to create terminal GUI applications. Eel - A library for making simple Electron-like offline HTML/JS GUI apps. enaml - Creating beautiful user-interfaces with Declarative Syntax like QML. Flexx - Flexx is a pure Python toolkit for creating GUI’s, that uses web technology for its rendering. Gooey - Turn command line programs into a full GUI application with one line. kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS. pyglet - A cross-platform windowing and multimedia library for Python. PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3). PyQt - Python bindings for the Qt cross-platform application and UI framework. PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi. pywebview - A lightweight cross-platform native wrapper around a webview component. Tkinter - Tkinter is Python’s de-facto standard GUI package. Toga - A Python native, OS native GUI toolkit. urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc. wxPython - A blending of the wxWidgets C++ class library with the Python. DearPyGui - A Simple GPU accelerated Python GUI framework ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:42:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"GraphQL Libraries for working with GraphQL. graphene - GraphQL framework for Python. tartiflette-aiohttp - An aiohttp-based wrapper for Tartiflette to expose GraphQL APIs over HTTP. tartiflette-asgi - ASGI support for the Tartiflette GraphQL engine. tartiflette - SDL-first GraphQL engine implementation for Python 3.6+ and asyncio. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:43:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Game Development Awesome game development libraries. Arcade - Arcade is a modern Python framework for crafting games with compelling graphics and sound. Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. Harfang3D - Python framework for 3D, VR and game development. Panda3D - 3D game engine developed by Disney. Pygame - Pygame is a set of Python modules designed for writing games. PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D. PyOpenGL - Python ctypes bindings for OpenGL and it’s related APIs. PySDL2 - A ctypes based wrapper for the SDL2 library. RenPy - A Visual Novel engine. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:44:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Geolocation Libraries for geocoding addresses and working with latitudes and longitudes. django-countries - A Django app that provides a country field for models and forms. GeoDjango - A world-class geographic web framework. GeoIP - Python API for MaxMind GeoIP Legacy Database. geojson - Python bindings and utilities for GeoJSON. geopy - Python Geocoding Toolbox. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:45:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"HTML Manipulation Libraries for working with HTML and XML. BeautifulSoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML. bleach - A whitelist-based HTML sanitization and text linkification library. cssutils - A CSS library for Python. html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments. lxml - A very fast, easy-to-use and versatile library for handling HTML and XML. MarkupSafe - Implements a XML/HTML/XHTML Markup safe string for Python. pyquery - A jQuery-like library for parsing HTML. untangle - Converts XML documents to Python objects for easy access. WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF. xmldataset - Simple XML Parsing. xmltodict - Working with XML feel like you are working with JSON. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:46:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"HTTP Clients Libraries for working with HTTP. grequests - requests + gevent for asynchronous HTTP requests. httplib2 - Comprehensive HTTP client library. httpx - A next generation HTTP client for Python. requests - HTTP Requests for Humans. treq - Python requests like API built on top of Twisted’s HTTP client. urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:47:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Hardware Libraries for programming with hardware. ino - Command line toolkit for working with Arduino. keyboard - Hook and simulate global keyboard events on Windows and Linux. mouse - Hook and simulate global mouse events on Windows and Linux. Pingo - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc. PyUserInput - A module for cross-platform control of the mouse and keyboard. scapy - A brilliant packet manipulation library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:48:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Image Processing Libraries for manipulating images. hmap - Image histogram remapping. imgSeek - A project for searching a collection of images using visual similarity. nude.py - Nudity detection. pagan - Retro identicon (Avatar) generation based on input string and hash. pillow - Pillow is the friendly PIL fork. python-barcode - Create barcodes in Python with no extra dependencies. pygram - Instagram-like image filters. PyMatting - A library for alpha matting. python-qrcode - A pure Python QR Code generator. pywal - A tool that generates color schemes from images. pyvips - A fast image processing library with low memory needs. Quads - Computer art based on quadtrees. scikit-image - A Python library for (scientific) image processing. thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images. wand - Python bindings for MagickWand, C API for ImageMagick. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:49:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Implementations Implementations of Python. CLPython - Implementation of the Python programming language written in Common Lisp. CPython - Default, most widely used implementation of the Python programming language written in C. Cython - Optimizing Static Compiler for Python. Grumpy - More compiler than interpreter as more powerful CPython2.7 replacement (alpha). IronPython - Implementation of the Python programming language written in C#. Jython - Implementation of Python programming language written in Java for the JVM. MicroPython - A lean and efficient Python programming language implementation. Numba - Python JIT compiler to LLVM aimed at scientific Python. PeachPy - x86-64 assembler embedded in Python. Pyjion - A JIT for Python based upon CoreCLR. PyPy - A very fast and compliant implementation of the Python language. Pyston - A Python implementation using JIT techniques. Stackless Python - An enhanced version of the Python programming language. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:50:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Interactive Interpreter Interactive Python interpreters (REPL). bpython - A fancy interface to the Python interpreter. Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively. awesome-jupyter ptpython - Advanced Python REPL built on top of the python-prompt-toolkit. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:51:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Internationalization Libraries for working with i18n. Babel - An internationalization library for Python. PyICU - A wrapper of International Components for Unicode C++ library (ICU). ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:52:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Job Scheduler Libraries for scheduling jobs. Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows. APScheduler - A light but powerful in-process task scheduler that lets you schedule functions. django-schedule - A calendaring app for Django. doit - A task runner and build tool. gunnery - Multipurpose task execution tool for distributed systems with web-based interface. Joblib - A set of tools to provide lightweight pipelining in Python. Plan - Writing crontab file in Python like a charm. Prefect - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines. schedule - Python job scheduling for humans. Spiff - A powerful workflow engine implemented in pure Python. TaskFlow - A Python library that helps to make task execution easy, consistent and reliable. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:53:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Logging Libraries for generating and working with logs. logbook - Logging replacement for Python. logging - (Python standard library) Logging facility for Python. loguru - Library which aims to bring enjoyable logging in Python. sentry-python - Sentry SDK for Python. structlog - Structured logging made easy. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:54:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Machine Learning Libraries for Machine Learning. Also see awesome-machine-learning. gym - A toolkit for developing and comparing reinforcement learning algorithms. H2O - Open Source Fast Scalable Machine Learning Platform. Metrics - Machine learning evaluation metrics. NuPIC - Numenta Platform for Intelligent Computing. scikit-learn - The most popular Python library for Machine Learning. Spark ML - Apache Spark’s scalable Machine Learning library. vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit. xgboost - A scalable, portable, and distributed gradient boosting library. MindsDB - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:55:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Microsoft Windows Python programming on Microsoft Windows. Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder. pythonlibs - Unofficial Windows binaries for Python extension packages. PythonNet - Python Integration with the .NET Common Language Runtime (CLR). PyWin32 - Python Extensions for Windows. WinPython - Portable development environment for Windows 7/8. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:56:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Miscellaneous Useful libraries or tools that don’t fit in the categories above. blinker - A fast Python in-process signal/event dispatching system. boltons - A set of pure-Python utilities. itsdangerous - Various helpers to pass trusted data to untrusted environments. magenta - A tool to generate music and art using artificial intelligence. pluginbase - A simple but flexible plugin system for Python. tryton - A general purpose business framework. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:57:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Natural Language Processing Libraries for working with human languages. General gensim - Topic Modeling for Humans. langid.py - Stand-alone language identification system. nltk - A leading platform for building Python programs to work with human language data. pattern - A web mining module. polyglot - Natural language pipeline supporting hundreds of languages. pytext - A natural language modeling framework based on PyTorch. PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research. spacy - A library for industrial-strength natural language processing in Python and Cython. Stanza - The Stanford NLP Group’s official Python library, supporting 60+ languages. Chinese funNLP - A collection of tools and datasets for Chinese NLP. jieba - The most popular Chinese text segmentation library. pkuseg-python - A toolkit for Chinese word segmentation in various domains. snownlp - A library for processing Chinese text. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:58:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Network Virtualization Tools and libraries for Virtual Networking and SDN (Software Defined Networking). mininet - A popular network emulator and API written in Python. napalm - Cross-vendor API to manipulate network devices. pox - A Python-based SDN control applications, such as OpenFlow SDN controllers. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:59:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"News Feed Libraries for building user’s activities. django-activity-stream - Generating generic activity streams from the actions on your site. Stream Framework - Building news feed and notification systems using Cassandra and Redis. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:60:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"ORM Libraries that implement Object-Relational Mapping or data mapping techniques. Relational Databases Django Models - The Django ORM. SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper. awesome-sqlalchemy dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL. orator - The Orator ORM provides a simple yet beautiful ActiveRecord implementation. orm - An async ORM. peewee - A small, expressive ORM. pony - ORM that provides a generator-oriented interface to SQL. pydal - A pure Python Database Abstraction Layer. NoSQL Databases hot-redis - Rich Python data types for Redis. mongoengine - A Python Object-Document-Mapper for working with MongoDB. PynamoDB - A Pythonic interface for Amazon DynamoDB. redisco - A Python Library for Simple Models and Containers Persisted in Redis. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:61:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Package Management Libraries for package and dependency management. pip - The package installer for Python. pip-tools - A set of tools to keep your pinned Python dependencies fresh. PyPI conda - Cross-platform, Python-agnostic binary package manager. poetry - Python dependency management and packaging made easy. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:62:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Package Repositories Local PyPI repository server and proxies. bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA). devpi - PyPI server and packaging/testing/release tool. localshop - Local PyPI server (custom packages and auto-mirroring of pypi). warehouse - Next generation Python Package Repository (PyPI). ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:63:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Penetration Testing Frameworks and tools for penetration testing. fsociety - A Penetration testing framework. setoolkit - A toolkit for social engineering. sqlmap - Automatic SQL injection and database takeover tool. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:64:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Permissions Libraries that allow or deny users access to data or functionality. django-guardian - Implementation of per object permissions for Django 1.2+ django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:65:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Processes Libraries for starting and communicating with OS processes. delegator.py - Subprocesses for Humans 2.0. sarge - Yet another wrapper for subprocess. sh - A full-fledged subprocess replacement for Python. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:66:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Recommender Systems Libraries for building recommender systems. annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage. fastFM - A library for Factorization Machines. implicit - A fast Python implementation of collaborative filtering for implicit datasets. libffm - A library for Field-aware Factorization Machine (FFM). lightfm - A Python implementation of a number of popular recommendation algorithms. spotlight - Deep recommender models using PyTorch. Surprise - A scikit for building and analyzing recommender systems. tensorrec - A Recommendation Engine Framework in TensorFlow. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:67:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Refactoring Refactoring tools and libraries for Python Bicycle Repair Man - Bicycle Repair Man, a refactoring tool for Python. Bowler - Safe code refactoring for modern Python. Rope - Rope is a python refactoring library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:68:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"RESTful API Libraries for building RESTful APIs. Django django-rest-framework - A powerful and flexible toolkit to build web APIs. django-tastypie - Creating delicious APIs for Django apps. Flask eve - REST API framework powered by Flask, MongoDB and good intentions. flask-api - Browsable Web APIs for Flask. flask-restful - Quickly building REST APIs for Flask. Pyramid cornice - A RESTful framework for Pyramid. Framework agnostic apistar - A smart Web API framework, designed for Python 3. falcon - A high-performance framework for building cloud APIs and web app backends. fastapi - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints. hug - A Python 3 framework for cleanly exposing APIs. sandman2 - Automated REST APIs for existing database-driven systems. sanic - A Python 3.6+ web server and web framework that’s written to go fast. vibora - Fast, efficient and asynchronous Web framework inspired by Flask. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:69:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Robotics Libraries for robotics. PythonRobotics - This is a compilation of various robotics algorithms with visualizations. rospy - This is a library for ROS (Robot Operating System). ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:70:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"RPC Servers RPC-compatible servers. RPyC (Remote Python Call) - A transparent and symmetric RPC library for Python zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:71:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Science Libraries for scientific computing. Also see Python-for-Scientists. astropy - A community Python library for Astronomy. bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis. bccb - Collection of useful code related to biological analysis. Biopython - Biopython is a set of freely available tools for biological computation. cclib - A library for parsing and interpreting the results of computational chemistry packages. Colour - Implementing a comprehensive number of colour theory transformations and algorithms. Karate Club - Unsupervised machine learning toolbox for graph structured data. NetworkX - A high-productivity software for complex networks. NIPY - A collection of neuroimaging toolkits. NumPy - A fundamental package for scientific computing with Python. ObsPy - A Python toolbox for seismology. Open Babel - A chemical toolbox designed to speak the many languages of chemical data. PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion. PyMC - Markov Chain Monte Carlo sampling toolkit. QuTiP - Quantum Toolbox in Python. RDKit - Cheminformatics and Machine Learning Software. SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering. SimPy - A process-based discrete-event simulation framework. statsmodels - Statistical modeling and econometrics in Python. SymPy - A Python library for symbolic mathematics. Zipline - A Pythonic algorithmic trading library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:72:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Search Libraries and software for indexing and performing search queries on data. django-haystack - Modular search for Django. elasticsearch-dsl-py - The official high-level Python client for Elasticsearch. elasticsearch-py - The official low-level Python client for Elasticsearch. pysolr - A lightweight Python wrapper for Apache Solr. whoosh - A fast, pure Python search engine library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:73:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Serialization Libraries for serializing complex data types marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes. pysimdjson - A Python bindings for simdjson. python-rapidjson - A Python wrapper around RapidJSON. ultrajson - A fast JSON decoder and encoder written in C with Python bindings. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:74:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Serverless Frameworks Frameworks for developing serverless Python code. python-lambda - A toolkit for developing and deploying Python code in AWS Lambda. Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:75:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Shell Shells based on Python. xonsh - A Python-powered, cross-platform, Unix-gazing shell language and command prompt. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:76:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Specific Formats Processing Libraries for parsing and manipulating specific text formats. General tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML. Office docxtpl - Editing a docx document by jinja2 template openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files. pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files. python-docx - Reads, queries and modifies Microsoft Word 2007/2008 docx files. python-pptx - Python library for creating and updating PowerPoint (.pptx) files. unoconv - Convert between any document format supported by LibreOffice/OpenOffice. XlsxWriter - A Python module for creating Excel .xlsx files. xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa. xlwt / xlrd - Writing and reading data and formatting information from Excel files. PDF PDFMiner - A tool for extracting information from PDF documents. PyPDF2 - A library capable of splitting, merging and transforming PDF pages. ReportLab - Allowing Rapid creation of rich PDF documents. Markdown Mistune - Fastest and full featured pure Python parsers of Markdown. Python-Markdown - A Python implementation of John Gruber’s Markdown. YAML PyYAML - YAML implementations for Python. CSV csvkit - Utilities for converting to and working with CSV. Archive unp - A command line tool that can unpack archives easily. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:77:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Static Site Generator Static site generator is a software that takes some text + templates as input and produces HTML files on the output. lektor - An easy to use static CMS and blog engine. mkdocs - Markdown friendly documentation generator. makesite - Simple, lightweight, and magic-free static site/blog generator (\u003c 130 lines). nikola - A static website and blog generator. pelican - Static site generator that supports Markdown and reST syntax. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:78:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Tagging Libraries for tagging items. django-taggit - Simple tagging for Django. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:79:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Task Queues Libraries for working with task queues. celery - An asynchronous task queue/job queue based on distributed message passing. dramatiq - A fast and reliable background task processing library for Python 3. huey - Little multi-threaded task queue. mrq - A distributed worker task queue in Python using Redis \u0026 gevent. rq - Simple job queues for Python. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:80:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Template Engine Libraries and tools for templating and lexing. Genshi - Python templating toolkit for generation of web-aware output. Jinja2 - A modern and designer friendly templating language. Mako - Hyperfast and lightweight templating for the Python platform. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:81:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Testing Libraries for testing codebases and generating test data. Testing Frameworks hypothesis - Hypothesis is an advanced Quickcheck style property based testing library. nose2 - The successor to nose, based on `unittest2. pytest - A mature full-featured Python testing tool. Robot Framework - A generic test automation framework. unittest - (Python standard library) Unit testing framework. Test Runners green - A clean, colorful test runner. mamba - The definitive testing tool for Python. Born under the banner of BDD. tox - Auto builds and tests distributions in multiple Python versions GUI / Web Testing locust - Scalable user load testing tool written in Python. PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings. Schemathesis - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications. Selenium - Python bindings for Selenium WebDriver. sixpack - A language-agnostic A/B Testing framework. splinter - Open source tool for testing web applications. Mock doublex - Powerful test doubles framework for Python. freezegun - Travel through time by mocking the datetime module. httmock - A mocking library for requests for Python 2.6+ and 3.2+. httpretty - HTTP request mock tool for Python. mock - (Python standard library) A mocking and patching library. mocket - A socket mock framework with gevent/asyncio/SSL support. responses - A utility library for mocking out the requests Python library. VCR.py - Record and replay HTTP interactions on your tests. Object Factories factory_boy - A test fixtures replacement for Python. mixer - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc. model_mommy - Creating random fixtures for testing in Django. Code Coverage coverage - Code coverage measurement. Fake Data fake2db - Fake database generator. faker - A Python package that generates fake data. mimesis - is a Python library that help you generate fake data. radar - Generate random datetime / time. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:82:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Text Processing Libraries for parsing and manipulating plain texts. General chardet - Python 2/3 compatible character encoding detector. difflib - (Python standard library) Helpers for computing deltas. ftfy - Makes Unicode text less broken and more consistent automagically. fuzzywuzzy - Fuzzy String Matching. Levenshtein - Fast computation of Levenshtein distance and string similarity. pangu.py - Paranoid text spacing. pyfiglet - An implementation of figlet written in Python. pypinyin - Convert Chinese hanzi (漢字) to pinyin (拼音). textdistance - Compute distance between sequences with 30+ algorithms. unidecode - ASCII transliterations of Unicode text. Slugify awesome-slugify - A Python slugify library that can preserve unicode. python-slugify - A Python slugify library that translates unicode to ASCII. unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency. Unique identifiers hashids - Implementation of hashids in Python. shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs. Parser ply - Implementation of lex and yacc parsing tools for Python. pygments - A generic syntax highlighter. pyparsing - A general purpose framework for generating parsers. python-nameparser - Parsing human names into their individual components. python-phonenumbers - Parsing, formatting, storing and validating international phone numbers. python-user-agents - Browser user agent parser. sqlparse - A non-validating SQL parser. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:83:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Third-party APIs Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries. apache-libcloud - One Python library for all clouds. boto3 - Python interface to Amazon Web Services. django-wordpress - WordPress models and views for Django. facebook-sdk - Facebook Platform Python SDK. google-api-python-client - Google APIs Client Library for Python. gspread - Google Spreadsheets Python API. twython - A Python wrapper for the Twitter API. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:84:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"URL Manipulation Libraries for parsing URLs. furl - A small Python library that makes parsing and manipulating URLs easy. purl - A simple, immutable URL class with a clean API for interrogation and manipulation. pyshorteners - A pure Python URL shortening lib. webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:85:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Video Libraries for manipulating video and GIFs. moviepy - A module for script-based movie editing with many formats, including animated GIFs. scikit-video - Video processing routines for SciPy. vidgear - Most Powerful multi-threaded Video Processing framework. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:86:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Web Asset Management Tools for managing, compressing and minifying website assets. django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file. django-pipeline - An asset packaging library for Django. django-storages - A collection of custom storage back ends for Django. fanstatic - Packages, optimizes, and serves static file dependencies as Python packages. fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP. flask-assets - Helps you integrate webassets into your Flask app. webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:87:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Web Content Extracting Libraries for extracting web contents. html2text - Convert HTML to Markdown-formatted text. lassie - Web Content Retrieval for Humans. micawber - A small library for extracting rich content from URLs. newspaper - News extraction, article extraction and content curation in Python. python-readability - Fast Python port of arc90’s readability tool. requests-html - Pythonic HTML Parsing for Humans. sumy - A module for automatic summarization of text documents and HTML pages. textract - Extract text from any document, Word, PowerPoint, PDFs, etc. toapi - Every web site provides APIs. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:88:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Web Crawling Libraries to automate web scraping. cola - A distributed crawling framework. feedparser - Universal feed parser. grab - Site scraping framework. MechanicalSoup - A Python library for automating interaction with websites. portia - Visual scraping for Scrapy. pyspider - A powerful spider system. robobrowser - A simple, Pythonic library for browsing the web without a standalone web browser. scrapy - A fast high-level screen scraping and web crawling framework. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:89:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Web Frameworks Traditional full stack web frameworks. Also see RESTful API. Synchronous Django - The most popular web framework in Python. awesome-django awesome-django Flask - A microframework for Python. awesome-flask Pyramid - A small, fast, down-to-earth, open source Python web framework. awesome-pyramid Masonite - The modern and developer centric Python web framework. Asynchronous Tornado - A web framework and asynchronous networking library. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:90:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"WebSocket Libraries for working with WebSocket. autobahn-python - WebSocket \u0026 WAMP for Python on Twisted and asyncio. channels - Developer-friendly asynchrony for Django. websockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:91:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"WSGI Servers WSGI-compatible web servers. bjoern - Asynchronous, very fast and written in C. gunicorn - Pre-forked, ported from Ruby’s Unicorn project. uWSGI - A project aims at developing a full stack for building hosting services, written in C. waitress - Multi-threaded, powers Pyramid. werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects. Resources Where to discover learning resources or new Python libraries. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:92:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Books Fluent Python Think Python ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:93:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Websites Tutorials Full Stack Python Python Cheatsheet Real Python The Hitchhiker’s Guide to Python Ultimate Python study guide Libraries Awesome Python @LibHunt Others Python ZEEF Pythonic News What the f*ck Python! ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:94:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Newsletters Awesome Python Newsletter Pycoder’s Weekly Python Tricks Python Weekly ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:95:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["python"],"content":"Podcasts Django Chat Podcast.__init__ Python Bytes Running in Production Talk Python To Me Test and Code The Real Python Podcast Contributing Your contributions are always welcome! Please take a look at the contribution guidelines first. I will keep some pull requests open if I’m not sure whether those libraries are awesome, you could vote for them by adding 👍 to them. Pull requests will be merged when their votes reach 20. If you have any question about this opinionated list, do not hesitate to contact me @VintaChen on Twitter or open an issue on GitHub. ","date":"2022-10-16","objectID":"/list-of-python-frameworks-libraries-software-and-resources/:96:0","tags":["coding","computer-science","python","python-frameworks","python-libraries","python-softwares","python-resources"],"title":"List of Python Frameworks Libraries Software and Resources","uri":"/list-of-python-frameworks-libraries-software-and-resources/"},{"categories":["computer-science","project"],"content":"List of Project Based Tutorials","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Project Based Learning A list of programming tutorials in which aspiring software developers learn how to build an application from scratch. These tutorials are divided into different primary programming languages. Tutorials may involve multiple technologies and languages. ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:0:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Table of Contents: C# C/C++ Clojure Dart Elixir Erlang F# Go Haskell HTML/CSS Java JavaScript Kotlin Lua OCaml PHP Python R Ruby Rust Scala Swift Additional resources ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:1:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"C/C++: Build an Interpreter (Chapter 14 on is written in C) Memory Allocators 101 - Write a simple memory allocator Write a Shell in C Write a FUSE Filesystem Build Your Own Text Editor Build Your Own Lisp How to Program an NES Game in C Write an OS from scratch How to create an OS from scratch Building a CHIP-8 Emulator Beginning Game Programming with C++ and SDL Implementing a Key-Value Store Tiny 3D graphics projects Tiny Renderer or how OpenGL works: software rendering in 500 lines of code Understandable RayTracing in 256 lines of bare C++ KABOOM! in 180 lines of bare C++ 486 lines of C++: old-school FPS in a weekend Writing a minimal x86-64 JIT compiler in C++ Part 1 Part 2 Build a Live Code-reloader Library for C++ Write a hash table in C Let’s Build a Simple Database Let’s Write a Kernel Write a Bootloader in C Linux Container in 500 Lines of Code Write Your Own Virtual Machine Learning KVM - Implement Your Own Linux Kernel Write a C compiler Part 1: Integers, Lexing and Code Generation Part 2: Unary Operators Part 3: Binary Operators Part 4: Even More Binary Operators Part 5: Local Variables Part 6: Conditionals Part 7: Compound Statements Part 8: Loops Part 9: Functions Part 10: Global Variables Implementing a Language with LLVM Meta Crush Saga: a C++17 compile-time game High-Performance Matrix Multiplication Space Invaders from Scratch Part 1 Part 2 Part 3 Part 4 Part 5 Tetris Tutorial in C++ Platform Independent Writing a Linux Debugger Part 1: Setup Part 2: Breakpoints Part 3: Registers and memory Part 4: Elves and dwarves Part 5: Source and signals Part 6: Source-level stepping Part 7: Source-level breakpoints Part 8: Stack unwinding Part 9: Handling variables Part 10: Advanced topics Let’s write a compiler Part 1: Introduction, selecting a language, and doing some planning Part 2: A lexer Part 3: A parser Part 4: Testing Part 5: A code generator Part 6: Input and output Part 7: Arrays Part 8: Strings, forward references, and conclusion ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:2:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Network programming Let’s Code a TCP/IP Stack Part 1: Ethernet \u0026 ARP Part 2: IPv4 \u0026 ICMPv4 Part 3: TCP Basics \u0026 Handshake Part 4: TCP Data Flow \u0026 Socket API Part 5: TCP Retransmission Programming concurrent servers Part 1 - Introduction Part 2 - Threads Part 3 - Event-driven Part 4 - libuv Part 5 - Redis case study Part 6 - Callbacks, Promises and async/await MQTT Broker from scratch Part 1 - The protocol Part 2 - Networking Part 3 - Server Part 4 - Data structures Part 5 - Topic abstraction Part 6 - Handlers Bonus - Multithreading ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:2:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"OpenGL: Creating 2D Breakout game clone in C++ with OpenGL Breakout Setting up Rendering Sprites Levels Collisions Ball Collision detection Collision resolution Particles Postprocessing Powerups Audio Render text Final thoughts Handmade Hero How to Make Minecraft in C++/OpenGL (video) ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:2:2","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"C#: Learn C# By Building a Simple RPG Game Create a Rogue-like game in C# Create a Blank App with C# and Xamarin (work in progress) Build iOS Photo Library App with Xamarin and Visual Studio Building the CoreWiki This is a Wiki-style content management system that has been completely written in C# with ASP.NET Core and Razor Pages. You can find the source code here. ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:3:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Clojure: Build a Twitter Bot with Clojure Building a Spell-Checker Building a JIRA integration with Clojure \u0026 Atlassian Connect Prototyping with Clojure Tetris in ClojureScript ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:4:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Dart: ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:5:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Flutter: Amazon Clone with Admin Panel Food Delivery App Google Docs Clone Instagram Clone Multiplayer TicTacToe Game TikTok Clone Ticket Booking App Travel App Twitch Clone WhatsApp Clone Wordle Clone Zoom Clone ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:5:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Elixir Building a Simple Chat App With Elixir and Phoenix How to write a super fast link shortener with Elixir, Phoenix, and Mnesia ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:6:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Erlang ChatBus : build your first multi-user chat room app with Erlang/OTP Making a Chat App with Erlang, Rebar, Cowboy and Bullet ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:7:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"F#: Write your own Excel in 100 lines of F# ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:8:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Java: Build an Interpreter (Chapter 4-13 is written in Java) Build a Simple HTTP Server with Java Build an Android Flashlight App (video) Build a Spring Boot App with User Authentication ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:9:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"JavaScript: Build 30 things in 30 days with 30 tutorials Build an App in Pure JS Build a Jupyter Notebook Extension Build a TicTacToe Game with JavaScript Build a Simple Weather App With Vanilla JavaScript Build a Todo List App in JavaScript ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:10:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"HTML and CSS: Build A Loading Screen Build an HTML Calculator with JS Build Snake using only JavaScript, HTML \u0026 CSS ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Mobile Application: Build a React Native Todo Application Build a React Native Application with Redux Thunk ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Web Applications: React: Create Serverless React.js Apps Create a Trello Clone Create a Character Voting App with React, Node, MongoDB and SocketIO React Tutorial: Cloning Yelp Build a Full Stack Movie Voting App with Test-First Development using Mocha, React, Redux and Immutable Build a Twitter Stream with React and Node Build A Simple Medium Clone using React.js and Node.js Integrate MailChimp in JS Build A Chrome Extension with React + Parcel Build A ToDo App With React Native Make a Chat Application Create a News App with React Native Learn Webpack For React Testing React App With Puppeteer and Jest Build Your Own React Boilerplate Code The Game Of Life With React A Basic React+Redux Introductory Tutorial Build an Appointment Scheduler Build A Chat App with Sentiment Analysis Build A Full Stack Web Application Setup Create Todoist clone with React and Firebase Build A Random Quote Machine Part 1 Part 2 Part 3 Part 4 Part 5 Part 6 Part 7 React Phone E-Commerce Project(video) Angular: Build an Instagram Clone with Angular 1.x Build an offline-capable Hacker News client with Angular 2+ Part 1 Part 2 Build a Google+ clone with Django and AngularJS (Angular 1.x) Build A Beautiful Real World App with Angular 8 : Part I Part II Build Responsive layout with BootStrap 4 and Angular 6 ToDo App with Angular 5 Introduction to Angular Part 1 Node: Build a real-time Markdown Editor with NodeJS Test-Driven Development with Node, Postgres and Knex Write a Twitter Bot in Node.js Part 1 Part 2 Build A Simple Search Bot in 30 minutes Build A Job Scraping Web App Building a GitHub App How to build your own Uber-for-X App using JavaScript, Node.JS, MongoDB and Web Sockets Part 1 Part 2 Vue Vue 2 + Firebase: How to build a Vue app with Firebase authentication system in 15 minutes Vue.js Application Tutorial – Creating a Simple Budgeting App with Vue Build a Blog with Vue, GraphQL and Apollo Build a full stack web application using MEVN (MongoDB, Express, Vue, Node) stack Part 1 Part 2 Vue.js To-Do List Tutorial (video) Vue 2 + Pub/Sub: Build a peer to peer multi-user platform for games Others (Hapi, Express…): Build a Progressive Web Application (PWA) Part 1 Part 2 Part 3 Build A Native Desktop App with JS Build a Powerful API with NodeJs,GraphQL and Hapi Part I D3.js Learn D3 using examples Learn To Make A Line Chart ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:2","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Game Development: Make 2D Breakout Game using Phaser Make Flappy Bird in HTML5 and JavaScript with Phaser Part 1 Part 2 ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:3","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Desktop Application: Build A Desktop Chat App with React and Electron ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:4","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Miscellaneous: How to Build a Web Framework in Less Than 20 Lines of Code Build Yourself a Redux How to write your own Virtual DOM Build A Realtime Serverless GraphQL API with WebSockets on AWS ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:11:5","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Kotlin: Keddit - Learn Kotlin While Developing an Android Application ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:12:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Lua: ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:13:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"LÖVE: BYTEPATH: Creation of a Complete Game with Lua and LÖVE Part 0: Introduction Part 1: Game Loop Part 2: Libraries Part 3: Rooms and Areas Part 4: Exercises Part 5: Game Basics Part 6: Player Basics Part 7: Player Stats and Attacks Part 8: Enemies Part 9: Director and Gameplay Loop Part 10: Coding Practices Part 11: Passives Part 12: More Passives Part 13: Skill Tree Part 14: Console Part 15: Final ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:13:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Python: ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Web Scraping: Mining Twitter Data with Python Scrape a Website with Scrapy and MongoDB How To Scrape With Python and Selenium WebDriver Which Movie Should I Watch using BeautifulSoup ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Web Applications: Build a Microblog with Flask Create a Blog Web App In Django Choose Your Own Adventure Presentations Build a Todo List with Flask and RethinkDB Build a Todo List with Django and Test-Driven Development Build a RESTful Microservice in Python Microservices with Docker, Flask, and React Build A Simple Web App With Flask Create A Django API in under 20 minutes Build a Community-driven delivery application with Django, Postgres and JavaScript Part 1 Part 2 Realtime Chat application with Vue, django-notifs, RabbitMQ and uWSGI Part 1 Part 2 Part 3 Part 4 Part 5 Part 6 ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:2","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Bots: Build a Reddit Bot How to Make a Reddit Bot - YouTube (video) Build a Facebook Messenger Bot Making a Reddit + Facebook Messenger Bot How To Create a Telegram Bot Using Python Part 1 Part 2 Create a Twitter Bot In Python ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:3","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Data Science: Learn Python For Data Science by Doing Several Projects (video): Part 1: Introduction Part 2: Twitter Sentiment Analysis Part 3: Recommendation Systems Part 4: Predicting Stock Prices Part 5: Deep Dream in TensorFlow Part 6: Genetic Algorithms ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:4","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Machine Learning: Write Linear Regression From Scratch in Python (video) Step-By-Step Machine Learning In Python Predict Quality Of Wine Solving A Fruits Classification Problem Learn Unsupervised Learning with Python Build Your Own Neural Net from Scratch in Python Linear Regression in Python without sklearn Multivariate Linear Regression without sklearn Music Recommender using KNN Find Similar Quora Questions- Using BOW, TFIDF and Xgboost Using Word2Vec and Xgboost Detecting Fake News with Python and Machine Learning ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:5","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"OpenCV: Build A Document Scanner Build A Face Detector using OpenCV and Deep Learning Build fastest custom object Detection system yusing YOLOv3(video playlist) Build a Face Recognition System using OpenCV, Python and Deep Learning Detect The Salient Features in an Image Build A Barcode Scanner Learn Face Clustering with Python Object Tracking with Camshift Semantic Segmentation with OpenCV and Deep Learning Text Detection in Images and Videos People Counter using OpenCV Tracking Multiple Objects with OpenCV Neural Style Transfer with OpenCV OpenCV OCR and Text Recognition Text Skew Correction Tutorial Facial Landmark Detection Tutorial Object Detection using Mask-R-CNN Automatic Target Detection Tutorial EigenFaces using OpenCV Faster(5-point) Facial Landmark Detection Tutorial Hand Keypoint Detection Dlib Correlation Object Tracking - Single Object Tracker Mutiple Object Tracker Image Stitching with OpenCV and Python Instance Segmentation with OpenCV Face mask detector ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:6","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Deep Learning: Using Convolutional Neural Nets to Detect Facial Keypoints Generate an Average Face using Python and OpenCV Break A Captcha System using CNNs Use pre-trained Inception model to provide image predictions Create your first CNN Build A Facial Recognition Pipeline Build An Image Caption Generator Make your Own Face Recognition System Train a Language Detection AI in 20 minutes Object Detection With Neural Networks Learn Twitter Sentiment Analysis - Part I - Data Cleaning Part II - EDA, Data Visualisation Part III - Zipf’s Law, Data Visualisation Part IV - Feature Extraction(count vectoriser) Part V - Feature Extraction(Tfidf vectoriser) Part VI - Doc2Vec Part VII - Phrase Modeling + Doc2Vec Part VIII - Dimensionality Reduction Part IX - Neural Nets with Tfdif vectors Part X - Neural Nets with word2vec/doc2vec Part XI - CNN with Word2Vec Use Transfer Learning for custom image classification Learn to Code a simple Neural Network in 11 lines of Python Build a Neural Network using Gradient Descent Approach Train a Keras Model To Generate Colors Get Started with Keras on a Custom Dataset Use EigenFaces and FisherFaces on Faces94 dataset Kaggle MNIST Digit Recognizer Tutorial Fashion MNIST tutorial with tf.keras CNN using Keras to automatically classify root health Keras vs Tensorflow Deep Learning and Medical Image Analysis for Malaria Detection Transfer Learning for Image Classification using Keras Code a Smile Classifier using CNNS in Python Natural Language Processing using scikit-learn Code a Taylor Swift Lyrics Generator Mask detection using PyTorch Lightning ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:7","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Miscellaneous: Build a Simple Interpreter Build a Simple Blockchain in Python Write a NoSQL Database in Python Building a Gas Pump Scanner with OpenCV/Python/iOS Build a Distributed Streaming System with Python and Kafka Writing a basic x86-64 JIT compiler from scratch in stock Python Making a low level (Linux) debugger Part 1 Part 2: C Implementing a Search Engine Part 1 Part 2 Part 3 Build the Game of Life Create terminal ASCII art Write a Tic-Tac-Toe AI Create photomosaic art Build the game “Snake” in the terminal Write yourself a Git A Python implementation of a Python bytecode runner Create a Voice assistant using Python ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:14:8","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Go: Create a Real Time Chat App with Golang, Angular 2, and WebSocket Building Go Web Applications and Microservices Using Gin How to Use Godog for Behavior-driven Development in Go Building Blockchain in Go Part 1: Basic Prototype Part 2: Proof of Work Part 3: Persistence and CLI Part 4: Transactions 1 Part 5: Address Part 6: Transactions 2 Part 7: Network Building a container from scratch in Go - Liz Rice (Microscaling Systems)(video) Build Web Application with GoLang Building a Chat Application in Go with ReactJS Part 1: Initial Setup Part 2: Simple Communication Part 3: Designing our Frontend Part 4: Handling Multiple Clients Part 5: Improving the Frontend Part 6: Dockerizing your Backend Go WebAssembly Tutorial - Building a Calculator Tutorial REST Servers in Go Part 1 - standard library Part 2 - using a router package Part 3 - using a web framework Part 4 - using OpenAPI and Swagger Part 5 - middleware Part 6 - authentication Part 7 - GraphQL Let’s build a URL shortener in Go - with Gin \u0026 Redis Part 1 - Project setup Part 2 - Storage Layer Part 3 - Short Link Generator Part 4 - Forwarding Building a TCP Chat in Go(video) Building a BitTorrent client from the ground up in Go REST API masterclass with Go, PostgreSQL and Docker(video playlist)in progress ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:15:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"PHP: How To Build A Blog With Laravel (video) Make Your Own Blog (in Pure PHP) Build A Real Estate Website Example with SilverStripe Building Realtime Chat App with Laravel 5.4 and VueJS (video) Build A Social Network: Laravel 5 - Youtube (video) Build a full-featured multi-tenant app with Laravel Part 0: Introduction Part 1: Setup Part 2: Roles and Permissinos Part 3: Invitation Part 4: Authentication Part 5: Testing Part 6: User Profile Part 7: Deployment Build a Laravel CRUD Application From Scratch ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:16:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"OCaml: Implement a Language with LLVM in OCaml ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:17:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Ruby: Build a Network Stack with Ruby Build your own Redis Part 0: Introduction Part 1: Barebones TCP Server Part 2: PING \u003c-\u003e PONG Part 3: Concurrent Clients Part 4: ECHO Rebuilding Git in Ruby ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:18:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Ruby on Rails: The Ruby on Rails Tutorial Build Instagram From Scratch with Ruby on Rails Build a Social Network using Rails How To Build a Ruby on Rails Application ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:18:1","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Haskell: Write You a Haskell - Build a modern functional compiler Write Yourself a Scheme in 48 hours Write You A Scheme, Version 2 Roll Your Own IRC Bot Making Movie Monad Making a Website with Haskell (outdated) ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:19:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"R: Build Web Apps with Shiny Build A Cryptocurrency Bot Learn Associate Rule Mining in R ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:20:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Rust: A Simple Web App in Rust Part 1 Part 2a Part 2b Write an OS in pure Rust Build a browser engine in Rust Write a Microservice in Rust Learning Rust with Too Many Linked Lists Rust in Detail: Writing Scalable Chat Service from Scratch Part 1: Implementing WebSocket. Introduction. Part 2: Sending and Receiving Messages Writing a Rust Roguelike for the Desktop and the Web Single Page Applications using Rust Writing NES Emulator in Rust Create a simulation of evolution using neural network and genetic algorithm, and compile the application to WebAssembly Part 1 Part 2 Part 3 Part 4 ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:21:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Scala: Simple actor-based blockchain No Magic: Regular Expressions ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:22:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Swift: Hacking with Swift - Learn Swift by doing 39 projects Retro first-person shooter from scratch ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:23:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science","project"],"content":"Additional Resources React Redux Links Udemy.com Full Stack Python Node School ScotchIO Exercism Egghead.io Michael Herman’s Blog Thinkster.io Enlight Hack Club Workshops CodeCrafters ","date":"2022-10-16","objectID":"/curated-list-of-project-based-tutorials/:24:0","tags":["coding","computer-science","projects","tutorials","list-of-project-based-tutorials"],"title":"Curated List of Project Based Tutorials","uri":"/curated-list-of-project-based-tutorials/"},{"categories":["computer-science"],"content":"Study Plan to Become a Software Engineer","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Table of Contents ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:1:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"The Study Plan What is it? Why use it? How to use it Don’t feel you aren’t smart enough A Note About Video Resources Choose a Programming Language Books for Data Structures and Algorithms Interview Prep Books Don’t Make My Mistakes What you Won’t See Covered The Daily Plan Coding Question Practice Coding Problems ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:1:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Topics of Study Algorithmic complexity / Big-O / Asymptotic analysis Data Structures Arrays Linked Lists Stack Queue Hash table More Knowledge Binary search Bitwise operations Trees Trees - Intro Binary search trees: BSTs Heap / Priority Queue / Binary Heap balanced search trees (general concept, not details) traversals: preorder, inorder, postorder, BFS, DFS Sorting selection insertion heapsort quicksort merge sort Graphs directed undirected adjacency matrix adjacency list traversals: BFS, DFS Even More Knowledge Recursion Dynamic Programming Design Patterns Combinatorics (n choose k) \u0026 Probability NP, NP-Complete and Approximation Algorithms How computers process a program Caches Processes and Threads Testing String searching \u0026 manipulations Tries Floating Point Numbers Unicode Endianness Networking Final Review ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:1:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Getting the Job Update Your Resume Find a Job Interview Process \u0026 General Interview Prep Be thinking of for when the interview comes Have questions for the interviewer Once You’ve Got The Job —————- Everything below this point is optional —————- ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:1:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Optional Extra Topics \u0026 Resources Additional Books System Design, Scalability, Data Handling (if you have 4+ years experience) Additional Learning Compilers Emacs and vi(m) Unix command line tools Information theory Parity \u0026 Hamming Code Entropy Cryptography Compression Computer Security Garbage collection Parallel Programming Messaging, Serialization, and Queueing Systems A* Fast Fourier Transform Bloom Filter HyperLogLog Locality-Sensitive Hashing van Emde Boas Trees Augmented Data Structures Balanced search trees AVL trees Splay trees Red/black trees 2-3 search trees 2-3-4 Trees (aka 2-4 trees) N-ary (K-ary, M-ary) trees B-Trees k-D Trees Skip lists Network Flows Disjoint Sets \u0026 Union Find Math for Fast Processing Treap Linear Programming Geometry, Convex hull Discrete math Additional Detail on Some Subjects Video Series Computer Science Courses Papers ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:1:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Why use it? If you want to work as a software engineer for a large company, these are the things you have to know. If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life. When I started this project, I didn’t know a stack from a heap, didn’t know Big-O anything, or anything about trees, or how to traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible. Every data structure I had ever used was built into the language, and I didn’t know how they worked under the hood at all. I never had to manage memory unless a process I was running would give an “out of memory” error, and then I’d have to find a workaround. I used a few multidimensional arrays in my life and thousands of associative arrays, but I never created data structures from scratch. It’s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:2:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"How to use it Everything below is an outline, and you should tackle the items in order from top to bottom. I’m using GitHub’s special markdown flavor, including tasks lists to track progress. More about GitHub-flavored markdown ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:3:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"If you don’t want to use git On this page, click the Code button near the top, then click “Download ZIP”. Unzip the file and you can work with the text files. If you’re open in a code editor that understands markdown, you’ll see everything formatted nicely. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:3:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"If you’re comfortable with git Create a new branch so you can check items like this, just put an x in the brackets: [x] Fork the GitHub repo: https://github.com/jwasham/coding-interview-university by clicking on the Fork button. Clone to your local repo: git clone git@github.com:\u003cyour_github_username\u003e/coding-interview-university.git cd coding-interview-university git checkout -b progress git remote add jwasham https://github.com/jwasham/coding-interview-university git fetch --all Mark all boxes with X after you completed your changes: git add . git commit -m \"Marked x\" git rebase jwasham/main git push --set-upstream origin progress git push --force ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:3:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Don’t feel you aren’t smart enough Successful software engineers are smart, but many have an insecurity that they aren’t smart enough. Following videos may help you overcome this insecurity: The myth of the Genius Programmer It’s Dangerous to Go Alone: Battling the Invisible Monsters in Tech ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:4:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"A Note About Video Resources Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs. Sometimes the classes are not in session so you have to wait a couple of months, so you have no access. It would be great to replace the online course resources with free and always-available public sources, such as YouTube videos (preferably university lectures), so that you people can study these anytime, not just when a specific online course is in session. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:5:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Choose a Programming Language You’ll need to choose a programming language for the coding interviews you do, but you’ll also need to find a language that you can use to study computer science concepts. Preferably the language would be the same, so that you only need to be proficient in one. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:6:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"For this Study Plan When I did the study plan, I used 2 languages for most of it: C and Python C: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that’s terrific, but when you’re learning how these low-level data structures are built, it’s great to feel close to the metal. C is everywhere. You’ll see examples in books, lectures, videos, everywhere while you’re studying. The C Programming Language, Vol 2 This is a short book, but it will give you a great handle on the C language and if you practice it a little you’ll quickly get proficient. Understanding C helps you understand how programs and memory work. You don’t need to go super deep in the book (or even finish it). Just get to where you’re comfortable reading and writing in C. Answers to questions in the book Python: Modern and very expressive, I learned it because it’s just super useful and also allows me to write less code in an interview. This is my preference. You do what you like, of course. You may not need it, but here are some sites for learning a new language: Exercism Codewars HackerEarth Scaler Topics (Java, C++) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:6:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"For your Coding Interview You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices: C++ Java Python You could also use these, but read around first. There may be caveats: JavaScript Ruby Here is an article I wrote about choosing a language for the interview: Pick One Language for the Coding Interview. This is the original article my post was based on: Choosing a Programming Language for Interviews You need to be very comfortable in the language and be knowledgeable. Read more about choices: Choose the Right Language for Your Coding Interview See language-specific resources here ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:6:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Books for Data Structures and Algorithms This book will form your foundation for computer science. Just choose one, in a language that you will be comfortable with. You’ll be doing a lot of reading and coding. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:7:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"C Algorithms in C, Parts 1-5 (Bundle), 3rd Edition Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:7:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Python Data Structures and Algorithms in Python by Goodrich, Tamassia, Goldwasser I loved this book. It covered everything and more. Pythonic code my glowing book report: https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/ ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:7:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Java Your choice: Goodrich, Tamassia, Goldwasser Data Structures and Algorithms in Java Sedgewick and Wayne: Algorithms Free Coursera course that covers the book (taught by the authors!): Algorithms I Algorithms II ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:7:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"C++ Your choice: Goodrich, Tamassia, and Mount Data Structures and Algorithms in C++, 2nd Edition Sedgewick and Wayne Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching Algorithms in C++ Part 5: Graph Algorithms ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:7:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Interview Prep Books You don’t need to buy a bunch of these. Honestly “Cracking the Coding Interview” is probably enough, but I bought more to give myself more practice. But I always do too much. I bought both of these. They gave me plenty of practice. Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition Answers in C++ and Java This is a good warm-up for Cracking the Coding Interview Not too difficult. Most problems may be easier than what you’ll see in an interview (from what I’ve read) Cracking the Coding Interview, 6th Edition answers in Java ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:8:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"If you have tons of extra time: Choose one: Elements of Programming Interviews (C++ version) Elements of Programming Interviews in Python Elements of Programming Interviews (Java version) - Companion Project - Method Stub and Test Cases for Every Problem in the Book ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:8:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Don’t Make My Mistakes This list grew over many months, and yes, it got out of hand. Here are some mistakes I made so you’ll have a better experience. And you’ll save months of time. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:9:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"1. You Won’t Remember it All I watched hours of videos and took copious notes, and months later there was much I didn’t remember. I spent 3 days going through my notes and making flashcards, so I could review. I didn’t need all of that knowledge. Please, read so you won’t make my mistakes: Retaining Computer Science Knowledge. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:9:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"2. Use Flashcards To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code. Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am. Make your own for free: Flashcards site repo I DON’T RECOMMEND using my flashcards. There are too many and most of them are trivia that you don’t need. But if you don’t want to listen to me, here you go: My flash cards database (1200 cards): My flash cards database (extreme - 1800 cards): Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics. It’s way too much for what’s required. Note on flashcards: The first time you recognize you know the answer, don’t mark it as known. You have to see the same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in your brain. An alternative to using my flashcard site is Anki, which has been recommended to me numerous times. It uses a repetition system to help you remember. It’s user-friendly, available on all platforms and has a cloud sync system. It costs $25 on iOS but is free on other platforms. My flashcard database in Anki format: https://ankiweb.net/shared/info/25173560 (thanks @xiewenya). Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the “styling” radio button, add the member “white-space: pre;” to the card class. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:9:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"3. Do Coding Interview Questions While You’re Learning THIS IS VERY IMPORTANT. Start doing coding interview questions while you’re learning data structures and algorithms. You need to apply what you’re learning to solving problems, or you’ll forget. I made this mistake. Once you’ve learned a topic, and feel somewhat comfortable with it, for example, linked lists: Open one of the coding interview books (or coding problem websites, listed below) Do 2 or 3 questions regarding linked lists. Move on to the next learning topic. Later, go back and do another 2 or 3 linked list problems. Do this with each new topic you learn. Keep doing problems while you’re learning all this stuff, not after. You’re not being hired for knowledge, but how you apply the knowledge. There are many resources for this, listed below. Keep going. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:9:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"4. Focus There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music without lyrics and you’ll be able to focus pretty well. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:9:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"What you won’t see covered These are prevalent technologies but not part of this study plan: SQL Javascript HTML, CSS, and other front-end technologies ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:10:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"The Daily Plan This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule. Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation of that data structure or algorithm in the language you chose for this course. You can see my code here: C C++ Python You don’t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:11:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Coding Question Practice Why is this here? I'm not ready to interview.\rThen go back and read this. Why you need to practice doing programming problems: Problem recognition, and where the right data structures and algorithms fit in Gathering requirements for the problem Talking your way through the problem like you will in the interview Coding on a whiteboard or paper, not a computer Coming up with time and space complexity for your solutions (see Big-O below) Testing your solutions There is a great intro for methodical, communicative problem solving in an interview. You’ll get this from the programming interview books, too, but I found this outstanding: Algorithm design canvas Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer. If you don’t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice. This is my “sofa whiteboard”. I added the pen in the photo just for scale. If you use a pen, you’ll wish you could erase. Gets messy quick. I use a pencil and eraser. Coding question practice is not about memorizing answers to programming problems. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:12:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Coding Problems Don’t forget your key coding interview books here. Solving Problems: How to Find a Solution How to Dissect a Topcoder Problem Statement Coding Interview Question Videos: IDeserve (88 videos) Tushar Roy (5 playlists) Super for walkthroughs of problem solutions Nick White - LeetCode Solutions (187 Videos) Good explanations of solution and the code You can watch several in a short time FisherCoder - LeetCode Solutions Challenge/Practice sites: LeetCode My favorite coding problem site. It’s worth the subscription money for the 1-2 months you’ll likely be preparing. See Nick White and FisherCoder Videos above for code walk-throughs. HackerRank TopCoder Codeforces Codility Geeks for Geeks InterviewBit AlgoExpert Created by Google engineers, this is also an excellent resource to hone your skills. Project Euler very math focused, and not really suited for coding interviews ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:13:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Let’s Get Started Alright, enough talk, let’s learn! But don’t forget to do coding problems from above while you learn! ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:14:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Algorithmic complexity / Big-O / Asymptotic analysis Nothing to implement here, you’re just watching videos and taking notes! Yay! There are a lot of videos here. Just watch enough until you understand it. You can always come back and review. Don’t worry if you don’t understand all the math behind it. You just need to understand how to express the complexity of an algorithm in terms of Big-O. Harvard CS50 - Asymptotic Notation (video) Big O Notations (general quick tutorial) (video) Big O Notation (and Omega and Theta) - best mathematical explanation (video) Skiena (video) UC Berkeley Big O (video) Amortized Analysis (video) TopCoder (includes recurrence relations and master theorem): Computational Complexity: Section 1 Computational Complexity: Section 2 Cheat sheet [Review] Big-O notation in 5 minutes (video) Well, that’s about enough of that. When you go through “Cracking the Coding Interview”, there is a chapter on this, and at the end there is a quiz to see if you can identify the runtime complexity of different algorithms. It’s a super review and test. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:15:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Data Structures ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Arrays About Arrays: Arrays (video) UC Berkeley CS61B - Linear and Multi-Dim Arrays (video) (Start watching from 15m 32s) Dynamic Arrays (video) Jagged Arrays (video) Implement a vector (mutable array with automatic resizing): Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing. New raw data array with allocated memory can allocate int array under the hood, just not use its features start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128 size() - number of items capacity() - number of items it can hold is_empty() at(index) - returns item at given index, blows up if index out of bounds push(item) insert(index, item) - inserts item at index, shifts that index’s value and trailing elements to the right prepend(item) - can use insert above at index 0 pop() - remove from end, return value delete(index) - delete item at index, shifting all trailing elements left remove(item) - looks for value and removes index holding it (even if in multiple places) find(item) - looks for value and returns first index with that value, -1 if not found resize(new_capacity) // private function when you reach capacity, resize to double the size when popping an item, if size is 1/4 of capacity, resize to half Time O(1) to add/remove at end (amortized for allocations for more space), index, or update O(n) to insert/remove elsewhere Space contiguous in memory, so proximity helps performance space needed = (array capacity, which is \u003e= n) * size of item, but even if 2n, still O(n) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Linked Lists Description: Singly Linked Lists (video) CS 61B - Linked Lists 1 (video) CS 61B - Linked Lists 2 (video) [Review] Linked lists in 4 minutes (video) C Code (video) - not the whole video, just portions about Node struct and memory allocation Linked List vs Arrays: Core Linked Lists Vs Arrays (video) In The Real World Linked Lists Vs Arrays (video) Why you should avoid linked lists (video) Gotcha: you need pointer to pointer knowledge: (for when you pass a pointer to a function that may change the address where that pointer points) This page is just to get a grasp on ptr to ptr. I don’t recommend this list traversal style. Readability and maintainability suffer due to cleverness. Pointers to Pointers Implement (I did with tail pointer \u0026 without): size() - returns number of data elements in list empty() - bool returns true if empty value_at(index) - returns the value of the nth item (starting at 0 for first) push_front(value) - adds an item to the front of the list pop_front() - remove front item and return its value push_back(value) - adds an item at the end pop_back() - removes end item and returns its value front() - get value of front item back() - get value of end item insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index erase(index) - removes node at given index value_n_from_end(n) - returns the value of the node at nth position from the end of the list reverse() - reverses the list remove_value(value) - removes the first item in the list with this value Doubly-linked List Description (video) No need to implement ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Stack Stacks (video) [Review] Stacks in 3 minutes (video) Will not implement. Implementing with array is trivial ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Queue Queue (video) Circular buffer/FIFO [Review] Queues in 3 minutes (video) Implement using linked-list, with tail pointer: enqueue(value) - adds value at position at tail dequeue() - returns value and removes least recently added element (front) empty() Implement using fixed-sized array: enqueue(value) - adds item at end of available storage dequeue() - returns value and removes least recently added element empty() full() Cost: a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n) because you’d need the next to last element, causing a full traversal each dequeue enqueue: O(1) (amortized, linked list and array [probing]) dequeue: O(1) (linked list and array) empty: O(1) (linked list and array) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Hash table Videos: Hashing with Chaining (video) Table Doubling, Karp-Rabin (video) Open Addressing, Cryptographic Hashing (video) PyCon 2010: The Mighty Dictionary (video) PyCon 2017: The Dictionary Even Mightier (video) (Advanced) Randomization: Universal \u0026 Perfect Hashing (video) (Advanced) Perfect hashing (video) [Review] Hash tables in 4 minutes (video) Online Courses: Core Hash Tables (video) Data Structures (video) Phone Book Problem (video) distributed hash tables: Instant Uploads And Storage Optimization In Dropbox (video) Distributed Hash Tables (video) Implement with array using linear probing hash(k, m) - m is size of hash table add(key, value) - if key already exists, update value exists(key) get(key) remove(key) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:16:5","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"More Knowledge ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:17:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Binary search Binary Search (video) Binary Search (video) detail blueprint [Review] Binary search in 4 minutes (video) Implement: binary search (on sorted array of integers) binary search using recursion ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:17:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Bitwise operations Bits cheat sheet - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32) Get a really good understanding of manipulating bits with: \u0026, |, ^, ~, », « words Good intro: Bit Manipulation (video) C Programming Tutorial 2-10: Bitwise Operators (video) Bit Manipulation Bitwise Operation Bithacks The Bit Twiddler The Bit Twiddler Interactive Bit Hacks (video) Practice Operations 2s and 1s complement Binary: Plusses \u0026 Minuses (Why We Use Two’s Complement) (video) 1s Complement 2s Complement Count set bits 4 ways to count bits in a byte (video) Count Bits How To Count The Number Of Set Bits In a 32 Bit Integer Swap values: Swap Absolute value: Absolute Integer ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:17:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Trees ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:18:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Trees - Intro Intro to Trees (video) Tree Traversal (video) BFS(breadth-first search) and DFS(depth-first search) (video) BFS notes: level order (BFS, using queue) time complexity: O(n) space complexity: best: O(1), worst: O(n/2)=O(n) DFS notes: time complexity: O(n) space complexity: best: O(log n) - avg. height of tree worst: O(n) inorder (DFS: left, self, right) postorder (DFS: left, right, self) preorder (DFS: self, left, right) [Review] Breadth-first search in 4 minutes (video) [Review] Depth-first search in 4 minutes (video) [Review] Tree Traversal (playlist) in 11 minutes (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:18:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Binary search trees: BSTs Binary Search Tree Review (video) Introduction (video) MIT (video) C/C++: Binary search tree - Implementation in C/C++ (video) BST implementation - memory allocation in stack and heap (video) Find min and max element in a binary search tree (video) Find height of a binary tree (video) Binary tree traversal - breadth-first and depth-first strategies (video) Binary tree: Level Order Traversal (video) Binary tree traversal: Preorder, Inorder, Postorder (video) Check if a binary tree is binary search tree or not (video) Delete a node from Binary Search Tree (video) Inorder Successor in a binary search tree (video) Implement: insert // insert value into tree get_node_count // get count of values stored print_values // prints the values in the tree, from min to max delete_tree is_in_tree // returns true if given value exists in the tree get_height // returns the height in nodes (single node’s height is 1) get_min // returns the minimum value stored in the tree get_max // returns the maximum value stored in the tree is_binary_search_tree delete_value get_successor // returns next-highest value in tree after given value, -1 if none ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:18:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Heap / Priority Queue / Binary Heap visualized as a tree, but is usually linear in storage (array, linked list) Heap Introduction (video) Binary Trees (video) Tree Height Remark (video) Basic Operations (video) Complete Binary Trees (video) Pseudocode (video) Heap Sort - jumps to start (video) Heap Sort (video) Building a heap (video) MIT: Heaps and Heap Sort (video) CS 61B Lecture 24: Priority Queues (video) Linear Time BuildHeap (max-heap) [Review] Heap (playlist) in 13 minutes (video) Implement a max-heap: insert sift_up - needed for insert get_max - returns the max item, without removing it get_size() - return number of elements stored is_empty() - returns true if heap contains no elements extract_max - returns the max item, removing it sift_down - needed for extract_max remove(x) - removes item at index x heapify - create a heap from an array of elements, needed for heap_sort heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:18:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Sorting Notes: Implement sorts \u0026 know best case/worst case, average complexity of each: no bubble sort - it’s terrible - O(n^2), except when n \u003c= 16 Stability in sorting algorithms (“Is Quicksort stable?”) Sorting Algorithm Stability Stability In Sorting Algorithms Stability In Sorting Algorithms Sorting Algorithms - Stability Which algorithms can be used on linked lists? Which on arrays? Which on both? I wouldn’t recommend sorting a linked list, but merge sort is doable. Merge Sort For Linked List For heapsort, see Heap data structure above. Heap sort is great, but not stable Sedgewick - Mergesort (5 videos) 1. Mergesort 2. Bottom up Mergesort 3. Sorting Complexity 4. Comparators 5. Stability Sedgewick - Quicksort (4 videos) 1. Quicksort 2. Selection 3. Duplicate Keys 4. System Sorts UC Berkeley: CS 61B Lecture 29: Sorting I (video) CS 61B Lecture 30: Sorting II (video) CS 61B Lecture 32: Sorting III (video) CS 61B Lecture 33: Sorting V (video) CS 61B 2014-04-21: Radix Sort(video) Bubble Sort (video) Analyzing Bubble Sort (video) Insertion Sort, Merge Sort (video) Insertion Sort (video) Merge Sort (video) Quicksort (video) Selection Sort (video) Merge sort code: Using output array (C) Using output array (Python) In-place (C++) Quick sort code: Implementation (C) Implementation (C) Implementation (Python) [Review] Sorting (playlist) in 18 minutes Quick sort in 4 minutes (video) Heap sort in 4 minutes (video) Merge sort in 3 minutes (video) Bubble sort in 2 minutes (video) Selection sort in 3 minutes (video) Insertion sort in 2 minutes (video) Implement: Mergesort: O(n log n) average and worst case Quicksort O(n log n) average case Selection sort and insertion sort are both O(n^2) average and worst case For heapsort, see Heap data structure above Not required, but I recommended them: Sedgewick - Radix Sorts (6 videos) 1. Strings in Java 2. Key Indexed Counting 3. Least Significant Digit First String Radix Sort 4. Most Significant Digit First String Radix Sort 5. 3 Way Radix Quicksort 6. Suffix Arrays Radix Sort Radix Sort (video) Radix Sort, Counting Sort (linear time given constraints) (video) Randomization: Matrix Multiply, Quicksort, Freivalds’ algorithm (video) Sorting in Linear Time (video) As a summary, here is a visual representation of 15 sorting algorithms. If you need more detail on this subject, see “Sorting” section in Additional Detail on Some Subjects ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:19:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Graphs Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were. Notes: There are 4 basic ways to represent a graph in memory: objects and pointers adjacency matrix adjacency list adjacency map Familiarize yourself with each representation and its pros \u0026 cons BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code When asked a question, look for a graph-based solution first, then move on if none MIT(videos): Breadth-First Search Depth-First Search Skiena Lectures - great intro: CSE373 2020 - Lecture 10 - Graph Data Structures (video) CSE373 2020 - Lecture 11 - Graph Traversal (video) CSE373 2020 - Lecture 12 - Depth First Search (video) CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video) CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con’t) (video) CSE373 2020 - Lecture 15 - Graph Algorithms (con’t 2) (video) Graphs (review and more): 6.006 Single-Source Shortest Paths Problem (video) 6.006 Dijkstra (video) 6.006 Bellman-Ford (video) 6.006 Speeding Up Dijkstra (video) Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim’s Algorithm - Lecture 6 (video) Aduni: Graph Algorithms II - DFS, BFS, Kruskal’s Algorithm, Union Find Data Structure - Lecture 7 (video) Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video) Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video) CS 61B 2014: Weighted graphs (video) Greedy Algorithms: Minimum Spanning Tree (video) Strongly Connected Components Kosaraju’s Algorithm Graph Algorithm (video) [Review] Shortest Path Algorithms (playlist) in 16 minutes (video) [Review] Minimum Spanning Trees (playlist) in 4 minutes (video) Full Coursera Course: Algorithms on Graphs (video) I’ll implement: DFS with adjacency list (recursive) DFS with adjacency list (iterative with stack) DFS with adjacency matrix (recursive) DFS with adjacency matrix (iterative with stack) BFS with adjacency list BFS with adjacency matrix single-source shortest path (Dijkstra) minimum spanning tree DFS-based algorithms (see Aduni videos above): check for cycle (needed for topological sort, since we’ll check for cycle before starting) topological sort count connected components in a graph list strongly connected components check for bipartite graph ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:20:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Even More Knowledge ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Recursion Stanford lectures on recursion \u0026 backtracking: Lecture 8 | Programming Abstractions (video) Lecture 9 | Programming Abstractions (video) Lecture 10 | Programming Abstractions (video) Lecture 11 | Programming Abstractions (video) When it is appropriate to use it? How is tail recursion better than not? What Is Tail Recursion Why Is It So Bad? Tail Recursion (video) 5 Simple Steps for Solving Any Recursive Problem(video) Backtracking Blueprint: Java Python ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Dynamic Programming You probably won’t see any dynamic programming problems in your interview, but it’s worth being able to recognize a problem as being a candidate for dynamic programming. This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky. I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved. Videos: Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video) Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video) Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video) Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video) Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video) Simonson: Dynamic Programming 0 (starts at 59:18) (video) Simonson: Dynamic Programming I - Lecture 11 (video) Simonson: Dynamic programming II - Lecture 12 (video) List of individual DP problems (each is short): Dynamic Programming (video) Yale Lecture notes: Dynamic Programming Coursera: The RNA secondary structure problem (video) A dynamic programming algorithm (video) Illustrating the DP algorithm (video) Running time of the DP algorithm (video) DP vs. recursive implementation (video) Global pairwise sequence alignment (video) Local pairwise sequence alignment (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Design patterns Quick UML review (video) Learn these patterns: strategy singleton adapter prototype decorator visitor factory, abstract factory facade observer proxy delegate command state memento iterator composite flyweight Series of videos (27 videos) Book: Head First Design Patterns I know the canonical book is “Design Patterns: Elements of Reusable Object-Oriented Software”, but Head First is great for beginners to OO. Handy reference: 101 Design Patterns \u0026 Tips for Developers ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Combinatorics (n choose k) \u0026 Probability Math Skills: How to find Factorial, Permutation and Combination (Choose) (video) Make School: Probability (video) Make School: More Probability and Markov Chains (video) Khan Academy: Course layout: Basic Theoretical Probability Just the videos - 41 (each are simple and each are short): Probability Explained (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"NP, NP-Complete and Approximation Algorithms Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, and be able to recognize them when an interviewer asks you them in disguise. Know what NP-complete means. Computational Complexity (video) Simonson: Greedy Algs. II \u0026 Intro to NP Completeness (video) NP Completeness II \u0026 Reductions (video) NP Completeness III (Video) NP Completeness IV (video) Skiena: CSE373 2020 - Lecture 23 - NP-Completeness (video) CSE373 2020 - Lecture 24 - Satisfiability (video) CSE373 2020 - Lecture 25 - More NP-Completeness (video) CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video) Complexity: P, NP, NP-completeness, Reductions (video) Complexity: Approximation Algorithms (video) Complexity: Fixed-Parameter Algorithms (video) Peter Norvig discusses near-optimal solutions to traveling salesman problem: Jupyter Notebook Pages 1048 - 1140 in CLRS if you have it. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:5","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"How computers process a program How CPU executes a program (video) How computers calculate - ALU (video) Registers and RAM (video) The Central Processing Unit (CPU) (video) Instructions and Programs (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:6","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Caches LRU cache: The Magic of LRU Cache (100 Days of Google Dev) (video) Implementing LRU (video) LeetCode - 146 LRU Cache (C++) (video) CPU cache: MIT 6.004 L15: The Memory Hierarchy (video) MIT 6.004 L16: Cache Issues (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:7","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Processes and Threads Computer Science 162 - Operating Systems (25 videos): for processes and threads see videos 1-11 Operating Systems and System Programming (video) What Is The Difference Between A Process And A Thread? Covers: Processes, Threads, Concurrency issues Difference between processes and threads Processes Threads Locks Mutexes Semaphores Monitors How they work? Deadlock Livelock CPU activity, interrupts, context switching Modern concurrency constructs with multicore processors Paging, segmentation and virtual memory (video) Interrupts (video) Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o) Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack) Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy. Context switching How context switching is initiated by the operating system and underlying hardware? threads in C++ (series - 10 videos) CS 377 Spring ‘14: Operating Systems from University of Massachusetts concurrency in Python (videos): Short series on threads Python Threads Understanding the Python GIL (2010) reference David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015 Keynote David Beazley - Topics of Interest (Python Asyncio) Mutex in Python ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:8","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Testing To cover: how unit testing works what are mock objects what is integration testing what is dependency injection Agile Software Testing with James Bach (video) Open Lecture by James Bach on Software Testing (video) Steve Freeman - Test-Driven Development (that’s not what we meant) (video) slides Dependency injection: video Tao Of Testing How to write tests ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:9","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"String searching \u0026 manipulations Sedgewick - Suffix Arrays (video) Sedgewick - Substring Search (videos) 1. Introduction to Substring Search 2. Brute-Force Substring Search 3. Knuth-Morris Pratt 4. Boyer-Moore 5. Rabin-Karp Search pattern in text (video) If you need more detail on this subject, see “String Matching” section in Additional Detail on Some Subjects. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:10","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Tries Note there are different kinds of tries. Some have prefixes, some don’t, and some use string instead of bits to track the path I read through code, but will not implement Sedgewick - Tries (3 videos) 1. R Way Tries 2. Ternary Search Tries 3. Character Based Operations Notes on Data Structures and Programming Techniques Short course videos: Introduction To Tries (video) Performance Of Tries (video) Implementing A Trie (video) The Trie: A Neglected Data Structure TopCoder - Using Tries Stanford Lecture (real world use case) (video) MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:11","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Floating Point Numbers simple 8-bit: Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:12","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Unicode The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:13","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Endianness Big And Little Endian Big Endian Vs Little Endian (video) Big And Little Endian Inside/Out (video) Very technical talk for kernel devs. Don’t worry if most is over your head. The first half is enough. ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:14","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Networking If you have networking experience or want to be a reliability engineer or operations engineer, expect questions Otherwise, this is just good to know Khan Academy UDP and TCP: Comparison of Transport Protocols (video) TCP/IP and the OSI Model Explained! (video) Packet Transmission across the Internet. Networking \u0026 TCP/IP tutorial. (video) HTTP (video) SSL and HTTPS (video) SSL/TLS (video) HTTP 2.0 (video) Video Series (21 videos) (video) Subnetting Demystified - Part 5 CIDR Notation (video) Sockets: Java - Sockets - Introduction (video) Socket Programming (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:21:15","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Final Review This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.\rIt's nice if you want a refresher often.\rSeries of 2-3 minutes short subject videos (23 videos) Videos Series of 2-5 minutes short subject videos - Michael Sambol (38 videos): Videos Sedgewick Videos - Algorithms I Sedgewick Videos - Algorithms II ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:22:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Update Your Resume See Resume prep information in the books: “Cracking The Coding Interview” and “Programming Interviews Exposed” I don’t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant: How to Create or Check if your Resume is ATS Compliant “This Is What A GOOD Resume Should Look Like” by Gayle McDowell (author of Cracking the Coding Interview), Note by the author: “This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.” “Step-by-step resume guide” by Tech Interview Handbook Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:23:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Find a Job Sites for Finding Jobs ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:24:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Interview Process \u0026 General Interview Prep How to Pass the Engineering Interview in 2021 Demystifying Tech Recruiting How to Get a Job at the Big 4: How to Get a Job at the Big 4 - Amazon, Facebook, Google \u0026 Microsoft (video) How to Get a Job at the Big 4.1 (Follow-up video) Cracking The Coding Interview Set 1: Gayle L McDowell - Cracking The Coding Interview (video) Cracking the Coding Interview with Author Gayle Laakmann McDowell (video) Cracking the Facebook Coding Interview: The Approach Problem Walkthrough Prep Courses: Software Engineer Interview Unleashed (paid course): Learn how to make yourself ready for software engineer interviews from a former Google interviewer. Python for Data Structures, Algorithms, and Interviews (paid course): A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more. Intro to Data Structures and Algorithms using Python (Udacity free course): A free Python centric data structures and algorithms course. Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree): Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios. Grokking the Behavioral Interview (Educative free course): Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview. Mock Interviews: Gainlo.co: Mock interviewers from big companies - I used this and it helped me relax for the phone screen and on-site interview Pramp: Mock interviews from/with peers - peer-to-peer model of practice interviews interviewing.io: Practice mock interview with senior engineers - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:25:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Be thinking of for when the interview comes Think of about 20 interview questions you’ll get, along with the lines of the items below. Have at least one answer for each. Have a story, not just data, about something you accomplished. Why do you want this job? What’s a tough problem you’ve solved? Biggest challenges faced? Best/worst designs seen? Ideas for improving an existing product How do you work best, as an individual and as part of a team? Which of your skills or experiences would be assets in the role and why? What did you most enjoy at [job x / project y]? What was the biggest challenge you faced at [job x / project y]? What was the hardest bug you faced at [job x / project y]? What did you learn at [job x / project y]? What would you have done better at [job x / project y]? If you find it hard to come up with good answers of these types of interview questions, here are some ideas: General Interview Questions and their Answers ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:26:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Have questions for the interviewer Some of mine (I already may know the answers, but want their opinion or team perspective): How large is your team? What does your dev cycle look like? Do you do waterfall/sprints/agile? Are rushes to deadlines common? Or is there flexibility? How are decisions made in your team? How many meetings do you have per week? Do you feel your work environment helps you concentrate? What are you working on? What do you like about it? What is the work life like? How is the work/life balance? ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:27:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Once You’ve Got The Job Congratulations! Keep learning. You’re never really done. *****************************************************************************************************\r*****************************************************************************************************\rEverything below this point is optional. It is NOT needed for an entry-level interview.\rHowever, by studying these, you'll get greater exposure to more CS concepts, and will be better prepared for\rany software engineering job. You'll be a much more well-rounded software engineer.\r*****************************************************************************************************\r*****************************************************************************************************\r","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:28:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Additional Books These are here so you can dive into a topic you find interesting.\rThe Unix Programming Environment An oldie but a goodie The Linux Command Line: A Complete Introduction A modern option TCP/IP Illustrated Series Head First Design Patterns A gentle introduction to design patterns Design Patterns: Elements of Reusable Object-Oriente​d Software AKA the “Gang Of Four” book, or GOF The canonical design patterns book Algorithm Design Manual (Skiena) As a review and problem recognition The algorithm catalog portion is well beyond the scope of difficulty you’ll get in an interview This book has 2 parts: Class textbook on data structures and algorithms Pros: Is a good review as any algorithms textbook would be Nice stories from his experiences solving problems in industry and academia Code examples in C Cons: Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have Don’t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material Algorithm catalog: This is the real reason you buy this book. This book is better as an algorithm reference, and not something you read cover to cover. Can rent it on Kindle Answers: Solutions Errata Write Great Code: Volume 1: Understanding the Machine The book was published in 2004, and is somewhat outdated, but it’s a terrific resource for understanding a computer in brief The author invented HLA, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like These chapters are worth the read to give you a nice foundation: Chapter 2 - Numeric Representation Chapter 3 - Binary Arithmetic and Bit Operations Chapter 4 - Floating-Point Representation Chapter 5 - Character Representation Chapter 6 - Memory Organization and Access Chapter 7 - Composite Data Types and Memory Objects Chapter 9 - CPU Architecture Chapter 10 - Instruction Set Architecture Chapter 11 - Memory Architecture and Organization Introduction to Algorithms Important: Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won’t teach you how to write good code. You have to be able to code a decent solution efficiently AKA CLR, sometimes CLRS, because Stein was late to the game Computer Architecture, Sixth Edition: A Quantitative Approach For a richer, more up-to-date (2017), but longer treatment ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:29:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"System Design, Scalability, Data Handling You can expect system design questions if you have 4+ years of experience. Scalability and System Design are very large topics with many topics and resources, since there is a lot to consider when designing a software/hardware system that can scale. Expect to spend quite a bit of time on this Considerations: Scalability Distill large data sets to single values Transform one data set to another Handling obscenely large amounts of data System design features sets interfaces class hierarchies designing a system under certain constraints simplicity and robustness tradeoffs performance analysis and optimization START HERE: The System Design Primer System Design from HiredInTech How Do I Prepare To Answer Design Questions In A Technical Interview? 8 Things You Need to Know Before a System Design Interview Database Normalization - 1NF, 2NF, 3NF and 4NF (video) System Design Interview - There are a lot of resources in this one. Look through the articles and examples. I put some of them below How to ace a systems design interview Numbers Everyone Should Know How long does it take to make a context switch? Transactions Across Datacenters (video) A plain English introduction to CAP Theorem MIT 6.824: Distributed Systems, Spring 2020 (20 videos) Consensus Algorithms: Paxos - Paxos Agreement - Computerphile (video) Raft - An Introduction to the Raft Distributed Consensus Algorithm (video) Easy-to-read paper Infographic Consistent Hashing NoSQL Patterns Scalability: You don’t need all of these. Just pick a few that interest you. Great overview (video) Short series: Clones Database Cache Asynchronism Scalable Web Architecture and Distributed Systems Fallacies of Distributed Computing Explained Jeff Dean - Building Software Systems At Google and Lessons Learned (video) Introduction to Architecting Systems for Scale Scaling mobile games to a global audience using App Engine and Cloud Datastore (video) How Google Does Planet-Scale Engineering for Planet-Scale Infra (video) The Importance of Algorithms Sharding Engineering for the Long Game - Astrid Atkinson Keynote(video) 7 Years Of YouTube Scalability Lessons In 30 Minutes video How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs How to Remove Duplicates in Large Datasets A look inside Etsy’s scale and engineering culture with Jon Cowie (video) What Led Amazon to its Own Microservices Architecture To Compress Or Not To Compress, That Was Uber’s Question When Should Approximate Query Processing Be Used? Google’s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture The Image Optimization Technology That Serves Millions Of Requests Per Day A Patreon Architecture Short Tinder: How Does One Of The Largest Recommendation Engines Decide Who You’ll See Next? Design Of A Modern Cache Live Video Streaming At Facebook Scale A Beginner’s Guide To Scaling To 11 Million+ Users On Amazon’s AWS A 360 Degree View Of The Entire Netflix Stack Latency Is Everywhere And It Costs You Sales - How To Crush It What Powers Instagram: Hundreds of Instances, Dozens of Technologies Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day ESPN’s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second See “Messaging, Serialization, and Queueing Systems” way below for info on some of the technologies that can glue services together Twitter: O’Reilly MySQL CE 2011: Jeremy Cole, “Big and Small Data at @Twitter” (video) Timelines at Scale For even more, see “Mining Massive Datasets” video series in the Video Series section Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world: review: The System Design Primer System Design from HiredInTech cheat sheet flow: Understand the problem and scope: Define the use cases, with interviewer’s help Suggest additional features Remove items that interviewer deems out of sc","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:30:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Additional Learning I added them to help you become a well-rounded software engineer, and to be aware of certain\rtechnologies and algorithms, so you'll have a bigger toolbox.\r","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Compilers How a Compiler Works in ~1 minute (video) Harvard CS50 - Compilers (video) C++ (video) Understanding Compiler Optimization (C++) (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:1","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Emacs and vi(m) Familiarize yourself with a unix-based code editor vi(m): Editing With vim 01 - Installation, Setup, and The Modes (video) VIM Adventures set of 4 videos: The vi/vim editor - Lesson 1 The vi/vim editor - Lesson 2 The vi/vim editor - Lesson 3 The vi/vim editor - Lesson 4 Using Vi Instead of Emacs emacs: Basics Emacs Tutorial (video) set of 3 (videos): Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video) Writing C Programs With Emacs The Absolute Beginner’s Guide to Emacs (video by David Wilson) The Absolute Beginner’s Guide to Emacs (notes by David Wilson) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:2","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Unix command line tools I filled in the list below from good tools. bash cat grep sed awk curl or wget sort tr uniq strace tcpdump ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:3","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Information theory (videos) Khan Academy More about Markov processes: Core Markov Text Generation Core Implementing Markov Text Generation Project = Markov Text Generation Walk Through See more in MIT 6.050J Information and Entropy series below ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:4","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Parity \u0026 Hamming Code (videos) Intro Parity Hamming Code: Error detection Error correction Error Checking ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:5","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Entropy Also see videos below Make sure to watch information theory videos first Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression \u0026 Bits (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:6","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Cryptography Also see videos below Make sure to watch information theory videos first Khan Academy Series Cryptography: Hash Functions Cryptography: Encryption ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:7","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Compression Make sure to watch information theory videos first Computerphile (videos): Compression Entropy in Compression Upside Down Trees (Huffman Trees) EXTRA BITS/TRITS - Huffman Trees Elegant Compression in Text (The LZ 77 Method) Text Compression Meets Probabilities Compressor Head videos (optional) Google Developers Live: GZIP is not enough! ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:8","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Computer Security MIT (23 videos) Introduction, Threat Models Control Hijacking Attacks Buffer Overflow Exploits and Defenses Privilege Separation Capabilities Sandboxing Native Code Web Security Model Securing Web Applications Symbolic Execution Network Security Network Protocols Side-Channel Attacks ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:9","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Garbage collection GC in Python (video) Deep Dive Java: Garbage Collection is Good! Deep Dive Python: Garbage Collection in CPython (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:10","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Parallel Programming Coursera (Scala) Efficient Python for High Performance Parallel Computing (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:11","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Messaging, Serialization, and Queueing Systems Thrift Tutorial Protocol Buffers Tutorials gRPC gRPC 101 for Java Developers (video) Redis Tutorial Amazon SQS (queue) Amazon SNS (pub-sub) RabbitMQ Get Started Celery First Steps With Celery ZeroMQ Intro - Read The Manual ActiveMQ Kafka MessagePack Avro ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:12","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"A* A Search Algorithm A* Pathfinding (E01: algorithm explanation) (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:13","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Fast Fourier Transform An Interactive Guide To The Fourier Transform What is a Fourier transform? What is it used for? What is the Fourier Transform? (video) Divide \u0026 Conquer: FFT (video) Understanding The FFT ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:14","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Bloom Filter Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k) Bloom Filters (video) Bloom Filters | Mining of Massive Datasets | Stanford University (video) Tutorial How To Write A Bloom Filter App ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:15","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"HyperLogLog How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:16","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Locality-Sensitive Hashing Used to determine the similarity of documents The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same Simhashing (hopefully) made simple ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:17","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"van Emde Boas Trees Divide \u0026 Conquer: van Emde Boas Trees (video) MIT Lecture Notes ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:18","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Augmented Data Structures CS 61B Lecture 39: Augmenting Data Structures ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:19","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Balanced search trees Know at least one type of balanced binary tree (and know how it’s implemented): “Among balanced search trees, AVL and 2/3 trees are now passé, and red-black trees seem to be more popular. A particularly interesting self-organizing data structure is the splay tree, which uses rotations to move any accessed key to the root.” - Skiena Of these, I chose to implement a splay tree. From what I’ve read, you won’t implement a balanced search tree in your interview. But I wanted exposure to coding one up and let’s face it, splay trees are the bee’s knees. I did read a lot of red-black tree code Splay tree: insert, search, delete functions If you end up implementing red/black tree try just these: Search and insertion functions, skipping delete I want to learn more about B-Tree since it’s used so widely with very large data sets Self-balancing binary search tree AVL trees In practice: From what I can tell, these aren’t used much in practice, but I could see where they would be: The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it attractive for data structures that may be built once and loaded without reconstruction, such as language dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter) MIT AVL Trees / AVL Sort (video) AVL Trees (video) AVL Tree Implementation (video) Split And Merge Splay trees In practice: Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors, data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory, networking and file system code) etc CS 61B: Splay Trees (video) MIT Lecture: Splay Trees: Gets very mathy, but watch the last 10 minutes for sure. Video Red/black trees These are a translation of a 2-3 tree (see below). In practice: Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time. Not only does this make them valuable in time-sensitive applications such as real-time applications, but it makes them valuable building blocks in other data structures which provide worst-case guarantees; for example, many data structures used in computational geometry can be based on red–black trees, and the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java, the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor hashcodes, a Red-Black tree is used Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video) Aduni - Algorithms - Lecture 5 (video) Red-Black Tree An Introduction To Binary Search And Red Black Tree [Review] Red-Black Trees (playlist) in 30 minutes (video) 2-3 search trees In practice: 2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees). You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees. 23-Tree Intuition and Definition (video) Binary View of 23-Tree 2-3 Trees (student recitation) (video) 2-3-4 Trees (aka 2-4 trees) In practice: For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce 2-4 trees just before red–black trees, even though 2-4 trees are not often used in practice. CS 61B Lecture 26: Balanced Search Trees (video) Bottom Up 234-Trees (video) Top Down 234-Trees (video) N-ary (K-ary, M-ary) trees note: the N or K is the branching factor (max branches) binary trees are a 2-ary tree, w","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:20","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"k-D Trees Great for finding number of points in a rectangle or higher dimension object A good fit for k-nearest neighbors kNN K-d tree algorithm (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:21","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Skip lists “These are somewhat of a cult data structure” - Skiena Randomization: Skip Lists (video) For animations and a little more detail ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:22","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Network Flows Ford-Fulkerson in 5 minutes — Step by step example (video) Ford-Fulkerson Algorithm (video) Network Flows (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:23","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Disjoint Sets \u0026 Union Find UCB 61B - Disjoint Sets; Sorting \u0026 selection (video) Sedgewick Algorithms - Union-Find (6 videos) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:24","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Math for Fast Processing Integer Arithmetic, Karatsuba Multiplication (video) The Chinese Remainder Theorem (used in cryptography) (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:25","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Treap Combination of a binary search tree and a heap Treap Data Structures: Treaps explained (video) Applications in set operations ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:26","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Linear Programming (videos) Linear Programming Finding minimum cost Finding maximum value Solve Linear Equations with Python - Simplex Algorithm ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:27","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Geometry, Convex hull (videos) Graph Alg. IV: Intro to geometric algorithms - Lecture 9 Geometric Algorithms: Graham \u0026 Jarvis - Lecture 10 Divide \u0026 Conquer: Convex Hull, Median Finding ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:28","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Discrete math Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory Discrete Mathematics by Shai Simonson (19 videos) Discrete Mathematics By IIT Ropar NPTEL ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:31:29","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Additional Detail on Some Subjects I added these to reinforce some ideas already presented above, but didn't want to include them\rabove because it's just too much. It's easy to overdo it on a subject.\rYou want to get hired in this century, right?\rSOLID Bob Martin SOLID Principles of Object Oriented and Agile Design (video) S - Single Responsibility Principle | Single responsibility to each Object more flavor O - Open/Closed Principle | On production level Objects are ready for extension but not for modification more flavor L - Liskov Substitution Principle | Base Class and Derived class follow ‘IS A’ Principle more flavor I - Interface segregation principle | clients should not be forced to implement interfaces they don’t use Interface Segregation Principle in 5 minutes (video) more flavor D -Dependency Inversion principle | Reduce the dependency In composition of objects. Why Is The Dependency Inversion Principle And Why Is It Important more flavor Union-Find Overview Naive Implementation Trees Union By Rank Path Compression Analysis Options More Dynamic Programming (videos) 6.006: Dynamic Programming I: Fibonacci, Shortest Paths 6.006: Dynamic Programming II: Text Justification, Blackjack 6.006: DP III: Parenthesization, Edit Distance, Knapsack 6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros. 6.046: Dynamic Programming \u0026 Advanced DP 6.046: Dynamic Programming: All-Pairs Shortest Paths 6.046: Dynamic Programming (student recitation) Advanced Graph Processing (videos) Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees MIT Probability (mathy, and go slowly, which is good for mathy things) (videos): MIT 6.042J - Probability Introduction MIT 6.042J - Conditional Probability MIT 6.042J - Independence MIT 6.042J - Random Variables MIT 6.042J - Expectation I MIT 6.042J - Expectation II MIT 6.042J - Large Deviations MIT 6.042J - Random Walks Simonson: Approximation Algorithms (video) String Matching Rabin-Karp (videos): Rabin Karps Algorithm Precomputing Optimization: Implementation and Analysis Table Doubling, Karp-Rabin Rolling Hashes, Amortized Analysis Knuth-Morris-Pratt (KMP): TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm Boyer–Moore string search algorithm Boyer-Moore String Search Algorithm Advanced String Searching Boyer-Moore-Horspool Algorithms (video) Coursera: Algorithms on Strings starts off great, but by the time it gets past KMP it gets more complicated than it needs to be nice explanation of tries can be skipped Sorting Stanford lectures on sorting: Lecture 15 | Programming Abstractions (video) Lecture 16 | Programming Abstractions (video) Shai Simonson, Aduni.org: Algorithms - Sorting - Lecture 2 (video) Algorithms - Sorting II - Lecture 3 (video) Steven Skiena lectures on sorting: CSE373 2020 - Mergesort/Quicksort (video) CSE373 2020 - Linear Sorting (video) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:32:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Video Series Sit back and enjoy. List of individual Dynamic Programming problems (each is short) x86 Architecture, Assembly, Applications (11 videos) MIT 18.06 Linear Algebra, Spring 2005 (35 videos) Excellent - MIT Calculus Revisited: Single Variable Calculus Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos) UC Berkeley 61B (Spring 2014): Data Structures (25 videos) UC Berkeley 61B (Fall 2006): Data Structures (39 videos) UC Berkeley 61C: Machine Structures (26 videos) OOSE: Software Dev Using UML and Java (21 videos) MIT 6.004: Computation Structures (49 videos) Carnegie Mellon - Computer Architecture Lectures (39 videos) MIT 6.006: Intro to Algorithms (47 videos) MIT 6.033: Computer System Engineering (22 videos) MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos) MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos) MIT 6.046: Design and Analysis of Algorithms (34 videos) MIT 6.824: Distributed Systems, Spring 2020 (20 videos) MIT 6.851: Advanced Data Structures (22 videos) MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos) Harvard COMPSCI 224: Advanced Algorithms (25 videos) MIT 6.858 Computer Systems Security, Fall 2014 Stanford: Programming Paradigms (27 videos) Introduction to Cryptography by Christof Paar Course Website along with Slides and Problem Sets Mining Massive Datasets - Stanford University (94 videos) Graph Theory by Sarada Herke (67 videos) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:33:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Computer Science Courses Directory of Online CS Courses Directory of CS Courses (many with online lectures) ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:34:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Algorithms implementation Multiple Algorithms implementation by Princeton University ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:35:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["computer-science"],"content":"Papers Love classic papers? 1978: Communicating Sequential Processes implemented in Go 2003: The Google File System replaced by Colossus in 2012 2004: MapReduce: Simplified Data Processing on Large Clusters mostly replaced by Cloud Dataflow? 2006: Bigtable: A Distributed Storage System for Structured Data 2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems 2007: Dynamo: Amazon’s Highly Available Key-value Store The Dynamo paper kicked off the NoSQL revolution 2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections) 2012: AddressSanitizer: A Fast Address Sanity Checker: paper video 2013: Spanner: Google’s Globally-Distributed Database: paper video 2015: Continuous Pipelines at Google 2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads 2015: How Developers Search for Code: A Case Study More papers: 1,000 papers ","date":"2022-10-16","objectID":"/complete-computer-science-study-plan-to-become-a-software-engineer/:36:0","tags":["coding","computer-science","study-plan"],"title":"Complete Computer Science Study Plan to Become a Software Engineer","uri":"/complete-computer-science-study-plan-to-become-a-software-engineer/"},{"categories":["coding-interview","interview-questions"],"content":"A curated list of top technical interview questions.","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":" A curated list of lists of technical interview questions. What makes for an awesome list? Please read the contribution guidelines or creating a list guide if you want to contribute. ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:0:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Table of Contents Programming Languages/Frameworks/Platforms Android AngularJS Angular BackboneJS C++ C C♯ .NET Clojure CSS Cucumber Django Docker Elastic EmberJS Erlang Golang GraphQl HTML Ionic iOS Java JavaScript jQuery Front-end build tools KnockoutJS Less Lisp NodeJS Objective-C PHP Python ReactJS Rails Ruby Rust Sass Scala Shell Spark Swift Vue.js Wordpress TypeScript Database technologies Cassandra Microsoft Access MongoDB MySQL Neo4j Oracle Postgres SQL SQL Lite Caching technologies Memcached Redis OS Linux Windows Algorithms Blockchain Coding exercises Comprehensive lists Design patterns Data structures Networks Security Data Science ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:0:1","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Programming Languages/Frameworks/Platforms ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Android 10 Android interview question answers for Freshers 20 Essential Android Interview Questions from Toptal 25 Essential Android Interview Questions from Adeva A couple of Android questions posted by Quora users A great list of Android interview questions covering all the aspects of this career Collection of Android and Java related questions and topics, including general developer questions, Java core, Data structures, Build Tools, Programming Paradigms, Core Android, Databases and etc Collection of Android and Java questions divided by experience RocketSkill App Android Interview Questions Android cheat sheet: Coding program, Data structure, Android and Java interview questions with answers and categorized by topics Android Interview Questions And Answers From Beginner To Advanced Interview Questions for Senior Android Developers 35+ Android Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:1","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"AngularJS 12 Essential AngularJS Interview Questions from Toptal An AngularJS exam with questions from beginner to expert by @gdi2290 from @AngularClass 29 AngularJS Interview Questions – Can You Answer Them All? Great Article from Codementor AngularJS interview questions and answers for experienced developers AngularJS Interview Questions which have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of AngularJS This article discusses the top 50 Most occurred AngularJS interview question with answers Top 25 Angularjs Interview Questions and Quiz 100 AngularJS Interview Questions - Quick Refresher ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:2","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Angular A list of helpful Angular related questions you can use to interview potential candidates, test yourself or completely ignore Angular 2 Interview Questions List of 300 Angular Interview Questions and Answers Angular Interview Questions (2020) Top Angular Interview Questions and Answers in 2021 ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:3","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"BackboneJS 8 Essential Backbonejs Interview Questions from Toptal Backbonejs Interview Questions And Answers from web technology experts notes Top 25 Backbone.js interview questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:4","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"C++ 1000+ Multiple Choice Questions \u0026 Answers in C++ with explanations 200 C++ interview questions and answers 24 Essential C++ Interview Questions from Toptal C++ Interview Questions from GeekInterview C++ Programming Q\u0026A and quizzes from computer science portal for geeks C++ Programming Questions and Answers related to such topics as OOPs concepts, Object and Classes, Functions, Constructors and Destructors, Inheritance and etc LeetCode Problems’ Solutions written in C++ ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:5","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"C Basic C language technical frequently asked interview questions and answers It includes data structures, pointers interview questions and answers for experienced C Programming Interview Questions and Answers for such topics as Bits and Bytes, Preprocessors, Functions, Strings, Language basics and etc C Programming Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of C Programming First set of commonly asked C programming interview questions from computer science portal for geeks Second set of commonly asked C programming interview questions from computer science portal for geeks 9 Essential C Interview Questions with answers Top C Interview Questions and Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:6","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"C# 15 Essential C# Interview Question from Toptal C# interview questions from dotnetfunda.com Top 50 C# Interview Questions \u0026 Answers 50 C# Coding Interview Questions and Answers 20 C# OOPS Interview Questions and Answers 30+ C# Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:7","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":".NET 300 ASPNET interview questions and answers ASP.NET Core Interview Questions Great list of NET interview questions covering all the NET platform topics NET Interview Questions and Answers for Beginners which consists of the most frequently asked questions in NET This list of 100+ questions and answers gauge your familiarity with the NET platform Questions gathered by community of the StackOverflow What Great NET Developers Ought To Know (More NET Interview Questions) ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:8","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Clojure Classic ‘Fizz Buzz’ interview question for Clojure developers Clojure Interview Questions for experienced devs Coding exercises in Clojure, handy practice for technical interview questions Experience and questions from Clojure developer interview collected by Reddit users Interview cake Clojure solutions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:9","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"CSS CSS interview questions and answers for freshers and experienced candidates Also there you can find CSS online practice tests to fight written tests and certification exams on CSS Development hiring managers and potential interviewees may find there sample CSS proficiency interview Q\u0026As and code snippets useful Interview Questions and Exercises About CSS Top 50 CSS(Cascading Style Sheet) Interview Questions covering the most of tricky CSS moments Front End Interview Handbook - CSS Questions and Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:10","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Cucumber Cucumber Web Application BDD Sample Interview Questions Guide to building a simple Cucumber + Watir page object pattern framework ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:11","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Django Some abstract interview questions for Python/Django developers Some Django basic interview questions to establish the basic level of the candidates Top 16 Django Interview Questions for both freshers and experienced developers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:12","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Docker Docker Interview Questions Top Docker Interview Questions You Must Prepare In 2019 Top Docker Interview Questions And Answers DOCKER (SOFTWARE) INTERVIEW QUESTIONS \u0026 ANSWERS 30 Docker Interview Questions and Answers in 2019 Docker Interview Questions \u0026 Answers Top 50 Docker Interview Questions \u0026 Answers Top 50+ Docker Interview Questions and Answers in 2021 ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:13","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Elastic Top Elastic Stack Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:14","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"EmberJS 8 Essential Emberjs Interview Questions from Toptal Top 25 Emberjs Interview Questions for both freshers and experienced developers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:15","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Erlang Top 22 Erlang Interview Questions for both freshers and experienced developers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:16","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Golang Solutions for Elements of Programming Interviews problems written in Golang Solutions for some basic coding interview tasks written in Go Top 20 GO Programming Interview Questions for both freshers and experienced developers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:17","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"GraphQl 8 GraphQl Interview Questions To Know How to GraphQl - Common Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:18","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"HTML 10 Typical HTML Interview Exercises from SitePoint.com 16 Essential HTML5 Interview Questions from Toptal 40 important HTML 5 Interview questions with answers HTML interview questions and answers for freshers and experienced candidates Also find HTML online practice tests to fight written tests and certification exams on HTML Top 50 HTML Interview Questions for both freshers and experienced developers Common HTML interview questions for freshers Front End Interview Handbook - HTML Questions and Answers 30 HTML Interview Questions and Answers 30+ HTML Interview Questions (2021) ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:19","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Ionic 23 Beginner Level Ionic Framework Questions 12 Essential Ionic Interview Questions 45 Ionic Interview Questions Most Asked Ionic Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:20","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"iOS 14 Essential iOS Interview Questions from Toptal 20 iOS Developer Interview Questions and Answers for getting you ready for your interview 25 Essential iOS Interview Questions from Adeva A small guide to help those looking to hire a developer or designer for iOS work While tailored for iOS, many questions could be used for Android developers or designers as well A great self-test if you’re looking to keep current or practice for your own interview All you need to know about iOS technical interview including some tips for preparing, questions and some coding exercises Interview Questions for iOS and Mac Developers from the CEO of Black Pixel iOS Interview Questions and Answers including such topics as Development Basics, App states and multitasking, App states, Core app objects iOS Interview Questions For Senior Developers 50 iOS Interview Questions And Answers 1 50 iOS Interview Questions And Answers Part 2 50 iOS Interview Questions And Answers Part 3 50 iOS Interview Questions And Answers Part 4 50 iOS Interview Questions And Answers Part 5 10 iOS interview questions and answers iOS Developer and Designer Interview Questions IOS Interview Questions and Answers iOS Interview Questions For Beginners Babylon iOS Interview Questions RocketSkill App iOS Interview Questions iOS Static vs Dynamic Dispatch ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:21","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Java List of Java programs for interview Categoriwise 115 Java Interview Questions and Answers – The ULTIMATE List 37 Java Interview Questions to Practice With from Codementor 21 Essential Java Interview Questions Top 30 Core Java Interview Questions 29 Essential Java Interview Questions from Adeva A collection of Java interview questions and answers to them Data Structures and Algorithms in Java which can be useful in interview process Java Interview Questions: How to crack the TOP 15 questions 300 Core Java Interview Questions Top 10 Tricky Java interview questions and Answers Top 25 Most Frequently Asked Interview Core Java Interview Questions And Answers Top 40 Core Java Interview Questions Answers from Telephonic Round Top 50 Spring Interview Questions You Must Prepare For In 2020 Spring Interview Questions And Answers Interview Cake Java Interview Questions Java Interview Questions \u0026 Quizzes Essetial Java Interview Questions Fundamental Java Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:22","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"JavaScript Practice common algorithms using JavaScript 10 Interview Questions Every JavaScript Developer Should Know 21 Essential JavaScript Interview Questions from best mentors all over the world 20 Essential JavaScript Interview Questions from Adeva 37 Essential JavaScript Interview Questions from Toptal 5 More JavaScript Interview Exercises 5 Typical JavaScript Interview Exercises Development hiring managers and potential interviewees may find these sample JavaScript proficiency interview Q\u0026As and code snippets useful 123 Essential JavaScript Interview Question JavaScript Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of JavaScript JS: Basics and Tricky Questions JS: Interview Algorithm Some basic javascript coding challenges and interview questions Some JavaScript interview exercises Ten Questions I’ve Been Asked, Most More Than Once, Over Six Technical JavaScript / Front-End Engineer Job Interviews. Top 85 JavaScript Interview Questions Interview Cake JavaScript Interview Questions The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer) 10 JavaScript Concepts You Need to Know for Interviews Front End Interview Handbook - JavaScript Questions and Answers JavaScript Interview Questions - Quick Refresher The MEGA Interview Guide Javascript Interview Questions and Answers (2020) JavaScript Modern Interview Code Challenges 2021 70 JavaScript Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:23","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"jQuery Top 50 jquery interview questions 17 Essential jQuery Interview Questions From Toptal Top JQuery Interview Questions and Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:24","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Front-end build tools Webpack interview questions \u0026 answers Gulp js interview questions Grunt js interview questions for beginners Grunt js interview questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:25","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"KnockoutJS 15 interview questions from CodeSample.com 20 questions you might be asked about KnockoutJS in an interview for both freshers and experienced developers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:26","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Less Top 25 LESS Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:27","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Lisp 10 LISP Questions \u0026 Answers Top 18 Lisp Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:28","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"NodeJS 25 Essential Node.js Interview Questions from Adeva 8 Essential Nodejs Interview Questions from Toptal Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS Node.js Interview Questions and Answers Top 25 Nodejs Interview Questions \u0026 Answers from Career Guru Top 30 Node.Js Interview Questions With Answers Top Nodejs Interview Questions \u0026 Answers Node.js Interview Questions in Chinese Node.js Interview Questions by learning-zone ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:29","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Objective-C Interview Qs for Objective-C and Swift iOS Interview Questions For Beginners ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:30","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"PHP 100 PHP interview questions and answers from CareerRide.com 21 Essential PHP Interview Questions from Toptal 20 Common PHP Job Interview Questions and Answers 25 Essential PHP Interview Questions from Adeva PHP interview questions and answers for freshers Top 100 PHP Interview Questions \u0026 Answers from CareerGuru 25 PHP Interview Questions 26 Essential PHP Interview Questions for 2018 Cracking PHP Interviews Questions ebook 300+ Q\u0026A PHP Interview Questions - Quick Refresher 30+ PHP Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:31","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Python 26 Essential Python Interview Questions from Adeva 20 Python interview questions and answers 11 Essential Python Interview Questions from Toptal A listing of questions that could potentially be asked for a python job listing Interview Questions for both beginners and experts Interview Cake Python Interview Questions Python Frequently Asked Questions (Programming) Python interview questions collected by Reddit users Top 25 Python Interview Questions from Career Guru Python Interview 10 questions from Corey Schafer Python interview questions. Part I. Junior Python interview questions. Part II. Middle Python interview questions. Part III. Senior Python Interview Questions and Answers (2019) 100 Python Interview Questions - Quick Refresher Top 100 Python Interview Questions from Edureka (2021) ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:32","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Ruby on Rails 20 Ruby on Rails interview questions and answers from CareerRide.com 9 Essential Ruby on Rails Interview Questions from Toptal High-level Ruby on Rails Interview Questions Ruby And Ruby On Rails interview Q\u0026A Some of the most frequently asked Ruby on Rails questions and how to answer them confidently 11 Ruby on Rails Interview Practice Questions Top 53 Ruby on Rails Interview Questions \u0026 Answers 10 Ruby on Rails interview questions and answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:33","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"ReactJS Reddit users share their expectations from ReactJS interview 5 Essential React.js Interview Questions React Interview Questions Toptal’s 21 Essential React.js Interview Questions 19 Essential ReactJs Interview Questions React Interview Questions \u0026 Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:34","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Ruby 21 Essential Ruby Interview Questions from Toptal 15 Questions to Ask During a Ruby Interview A list of questions about Ruby programming you can use to quiz yourself The Art of Ruby Technical Interview Interview Cake Ruby Interview Questions Frequently Asked Ruby Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:35","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Rust Top 250+ Rust Programming Language Interview Questions Rust Programming Interview Questions and Answers rust-exam: A set of questions about the Rust programming language Best Rust Programming Language Interview Questions and answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:36","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Sass Top 17 Sass Interview Questions from Career Guru Top 10 Sass Interview Questions from educba ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:37","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Scala 4 Interview Questions for Scala Developers A list of Frequently Asked Questions and their answers, sorted by category A list of helpful Scala related questions you can use to interview potential candidates How Scala Developers Are Being Interviewed Top 25 Scala Interview Questions \u0026 Answers from Toptal ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:38","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"SharePoint Sharepoint Interview Question For Developer Top SharePoint Interview Questions and Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:39","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Shell Top 50 Shell Scripting Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:40","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Spark Carefully Curated 70 Spark Questions with Additional Optimization Guides (First in the series) ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:41","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Swift 10 Essential Swift Interview Questions from Toptal Get prepared for your next iOS job interview by studying high quality LeetCode solutions in Swift 5 Swift Interview Questions and Answers Swift Programming Language Interview Questions And Answers from mycodetips.com Your top 10 Swift questions answered Swift interview questions and answers on Swift 5 by Raywenderlich Dynamic keyword in Swift ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:42","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Vue.js List of 300 VueJS Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:43","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"WordPress Top 45 WordPress interview questions 10 Essential WordPress Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:44","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"TypeScript Typescript Interview Questions Top 10 TypeScript Interview Questions and Answers for Beginner Web Developers 2019 ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:1:45","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Database technologies ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Cassandra Top 23 Cassandra Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:1","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Microsoft Access Top 16 Microsoft Access Database Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:2","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"MongoDB 28 MongoDB NoSQL Database Interview Questions and Answers MongoDB frequently Asked Questions by expert members with experience in MongoDB These questions and answers will help you strengthen your technical skills, prepare for the new job test and quickly revise the concepts MongoDB Interview Questions from JavaTPointcom MongoDB Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of MongoDB Top 20 MongoDB interview questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:3","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"MySQL 10 MySQL Database Interview Questions for Beginners and Intermediates 100 MySQL interview questions 15 Basic MySQL Interview Questions for Database Administrators 28 MySQL interview questions from JavaTPoint.com 40 Basic MySQL Interview Questions with Answers Top 50 MySQL Interview Questions \u0026 Answers from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:4","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Neo4j Top 20 Neo4j Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:5","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Oracle General Oracle Interview Questions \u0026 Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:6","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Postgres 13 PostgreSQL Interview Q\u0026A Frequently Asked Basic PostgreSQL Interview Questions and Answers PostgreSQL Interview Preparation Guide PostgreSQL Interview Q\u0026A from CoolInterview.com ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:7","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"SQL 10 Frequently asked SQL Query Interview Questions 45 Essential SQL Interview Questions from Toptal Common Interview Questions and Answers General Interview Questions and Answers Schema, Questions \u0026 Solutions for SQL Exercising SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL SQL Interview Questions CHEAT SHEET ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:8","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"SQLite Top 20 SQLITE Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:2:9","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Caching technologies ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:3:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Memcached Memcached Interview Questions from Javapoint Memcached Interview Questions from Wisdomjobs ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:3:1","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Redis Redis Interview Questions from Javapoint Redis Interview Questions from Wisdomjobs Redis Interview Questions from Career Guru ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:3:2","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"OS ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:4:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Linux 10 Job Interview Questions for Linux System Administrators from Linux.com 10 Useful Random Linux Interview Questions and Answers 11 Basic Linux Interview Questions and Answers 11 Essential Linux Interview Questions from Toptal Top 30 Linux System Admin Interview Questions \u0026 Answers Top 50 Linux Interview Questions from Career Guru 278 Test Questions and Answers for *nix System Administrators Linux Interview Questions - Quick Refresher ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:4:1","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Windows Top 10 Interview Questions for Windows Administrators Top 22 Windows Server Interview Questions from Career Guru Windows Admin Interview Questions \u0026 Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:4:2","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"DevOps Linux System Administrator/DevOps Interview Questions Top DevOps Interview Questions You Must Prepare In 2021 Top 60+ DevOps Interview Questions \u0026 Answers in 2021 DevOps Interview Questions \u0026 Answers ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:5:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Algorithms Comprehensive list of interview questions of top tech companies A great list of Java interview questions Algorithms playground for common interview questions written in Ruby EKAlgorithms contains some well known CS algorithms \u0026 data structures Top 10 Algorithms for Coding Interview Top 15 Data Structures and Algorithm Interview Questions for Java programmer Tech Interview Handbook Best Practice Questions Daily Coding Interview Practice ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:6:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Blockchain Top 55 Blockchain Interview Questions You Must Prepare In 2018 Blockchain Interview Questions Top Blockchain Interview Questions Blockchain Developer Interview Questions and Answers 10 Essential Blockchain Interview Questions Top 30 Blockchain Interview Questions – For Freshers to Experienced Most Frequently Asked Blockchain Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:7:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Coding exercises Common interview questions and puzzles solved in several languages Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions Interview questions solved in python 7 Swift Coding Challenges to Practice Your Skills ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:8:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Comprehensive lists A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore Front End Developer Interview Questions Front End Interview Handbook Some simple questions to interview potential backend candidates ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:9:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Design Patterns Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern Design Patterns for Humans™ - An ultra-simplified explanation Design Patterns implemented in Java Design Patterns implemented in DotNet ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:10:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Data structures Top 15 Data Structures and Algorithm Interview Questions for Java programmer Top 50 Data Structure Interview Questions from Career Guru What is Data Structure? | Top 40 Data Structure Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:11:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Networks Top 100 Networking Interview Questions \u0026 Answers from Career Guru Networking Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:12:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Security 101 IT Security Interview Questions How to prepare for an information security job interview? Information Security Interview Questions from Daniel Miessler Top 50 Information Security Interview Questions for freshers and experts ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:13:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["coding-interview","interview-questions"],"content":"Data Science Data Science Interview Questions for Top Tech Companies 66 Job Interview Questions for Data Scientists Top 45 Data Science Interview Questions You Must Prepare In 2021 Top 30 data science interview questions Top 100 Data science interview questions Data Science Interview Questions 160+ Data Science Interview Questions Top Data Science Interview Questions ","date":"2022-10-16","objectID":"/list-of-technical-interview-questions/:14:0","tags":["coding","computer-science","android","angularjs","angular","backbonejs","cpp","c","dotnet","clojure","css","django","elastic","emberjs","erlang","golang","graphql","html","ionic","ios","java","javascript","jquery","front-end","knockoutjs","less","lisp","nodejs","objective-c","php","python","reactjs","rails","ruby","rust","sass","scala","shell","spark","swift","vuejs","wordpress","typescript"],"title":"List of Technical Interview Questions","uri":"/list-of-technical-interview-questions/"},{"categories":["about-me"],"content":"About Me - Samir Paul","date":"2022-10-15","objectID":"/about/","tags":["samirpaul","about-me","samirpaul1","samirpaulb","author"],"title":"About","uri":"/about/"},{"categories":["about-me"],"content":"\rAbout Me: 🎓 I’m currently studying Electronics and Communication Engineering at National Institute of Technology, Durgapur. 💡 Some technologies I enjoy working with include Python, MySQL, Git, HTML, CSS, C, Linux. 🌱 I’m on track for learning more about Data Structures and Algorithm, Software Development, Systems Design. 💻 I am practising on LeetCode, CodeChef, HackerRank and GeeksforGeeks. ✉️ Get in touch with me via email at samirpaulb [at] gmail [dot] com or connect on LinkedIn. Connect With Me: LinkedIn Twitter Languages And Tools: ","date":"2022-10-15","objectID":"/about/:0:0","tags":["samirpaul","about-me","samirpaul1","samirpaulb","author"],"title":"About","uri":"/about/"},{"categories":["leetcode"],"content":"Important Leetcode Solutions Cheatsheet","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Quick Access Links ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:1:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"LeetCode LeetCode - CheatSheet Getting Started Prerequisites Built With Authors Acknowledgments Quick Access Links LeetCode 1-Two Sum Brute Force One Pass Hash Table 2-Add Two Numbers Elementary Math Solution 3-Substring No Repeat Brute Force Sliding Window Sliding Window Optimized 4-Median of Two Sorted Arrays Recursive Approach 5-Longest Palindromic Substring Longest Common Substring Brute Force Dynamic Programming Expand Around Center Manacher’s Algorithm 6-ZigZag Conversion Sort by Row Visit by Row 7-Reverse Integer Pop and Push Digits and Check Before Overflow 8-String to Integer (atoi) ASCII Conversion 9-Palindrome Number Revert Half of the Number 10-Regular Expression Matching Recursion Dynamic Programming Non-Recursive 11-Container with the Most Water Brute Force Two Pointer Approach 12-Integer To Roman String Array 13-Roman to Integer Character Array 14-Longest Common Prefix Horizontal Scanning Vertical Scanning Divide and Conquer Binary Search Further Thoughts 15-3Sum Sorted Array 16-3Sum Closest 3 Pointers 17-Letter Combinations of a Phone Number Backtracking First In First Out (FIFO) Queue 18-4Sum Sorted Array 19-Remove Nth Node From End of List Two Pass Algorithm One Pass Algorithm 20-Valid Parentheses Counting method Stacks 21-Merge Two Sorted Lists Recursive Non-Recursive 22-Generate Parentheses Brute Force Backtracking Closure Number 23-Merge k Sorted Lists Brute Force 146-LRU Cache 1-Two Sum Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:1:1","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force public int[] twoSum(int[] nums, int target) { for (int i=0; i\u003cnums.size; i++){ for (int j=i+1;j\u003cnums.length;j++){ if (nums[j]==target-nums[i]){ return new int[] {i,j}; } } } throw new IllegalArgumentException(\"No two sum solution\"); } Complexity Analysis * Time complexity: O(n^2) we have a nested loop * Space complexity: O(1) we do not allocate any additional memory ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:2:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"One Pass Hash Table public int[] twoSum(int[] nums, int target) { Map\u003cInteger, Integer\u003e map = new HashMap\u003c\u003e(); for(int i=0; i\u003cnums.length; i++){ int complement=target-nums[i]; if (map.containsKey(complement)){ return new int[] {map.get(complement),i}; } map.put(nums[i],i); } throw new IllegalArgumentException(\"No two sum solution\"); } Complexity Analysis * Time complexity: O(n) each lookup in the hash table only requires O(1) time * Space complexity: O(n) we require additional space for the hash table which stores at most n 2-Add Two Numbers Given two non-empty linked lists representing two non-negative integers with the digits stored in reverse order and each node containing a single digit, add the two numbers and return as a linked list Example: Input (2 -\u003e 4 -\u003e 3) + (5 -\u003e 6 -\u003e 4) Output 7 -\u003e 0 -\u003e 8 342 + 465 = 807 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:3:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Elementary Math Solution /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode dummyHead= new ListNode(0); ListNode p=l1, q=l2, curr=dummyHead; int carry=0; while (p!=null||q!=null){ int x= (p!=null) ? p.val :0; //if (p!=null) then x contains p.val int y= (q!=null) ? q.val :0; int sum=carry+x+y; carry=sum/10; curr.next=new ListNode(sum%10); curr=curr.next; if (p!=null) p=p.next; if (q!=null) q=q.next; } if (carry\u003e0){ curr.next= new ListNode(carry); } return dummyHead.next; } } Complexity analysis * Time Complexity: O(max(m,n)) depends on the lengths of the two linked lists * Space Complexity: O(max(m,n)) the maximum length of the new list is max(m,n)+1 3-Substring No Repeat Longest Substring Without Repeating Characters Given a string find the length of the longest substring without repeating characters. Example Input: \"abcabcbb\" Output: 3 Explanation: The answer is \"abc\", with the length of 3 Example 2 Input: \"bbbbb\" Output: 1 Explanation: The answer is \"b\", with the length of 1 Example 3 Input: \"pwwkew\" Output: 3 Explanation: The answer is \"wke\", with the length of 3. Note that the answer must be a substring \"pwke\" is a subsequence and not a substring ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:4:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force Algorithm Suppose we have a function “boolean allUnique(String substring)” which returns true if all the characters in the substring are unique and false otherwise. We can iterate through all the possible substrings of the given string s and call the function allUnique. If it turns out to be true, then we update our answer of the maximum length of substring without duplicate characters. To enumerate all substrings of a given string we enumerate the start and end indices of them. Suppose the start and end indices are i and j respectively. Then we have 0 \u003c= i \u003c= j \u003c= n. Thus using two nested loops with i from 0 to n-1 and j from i+1 to n, we can enumerate all the substrings of s To check if one string has duplicate characters we can use a set. We iterate through all the characters in the string and put them into the set one by one. Before putting one character, we check if the set already contains it. If so we return false and after the loop we return true. public class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); int ans = 0; for (int i = 0; i \u003c n; i++) for (int j = i + 1; j \u003c= n; j++) if (allUnique(s, i, j)) ans = Math.max(ans, j - i); return ans; } public boolean allUnique(String s, int start, int end) { Set\u003cCharacter\u003e set = new HashSet\u003c\u003e(); for (int i = start; i \u003c end; i++) { Character ch = s.charAt(i); if (set.contains(ch)) return false; set.add(ch); } return true; } } Complexity Analysis * Time Complexity: O(n^3) Verifying if characters in [i,j) are unique requires us to scan all of them which would cost O(j-i) time. For a given i, the sum of time costed by each j -\u003e [i+1,n] is \"Summation from i+1 to n O(j-1)\" Thus, the sum of all the time consumption is: O(summation from 0 to n-1(summation from j=i+1 to n (j-1))) O(summation from i=0 to n-1(1+n-i)(n-i)/2)) = O(n^3) *Note that the sum of all numbers up to n 1+2+3+...+n = n(n+1)/2 * Space Complexity: O(min(n,m)) We require O(k) space for checking a substring has no duplicate characters, where k is the size of the set. The size of the Set is upper bounded by the size of the string n amd the size of the charset or alphabet m ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:5:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sliding Window A sliding window is an abstract concept commonly used in array/string problems. A window is a range of elements in the array/string which usually defined by the start and end indices Ex. [i,j) left-closed, right-open A sliding window is a window that slides its two boundaries in a certain direction, for example if we slide [i,j) to the right by 1 element, then it becomes [i+1, j+1) - left closed, right open. Sliding Window approach, whenever we are looking at a section on an array usual to perform calculations we don’t need to completely recalculate everything for every section of the array. Usually we can use the value obtained from another section of the array to determine something about this section of the array. For example if we are calculating the sum of sections of an array we can use the previously calculated value of a section to determine the sum of an adjacent section in the array. Ex. 1 2 3 4 5 6 7 8 If we calculate the first section of four values we get 1+2+3+4 = 10 , then to calculate the next section 2+3+4+5 we can just take our first section (window_sum) and perform the operation: window_sum-first entry + last entry = 10-1+5= 14 So essentially for the window sliding technique we use what we know about an existing window to determine properties for another window. Algorithm In the brute force approach, we repeatedly check a substring to see if it has duplicate characters but this is unnecessary. If a substring from index i to j-1 is already checked to have no duplicate characters we only need to check if s[j] is already in the substring. To check if a character is already in the substring we can scan the substring which leads to an O(n^2) algorithm but we can improve on this runtime using a HashSet as a sliding window to check if a character exists in the current set O(1). We use a HashSet to store the characters in the current window [i,j) and then we slide the index j to the right, if it is not in the HashSet, we slide j further until s[j] is already in the HashSet. At this point we found the maximum size of substrings without duplicate characters starting with index i. If we do this for all i, then we obtain our answer. public class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); Set\u003cCharacter\u003e set = new HashSet\u003c\u003e(); int ans = 0, i = 0, j = 0; while (i \u003c n \u0026\u0026 j \u003c n) { // try to extend the range [i, j] if (!set.contains(s.charAt(j))){ set.add(s.charAt(j++)); ans = Math.max(ans, j - i); } else { set.remove(s.charAt(i++)); } } return ans; } } Complexity Analysis Time complexity: O(2n)=O(n) Worst case each character will be visited twice by i and j Space complexity: O(min(m,n)) Same as the brute force method, we need O(k) space for the sliding window where k is the size of the set. The size of the set is bounded by the size of the string n and the size of the charset/alphabet m ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:6:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sliding Window Optimized The previously discussed sliding window approach requires at most 2n steps and this could in fact be optimized even further to require only n steps. Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. Then we can skip the characters immediately when we found a repeated character If s[j] has a duplicate in the range [i , j) with index j’, we don’t need to increase i little be little we can just skip all the elements in the range [i , j’] and let i be j’+1 directly public class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(), ans = 0; Map\u003cCharacter, Integer\u003e map = new HashMap\u003c\u003e(); // current index of character // try to extend the range [i, j] for (int j = 0, i = 0; j \u003c n; j++) { if (map.containsKey(s.charAt(j))) { i = Math.max(map.get(s.charAt(j)), i); } ans = Math.max(ans, j - i + 1); map.put(s.charAt(j), j + 1); } return ans; } } 4-Median of Two Sorted Arrays There are two sorted arrays num1 and num2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty. Example nums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2 nums1= [1, 2] nums2= [3, 4] The median is (2+3)/2 = 2.5 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:7:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Recursive Approach In statistics the median is used for dividing a set into two equal length subsets with one set being always greater than the other set. To approach this problem first we cut A into two parts at a random position i: left_A | right_A A[0], A[1], ... , A[i-1] A[i], A[i+1], ... , A[m-1] Since A has m elements, there are m+1 kinds of cutting as i can range from 0-m. We can also see that left_A is empty when i is zero and right_A is empty when i=m len(left_A) = i and len(right_A)= m-i We can similarly cut B into two parts at a random position j: left_B | right_B B[0], B[1], ... , B[j-1] B[j], B[j+1], ... , B[n-1] Now if we put left_A and left_B into one set and put right_A and right_B into another set and name them left_part and right_part, then we get left_part | right_part A[0], A[1], ... , A[i-1] A[i], A[i+1], ... , A[m-1] B[0], B[1], ... , B[j-1] B[j], B[j+1], ... , B[n-1] If we can ensure that the len(left_part) = len(right_part) max(left_part) \u003c= min(right_part) then we divide all the elements in {A,B} into two parts with equal length and one part is always greater than the other. Then median= (max(left_part)+min(right_part))/2 To ensure these two conditions, we need to ensure: i+j= m-i+n-j (or: m-i+n-j+1) if n\u003em, we just need to set i=0~m, j= (m+n+1)/2 - i B[j-1]\u003c=A[i] and A[i-1]\u003c=B[j] So, all we need to do is search for i in [0,m] to find an object i such that B[j-1]\u003c=A[i] and A[i-1]\u003c=B[j] where j=(m+n+1)/2 -i Then we perform a binary search following the steps described below: Set imin=0, imax=0, then start searching in [imin, imax] Set i=(imin+imax)/2 , j=(m+n+1)/2 - i Now we have len(left_part) = len(right_part) and there are only 3 more situations which we may encounter: - B[j-1] \u003c= A[i] and A[i-1]\u003c=B[j] This means that we have found the object i, so we can stop searching - B[j-1] \u003e A[i] Means A[i] is too small, we must adjust i to get B[j-1]\u003c=A[i] so we increase i because this will cuase j to be decreased. We cannot decrease i because when i is decreased, j will be increased so B[j-1] is increased and A[i] is decreased (B[j-1]\u003c= A[i] will never be satisfied) - A[i-1] \u003e B[j] Means A[i-1] is too big and thus we must decrease i to get A[i-1]\u003c=B[j]. In order to do that we must adjust the searching range to [imin, i-1] so we set imax=i-1 and go back to step 2 When the object i is found, then the media is: max(A[i-1],B[j-1]), when m+n is odd (max(A[i-1],B[j-1])+min(A[i],B[j]))/2, when m+n is even Next is to consider the edge values i=0, i=m, j=0, j=n where A[i-1], B[j-1], A[i], B[j] may not exist class Solution { public double findMedianSortedArrays(int[] A, int[] B) { int m=A.length; int n=B.length; if (m\u003en) { //ensuring that m\u003c=n int[] temp=A; A=B; B=temp; int tmp=m; m=n; n=tmp; } int iMin=0, iMax=m, halfLen=(m+n+1)/2; while (iMin\u003c=iMax) { int i=(iMin+iMax)/2 int j= halfLen - i; if (i\u003ciMax \u0026\u0026 B[j-1] \u003e A[i]){ iMin=i+1; //i is too small } else if (i\u003eiMin \u0026\u0026 A[i-1]\u003eB[j]) { iMax=i-1; //i is too big } else{ //we have found the object i int maxLeft=0; if (i==0) { maxLeft=B[j-1]; } else if (j==0){ maxLeft=A[i-1]; } else{ maxLeft=Math.max(A[i-1], B[j-1]); } if ((m+n)%2 ==1) { return maxLeft; } int minRIght=0; if (i==m) { minRight=B[j]; } else if (j==n) { minRight=A[i]; } else { minRight=Math.min(B[j], A[i]); } return (maxLeft+minRight)/2.0; } } return 0.0; } } Complexity Analysis Time Complexity: O(log(min(m,n))) At first the searching range is [0,m] and the length of this searching range will be reduced by half after each loop so we only need log(m) loops. Since we do constant operations in each loop the time complexity is O(log(m) and since m\u003c=n the time complexity is O(log(min(m,n)) Space Complexity: O(1) We only need constant memory to store 9 local variables so the space complexity is O(1) 5-Longest Palindromic Substring Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. Example 1: Input: \"babad\" Output: \"bab\" Note: \"aba\" is also a valid answer","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:8:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Longest Common Substring Some people will be tempted to come up with this quick solution which is unforunately flawed, “reverse S and become S’. Find the longest common substring between S and S’ and that will be the longest palindromic substring.” This will work with some examples but there are some cases where the longest common substring is not a valid palindrome. Ex. S=\"abacdfgdcaba\", S'=\"abacdgfdcaba\" The longest common substring between S and S' is \"abacd\" and clearly this is not a valid palindrome\rWe can solve this problem however by checking if the substring’s indices are the same as the reversed substring’s original indices each time we find a longest common substring. If it is, then we attempt to update the longest palindrome found so far, if not we skip this and find the next candidate Complexity Analysis Time Complexity: O(n^2) Space Complexity: O(n^2) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:9:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force The obvious brute force solution is to pick all possible starting and ending position for a substring and verify if it is a palindrome Complexity Analysis Time Complexity: O(n^3) If n is the length of the input string, there are a total of (n 2) = n(n-1)/2 substrings and since verifying each substring takes O(n) time, the run time complexity is O(n^3) Space Complexity: O(1) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:10:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Dynamic Programming We can improve on the brute force solution by avoid some unnecessary re-computation while validating palidromes. Consider the word “ababa”, if we already know that “bab” is a palindrome then we can determine that ababa is a palindrome by noticing that the two left and right letters connected to bab are the same. This yields a straight forward dynamic programming solution where we initialize the one and two letters palindromes and then work our way up finding all three letters palindromes and so on. Complexity Analysis Time Complexity: O(n^2) Space Complexity: O(n^2) Using O(n^2) space to store the table ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:11:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Expand Around Center This approach allows us to solve this problem in O(n^2) time using only constant space complexity. We observe that a palindrome mirrors around its enter and therefore a palindrome can be expanded from its center and there are only 2n-1 such centers (for palindromes with an even number of letters like “abba” its center is in between two letters). public String longestPalindrome(String s) { if (s==null || s.length() \u003c 1) return \"\"; //edge case int start=0, end=0; for (int i=0; i\u003cs.length(); i++) { int len1=expandAroundCenter(s,i,i); int len2=expandAroundCenter(s,i,i+1); int len=Math.max(len1,len2); if (len\u003eend-start) { start= i-(len-1)/2; end=i+len/2 } } return s.substring(start,end+1); } private int expandAroundCenter(String s, int left, int right) { int L=left, R=right; while(L\u003e=0 \u0026\u0026 R\u003cs.length() \u0026\u0026 s.charAt(L)==s.charAt(R)) { L--; R++; } return R-L-1; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:12:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Manacher’s Algorithm There is an O(n) algorithm called Manacher’s algorithm, however, it is a non-trivial algorithm and no one would expect you to come up with this algorithm in a 45 minute coding session 6-ZigZag Conversion The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: P A H N A P L S I I G Y I R And then read line by line: “PAHNAPLSIIGYIR”. Write a code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows); Example 1: Input: s=\"PAYPALISHIRING\", numRows=3 Output: \"PAHNAPLSIIGYIR\" Example 2: Input: s=\"PAYPALISHIRING\", numRows=4 Output: \"PINALSIGYAHRPI\" Explanation: P I N A L S I G Y A H R P I ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:13:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sort by Row By iterating through the string from left to right we can easily determine which row in the Zig-Zag pattern that a character belongs to Algorithm We can use min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern. Iterate through s from left to right appending each character to the appropriate row. The appropriate row can be tracked using two variables: the current row and the current direction. The current direction only changes when we moved to the topmost row or moved down to the bottommost row class Solution { public String convert(String s, int numRows) { if (numRows==1) return s; //if there is only one row return string List\u003cStringBuilder\u003e rows=new ArrayList\u003c\u003e(); for (int i=0; i\u003cMath.min(numRows, s.length()); i++){ rows.add(new StringBuilder()); } int curRow=0; boolean goingDown=false; for(char c: s.toCharArray()) { rows.get(curRow).append(c); if (curRow==0 || curRow==numRows-1) { goingDown=!goingDown; } curRow+=goingDown ? 1 : -1; } StringBuilder ret= new StringBuilder(); for(StringBuilder row:rows) { ret.append(row); } return ret.toString(); } } Complexity Analysis Time Complexity: O(n) where n==len(s) Space Complexity: O(n) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:14:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Visit by Row Visit the characters in the same order as reading the Zig-Zag pattern line by line Algorithm Visit all characters in row 0 first, then row 1, then row 2, and so on. For all whole numbers k, * characters in row 0 are located at indexes k*(2*numRows-2) * characters in row numRows -1 are located at indexes k*(2*numRows-2)+ numRows -1 * characters in inner row i are located at indexes k*(2*numRows-2)+i and (k+1)(2*numRows-2)-i class Solution { public String convert(String s, int numRows) { if (numRows==1) return s; StringBuilder ret=new StringBuilder(); int n=s.length(); int cycleLen= 2* numRows -2; for (int i=0; i\u003cnumRows; i++) { for (int j=0; j+1\u003cn; j+= cycleLen) { ret.append(s.charAt(j+i)); if (i!=0 \u0026\u0026 i!=numROws-1 \u0026\u0026 j+cycleLen-i\u003cn) { ret.append(s.charAt(j+cycleLen-i)); } } return ret.toString(); } } } Complexity Analysis Time Complexity: O(n) where n==len(s) Each index is visited once Space Complexity: O(n) C++ implementation can achieve O(1) if the return string is not considered extra space 7-Reverse Integer Given a 32- bit signed integer, reverse digits of an integer. Example 1: Input: 123 Output: 321 Example 2: Input: -123 Output: -321 Example 3: Input: 120 Output: 21 For the purpose of this problem assume that your function returns 0 when the reversed integer overflows ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:15:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Pop and Push Digits and Check Before Overflow We can build up the reverse integer one digit at and time and before doing so we can check whether or not appedning another digit would cause overflow Algorithm Reversing an integer can be done similarly to reversing a string. We want to repeatedly “pop” the last digit off of x and push it to the back of the rev so that in the end rev is the reverse of x. To push and pop digits without the help of some auxiliar stack/array we can use math //pop operation: pop = x%10; x/=10; //push operation: temp=rev*10+pop; rev =temp; This statement is dangerous however as the statement temp=rev*10+pop may cause an overflow and luckily it is easy to check beforehand whether or not this statement would cause an overflow. If temp=rev*10+pop causes an overflow, then rev\u003e=INTMAX/10 If rev\u003e INTMAX/10, then temp=rev*10+pop is guaranteed to overflow if rev==INTMAX/10, then temp=rev*10 + pop will overflow if an only if pop\u003e7 class Solution { public int reverse(int x) { int rev=0; while (x!=0) { int pop=x%10; x/=10; if (rev\u003eInteger.MAX_VALUE/10||(rev==Integer.MAX_VALUE/10 \u0026\u0026 pop\u003e7)) return 0; if (rev\u003cInteger.MIN_VALUE/10||(rev==Integer.MIN_VALUE/10 \u0026\u0026 pop\u003c-8)) return 0; rev=rev*10 +pop; } return rev; } } Complexity Analysis Time Complexity: O(log(x)) There are roughly log10(x) digits in x Space Complexity: O(1) 8-String to Integer (atoi) Implement atoi which converts a string to an integer The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible and interprets them as a numerical value. The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function. If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exits because either str is empty or it contains only whitespace characters, no conversion is performed. If no valid conversion could be performed a zero value is returned Note: only the space character ’ ’ is considered as whitespace character assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31, 2^31-1]. If the numerical value is out of the range of representable values, INT_MAX (2^31-1) or INT_MIN (-2^31) is returned Example 1: Input: \"42\" Output: 42 Example 2: Input: \" -42\" Output: -42 Example 3: Input: \"4193 with words \" Output: 4193 Example 4: Input: \"words and 987\" Output: 0 Example 5: Input: \"-91283472332\" Output: -2147483648 //out of the range of a 32-bit signed integer so INT_MIN is returned ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:16:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"ASCII Conversion Recognize that ASCII characters are actually numbers and 0-9 digits are numbers starting from decimal 48 (0x30 hexadecimal) '0' is 48 '1' is 49 ... '9' is 57 So to get the value of any character digit you can just remove the ‘0’ '1' - '0' =\u003e 1 49 - 48 =\u003e 1 public int myAtoi(String str) { int index=0, sign=1, total=0; //1. Empty string if (str.length() ==0) return 0; //2. Remove Spaces while(str.charAt(index)==' ' \u0026\u0026 index \u003c str.length()) index++; //3. Handle signs if (str.charAt(index)=='+' || str.charAt(index)=='-'){ sign= str.charAt(index) == '+' ? 1:-1; index++; } //4. COnvert number and avoid overflow while(index\u003cstr.length()){ int digit= str.charAt(index) - '0'; if (digit\u003c0||digit\u003e9) break; //check if total will overflow after 10 times and add digit if (Integer.MAX_VALUE/10 \u003c total || Integer.MAX_VALUE/10 == total \u0026\u0026 Integer.MAX_VALUE%10\u003cdigit) { return sign==1 ? Integer.MAX_VALUE : Integer.MIN_VALUE; } total= 10* total+digit; index++; } return total*sign; } 9-Palindrome Number Determines whether an interger is a palindrome. An integer is a palindrome when it reads the same backward as forward. Example 1: Input: 121 Output: true Example 2: Input: -121 Output: false Explanation: From left to right, it reads -121, meanwhile from right to left it becomes 121- . Therefore it is not a palindrome Example 3: Input: 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:17:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Revert Half of the Number A first idea which may come to mind is to convert the number into a string and check if the string is a palindrome but this would require extra non-constant space for creating the string not allowed by the problem description Second idea would be reverting the number itself and comparing the number with the original number, if they are the same then the number is a palindrome, however if the reversed number is larger than int.MAX we will hit integer overflow problem. To avoid the overflow issue of the reverted number, what if we only revert half of the int number? The reverse of the last half of the palindrome should be the same as the first half of the number if the number is a palindrome. If the input is 1221, if we can revert the last part of the number “1221” from “21” to “12” and compare it with the first half of the number “12”, since 12 is the same as 12, we know that the number is a palindrome. Algorithm At the very beginning we can deal with some edge cases. All negative numbers are not palindrome and numbers ending in zero can only be a palindrome if the first digit is also 0 (only 0 satisfies this property) Now let’s think about how to revert the last half of the number. For the number 1221 if we do 1221%10 we get the last digit 1. To get the second last digit we divide the number by 10 1221/10=122 and then we can get the last digit again by doing a modulus by 10, 122%10=2. If we multiply the last digit by 10 and add the second last digit 1*10+2=12 which gives us the reverted number we want. COntinuing this process would give us the reverted number with more digits. Next is how do we know that we’ve reached the half of the number? Since we divided the number by 10 and multiplied the reversed number by 10 when the original number is less than the reversed number, it means we’ve gone through half of the number digits. class Solution { public boolean isPalindrome(int x) { if (x\u003c0 || (x%10==0 \u0026\u0026 x!=0)) { return false; } int revertedNumber=0; while (x\u003erevertedNumber){ revertedNumber=x%10+revertedNumber*10; x/=10; } //when the length is an odd number, we can get rid of the middle digit by //revertedNumber/10 //For example when the input is 12321, at the end of the while loop we get x=12, //revertedNumber=123, since the middle digit doesn't matter in a palindrome we can //simply get rid of it return x==revertedNumber||x==revertedNumber/10; } } 10-Regular Expression Matching Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*’ '.' Matches any single character '*' Matches zero or more of the preceding element The matching should cover the entire input string (not partial) Note: s could be empty and contains only lower case letters a-z p could be empty and contains only lower case letters a-z and characters like . or * Example 1: Input: s=\"aa\" p=\"a\" Output: false Explanation: \"a\" does not match the entire string \"aa\" Example 2: Input: s=\"aa\" p=\"a*\" Output: true Explanation: '*' means zero of more of the preceding element, 'a'. Therefore, by repeating 'a' once it becomes \"aa\" Example 3: Input: s=\"ab\" p=\".*\" Output: true Explanation: '.*' means \"zero or more (*) of any character (.)\" Example 4: Input: s=\"aab\" p=\"c*a*b\" Output: true Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches \"aab\" Example 5: Input: s=\"mississippi\" p=\"mis*is*p*.\" Output: false ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:18:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Recursion If there were no Kleene stars (the * wildcard characters for regular expressions), the problem would be easier- we simply check from left to right if each character of the text matches the pattern. When a star is present we may need to check for may different suffixes of the text and see if they match the rest of the pattern. A recursive solution is a straightforward way to represent this relationship class Solution { public boolean isMatch(String text, String pattern) { if (pattern.isEmpty()) return text.isEmpty(); boolean first_match=(!text.isEmpty() \u0026\u0026 (pattern.charAt(0)==text.charAt(0) || pattern.charAt(0)=='.')); if (pattern.length()\u003e=2 \u0026\u0026 pattern.charAt(1) =='*'){ return (isMatch(text,pattern.substring(2))|| (first_match \u0026\u0026 isMatch(text.substring(1),pattern))); //note: pattern.substring(2) returns all of the characters after index 2 of pattern } else { return first_match \u0026\u0026 isMatch(text.substring(1), pattern.substring(1)); } } } Complexity Analysis Time Complexity: Let T, P be the lengths of the text and the pattern respectively. In the worst case, a call to match(text[i:],pattern[2j:]) will be made (i+j i) times, and strings of the order O(T-i) and O(P-2*j) will be made. Thus the complexity has the order: summation from i=0 to T * summation from j=0 to P/2 * (i+j i) O(T+P-i-2j). We can show that this is bounded by O((T+P)2^(T+P/2)) Space Complexity: For every call to match, we will create those strings as described above possibly creating duplicates. If memory is not freed, this will also take a total of O((T+P)2^(T+P/2)) space even though there are only order O(T^2+P^2) unique suffixes of P and T that are actually required ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:19:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Dynamic Programming As the problem has an optimal substructure, it is natural to cache intermediate results. We ask the question dp(i,j): does text[i:] and pattern[j:] match? We can describe our answer in terms of answers to questions involving smaller strings Algorithm We proceed with the same recursion as in Approach 1, except because calls will only ever be made to match(text[i:], pattern[j:]), we use dp(i,j) to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results Java Top-Down Variation enum Result { TRUE, FALSE } class Solution { Result[][] memo; public boolean isMatch(String text, String pattern) { memo=new Result[text.length() +1][pattern.length() +1]; return dp(0,0,text,pattern); } public boolean dp(int i, int j, String text, String pattern) { if (memo[i][j]!=null) { return memo[i][j]==Result.TRUE; } boolean ans; if (j==pattern.length()){ ans=i==text.length(); } else { boolean first_match=(i\u003ctext.length() \u0026\u0026 (pattern.charAt(j) == text.charAt(i) || patter.charAt(j) == '.')); if (j+1\u003cpattern.length() \u0026\u0026 pattern.charAt(j+1)=='*'){ ans=(dp(i,j+1,text,pattern)||first_match\u0026\u0026 dp(i+1,j,text,pattern)); } else { ans=first_match \u0026\u0026 dp(i+1, j+1, text, pattern); } } memo[i][j]=ans? Result.TRUE: Result.FALSE; return ans; } } Complexity Analysis Time Complexity: Let T, P be the lengths of the text and the pattern respectively. The work for every call to dp(i,j) for i=0,...,T; j=0,...,P is done once and it is O(1) work. Hence the time complexity is O(TP) Space Complexity: The only memory we use is the O(TP) boolean entries in our cache. Hence, the space complexity is O(TP) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:20:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Non-Recursive The recursive programming solutions are pretty confusing so this implementation uses 2D arrays and Dynamic Programming The logic works as follows: 1. If p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]; 2. If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1]; 3. If p.charAt(j) == '*': Subconditions 1. If p.charAt(j-1)!= s.charAt(i):dp[i][j]=dp[i][j-2] //in this case a* only counts as empty 2. If p.charAt(i-1)== s.charAt(i) or p.charAt(i-1) == '.': dp[i][j] = dp[i-1][j] //in this case a* counts as multiple a or dp[i][j] = dp[i][j-1] //in this case a* counts as single a or dp[i][j] = dp[i][j-2] //in this case a* counts as empty public boolean isMatch(String s, String p) { if (s==null || p==null){ return false; } boolean[][] dp=new boolean[s.length()+1][p.length()+1]; dp[0][0]=true; for (int i=0;i\u003cp.length(); i++){ if (p.charAt(i)=='*' \u0026\u0026 dp[0][i-1]){ dp[0][i+1]=true; } } for (int i=0;i\u003cs.length();i++){ for (int j=0;j\u003cp.length();j++){ if (p.charAt(j)=='.'){ dp[i+1][j+1]=dp[i][j]; } if (p.charAt(j)==s.charAt(i)){ dp[i+1][j+1]=dp[i][j]; } if (p.charAt(j)=='*'){ if (p.charAt(j-1)!=s.charAt(i) \u0026\u0026 p.charAt(j-1) !='.'){ dp[i+1][j+1]=dp[i+1][j-1]; } else{ dp[i+1][j+1]=(dp[i+1][j] || dp[i][j+1] || dp[i+1][j-1]); } } } } return dp[s.length()][p.length()]; } 11-Container with the Most Water Given n non negative integers a1,a2, … , an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forns a container such that the container contains the most water. ^ ^ These two values form the container which could hold water at a max height of 7, these values are also 7 array indexes apart from each other so it could hold water at a max width of 7. The area of water which could be held is thus 7 x 7 = 49 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:21:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force In this case we simply consider the area for every possible pair of the lines and find out the maximum area out of those. public class Solution { public int maxArea(int[] height) { int maxarea=0; for (int i=0; i\u003cheight.length; i++){ for (int j=i+1;j\u003cheight.length;j++){ maxarea=Math.max(maxarea, Math.min(height[i],height[j])*(j-i)); } } return maxarea; } } Complexity Analysis Time complexity: O(n^2) Calculating the area for all n(n-1)/2 height pairs Space complexity: O(1) Constant extra space is used ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:22:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Two Pointer Approach The intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained. We take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Further, we maintain a variable maxarea to store the maximum area obtained till now. At every step, we find out the area formed between them, update maxarea and move the pointer pointing to the shorter line towards the other end by one step. Initially we consider the area constituting the exterior most lines. Now to maximize the area we need to consider the area between the lines of larger lengths. If we try to move the pointer at the longer line inwards, we won’t gain any increase in area, since it is limited by the shorter line. But moving the shorter line’s pointer could turn out to be benefical, as per the same argument, despite the reduction in width. This is done since a relatively longer line obtained by moving the shorter line’s pointer might overcome the reduction in area caused by the width reduction. public class Solution { public int maxArea(int[] height) { int maxarea=0, l=0, r=height.length-1; while (l\u003cr){ maxarea=Math.max(maxarea,Math.min(height[l],height[r])*(r-l)); if (height[l]\u003cheight[r]){ l++; } else{ r--; } } return maxarea; } } Complexity Analysis Time complexity: O(n) Single pass Space complexity: O(1) Constant space is used 12-Integer To Roman Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9 X can be placed before L (50) and C(100) to make 40 and 90 C can be placed before D (500) and M(1000) to make 400 and 900 Given an integer, convert it to a roman numeral, input is guaranteed to be within the range from 1 to 3999 Example 1: Input: 3 Output: \"III\" Example 2: Input: 4 Output: \"IV\" Example 3: Input: 9 Output: \"IX\" Example 4: Input: 58 Output: \"LVIII\" Explanation: L=50, V=5, III=3 Example 5: Input: 1994 Output: \"MCMXCIV\" Explanation: M=1000, CM=900, XC=90 and IV=4 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:23:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"String Array public static String intToRoman(int num) { String M[]={\"\", \"M\", \"MM\", \"MMM\"}; //represents 1000, 2000, and 3000 since we know the number is in the range 1 to 3999 String C[]={\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}; //represents 0, 100, 200, 300, 400, 500, 600, 700, 800, 900 String X[]={\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}; //represents 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 String I[]={\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}; //represents 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10]; } 13-Roman to Integer Roman numerals are represented by seven different symbols I, V, X, L, C, D and M Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9 X can be placed before L (50) and C(100) to make 40 and 90 C can be placed before D (500) and M(1000) to make 400 and 900 Given an integer, convert it to a roman numeral, Input is guaranteed to be within the range from 1 to 3999 Example 1: Input: \"III\" Output: 3 Example 2: Input: \"IV\" Output: 4 Example 3: Input: \"IX\" Output: 9 Example 4: Input: \"LVIII\" Output: 58 Explanation: L=50, V=5, III=3 Example 5: Input: \"MCMXCIV\" Output: 1994 Explanation: M=1000, CM=900, XC=90 and IV=4 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:24:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Character Array class Solution { public int romanToInt(String s) { Map\u003cCharacter, Integer\u003e map = new HashMap(); map.put('I', 1); map.put('V', 5); map.put('X', 10); map.put('L', 50); map.put('C', 100); map.put('D', 500); map.put('M', 1000); char[] sc= s.toCharArray(); int total= map.get(sc[0]); int pre=map.get(sc[0]); for (int i=1; i\u003csc.length; i++) { int curr=map.get(sc[i]); if (curr\u003c=pre) { total= total + curr; } else { total=total+curr -2*pre; } pre=curr; } return total; } } 14-Longest Common Prefix Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\" Example 1: Input: [\"flower\", \"flow\", \"flight\"] Output: \"fl\" Example 2: Input: [\"dog\", \"racecar\", \"car\"] Output: \"\" Explanation: There is no common prefix among the input strings Note: All given inputs are in lowercase letters a-z ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:25:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Horizontal Scanning *Intuition:* For a start we will describe a simple way of find the longest prefix shared by a set of strings LCP(S1 … Sn).We will use the observation that: LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) Algorithm: To employ this idea, the algorithm iterates through the strings [S1 … Sn]. finding at each iteration i the longest common prefix of strings LCP(S1 … Si). When LCP(S1 … Si) is an empty string, the algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 … Sn) Example: {leets, leetcode, leet, leeds} \\ / LCP{1,2} = leets leetcode leet \\ {leets, leetcode, leet, leeds} \\ / LCP{1,3} = leet leet leet \\ {leets, leetcode, leet, leeds} \\ / LCP{1,4} leet leeds lee LCP{1,4} = \"lee\" public String longestCommon Prefix(String[] strs){ if (strs.length==0){ return \"\"; } String prefix=strs[0]; for (int i=1; i\u003cstrs.length; i++) { while (strs[i].indexOf(prefix) != 0) { prefix=prefix.substring(0, prefix.length() -1); if (prefix.isEmpty()) { return \"\"; } } return prefix; } } Complexity Analysis Time complexity: O(S) Where S is the sum of all characters in all strings. In the worse case all n strings are the same. The algorithm compares the string S1 with the other strings [S2 ... Sn]. There are S character comparisons where S is the sum of all characters in the input array Space complexity: O(1) We only used constant extra space ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:26:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Vertical Scanning Imagine a very short string is at the end of the array. The above approach will still do S comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column (same character index of the strings) before moving on to the next column. public String longestCommonPrefix(String[] strs) { if (strs==null || strs.length==) return \"\"; for (int i=0; i\u003cstrs[0].length(); i++){ char c=strs[0].charAt(i); for (int j=1; j\u003cstrs.length; j++) { if (i==strs[j].length() || strs[j].charAt(i)!=c){ return strs[0].substring(0,i); } } } return strs[0]; } Complexity Analysis Time complexity: O(S) Where S is the sum of all characters in all strings. In the worst case there will be n equal strings with length m and the algorithm performs S=n*m character comparisons. Even the worst case is still the same as Approach 1, in the best case there are at most n*minLen comparisons where minLen is the length of the shortest string in the array. Space complexity: O(1) We only used constant extra space ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:27:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Divide and Conquer The idea of the algorithm comes from the associative property of LCP operation. We notice that: LCP(S1 … Sn) = LCP(LCP(S1 … Sk), LCP(Sk+1 … Sn)), where LCP(S1 … Sn) is the longest common prefix in a set of strings [S1 … Sn], 1\u003ck\u003cn Algorithm To apply the previous observation, we use the divide and conquer technique, where we split the LCP(Si … Sj) problem into two subproblems LCP(Si … Smid) and LCP(Smid+1 … Sj), where mid is (i+j)/2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem LCP(Si … Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the LCP(Si … Sj) {leetcode, leet, lee, le} / \\ Divide {leetcode, leet} {lee, le} Conquer | | {leet} {le} \\ / {le} Searching for the longest common prefix (LCP) in dataset {leetcode, leet, lee, le} public String longestCommonPrefix(String[] strs) { if (strs == null || strs.length ==0) return \"\"; return longestCommonPrefix(strs, 0, strs.length-1); } private String longestCommonPrefix(String[] strs, int l, int r) { if (l==r) { return strs[l]; } else { int mid=(l+r)/2; String lcpLeft= longestCommonPrefix(strs,l, mid); String lcpRight= longestCommonPrefix(strs,mid+1;r); return commonPrefix(lcpLeft,lcpRight); } } String commonPrefix(String left, String right) { int min=Math.min(left.length(), right.length()); for (int i=0; i\u003cmin; i++) { if (left.charAt(i) !=right.charAt(i) ){ return left.substring(0, i); } } return left.substring(0, min); } Complexity Analysis In the worst case we have n equal strings with length m Time Complexity: O(S) where S is the number of all characters in the array, S=m*n so time complexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the best case the algorithm performs O(minLen * n) comparisons, where minLen is the shortest string of the array Space Complexity: O(m*log(n)) There is a memory overhead since we sotre recursive call in the execution stack. There are log(n) recursive calls, each store needs m space to store the result so space complexity is O(m*log(n)) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:28:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Search The idea is to apply binary search method to find the string with maximum value L, which is common prefix of all the strings. The algorithm searches the space in the interval (0 … minLen), where minLen is minimum string length and the maximum possible common prefix. Each time search space is divided in two equal parts, one of them is discarded because it is sure that it doesn’t contain the solution. There are two possible cases: S[1…mid] is not a common string. This means that for each j\u003ei, S[1…j] is not a common string and we discard the second half of the search space S [1…mid] is common string. This means that for each i\u003cj, S[1…i] is a common string and we discard the first half of the search space, because we try to find longer common prefix {leets, leetcode, leetc, leeds} | \"leets\" / \\ \"lee\" \"ts\" midpoint \"lee\" in \"leetcode\" : yes \"lee\" in \"leetc\" : yes \"lee\" in \"leeds\" : yes | \"leets\" / \\ \"lee\" \"ts\" | / \\ \"lee\" \"t\" \"s\" midpoint \"leet\" in \"leetcode\" : yes \"leet\" in \"leetc\" : yes \"leet\" in \"leeds\" : no LCP= \"lee\" public String longestCommonPrefix(String[] strs) { if (strs==null || strs.length==0) return \"\"; int minLen=Integer.MAX_VALUE; for (String str: strs) minLen=Math.min(minLen, str.length()); int low=1; int high=min Len; while (low\u003c=high) { int middle=(low+high)/2; if (isCommonPrefix(strs, middle) low=middle+1; else high=middle-1; } return strs[0].substring(0, (low + high)/2); } private boolean isCommonPrefix(String[] strs, int len) { String str1=strs[0].substring(0,len); for (int i=1; i\u003cstrs.length; i++) if (!strs[i].startsWith(str1)) return false; return true; } **Complexity Analysis In the worst case we have n equal strings with length m Time complexity: O(S * log(n)), where S is the sum of all characters in all strings. The algorithm makes log(n) iterations, for each of them there are S=m*n comparisons, which gives in total O(S * log(n)) time complexity Space complexity: O(1). We only used constant extra space ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:29:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Further Thoughts Considering a slightly different problem: Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S. This LCP query will be called frequently We coule optimize LCP queries by storing the set of keys S in a Trie. See this for Trie implementation. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to find the longest common prefix of a string q and all key strings. This means that we have to find the deepest path from the root, which satisfies the following conditions it is a prefix of query string q each node along the path must contain only one child element. Otherwise the found path will not be a common prefix among all strings the path doesn’t comprise of nodes which are marked as end of key. Otherwise the path couldn’t be a prefix of a key which is shorter than itself Algorithm The only question left is how to find the deepest path in the Trie, that fulfills the requirements above. The most effective way is to build a trie from {S1 … Sn] strings. Then find the prefix of query string q in the Trie. We traverse the Trie from the root, till it is impossible to continue the path in the Trie because one of the conditions above is not satisfied. Searching for the longest common prefix of string \"le\" in a Trie from dataset {lead, leet} Root 1 l ===========\u003e \\ l 2 e ===============\u003e \\ e LCP \"le\" FOUND =============\u003e 3 a / \\ e End of Key \"lee\" 6 4 d / \\ t END OF KEY \"lead\" 7 5 End of key \"leet\" public String longestCommonPrefix(String q, String[] strs) { if (strs == null || strs.length == 0) return \"\"; if (strs.length == 1) return strs[0]; Trie trie = new Trie(); for (int i = 1; i \u003c strs.length ; i++) { trie.insert(strs[i]); } return trie.searchLongestPrefix(q); } class TrieNode { // R links to node children private TrieNode[] links; private final int R = 26; private boolean isEnd; // number of children non null links private int size; public void put(char ch, TrieNode node) { links[ch -'a'] = node; size++; } public int getLinks() { return size; } //assume methods containsKey, isEnd, get, put are implemented as it is described //in https://leetcode.com/articles/implement-trie-prefix-tree/) } public class Trie { private TrieNode root; public Trie() { root = new TrieNode(); } //assume methods insert, search, searchPrefix are implemented private String searchLongestPrefix(String word) { TrieNode node = root; StringBuilder prefix = new StringBuilder(); for (int i = 0; i \u003c word.length(); i++) { char curLetter = word.charAt(i); if (node.containsKey(curLetter) \u0026\u0026 (node.getLinks() == 1) \u0026\u0026 (!node.isEnd())) { prefix.append(curLetter); node = node.get(curLetter); } else return prefix.toString(); } return prefix.toString(); } } Complexity Analysis In the worst case query q has length m and is equal to all n strings of the array Time Complexity: O(S) where S is the number of all characters in the array, LCP query O(m) Trie build has O(S) time complexity. To find the common prefix of q in the Trie takes in the worst O(m). Space complexity: O(S) we only used additional S extra space for the Trie. 15-3Sum Given an array “nums” of n integers, are there elements a, b, c in nums such that a+b+c=0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets Example: Given array nums = [-1, 0, 1, 2, -1, -4]. A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:30:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sorted Array The method is to sort an input array and then run through all indices of a possible first element of a triplet. For each element we make another 2Sum sweep of the remaining part of the array. Also we want to skip elements to avoid duplicates in the answer without expending extra memory. public List\u003cList\u003cInteger\u003e\u003e threeSum(int[] num) { //Arrays.sort re-arranges the array of integers in ascending order //ex. [1, 2, 3, 4] Arrays.sort(num); List\u003cList\u003cInteger\u003e\u003e res = new LinkedList\u003c\u003e(); for (int i = 0; i \u003c num.length-2; i++) { if (i == 0 || (i \u003e 0 \u0026\u0026 num[i] != num[i-1])) { //This lets us skip some of the duplicate entries in the array int lo = i+1, hi = num.length-1, sum = 0 - num[i]; //This is for the 2 Sum sweep while (lo \u003c hi) { if (num[lo] + num[hi] == sum) { res.add(Arrays.asList(num[i], num[lo], num[hi])); while (lo \u003c hi \u0026\u0026 num[lo] == num[lo+1]) lo++; while (lo \u003c hi \u0026\u0026 num[hi] == num[hi-1]) hi--; //This lets us skip some of the duplicate entries in the array lo++; hi--; } else if (num[lo] + num[hi] \u003c sum) lo++; else hi--; //This allows us to optimize slightly since we know that the array is sorted } } } return res; } Complexity Analysis Time Complexity: O(n^2) We go through a maximum of n elements for the first element of a triplet, and then when making a bi-directional 2Sum sweep of the remaining part of the array we also go through a maxiumum of n elements. Space Complexity: O(1) If we assume the return linked list is not extra space, then we do not allocate any significant extra space 16-3Sum Closest Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution. Example: Given array nums=[-1, 2, 1, -4], and target=1. The sum that is closest to the target is 2. (-1+2+1=2) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:31:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"3 Pointers Similar to the previous 3Sum problem, we use three pointers to point to the current element, next element and the last element. If the sum is less than the target, it means that we need to add a larger element so next element move to the next. If the sum is greater, it means we have to add a smaller element so last element move to the second last element. Keep doing this until the end. Each time compare the difference between sum and target, if it is less than minimum difference so far, then replace result with it, otherwise continue iterating. public class Solution { public int threeSumClosest(int[] num, int target) { int result=num[0] + num[1] + num[num.length-1]; Arrays.sort(num); for (int i=0; i\u003cnum.length -2; i++) { int start= i+1, end = num.length -1; while (start \u003c end) { int sum = num[i] + num[start] + num[end]; if (sum \u003e target) { end--; } else { start++; } if (Math.abs(sum-target) \u003c Math.abs(result-target)) { result=sum; } } } return result; } } 17-Letter Combinations of a Phone Number Given a string contianing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. 2 - abc 3 - def 4 - ghi 5 - jkl 6 - mno 7 - pqrs 8 - tuv 9 - wxyz Example: Input: \"23\" Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]. Note: The above answer is in lexicographical order but the answer can be in any order ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:32:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Backtracking Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the solution candidate turns to not be a solution (or at least not the last one), backtracking algorithm discards it by making some changes on the previous step, ie backtracks and then tries again. Here is a backtrack function backtrack(combination, next_digits) which takes as arguments an ongoing letter combination and the next digits to check. If there are no more digits to check that means the current combination is done If there are still digits to check: Iterate over the letters mapping to the next available digit Append the current letter to the current combination and proceed to check next digits: combination = combination + letter backtrack(combination + letter, next_digits[1:]). Visual Representation \"2 3\" 2 / | \\ a b c / | \\ 3 3 3 / | \\ / | \\ / | \\ d e f d e f d e f [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"] class Solution { Map\u003cString, String\u003e phone = new HashMap\u003cString, String\u003e() {{ put(\"2\", \"abc\"); put(\"3\", \"def\"); put(\"4\", \"ghi\"); put(\"5\", \"jkl\"); put(\"6\", \"mno\"); put(\"7\", \"pqrs\"); put(\"8\", \"tuv\"); put(\"9\", \"wxyz\"); }}; List\u003cString\u003e output = new ArrayList\u003cString\u003e(); public void backtrack(String combination, String next_digits) { //if there are no more digits to check if (next_digits.length()==0) { //the combination is done output.add(combination); } //if there are still digits to check else { //iterate over all letters which map the next available digit String digit = next_digits.substring(0,1); String letters = phone.get(digit); for (int i=0; i\u003cletters.length(); i++) { String letter = phone.get(digit).substring(i, i+1); //append the current letter to the combination and proceed to next backtrack(combination + letter, next_digits.substring(1)); } } } public List\u003cString\u003e letterCombinations(String digits) { if (digits.length() !=0) { backtrack(\"\", digits); } return output; } } Complexity Analysis Time Complexity: O(3^N * 4^M) where N is the number of digits in the input that maps to 3 letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits in the input that maps to 4 letters (eg. 7, 9) and N+M is the total number digits in the input Space Complexity: O(3^N * 4^M) since one has to keep 3^N * 4^M solutions ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:33:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"First In First Out (FIFO) Queue This solution utilizes the Single Queue Breadth First Search (BFS) which is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root and explores all of the neighbor nodes. public List\u003cString\u003e letterCombinations(String digits) { LinkedList\u003cString\u003e ans = new LinkedList\u003cString\u003e(); if (digits.isEmpty()) return ans; String[] mapping = new String[] {\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", {wxyz\"}; ans.add(\"\"); for (int i = 0; i\u003cdigits.length(); i++) { int x = Character.getNumericValue(digits.charAt(i)); //we terminate the while loop when we encounter a new-formed string which is more than //the current level i //peek retrieves the first value of the linked list while (ans.peek().length==i){ //removes the head or the first value in the linkedlist String t = ans.remove(); for (char s : mapping[x].toCharArray()) { ans.add(t+s); //this works because add appends to the end of the list } } return ans; } } Complexity Analysis Time Complexity: O(3^N * 4^M) where N is the number of digits in the input that maps to 3 letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits in the input that maps to 4 letters (eg. 7, 9) and N+M is the total number digits in the input Space Complexity: O(3^N * 4^M) since one has to keep 3^N * 4^M solutions 18-4Sum Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target Note: The solution set must not contain duplicate quadruplets Example: Given array nums = [1, 0, -1, 0, -2, 2], and target = 0 A solution set is: [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:34:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sorted Array The idea is the same as the other numbered sum problems like 2sum and 3sum. We sort the array and then proceed to interate through the values until we end up with a result that we are looking for. public class Solution { public List\u003cList\u003cInteger\u003e\u003e fourSum(int[] num, int target) { ArrayList\u003cList\u003cInteger\u003e\u003e ans = new ArrayList\u003c\u003e(); if (num.length\u003c4) { return ans; } Arrays.sort(num); for (int i=0; i\u003cnum.length-3; i++) { //picking the first candidate must leave room //for the other values if (num[i]+num[i+1]+num[i+2]+num[i+3]\u003etarget) { break; //first candidate too large, search finished } if (num[i]+num[num.length-1]+num[num.length-2]+num[num.length-3]\u003ctarget) { continue; //first candidate too small } if(i\u003e0 \u0026\u0026 num[i]==num[i-1]) { continue; //prevents duplicate in ans list } for (int j=i+1; j\u003cnum.length-2; j++) { //picking the second candidate must //leave room for other values if (num[i]+num[j]+num[j+1]+num[j+2]\u003etarget) { break; //second candidate too large } if (num[i]+num[j]+num[num.length-1]+num[num.length-2]\u003ctarget) { continue; //second candidate too small } if(j\u003ei+1 \u0026\u0026 num[j]==num[j-1]) { continue; //prevents duplicate results in ans list } int low=j+1, high=num.length-1; //two pointer search while(low\u003chigh) { int sum=num[i]+num[j]+num[low]+num[high]; if (sum==target) { ans.add(Arrays.asList(num[i],num[j],num[low],num[high])); while(low\u003chigh\u0026\u0026num[low]==num[low+1]) { low++; //skipping over duplicates } while(low\u003chigh \u0026\u0026 num[high]==num[high-1] { high--; //skipping over duplicates } low++; high--; } //moving window else if (sum\u003ctarget) { low++; } else { high--; } } } } return ans; } } 19-Remove Nth Node From End of List Given a linked list, remove the n-th node from the end of the list and return its head Example: Given linked list: 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5, and n=2 After removing the second node from the end, the linked list becomes 1 -\u003e 2 -\u003e 3 -\u003e 5 Note: Given n will always be valid Follow up: Could you do this in one pass? ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:35:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Two Pass Algorithm Intuition We notice that the problem could be simply reduced to another one: Remove the (L-n+1)th node from the beginning of the list, where L is the list length. This problem is easy to solve once we found the list length L. Algorithm First we will add an auxiliary “dummy” node, which points to the list head. The “dummy” node is used to simplify some corner cases such as a list with only one node or removing the head of the list. On the first pass, find the list length L. Then we set a pointer to the dummy node and start to move it through the list till it comes to the (L-n)th node. We relink next pointer of the (L-n)th node to the (L-n+2)th node and we are done. D -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e NULL | v D -\u003e 1 -\u003e 2 -\u003e 4 -\u003e NULL public ListNode removeNthFromEnd(ListNode head, int n) { ListNode dummy = new ListNode(0); dummy.next = head; int length =0; ListNode first = head; while (first!=null) { length++; first=first.next; } length -= n; first = dummy; while (length\u003e0) { length--; first=first.next; } first.next=first.next.next; return dummy.next; } Complexity Analysis Time Complexity: O(L) The algorithm makes two traversals of the list, first to calculate the list length L and second to find the (L-n)th node. There are 2L-n operations and time complexity is O(L) Space Complexity: O(1) We only used constant extra space ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:36:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"One Pass Algorithm The previous algorithm could be optimized to one pass. Instead of one pointer, we could use two pointers. The first pointer advances the list by n+1 steps from the beginning, while the second pointer starts from the beginning of the list. Now, both pointers are separated by exactly n nodes. We maintain this constant gap by advancing both pointers together until the first pointer arrives past the last node. The second pointer will be pointing at the nth node counting from the last. We relink the next pointer of the node referenced by the second pointer to point to the node’s next next node. Maintaining N=2 nodes apart between the first and second pointer D -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e NULL first Head second Move the first pointer N+1 steps | v D -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e NULL second Head First Move the first and second pointers together until the first pointer arrives past the last node | v D -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 5 -\u003e NULL Head Second First Second pointer points to the nth node counting from last so link node to the node's next next node | v D -\u003e 1 -\u003e 2 -\u003e 3 -\u003e -\u003e 5 -\u003e NULL Head Second First public ListNode removeNthFromEnd(ListNode head, int n) { ListNode dummy = new ListNode(0); dummy.next = head; ListNode first = dummy; ListNode second = dummy; //Moves the first pointer so that the first and second nodes are separated by n nodes for (int i=1; i\u003c=n+1; i++) { first = first.next; } //Move first to the end, maintaining the gap while (first!=null) { first=first.next; second=second.next; } second.next=second.next.next; return dummy.next; } Complexity Analysis Time Complexity: O(L) The algorithm makes one traversal of the list of L nodes. Therefore time complexity is O(L) Space Complexity: O(1) Only constant extra space was used 20-Valid Parentheses Given a string containing just the characters ‘(’, ‘)’, ‘{’, ‘}’, ‘[’, ‘]’, determine if the input string is valid An input string is valid if: Open brackets must be closed by the same type of brackets Open brackets must be closed in the correct order Note that an empty string is also considered valid Example 1: Input: \"()\" Output: true Example 2: Input: \"()[]{}\" Output: true Example 3: Input: \"(]\" Output: false Example 4: Input: \"([)]\" Output: false Example 5: Input: \"{[]}\" Output: true ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:37:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Counting method Intuition Imagine you are writing a small compiler for your college project and one of the tasks or sub-tasks for the compiler would be to detect if the parenthesis are in place or not. The algorithm we will look at in this article can be then used to process all the parenthesis in the program your compiler is compiling and checking if all the parenthesis are in place. This makes checking if a given string of parenthesis is valid or not, an important programming problem. The expressions that we will deal with in this problem can consist of three different types of parenthesis: () {} [] Before looking at how we can check if a given expression consisting of thes parenthesis is valid or not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So, the expressions we can encounter in this simplified version of the problem are: (((((()))))) -- VALID ()()()() -- VALID (((((((() -- INVALID ((()(()))) -- VALID Let’s look at a simple algorithm to deal with this problem We process the expression one bracket at a time starting from the left Suppose we encounter an opening bracket ie. (, it may or may not be an invalid expression because there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we simply increment the counter keeping track of the left parenthesis till now. left += 1 If we encounter a closing bracket, this has two meanings: There was no matching opening bracket for this closing bracket and in that case we have an invalid expression. This is the case when left==0 ie. when there are no unmatched left brackets available We had some unmatched opening bracket available to match this closing bracket. This is the case when left\u003e0 ie. we have unmatched left brackets available If we encounter a closing bracket ie. ) when left==0, then we have an invalid expression on our hands. Else, we decrement left thus reducing the number of unmatched left parenthesis available. Continue processing the string until all parenthesis have been processed If in the end we still have an unmatched left parenthesis available, this implies an invalid expression The reason we discussed this particular algorithm here is because the approach for the approach for the original problem derives its inspiration from this very solution. If we try and follow the same approach for our original problem, then it simply won’t work. The reason a simple counter based approach works above is because all the parenthesis are of the same type. So when we encounter a closing bracket, we simply assume a corresponding opening matching bracket to be available ie. if left\u003e0 But in our problem, if we encounter say ], we don’t really know if there is a corresponding opening [ available or not. You could say: Why not maintain a separate counter for the different types of parenthesis? This doesn’t work because the relative placement of the parenthesis also matters here eg: [{] If we simply keep counters here, then as soon as we encounter the closing square bracket, we would know there is an unmatched opening square bracket available as well. But, the **closest unmatched opening bracket available is a curly bracket and not a square bracket and hence the counting approach breaks here. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:38:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Stacks An interesting property about a valid parenthesis expression is that a sub-expression. (Not every sub-expression) eg. { [ [ ] { } ] } ( ) ( ) ^ ^ | | The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort of a recursive structure to the problem. For example consider the expression enclosed within the marked parenthesis in the diagram above. The opening bracket is at index 1 and the corresponding closing bracket is at index 6. What if whenever we encounter a matching pair of parenthesis in the expression we simply remove it from the expression? Let’s have a look at this idea below where we remove the smaller expressions one at a time from the overall expression and since this is a valid expression, we would be left with an empty string in the end. The stack data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively ie. from outside to inwards. Lets take a look at the algorithm for this problem using stacks as the intermediate data structure. Algorithm Initialize a stack S. Process each bracket of the expression one at a time If we encounter an opening bracket, we simply push it onto the stack. This means we will process it later, let us simply move onto the sub-expression ahead If encounter a closing bracket, then we check the element on top of the stack. If the element at the top of the stack is an opening bracket of the same type, then we pop it off the stack and continue processing. Else, this implies an invalid expression In the end, if we are left with a stack still having elements, then this implies an invalid expression Lets take a look at the implementation for this algorithm class Solution { //Hash table that takes care of the mappings private HashMap\u003cCharacter, Character\u003e mappings; //Initialize the hash map with mappings. This simply makes the code easier to read public Solution() { this.mappings = new HashMap\u003cCharacter, Character\u003e(); this.mappings.put(')', '('); this.mappings.put('}', '{'); this.mappings.put(']', '['); } public boolean isValid(String s) { // Initialize a stack to be used in the algorithm Stack\u003cCharacter\u003e stack = new Stack\u003cCharacter\u003e(); for (int i=0; i\u003c s.length(); i++) { char c = s.charAt(i); // If the current character is a closing bracket if (this.mappings.containsKey(c)) { // Get the top element of the stack. If the stack is empty, set a dummy value of '#' char topElement = stack.empty() ? '#' : stack.pop(); // If the mapping for this bracket doesn't match the stack's top element, return false. if (topElement != this.mappings.get(c)) { return false; } } else { //If it was an opening bracket, push to the stack stack.push(c); } } //If the stack still contains elements, then it is an invalid expression. return stack.isEmpty(); } } Complexity Analysis Time Complexity: O(n) We simply traverse the given string one character at a time and push and pop operations on a stack take O(1) time Space Complexity: O(n) In the worst case, when we push all opening brackets onto the stack, we will end up pushing all the brackets onto the stack eg ((((((((((( 21-Merge Two Sorted Lists Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: 1-\u003e2-\u003e4, 1-\u003e3-\u003e4 Output: 1-\u003e1-\u003e2-\u003e3-\u003e4-\u003e4 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:39:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Recursive class solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { if (l1 == null) return l2; if (l2 == null) return l1; if (l1.val \u003c l2.val) { l1.next = mergeTwoLists(l1.next, l2); return l1; } else { l2.next = mergeTwoLists(l1, l2.next); return l2; } } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:40:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Non-Recursive Similar approach and implemenation to the recursive solution above but a little more intuitive and does not require memory being held on the stack (as the recursive program runs it has to store variables on the stack so that when the program jumps back it is able to continue) As with most other linked list solutions, a dummy node is utilized and two pointers are used to keep track of where we are in the the two linked lists. class solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode returnNode = new ListNode(-1); ListNode headNode = returnNode; while (l1 != null \u0026\u0026 l2 != null) { if (l1.val \u003c= l2.val) { returnNode.next = l1; l1 = l1.next; } else { returnNode.next = l2; l2 = l2.next; } returnNode = returnNode.next; } if (l1 == null) { returnNode.next = l2; } else if (l2 == null) { returnNode.next = l1; } return headNode.next; } } 22-Generate Parentheses Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. For example: Given n=3, a solution set is: [ \"((()))\", \"(()())\". \"(())()\", \"()(())\", \"()()()\" ] ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:41:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force Intuition We can generate all 2^(2n) sequences of ( and ) characters. Then we can check if each one is valid Algorithm To generate all sequences, we use recursion. All sequences of length n is just ( plus all sequences of length n-1, and then ) plus all sequences of length n-1. To check whether a sequence is valid, we keep track of balance, the net number of opening brackets minuts closing brackets. If it falls below zero at any time, or doesn’t end in zero, the sequence is invalid - otherwise it is valid. class Solution { public List\u003cString\u003e generateParenthesis(int n) { List\u003cString\u003e combinations = new ArrayList(); generateAll(new char[2*n], 0, combinations); return combinations; } public void generateAll(char[] current, int pos, List\u003cString\u003e result) { if(pos == current.length) { if (valid(current)) { result.add(new String(current)); } } else { current[pos] = '('; generateAll(current, pos+1, result); current[pos] = ')'; generateAll(current, pos+1, result); } } public boolean valid(char[] current) { int balance = 0; for (char c : current) { if(c == '(') { balance++; } else { balance--; } if(balance \u003c 0) { return false; } } return (balance == 0); } } Complexity Analysis Time Complexity: O(2^2n * n) For each of 2^2n sequences, we need to create an validate the sequence, which takes O(n) work in the worst case Space Complexity: O(2^2n * n) Naively, every sequence could be valid, see Closure number for a tighter asymptotic bound ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:42:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Backtracking Intuition and Algorithm Instead of adding ( or ) every time as we do in the Brute Force algorithm, let’s only add them when we know it will remain a valid sequence. We can do this by keeping track of the number of opening and closing brackets we have placed so far. We can start an opening bracket if we still have one (of n) left to place. And we can start a closing bracket if it would not exceed the number of opening brackets class Solution { public List\u003cString\u003e generateParenthesis(int n) { List\u003cString\u003e ans = new ArrayList(); backtrack(ans, \"\", 0, 0, n); return ans; } public void backtrack(List\u003cString\u003e ans, String cur, int open, int close, int max){ if (cur.length() == max*2) { ans.add(cur); return; } if(open \u003c max) { backtrack(ans, cur + \"(\", open + 1, close, max); } if (close \u003c open) { backtrack(ans, cur + \")\", open, close +1, max); } } } Complexity Analysis Our complexity analysis rests on understanding how many elements there are in generateParenthesis(n). This analysis is outside the scope of this article, but it turns out this is the nth Catalan number 1/(n+1) (2n choose n), which is bounded asymptotically by 4^n/(n* sqrt(n)). Time Complexity: O((4^n)/sqrt(n)) Each valid sequence has at most n steps during the backtracking procedure Space Complexity: O((4^n)/sqrt(n)) As described above and using O(n) space to store the sequence Another way to think about the runtime of backtracking algorithms on interviewers is O(b^d), where b is the branching factor and d is the maximum depth of recursion. Backtracking is characterized by a number of decisions b that can be made at each level of recursion. If you visualize the recursion tree, this is the number of children each internal node has. You can also think of b as standing for “base”, which helps us remember that b is the base of the exponential. If we make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie. each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit each of these nodes, the runtime is O(b^d) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:43:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Closure Number To enumerate something, generally we would like to express it as a sum of disjoint subsets that are easier to count. Consider the closure number of a valid parentheses sequence s: the least index \u003e= 0 so that `S[0], S[1], … , S[2 * index + 1] is valid. Clearly, every parentheses sequence has a unique closure number. We can try to enumerate them individually. Algorithm For each closure number c, we know the starting and ending brackets must be at index 0 and 2 * c + 1. Then, the 2 * c elements between must be a valid sequence, plus the rest of the elements must be a valid sequence. This is just some minor improvement to the backtracking solution using the fact that for all valid solutions the first char is always ‘(’ and the lat char is always ‘)’. We initialize the starting string to ‘(’ and set the recursion bottom condition to string reaching length of 2 * n - 1 - we know that we need to append a bracket at the end. There will not be much of an improvement in the runtime however. class Solution { public List\u003cString\u003e generateParenthesis(int n) { List\u003cString\u003e ans = new ArrayList(); if (n==0) { ans.add(\"\"); } else { for (int c=0; c\u003cn; ++c) for (String left: generateParenthesis(c)) for (String right: generateParenthesis(n-1-c)) ans.add(\"(\" + left + \")\" + right); } return ans; } } Complexity Analysis Time Complexity: O((4^n)/sqrt(n)) Space Complexity: O((4^n)/sqrt(n)) 23-Merge k Sorted Lists Merge k sorted linked lists and return it as one sorted list. Analyze and descibe its complexity: Example: Input: [ 1 -\u003e 4 -\u003e 5, 1 -\u003e 3 -\u003e 4, 2 -\u003e 6 ] Output: 1 -\u003e 1 -\u003e 2 -\u003e 3 -\u003e 4 -\u003e 4 -\u003e 5 -\u003e 6 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:44:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Brute Force Intuition and Algorithm Traverse all the linked lists and collect the values of the nodes into an array Sort and iterate over this array to get the proper value of nodes Create a new sorted linked list and extend it with the new nodes As for sorting you can refer to the Algorithms/Data Structures CheatSheet for more about sorting algorithms. 146-LRU Cache Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put. get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1 put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. Follow up: Could both of these operations be done in O(1) time complexity? Example: LRUCache cache = new LRUCache(2 /* capacity */); cache.put(1, 1); cache.put(2, 2); cache.get(1); // returns 1 cache.put(3, 3); // evicts key 2 cache.get(2); // returns -1 (not found) Index Lowest Common Ancestor Count And Say Maximum SubArray Plus One Sqrt of X Climbing Stairs Remove Duplicates from sorted list Same Tree Symmetric Tree Max Depth of Binary Tree Convert Sorted Array to Binary Search Tree Balanced Binary Tree Minimum Depth of Binary Tree Path Sum Pascal’s Triangle Valid Palindrome Pascal’s Triangle II Best Time to Buy and Sell Stock Best Time to Buy and Sell Stock II Single Number Linked List Cycle Min Stack Intersection of Two Linked Lists Two Sum II - Input array is sorted Excel Sheet Column Title Majority Element Excel Sheet Column Number Factorial Trailing Zeroes Combine Two Tables Second Highest Salary Employees Earning More Than Their Managers Duplicate Emails Customers Who Never Order Rotate Array Delete Duplicate Emails Rising Temperature X of a Kind in a Deck of Cards Reverse Integer Add Two Numbers Longest Substring Without Repeating Characters House Robber Happy Number Remove Linked List Elements Count Primes Isomorphic Strings Reverse LinkedList Contains Duplicate Contains Duplicate II Implement Stack Using Queues Invert Binary Tree Fibonacci Number kth Largest Element Power Of Two Valid Sudoku Implement Queue Using Stack Palindrome LinkedList Delete Node in a Linked List Is Anagram Binary Tree Paths Add Digits Largest Perimeter Triangle Ugly Number Missing Number Is Bad Version Move Zeroes Word Pattern Can Win Nim Power Of Three Power of Four Reverse String Implement strStr() Reverse Vowels of a String Intersection of two arrays Is Perfect Square Sum of Two Integers Guess Number Higher or Lower Ransom Note First Unique Character in a String Find the Difference Nth Digit Sum of Left Leaves Longest Palindrome Fizz Buzz Third maximum Number Add Two Strings Construct Quad Tree N-ary Tree Level Order Traversal Number of Segments in a String Binary Tree Level Order Traversal Path Sum III Find All Anagrams in a String Arranging Coins Hamming Distance String Compression Number of Boomerangs Find All Numbers Disappeared in an Array Assign Cookies Poor Pigs Find Pivot Index Squares of a Sorted Array Repeated Substring Pattern Island Perimeter Number Complement Binary Watch Minimum Moves to Equal Array Elements License Key Formatting Max Consecutive Ones Permutations Construct the Rectangle Merge Intervals Merged sorted lists Next Greater Element I String Without AAA or BBB Keyboard Row Find Mode in Binary Search Tree Base 7 Relative Ranks Perfect Number Detect Capital Longest Uncommon Subsequence I Course Schedule II Letter Combinations of a Phone Number Sudoku Solver Bulls and Cows N-Queens 1 K-diff pairs in an Array Is Subsequence Minimum Absolute Difference in BST BST Tree to Greater Tree Student Attendance Record I Reverse Words in String III Quad Tree Intersection Long Pressed Name Binary Tree Zigag Level Order Traversal Array Partition I Reshape the matrix Swap Nodes in Pairs Generate Parentheses Distribute Candies Maximum Subpr","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:0","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Lowest Common Ancestor public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { TreeNode current = root; while (current != null){ if (p.val \u003c current.val \u0026\u0026 q.val \u003c current.val) // Both located in left side. current = current.left; else if (p.val \u003e current.val \u0026\u0026 q.val \u003e current.val) // Both located in right side current = current.right; else return current; // Seperate branches, therefore current is lca. } return null; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:1","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Count And Say The updated version runs in 2ms and passes 96.85% submissions. public String countAndSay(int n) { String result = \"1\"; // initial result StringBuilder temp; // to create intermediate strings efficiently. int len; // length of the result string. for (int i = 1; i \u003c n; ++i){ // We need to iterate n-1 times, because 1st result is 1 int startIndex = 0; // we will look at each index of result temp = new StringBuilder(); // and store freq,char in the builder len = result.length(); while (startIndex \u003c len){ char ch = result.charAt(startIndex++); // get the char at startIndex, and increment it, because we also want to look at the next character int count = 1; // intialize it's count to 1, we just saw it. while (startIndex \u003c len \u0026\u0026 ch == result.charAt(startIndex)){ count++; // If next also matches, increment count and startIndex startIndex++; } temp.append(count).append(ch); // No more match, Add the freq and the char } result = temp.toString(); // Update result to generate the next cound-and-say } return result; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:2","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Maximum SubArray public int maxSubArray(int[] nums) { int localMax = nums[0]; // keeps track of max sum between the previous and current int globalMax = nums[0]; // keeps track of global max sum. /* The idea is as follows: If the current element is greater than the previous local max, then we found an element that is a better option then before. Then, if that localmax changed and is greater than our global max, update our global max. */ for (int i = 1; i \u003c nums.length; i++){ localMax = Math.max(localMax + nums[i], nums[i]); globalMax = Math.max(localMax, globalMax); } return globalMax; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:3","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Plus One public int[] plusOne(int[] digits) { digits[digits.length-1]++; // Add one to the last place. if (digits[digits.length-1] == 10) // If it became 10, { for (int i = digits.length-1; i \u003e 0; i--) // Then add one to its previous place { if (digits[i] == 10){ // If that also results in 10, keep propogating that 1 digits[i-1]++; // upstream digits[i] = 0; } } if (digits[0] == 10){ // If the index 0 is 10, then the number is a multiple of 10. digits = new int[digits.length+1]; digits[0] = 1; // So increase length by 1 and set index 0 to 1. } } return digits; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:4","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sqrt of X public int mySqrt(int x) { long x1 = 10 - (100 - x)/20; // Using Newton's method of computing square roots. boolean done = false; while (!done) { long x2 = x1 - (x1*x1 - x)/(2*x1); if (x2 == x1) done = true; else x1 = x2; } return (int)x1-1; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:5","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Climbing Stairs public int climbStairs(int n) { if (n \u003c 4) // I chose n \u003c 4 because climbStairs(0 \u003c= n \u003c= 3) = n return n; int[] dp = new int[n+1]; for (int i = 0; i \u003c 4; i++) dp[i] = i; //return naiveDP(n, dp); return efficientDP(n); } public int naiveDP(int n, int dp[]){ if (dp[n] != 0) // If already computed, return it. return dp[n]; int ways = naiveDP(n-1, dp) + naiveDP(n-2, dp); // Just like Fibonacci. dp[n] = ways; // Save it. return ways; } public int efficientDP(int n){ if (n \u003c 4) return n; int[] dp = new int[n+1]; // Initialize dp of length n+1 to store n'th way. for (int i = 0; i \u003c 4; i++) dp[i] = i; // climbStairs(0 \u003c= n \u003c= 3) = n for (int i = 3; i \u003c= n; i++) // climbStairs(n) = climbStairs(n-1) + climbstairs(n-2); dp[i] = dp[i-1] + dp[i-2]; // So fetch those values from the dp array. return dp[n]; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:6","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Remove Duplicates from sorted list public ListNode deleteDuplicates(ListNode head){ ListNode current = head; // while we haven't reached the tail while (current != null \u0026\u0026 current.next != null) { // if current's next is the same as current, skip and update its next while (current.next != null \u0026\u0026 current.val == current.next.val) current.next = current.next.next; current = current.next; } return head; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:7","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Same Tree public boolean isSameTree(TreeNode p, TreeNode q) { if (p == null \u0026\u0026 q == null) // Two empty trees return true; // If one of the node is null, the two trees can't be equal. if ((p == null \u0026\u0026 q != null) || (p != null \u0026\u0026 q == null)) return false; // If the values in the two nodes are same, compare its's left and right sub-tree. if (p.val == q.val) return isSameTree(p.left, q.left) \u0026\u0026 isSameTree(p.right, q.right); return false; // If nothing worked out, they can't be same. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:8","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Symmetric Tree public boolean isSymmetric(TreeNode root) { return isSymmetricIterative(root); } public boolean isSymmetricIterative(TreeNode root) { Queue\u003cTreeNode\u003e track = new LinkedList\u003c\u003e(); track.add(root); // Add the root twice so we can compare its left and right track.add(root); while (!track.isEmpty()) { TreeNode x = track.poll(); // Remove 2 nodes TreeNode y = track.poll(); if (x == null \u0026\u0026 y == null) // If they are both null, skip it. continue; if (x == null || y == null || x.val != y.val) return false; // If values don't match or one is null track.add(x.left); // Otherwise add them in this order -\u003e LRRL track.add(y.right); // because we need to compare left most with the track.add(x.right); // right most, then inner left with inner right. track.add(y.left); } return true; // Everything's all right, so they must be symmetric. } public boolean isSymmetricRecursive(TreeNode root) { return helperRecursive(root, root); } private boolean helperRecursive(TreeNode x, TreeNode y) { if (x == null || y == null) // Base Case: Both or one is null, so true return true; return (x.val == y.val \u0026\u0026 helperRecursive(x.left, y.right) \u0026\u0026 helperRecursive(x.right, y.left)); // Check if values match and 1.left matches with the 2.right and 1.right matches with 2.left } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:9","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Max Depth of Binary Tree /* If root is null, height is 0 else add 1 and find if the left or the right has a greater depth. */ public int maxDepth(TreeNode root) { return root == null ? 0 : 1 + Math.max(maxDepth(root.left), maxDepth(root.right)); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:10","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Convert Sorted Array to Binary Search Tree public TreeNode sortedArrayToBST(int[] nums) { return aux(nums, 0, nums.length-1); } private TreeNode aux(int[] n, int left, int right) { if (left \u003e right) // Either empty, or return a null node return null; int mid = (left+right+1)/2; // Create a node with the middle value TreeNode root = new TreeNode(n[mid]); root.left = aux(n, left, mid-1); // Compute the left (which is the mid in left side) root.right = aux(n, mid+1, right); // Compute the right (which is the mid in right side) return root; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:11","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Balanced Binary Tree public boolean isBalanced(TreeNode root) { return isBalancedBottomUp(root); } public boolean isBalancedTopDown(TreeNode root) { if (root == null) return true; // if difference between root's left and right is \u003e 1, they're not balanced if (Math.abs((getHeight(root.left) - getHeight(root.right))) \u003e 1) return false; // otherwise, we need to check if the left and right subtree are also balanced. return isBalanced(root.left) \u0026\u0026 isBalanced(root.right); } private int getHeight(TreeNode node) { // Standard height of a binary tree calculator if (node == null) return 0; return 1 + Math.max(getHeight(node.left), getHeight(node.right)); } public boolean isBalancedBottomUp(TreeNode root) { return getHeight2(root) != -1; // -1 means not balanced. } private int getHeight2(TreeNode node) { if (node == null) return 0; int lHeight = getHeight2(node.left); // Get the height of left and right tree int rHeight = getHeight2(node.right); // If at any point there was a height difference of more than 1 or previous node's leftheight || rightheight returned -1, return -1 to let the next node know there was an imbalance. if ((Math.abs(lHeight-rHeight) \u003e 1) || lHeight == -1 || rHeight == -1) return -1; return 1 + Math.max(lHeight, rHeight); // Else carry on with the normal procedure } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:12","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Minimum Depth of Binary Tree public int minDepth(TreeNode root) { // Base case if (root == null) return 0; // Left is null, find minheight from right side if (root.left == null) return 1 + minDepth(root.right); // Right is null, find minheight from left side if (root.right == null) return 1 + minDepth(root.left); // Else, both are not null, so compute min height from the two sides. return 1 + Math.min(minDepth(root.left), minDepth(root.right)); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:13","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Path Sum public boolean hasPathSum(TreeNode root, int sum) { if (root == null) return false; // No sum exist sum -= root.val; // Sum decreases if (root.left == null \u0026\u0026 root.right == null) // If we are at a leaf return sum == 0; // Check if the sum is 0. return hasPathSum(root.left, sum) || hasPathSum(root.right, sum); // Otherwise look if you can make sum = 0 by exploring the left or right side. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:14","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Pascal’s Triangle public List\u003cList\u003cInteger\u003e\u003e generate(int numRows) { List\u003cList\u003cInteger\u003e\u003e pt = new ArrayList\u003c\u003e(); for (int i = 0; i \u003c numRows; i++) // Need to add all n rows { List\u003cInteger\u003e temp = new ArrayList\u003c\u003e(); // temp list to store values for (int j = 0; j \u003c= i; j++) { if (j == 0 || i == j) // First and last values are always 1. temp.add(1); else // Else, get the previous row and surrounding two values and add them temp.add(pt.get(i-1).get(j-1) + pt.get(i-1).get(j)); } pt.add(temp); // Add it to pt. } return pt; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:15","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Valid Palindrome public boolean isPalindrome(String s) { if (s.length() \u003e 0){ // Only do this is s is not empty s = s.toLowerCase(); // Convert it to lowercase int left = 0; // Initialize left and right pointers int right = s.length()-1; while (left \u003c right) // continue while we haven't hit the middle of the string { // If char at left is not a letter or a number, skip it. if (!Character.isLetter(s.charAt(left)) \u0026\u0026 !Character.isDigit(s.charAt(left))) left++; // Same with char at right. else if (!Character.isLetter(s.charAt(right)) \u0026\u0026 !Character.isDigit(s.charAt(right))) right--; //Char's are now alphanumeric. else if (s.charAt(left) != s.charAt(right)) // If they don't match return false; // return false else // They matched, so try to match the inner string { left++; right--; } } } return true; // No mismatch found, return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:16","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Pascal’s Triangle II public List\u003cInteger\u003e getRow(int rowIndex) { ArrayList\u003cInteger\u003e row = new ArrayList\u003c\u003e(); row.add(1); // First is always 1. // Using the nth row formula to compute the coeeficients. You can google \"nth row Pascal\" for (int i = 0; i \u003c rowIndex; i++) row.add((int)(1.0*row.get(i)*(rowIndex-i)/(i+1))); return row; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:17","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Best Time to Buy and Sell Stock /* The general idea is that if the price you are looking at right now in the array minus the minimum observed so far is greater than the maximum profit you recorded, update the max. */ public int maxProfit(int[] prices) { if (prices.length == 0) // Empty array return 0; int min = prices[0]; int max = 0; for (int i = 1; i \u003c prices.length; i++) { if (prices[i] \u003c min) min = prices[i]; else if (prices[i] - min \u003e max) max = prices[i]-min; } return max; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:18","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Best Time to Buy and Sell Stock II /* The general idea is that the moment you observe a valley and consecutive peak, make the trade by buying the stock on the valley day and selling it on the peak day. */ public int maxProfit(int[] prices) { int sum = 0; for (int i = 0; i \u003c prices.length-1; i++) if (prices[i+1] \u003e prices[i]) sum += (prices[i+1] - prices[i]); return sum; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:19","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Single Number /* The general idea is that XOR of two same numbers returns 0 and XOR with 0 returns the same number. So if there is only one element that doesn't have a pair, all the remaining will XOR with themselves at one point and give 0 but not the singleton element. */ public int singleNumber(int[] nums) { int num = nums[0]; for (int i = 1; i \u003c nums.length; i++) num ^= nums[i]; return num; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:20","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Linked List Cycle // Using the slow-fast runner technique. public boolean hasCycle(ListNode head) { if (head == null) return false; ListNode first = head; // Slow runner ListNode second = first.next; // Fast Runner // while second is not at the end or it isn't the tail while (second != null \u0026\u0026 second.next != null) { if (second == first) // If fast made a full loop and met up with slow return true; // We got a cycle first = first.next; // Slow moves one step second = second.next.next; // Second advances two. } return false; // We don't have a cycle } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:21","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Min Stack class MinStack { int min; Stack\u003cInteger\u003e stack; public MinStack() { min = Integer.MAX_VALUE; stack = new Stack\u003c\u003e(); } public void push(int x) { stack.push(x); // Push the value if (x \u003c min) // If that value is minimum than we have, update min min = x; stack.push(min); // Push the minimum on top of the stack for constant time } // minimum retrieval. public void pop() { stack.pop(); // Pop the minimum. stack.pop(); // Pop the actual element meant to be popped if (stack.isEmpty()) // If empty, min is Max int value min = Integer.MAX_VALUE; else min = stack.peek(); // Otherwise, min would be the top most element since we } // always push the minimum on top of any element we push. public int top() { return stack.elementAt(stack.size()-2); // Top element is actually at second last } // index since the last element is the minimum. public int getMin() { return min; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:22","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Intersection of Two Linked Lists /* The general idea is that if you are done traversing any of the lists, make it's pointer point to the head of the other list and start iterating. The reasoning is that the second time they iterate, they will have traversed exactly the same distance (it's length plus the other list's head to the intersecting node) and will meet at the intersecting node. */ public ListNode getIntersectionNode(ListNode headA, ListNode headB) { int count = 0; ListNode pA = headA; ListNode pB = headB; while (pA != pB){ pA = pA == null ? headB : pA.next; pB = pB == null ? headA : pB.next; } return pA; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:23","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Two Sum II - Input array is sorted public int[] twoSum(int[] numbers, int target) { int left = 0, right = numbers.length-1; while (left \u003c right) // Narrow down the window from both sides until they add up. { int sum = numbers[left] + numbers[right]; if (sum \u003e target) // We overshot, so decrease the window from right right--; else if (sum \u003c target) // Undershot, increase windows from left so next sum is more left++; else break; // Found the two numbers } return new int[] {left+1, right+1}; // +1 because LeetCode followed 1-n indexing. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:24","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Excel Sheet Column Title public String convertToTitle(int n) { String res = \"\"; while (n \u003e 0) { /* 1 is A and 26 is Z, so n-1 to change it to 0-25 scheme. Then, % 26 to find how much it is off on a full alphabet cycle, add 65 (ASCII for A) and convert it to char */ res = String.valueOf((char)(65+((n-1)%26))) + res; n = (n-1) / 26; // Subtract 1 and divide by 26 to get prepare for the next character } return res; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:25","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Majority Element Uses Moore’s Algorithm // This is the implementation of Moore's Algorithm for O(n) complexity. public int majorityElement(int[] nums) { int major = nums[0]; int count = 1; for (int i = 0; i \u003c nums.length; i++){ if (major == nums[i]) count++; else count--; if (count == 0){ major = nums[i]; count = 1; } } return major; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:26","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Excel Sheet Column Number /* Start from the end of String s, compute the ASCII for the char, +1 for 1-26 Alphabet-Scheme (hence -64 instead of -65) and multiply it to 26^{distance from the end of the string} */ public int titleToNumber(String s) { int length = s.length()-1; int total = 0; for (int i = length; i \u003e -1; i--) total += (int)(s.charAt(i)-64) * Math.pow(26,length-i); return total; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:27","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Factorial Trailing Zeroes /* The general idea is that every factorial that has 5 as a multiple also has 2 to multiply to 10. So if we can count the number of times we can divide n by 5, should gives us the number of trailing zeroes. O(log(n) base 5) complexity. */ public int trailingZeroes(int n) { int res = 0; while (n \u003e 4) { res += n / 5; n /= 5; } return res; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:28","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Combine Two Tables select FirstName, LastName, City, State from Person left join Address on Address.personId = person.personId; ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:29","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Second Highest Salary select max(salary) as SecondHighestSalary from Employee where salary not in (select max(salary) from employee); ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:30","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Employees Earning More Than Their Managers select emp.Name as Employee from Employee emp, Employee man where emp.managerId = man.Id and emp.salary \u003e man.salary; ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:31","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Duplicate Emails select email from person group by (email) having count(*) \u003e 1; ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:32","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Customers Who Never Order select name as Customers from Customers where customers.id not in (select customerId from orders); ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:33","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Rotate Array public void rotate(int[] nums, int k) { k %= nums.length; // k == nums.length ? Then it's a full rotation and no change if (k == 0) return; reverse(nums, 0 , nums.length-1); // First reverse the full array reverse(nums, 0, k-1); // Then reverse element from index 0 to k-1 reverse(nums, k, nums.length-1); // Then reverse all elements from k to end of Array } // Reverse function that reverses the array from specified indices. public void reverse(int[] nums, int start, int end) { while (start \u003c end){ int temp = nums[start]; nums[start] = nums[end]; nums[end] = temp; start++; end--; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:34","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Delete Duplicate Emails delete from Person where Id not in (select min_id from (select min(Id) as min_id from Person group by Email) as a) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:35","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Rising Temperature select w2.id from weather w1, weather w2 where Datediff(w2.recorddate, w1.recorddate) = 1 and w2.temperature \u003e w1.temperature; ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:36","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"X of a Kind in a Deck of Cards public boolean hasGroupsSizeX(int[] deck) { HashMap\u003cInteger, Integer\u003e freq = new HashMap\u003c\u003e(); for (int i = 0; i \u003c deck.length; i++) // Record the frequencies freq.put(deck[i],freq.getOrDefault(deck[i],0)+1); /* deck = [1,1,2,2,2,2,3,3,3,3,3,3] number 1 has len of 2, number 2 has len of 4, number 3 has len of 6, they share a Greatest common divisor of 2, which means diving them into group of size X = 2, will be valid. Thus we just have to ensure each length (of a number) shares a Greatest Common Divisor that's \u003e= 2. */ int hcf = 0; for (int i: freq.keySet()) hcf = gcd(hcf, freq.get(i)); return hcf \u003e 1; } private static int gcd(int x, int y) { int temp = 0; while (y != 0){ temp = y; y = x % y; x = temp; } return x; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:37","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reverse Integer public int reverse(int x) { int sign = x \u003c 0 ? -1 : 1; x = x * sign; // Make x positive long n = 0; while (x \u003e 0){ n = n * 10 + x % 10; // Start adding from the end. x /= 10; } return (int)n == n ? (int)n*sign : 0; // Try converting to int from long, if no change, } // Return n * sign, else 0 cause overflow. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:38","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Add Two Numbers public ListNode addTwoNumbers(ListNode l1, ListNode l2) { int carry = 0; // To record the carry int sum = 0; // To record the total of two vals ListNode dummy = new ListNode(0); // Dummy's next is the actual head ListNode curr = dummy; do{ if (l1 == null) // If one of the node is null, we set it to a l1 = new ListNode(0); // dummy value of 0 so we can adjust for if (l2 == null) // different length of the two lists. l2 = new ListNode(0); sum = l1.val + l2.val + carry; // Add the two vals and the carry. carry = sum \u003c 10 ? 0 : 1; // Record the carry for the next iteration curr.next = new ListNode(sum % 10); // next node's value is sum % 10. curr = curr.next; // advance current, l1 and l2. l1 = l1.next; l2 = l2.next; } while(l1 != null || l2 != null); if (carry == 1) // In the end, if carry is 1, it was from curr.next = new ListNode(carry); // from adding last terms, so make next node 1 return dummy.next; // Return the actual head. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:39","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Longest Substring Without Repeating Characters public int lengthOfLongestSubstring(String s) { if (s == null || s.length() == 0) return 0; int[] hash = new int[128]; // To store the occurence of characters int maxLength = 0; for (int i = 0, j = 0; j \u003c s.length(); j++){ i = Math.max(hash[s.charAt(j)], i); // Check the most recent index of character. maxLength = Math.max(maxLength, j-i+1); // That minus current pointer gives length hash[s.charAt(j)] = j+1; // Record the index of the next character. } return maxLength; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:40","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"House Robber /* The basic idea is that if you are robbing house i, the maximum loot may come from by robbing the i-2th house or by robbing the i-3th house. Therefore rob both and then find the path that gave the maximum profit. Example: loot = [1,9,3,8,4,3,6,4,3,5,7,6] Profit DP = [1,9,4,17,13,20,23,24,26,29,33,35] Here, dp[2] = loot[2] + loot[1] dp[4] = loot[4] + max(dp[2], dp[1]) dp[5] = loot[5] + max(dp[3], dp[2]) and so on. In the end, just compare the last two elements to check which path gave us the maximum profit. Some people might not prefer modifying the original nums array. In that case, you can initialize another dp array of same length, initialize the first two elements as dp[0] = nums[0] and dp[1] = nums[1] and dp[3] = nums[0] + nums[2] and then performing the same loop. In that case, you would be using O(n) space. */ public int rob(int[] nums) { if (nums.length == 0 || nums == null) // 3 Base Case return 0; if (nums.length == 1) return nums[0]; else if (nums.length == 2) return Math.max(nums[0], nums[1]); else{ nums[2] = nums[0] + nums[2]; // House 3 profit is rob House 1 and 3. for (int i = 3; i \u003c nums.length; i++) nums[i] = nums[i] + Math.max(nums[i-2], nums[i-3]); return Math.max(nums[nums.length-1], nums[nums.length-2]); } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:41","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Happy Number public boolean isHappy(int n) { return isHappyConstantSpace(n); // Much faster than set method //return isHappySet(n); } private boolean isHappyConstantSpace(int n){ int numSeenLessThan10 = 0; // If I see 10 single digits, then it means that I am while (n != 1){ // now starting to see repititions. if (n \u003c 10) // Each time I see a num \u003c 10, increment the counter numSeenLessThan10++; if (numSeenLessThan10 \u003e 9) return false; n = getSquare(n); // Get the total of square of its digits. } return true; } /* The general idea is that the moment you see a repition, it can't be a happy number, so keep track of digit square obtained so far. If they hit 1, well and good, otherwise there will be some repition, so return false. */ private boolean isHappySet(int n){ HashSet\u003cInteger\u003e seen = new HashSet\u003c\u003e(); // Keep track of numbers while (true){ n = getSquare(n); // Get the sum of digits square if (n == 1) // If it's 1, it's a happy number return true; else if (seen.contains(n)) // If it's a repition of something return false; // seen before, it's not a happy no. else seen.add(n); // If not seen, add it. } } private int getSquare(int n){ // Add the squares of the digits. int total = 0; while (n != 0){ int digit = n % 10; total += digit * digit; n /= 10; } return total; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:42","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Remove Linked List Elements public ListNode removeElements(ListNode head, int val) { while (head != null \u0026\u0026 head.val == val) // While head contains the val, skip head = head.next; // the head ListNode current = head; while (current != null \u0026\u0026 current.next != null){ // While we have something to iterate if (current.next.val == val) // If current's val match, skip the current.next = current.next.next; // next node. else current = current.next; // Else advance to the next node. } return head; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:43","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Count Primes public int countPrimes(int n) { if (n \u003c 2) return 0; // No prime numbers for numbers \u003c 2 boolean[] store = new boolean[n]; // Using Sieve of Eratosthenes for (int i = 2; i*i \u003c= n; i++) // Start from i = 2 to sqrt(n) if (!store[i]) // If store[i] = false, then mark all its for (int j = i*i; j \u003c n; j += i)// multiples in the store as true store[j] = true; // True = not a prime, false = prime int count = 0; for (int i = 2; i \u003c n; i++) // Loop through the array, count if (!store[i]) count++; return count; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:44","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Isomorphic Strings public boolean isIsomorphic(String s, String t) { if (s.length() != t.length()) // Can't be isomorphic is string lengths do not return false; // match char[] hashS = new char[128]; // To store String s' match char[] hashT = new char[128]; // To store String t's match for (int i = 0; i \u003c s.length(); i++){ char charS = s.charAt(i), charT = t.charAt(i); if (hashS[charS] != hashT[charT]) // If the values at respective characters index return false; // do not match, return false hashS[charS] = (char)(i+1); // Otherwise, mark those index with the same hashT[charT] = (char)(i+1); // arbitrary value. I chose a simple (i+1) to } // to mark both the hash with the same value. return true; // Everything worked out, return true; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:45","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reverse LinkedList // Recursive public ListNode reverseList(ListNode head) { // Very tricky. Refer to the demo below if (head == null || head.next == null) return head; ListNode node = reverseList(head.next); head.next.next = head; head.next = null; return node; } //Iterative public ListNode reverseList(ListNode head) { if (head == null || head.next == null) return head; // No point in reversing empty or 1-sized list ListNode curr = head, prev = null; ListNode nextNode; while (curr != null){ // While we haven't reached the tail nextNode = curr.next; // Store the next node curr.next = prev; // Current's next becomes it's previous prev = curr; // Advance previous to current. curr = nextNode; // Make current the actual next node } return prev; // Current is at null, so it's previous is the } // new head. ![reverse Linked list](/Users/devkapupara/Desktop/Notes/dependencies/reverse Linked list.jpg) ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:46","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Contains Duplicate public boolean containsDuplicate(int[] nums) { if (nums.length \u003c 2) return false; // There can't be any duplicates. HashSet\u003cInteger\u003e store = new HashSet\u003c\u003e(); // Store unique values. for (int n: nums){ if (!store.add(n)) // Add func returns true if n was'nt present, return true; // false if duplicate. Therefore if it was a } // duplicate, return true. return false; // No duplicates, so return false } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:47","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Contains Duplicate II public boolean containsNearbyDuplicate(int[] nums, int k) { if (nums.length \u003c 2) return false; int left = 0, right = 0; HashSet\u003cInteger\u003e store = new HashSet\u003c\u003e(); // Use a rotating window of size k while (right \u003c nums.length){ // While we haven't processed everything if (store.contains(nums[right])) // If our current window contains duplicate return true; store.add(nums[right]); // No duplicates in the window right++; // Increase right to visit the new element if (right - left \u003e k){ // If window becomes \u003e k store.remove(nums[left]); // remove the number on the left side of left++; // the window and increase the left counter } // for new window from the next index } return false; // No duplicates found in any window. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:48","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Implement Stack Using Queues class MyStack { Deque\u003cInteger\u003e stack; /** Initialize your data structure here. */ public MyStack() { stack = new ArrayDeque\u003c\u003e(); } /** Push element x onto stack. */ public void push(int x) { stack.add(x); } /** Removes the element on top of the stack and returns that element. */ public int pop() { return stack.removeLast(); } /** Get the top element. */ public int top() { return stack.peekLast(); } /** Returns whether the stack is empty. */ public boolean empty() { return stack.isEmpty(); } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:49","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Invert Binary Tree public TreeNode invertTree(TreeNode root) { if (root == null) return null; TreeNode temp = root.left; // Swap the left and right nodes root.left = root.right; root.right = temp; invertTree(root.left); // Then swap the subsequent trees of those nodes. invertTree(root.right); return root; // Return the original root. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:50","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Fibonacci Number // Iterative public int fib(int N) { if (N \u003c 2) // fib(0) = 0; fib(1) = 1 return N; int f0 = 0, f1 = 1, fn = 0; for (int i = 2; i \u003c= N; i++){ fn = f0 + f1; // fib(n) = fib(n-1) + fib(n-2) f0 = f1; // f0 becomes f1 f1 = fn; // f1 becomes fn } return f1; } // Dynamic Programming private int fibDP(int N){ if (N \u003c 2) return N; int[] dp = new int[N+1]; // To store intermediate result dp[1] = 1; // fib(0) = 0; fib(1) = 1 for (int i = 2; i \u003c= N; i++) dp[i] = dp[i-1]+dp[i-2]; // fib(i) = fib(i-1) + fib(i-2) return dp[N]; // Return the last number in the array } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:51","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"kth Largest Element The minheap algorithm has $O(n lg n) $ complexity and $O(1)$ space. The idea here is that we use a minheap to keep only the k greatest elements. If size becomes more than k, we remove the smallest element at the top of the heap. Thereby, at the end, our kth largest element will be at the top. QuickSelect Algorithm performs in $O(n)$ best case, $O(n^2)$ worst case when the pivot chosen is always the largest, so we use a random pivot. // MinHeap Algorithm public int kthLargest(int[] nums, int k){ PriorityQueue\u003cInteger\u003e q = new PriorityQueue\u003c\u003e((n1,n2) -\u003e n1 - n2); // Initialize minheap for (int n: nums){ q.add(n); // Add number one by one if (q.size() \u003e k) // If size is greater than k q.poll(); // Remove the topmost element } return q.poll(); // The topmost element is our answer } // QuickSelect Algorithm - Hoare's Partition Scheme private int[] arr; public int kthLargest(int[] nums, int k){ arr = nums; return quickselect(0, nums.length-1, nums.length-k);// kth largest is (n-k)th largest } private int quickselect(int left, int right, int k){ if (left == right) // Array contains only 1 element, that's the answer return arr[left]; Random rand = new Random(); // Choose a random pivot between left and right int pivotIndex = left + rand.nextInt(right-left); // but not left pivotIndex = partition(left, right, pivotIndex); // Partition, and find it's correct index if (k == pivotIndex) // That index is equal to kth statistic return arr[pivotIndex]; else if (k \u003c pivotIndex) // If it's less than the index, our ans lies in the return quickselect(left, pivotIndex-1, k); // left side else return quickselect(pivotIndex+1, right, k); // Otherwise, it's on the right side. } private int partition(int left, int right, int pivotIndex){ int pivot = arr[pivotIndex]; // Partition element swap(pivotIndex, right); // Move that element to the end int wall = left - 1; // wall is initially before everything for (int i = left; i \u003c right; i++){ if (arr[i] \u003c pivot) // If the current element is \u003c than the pivot, then swap(i, ++wall); // we need to swap it with the element next to wall. } swap(right, ++wall); // Lastly, swap the element at wall and the end. return wall; } private void swap(int i, int j){ int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:52","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Power Of Two public boolean isPowerOfTwo(int n) { if (n \u003c 1) return false; // n \u003c 0 cannot be powers of 2 while (n \u003e 2){ if (n % 2 != 0) // If n is odd, it can't be a power of 2. return false; n = n / 2; // It is a multiple of 2, so divide it by 2. } return true; // n came out to be 1 which is a power of 2, so return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:53","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Valid Sudoku private char[][] board; public boolean isValidSudoku(char[][] board){ this.board = board; return rowCheck() \u0026\u0026 colCheck() \u0026\u0026 boxCheck(); // Check row first, then column and at } // last, boxes because they are time // consuming. private boolean onePassCheck(){ HashSet\u003cInteger\u003e[] rows = new HashSet[9]; // 1 HashSet for each row HashSet\u003cInteger\u003e[] columns = new HashSet[9]; // 1 HashSet for each column HashSet\u003cInteger\u003e[] boxes = new HashSet[9]; // 1 HashSet for each box. for (int i = 0; i \u003c 9; i++){ rows[i] = new HashSet\u003c\u003e(); columns[i] = new HashSet\u003c\u003e(); boxes[i] = new HashSet\u003c\u003e(); } for (int i = 0; i \u003c 9; i++){ for (int j = 0; j \u003c 9; j++){ int n = (int)(board[i][j]); if (n != -2){ // -2 = '.' int boxIndex = (i/3) * 3 + j/3; // Calculate which box we are in. if (!rows[i].add(n) || !columns[j].add(n) || !boxes[boxIndex].add(n)) return false; // If the row set or the column set or the } // box set contains that val, return false. } } return true; } private boolean rowCheck(){ // Horizontal check boolean[] arr; for (char[] row: board){ arr = new boolean[9]; for (char c: row){ int val = c-'0'; if (val != -2){ // val = -2 means '.' in the board if (arr[val-1]) // If val already seen, invalid sudoku return false; arr[val-1] = true; // else, Mark that index as seen. } } } return true; } private boolean colCheck(){ // Vertical Check. boolean[] arr; for (int col = 0; col \u003c board.length; col++){ arr = new boolean[9]; for (int row = 0; row \u003c board[0].length; row++){ int val = board[row][col]-'0'; if (val != -2){ if (arr[val-1]) return false; arr[val-1] = true; } } } return true; } private boolean boxCheck(){ // For the 9 sub boxes, let the single for (int i = 0; i \u003c 9; i+=3){ // box checker check it's validity. for (int j = 0; j \u003c 9; j+=3) // If any of the subbox was invalid, if (!singleBoxCheck(i,j)) // we abort and return false. return false; } return true; } private boolean singleBoxCheck(int topRightRow, int topRightCol){ boolean[] arr = new boolean[9]; for (int i = 0; i \u003c 3; i++){ // Each sub box has 3 rows and 3 columns for (int j = 0; j \u003c 3; j++){ int val = board[topRightRow+i][topRightCol+j]-'0'; // This gives us the value at if (val != -2){ // each cell in the sub box and we fill the if (arr[val-1]) // arr with all values that are seen. return false; // If seen twice, return false; arr[val-1] = true; } } } return true; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:54","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Implement Queue Using Stack /* Since we reverse stack1 into stack2, stack2 is basically our queue, so if stack2 isn't empty, then the topmost element is what we need when we pop or peek. If it is empty, then again fill it with whatever's there is stack1, and it again becomes the correct queue. */ Stack\u003cInteger\u003e stack1; Stack\u003cInteger\u003e stack2; public MyQueue() { stack1 = new Stack\u003c\u003e(); stack2 = new Stack\u003c\u003e(); } public void push(int x) { stack1.push(x); // Push onto stack1 } public int pop() { peek(); // First call the peek function, to make sure stack 2 isn't return stack2.pop(); // empty. Then, the topmost element of stack2 is what we want } /** Get the front element. */ public int peek() { if (stack2.isEmpty()){ while (!stack1.isEmpty()) stack2.push(stack1.pop()); } return stack2.peek(); // stack2 is basically the queue, so return whatever's on the top } /** Returns whether the queue is empty. */ public boolean empty() { return stack1.isEmpty() \u0026\u0026 stack2.isEmpty(); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:55","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Palindrome LinkedList public boolean isPalindrome(ListNode head) { if (head == null || head.next == null) // Size 0 or 1 list, must be unique. return true; if (head.next.next == null) // Size 2 list, compare the head and tail return head.val == head.next.val; // values ListNode middleNode = head; // Standard Rabbit-Tortoise pointers. ListNode fastPointer = head; // Fast pointer jumps twice so by the time // it reaches the end of the list, middlenode ListNode curr = head; // is at the middle of the linkedlist. ListNode prev = null; ListNode nextNode; // These three nodes are for reversing the // first half of the list while (fastPointer != null \u0026\u0026 fastPointer.next != null){ middleNode = middleNode.next; // Advance middle once, fastpointer twice fastPointer = fastPointer.next.next; nextNode = curr.next; // Reverse the curr node, but first store the curr.next = prev; // next newNode. By doing this, we would have prev = curr; // reversed exactly half of the list because curr = nextNode; // fastpointer advacnes at double the speed. } if (fastPointer != null) // If faspointer isn't null, then we have an middleNode = middleNode.next; // odd length list, so advance middle once, // List looks like 1-\u003e2-\u003e3-\u003e2-\u003e1 instead of while (middleNode != null){ // 1-\u003e2-\u003e3-\u003e3-\u003e2-\u003e1 if (middleNode.val != prev.val) // While middle isn't null, check middlenode return false; // val and prev val. Prev is basically the middleNode = middleNode.next; // the point where the list reverses. prev = prev.next; // Advance middle and next. } return true; // Values matched, so return true. } // Reversed list looks like this: // 1\u003c-2\u003c-3\u003c-prev middle-\u003e3-\u003e2-\u003e1 in even len // 1\u003c-2\u003c-prev middle-\u003e2-\u003e1 in odd lengths. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:56","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Delete Node in a Linked List public void deleteNode(ListNode node) { node.val = node.next.val; // Node's value becomes its next node's value node.next = node.next.next; // Node's next is it's next's next. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:57","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Is Anagram public boolean isAnagram(String s, String t) { if (s.length() != t.length()) // Can't be anagram if size aren't the same return false; int[] store = new int[26]; // Acts like a hashmap for (int i = 0; i \u003c s.length(); i++) // Increment the count by 1 in the store for the store[s.charAt(i)-'a']++; // index = position of char in the alphabet for (int i = 0; i \u003c t.length(); i++){ // Loop throught the second string, decrement if (--store[t.charAt(i)-'a'] \u003c 0) // count of each character in store by 1, but if return false; // it goes below 0, then it means that character } // occurred more than it did in s. So false. return true; // Everything matched, so return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:58","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Tree Paths List\u003cString\u003e paths = new ArrayList\u003c\u003e(); public List\u003cString\u003e binaryTreePaths(TreeNode root) { if (root == null) // No paths return paths; String rootval = root.val + \"\"; // Converting int to string. traverse(root, rootval); return paths; } private void traverse(TreeNode root, String s){ if (root.left == null \u0026\u0026 root.right == null) // It's a leaf, and you found a path paths.add(s); // so add it to the list if (root.left != null) // Left side is traversable, so traverse(root.left, s + \"-\u003e\" + root.left.val); // visit it and record its value. if (root.right != null) // Same as above, but for right side. traverse(root.right, s + \"-\u003e\" + root.right.val); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:59","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Add Digits private int constantTime(int n){ if (n \u003c 10) return n; // Already a single digit int result = n % 9; if (result == 0) // If perfectly divisible by 9, then sum will be 9. return 9; return result; // Otherwise, the result is going to be n % 9. } private int iterative(int num){ while (num \u003e 9){ // While number isn't between 2-9 num = sumOfDigits(num); // make num = sum of it's digits. } return num; } private int sumOfDigits(int n){ // Standard method to add the digits of a number. int sum = 0; while (n != 0){ sum += n % 10; // Extract the last digit, add it to sum. n /= 10; // Divide the num by 10. } return sum; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:60","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Largest Perimeter Triangle public int largestPerimeter(int[] A) { Arrays.sort(A); // Sort so the largest sides are at the end. for (int i = A.length-3; i \u003e= 0; --i) // Triangle inequality Theorem : a + b \u003e c if (A[i] + A[i+1] \u003e A[i+2]) // If sum of last two is greater than the last return A[i] + A[i+1] + A[i+2]; // we found out max perimeter, otherwise return 0; // decrease i by i, then check the next three } // triplets // In the end if nothing works out, we return 0. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:61","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Ugly Number public boolean isUgly(int num) { if (num \u003c 1) return false; // Negative numbers are automatically non ugly while (num % 2 == 0) // Keep dividing number by 2 till it is divisible num /= 2; while (num % 3 == 0) // Keep dividing by 3 num /= 3; while (num % 5 == 0) // and 5 num /= 5; return num == 1; // If num isn't 1, that means that there are other prime factors } // except 2,3 and 5. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:62","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Missing Number public int missingNumber(int[] nums) { // Since it's given that the array contains int nsum = (nums.length*(nums.length+1))/2; // all numbers from 0-n, we use the formula int arraySum = nums[0]; // to compute sum of n numbers. for (int i = 1; i \u003c nums.length; i++) // Then we loop through the array to compute arraySum += nums[i]; // the sum of the array. return nsum - arraySum; // Subtract the array sum from the required } // sum, and that gives us the missing number ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:63","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Is Bad Version public int firstBadVersion(int n) { // Basic Binary Search Algorithm int low = 1, high = n; int mid; while (low \u003c high){ mid = low + (high - low)/2; // high - low to prefent integer overflow. if (isBadVersion(mid)) // if the model at mid was bad version, then we high = mid; // could possibly have a bad version before it else low = mid+1; // If it wasn't, then our first bad version lies } // beyond the middle element. return low; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:64","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Move Zeroes /* The general idea is that we know the end of the array is going to contain zeroes. So first, iterate over the array, if you find any non-zero value, copy it down to the front of the array. Then we you are done, length of the array minus the last index where you copied the non-zero element is the number of zeroes you need to fill in. So iterate from that last non-zero index to the end of the array and fill in zeroes. */ public void moveZeroes(int[] nums) { int lastNonZeroIndex = 0; for (int i = 0; i \u003c nums.length; i++) if (nums[i] != 0) nums[lastNonZeroIndex++] = nums[i]; for (int i = lastNonZeroIndex; i \u003c nums.length; i++) nums[i] = 0; } /* This solution is an extension of the above, but a better one because we only swap elements when needed and do not do any unnecessary writes. Start from the beginning of the array, maintain the last position of non-zero value you saw, and the current element. If you see a non-zero value, swap the current value with the index just after the last non-zero index you have, and then increment the non-zero index by 1 because you just found a new non-zero value. This helps us prepare for the next non-zero value we find and copy it at this index+1. By doing so, we are basically partitioning the array into non-zeroes and zero values. */ public void moveZeroes(int[] nums) { for (int lastNonZeroIndex = 0, i = 0; i \u003c nums.length; i++){ if (nums[i] != 0) swap(nums, i , lastNonZeroIndex++); } } private void swap(int[] a, int i, int j){ int temp = a[i]; a[i] = a[j]; a[j] = temp; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:65","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Word Pattern public boolean wordPattern(String pattern, String str) { String[] words = str.split(\" \"); // Split str into words if (pattern.length() != words.length) // If length of pattern and words mismatch return false; // then pattern do not match HashMap\u003cCharacter, String\u003e patternStore = new HashMap\u003c\u003e(); // Map pattern char to word HashMap\u003cString, Character\u003e wordMap = new HashMap\u003c\u003e(); // Map word to pattern char for (int i = 0; i \u003c words.length; i++){ char c = pattern.charAt(i); // Get the char patternStore.putIfAbsent(c, words[i]); // Put it in patternStore if absent if (!patternStore.get(c).equals(words[i])) // If it was already there and it doesn't return false; // map to words[i], we have a violation wordMap.putIfAbsent(words[i], c); // Now check the other way around. If if (wordMap.get(words[i]) != c) // words is absent in the map, map it to return false; // the char. If present, then fetch it's } // mapping and check if both match to c. return true; // No violation, so return true } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:66","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Can Win Nim public boolean canWinNim(int n) { return n % 4 != 0; // You can always win the game if n is not divisible by 4. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:67","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Power Of Three public boolean isPowerOfThree(int n) { if (n \u003c 1) // If negative, it can't be a power of 3. return false; while (n % 3 == 0) // While n is divisible by 3, keep dividing it. n /= 3; return n == 1; // In the end, if it was a power of 3, then n should be 1. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:68","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Power of Four /* You can also use the iterative method that I have used in Power of Two and Power of Three problems. I just wanted to try a different approach here. This is a constant time function. */ public boolean isPowerOfFour(int num) { double pow = Math.log(num)/Math.log(4); // Calculate x in 4^x = num using logs. return pow == (int)pow; // Making sure that x is an integer and not a } // fractional exponent. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:69","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reverse String /* 1 Liner solution. Basically, create a StringBuilder of the string, the builder already has a reverse method, so reverse it and then return it's toString. */ public String reverseString(String s) { return new StringBuilder(s).reverse().toString(); } /* Golfing aside, here is how one is expected to solve it in an interview. */ public String reverseString(String s) { char[] array = s.toCharArray(); // Create a char array of the string int len = array.length; // length of the array for (int i = 0; i \u003c len/2; i++){ // We only need to iterate over half the array. char temp = array[i]; // Swap the 0th index element with (len-1)th, array[i] = array[len-i-1]; // 1st index element with (len-2)th, until you get array[len-i-1] = temp; // to the middle element. } return new String(array); // Return a new string with the reversed array. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:70","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Implement strStr() /* The basic idea here is that you only need to iterate haystack length - needle length, and then check the substring of size = needle length in haystack from each index. If you are successfully able to match each character of the needle in the corresponding substring in haystack, return the index you start from. */ public int strStr(String haystack, String needle) { if (needle.length() \u003e haystack.length()) // Needle length can't be \u003e than haystack return -1; int hl = haystack.length(); int nl = needle.length(); if (nl == 0) // Empty strings are always a match starting return 0; // from 0. for (int i = 0; i \u003c= hl-nl; i++){ // Iterate haystack length - needle length. for (int j = 0; j \u003c nl \u0026\u0026 haystack.charAt(i+j) == needle.charAt(j); ++j)} if (j == nl-1) // We are checking how far from i can we return i; // match. If i matched with j, increment j } // and then match the character i+1 to j. } // If that matches, increment j and match i+2 return -1; // j == n-1 checked wether or not if we were } // able to match the full needle string, if // yes, then i is our index // in the end, nothing matched, so return -1 ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:71","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reverse Vowels of a String public String reverseVowels(String s) { if (s.length() \u003c 2) return s; // No need to reverse a string of length 0 or 1 char[] str = s.toCharArray(); // Get the char array int left = 0; int right = str.length-1; while (left \u003c right){ while (left \u003c right \u0026\u0026 !isVowel(str[left])) // While left is pointing to a left++; // consonant, increment it/ while (left \u003c right \u0026\u0026 !isVowel(str[right])) // While right is pointing to a right--; // consonant, decrement it. char temp = str[left]; // Left and right are now pointing str[left] = str[right]; // to vowels, so swap it. str[right] = temp; // And then increment left and left++; // decrement right to process the right--; // inner string } return new String(str); // Return a string from the reveresed array. } private boolean isVowel(char c){ // Function to check if a character is a vowel. switch (c) { case 'a': case 'e': case 'i': case 'o': case 'u': case 'A': case 'E': case 'I': case 'O': case 'U': return true; default: return false; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:72","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Intersection of two arrays public int[] intersection(int[] nums1, int[] nums2) { Set\u003cInteger\u003e set1 = new HashSet\u003cInteger\u003e(); // Record all unique values in set 1 for (int i: nums1) set1.add(i); Set\u003cInteger\u003e intersect = new HashSet\u003c\u003e(); // We will use it to record intersection for (int i: nums2) // For each value in nums2 array if (set1.contains(i)) // If set1 contains it, we found an intersect.add(i); // intersecting element, so add it. int[] res = new int[intersect.size()]; // We will now convert the set to an int i = 0; // array and then return the array. for (int n: intersect) res[i++] = n; return res; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:73","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Is Perfect Square /** The basic idea here is to close in on the square root using binary search algorithm. I handle 4 seperately because it's root is the only one where 4/3 \u003c it's square root. All other numbers square root is greater than its value/3. So we create a lowerBound of 1 and an upperBound of num/3. Then if the middle value's square overshoots, we make upperBound = mid-1, otherwise increment lowerBound to mid+1. This way, we close on the square root from both sides, and if the middle values is the square root, it's square will yield num. */ public boolean isPerfectSquare(int num) { if (num \u003c 2 || num == 4) return true; long lowerBound = 1; long upperBound = num/3; long mid; long square; while (lowerBound \u003c= upperBound){ mid = lowerBound + (upperBound-lowerBound)/2; square = mid*mid; if (square == num) return true; if (square \u003e num) upperBound = mid-1; else lowerBound = mid+1; } return false; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:74","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sum of Two Integers I cannot explain it better than this post. public int getSum(int a, int b) { if (a == 0) return b; if (b == 0) return a; int sum = a ^ b; int carry = a \u0026 b; if (carry == 0) return sum; return getSum(sum, carry \u003c\u003c 1); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:75","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Guess Number Higher or Lower public int guessNumber(int n) { // Standard binary search algorithm int low = 1, high = n, result = -2; // Arbitrary result, but not 0 int mid = 0; while (result != 0){ mid = low + (high-low)/2; // Check the mid. result = guess(mid); // Check if our guess is correct if (result == -1) // If result == -1, then we overshot high = mid-1; // So we can discard all values \u003e mid else if (result == 1) // If result == 1, we undershot low = mid+1; // Need to discard all the values \u003c mid } return mid; // Result == 0, so return the mid. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:76","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Ransom Note public boolean canConstruct(String ransomNote, String magazine) { int[] store = new int[26]; for (char c: magazine.toCharArray()) // First, fill the store with available store[c-'a']++; // characters from the magazine for (char c: ransomNote.toCharArray()) // Then, scan through the note, decrement if (--store[c-'a'] \u003c 0) // each char's index by 1 because we used return false; // it. If it's frequency drops below 0, return true; // then it means that we need more chars } // than available. In the end, return // true if everything worked out. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:77","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"First Unique Character in a String public int firstUniqChar(String s) { int[] freq = new int[26]; // Preprocess freq array to maintain freq of each char[] chars = s.toCharArray(); // character in the string s for (char c: chars) ++freq[c-'a']; for (int i = 0; i \u003c chars.length; i++) // Make a second pass through the chars of the if (freq[chars[i]-'a'] == 1) // string in order, and if any of the char's return i; // frequency is 1, that's our unique char return -1; // Otherwise, no unique character } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:78","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find the Difference /** The general idea here is same as the problem where we are required to find a unique int in an array containing duplicates except one. We use the xor operator between each character of the string s and t, and the ones that are duplicate will xor to give 0. XOR of any element with 0 is the element itself, and XOR of two same elements gives 0. This way, since string s and t basically has pairs of repeating characters except one, the unique element will XOR with 0 and give us it's ASCII code. The only thing we need to take care of is to now shift it up by 26, so we add 'a' and convert it to char. */ public char findTheDifference(String s, String t) { int xor = 0; for (char c: s.toCharArray()) xor ^= c-'a'; for (char c: t.toCharArray()) xor ^= c-'a'; return (char)(xor+'a'); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:79","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Nth Digit /** Notice that # of digits between 0-9 is 1*9, 10-99 is 2*90, 100-999 is 3*900. If we generalize it, it is exactly equal to 9 * (num of digits in the number) * 10^{# of digits - 1}. */ public int findNthDigit(int n) { if (n \u003c 10) return n; int pow = 1; // First we need to figure out how many digits there are long upperBound = 9; // in the number. while (n \u003e upperBound){ n -= upperBound; // If n is a two digit number, subtract the 9 single digit ++pow; // numbers, if 3 digit, subtract the first 189 digits. upperBound = (long)Math.pow(10, pow-1) * pow * 9; } // pow allows us to track how many digits there are in num. int num = (int)Math.pow(10,pow-1) + (n-1)/pow; // Calculate which number we want int position = pow - 1 - (n-1) % pow; // Calculate which index we want for (int i = 0; i \u003c position; i++) // Divide num that many times num /= 10; return num % 10; // num % 10 gives us that digit. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:80","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sum of Left Leaves public int sumOfLeftLeaves(TreeNode root) { if (root == null) // Empty tree, therefore total is 0. return 0; int sum = 0; // Initialize sum. // Look ahead and check. If left is not null but left is a leaf, then sum is the value of the left leaf. // But if left is null or left is an inner node, then we need to explore it, so sum is whatever the subtree from the left node returns. if (root.left != null \u0026\u0026 root.left.left == null \u0026\u0026 root.left.right == null) sum = root.left.val; else sum = sumOfLeftLeaves(root.left); // We computed the sum of the left side. Now we need to traverse the right side and fetch // the sum, so total sum is sum of the left side as computed above + sum returned by // traversing the right side. return sum + sumOfLeftLeaves(root.right); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:81","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Longest Palindrome public int longestPalindrome(String s) { int[] freq = new int[128]; // To record the frequency of each char for (char c: s.toCharArray()) freq[c]++; // Increment count by 1 for each character observed int len = 0; // length of the longest palindrome boolean isOdd = false; // Check if our palindrome length is odd for (int i = 0; i \u003c 128; i++){ // Go through each character's index if (freq[i] != 0){ // Only if it has been observed atleast once int val = freq[i]; // Store it's frequency int used; // Record how many of it's occurrences we will use if (val % 2 == 0) // If a perfect multiple of 2, we will use all used = val; else{ used = val-1; // If odd occurrences, then the max we can use to form a isOdd = true; // valid palindrome is val-1. It also tells us that the } // palindrome is going to be of odd length. len += used; // Finally, increment length by the number of chars used } } if (isOdd) // If length is odd, we can always insert any single return len+1; // character in the middle to keep the palindrome valid. return len; // If the length is even, then we can't do anything. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:82","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Fizz Buzz public List\u003cString\u003e fizzBuzz(int n) { List\u003cString\u003e nums = new ArrayList\u003cString\u003e(); for (int i = 1; i \u003c= n; ++i){ // Loop from 1 to n if (i % 15 == 0) // If i divisible by 15, add \"FizzBuzz\" nums.add(\"FizzBuzz\"); else if (i % 5 == 0) // i's not a multiple of 15, check if it's a nums.add(\"Buzz\"); // multiple of 5. If so, add \"Buzz\" else if (i % 3 == 0) // i's not a multiple of 5, check if it's a nums.add(\"Fizz\"); // multiple of 3, if so, add \"Fizz\" else nums.add(i+\"\"); // Otherwise, just add the String type of the } // number return nums; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:83","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Third maximum Number public int thirdMax(int[] nums) { if (nums.length == 0) // Empty array return 0; if (nums.length == 1) // Size 1 array return nums[0]; if (nums.length == 2) // Size 2 array, check between 0th element or 1st element return nums[0] \u003e nums[1] ? nums[0] : nums[1]; long firstMax = Long.MIN_VALUE; // Lowest values for all three long secondMax = Long.MIN_VALUE; long thirdMax = Long.MIN_VALUE; for (int i: nums){ // For each number in the array if (i \u003e firstMax){ // If num \u003e than the largest, then old largest thirdMax = secondMax; // becomes second largest and second largest becomes secondMax = firstMax; // first largest, then update the largest. firstMax = i; } else if (i \u003e secondMax \u0026\u0026 i != firstMax){ // If num \u003e second and num is not is the thirdMax = secondMax; // same as first, first largets becomes secondMax = i; // second largest and update the second } else if (i \u003e thirdMax \u0026\u0026 i != secondMax \u0026\u0026 i != firstMax) // // If num \u003e third, we thirdMax = i; // need to check that it is not the same } // as the first and second largest. if (thirdMax == Long.MIN_VALUE) // This check allows us to make sure that return (int)firstMax; // we do indeed have a third max and is return (int)thirdMax; // not what we initialized initially. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:84","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Add Two Strings public String addStrings(String num1, String num2) { if (num1.equals(\"0\")) return num2; if (num2.equals(\"0\")) return num1; /** We use a char array to maintain the digit at each index. We want the array to be of the size of the largest string + 1 to handle carry bit if any at the end. We start adding each digit of the string from the end, and place it in it's correct index at the end of the sum array. This way, we avoid reversing it and return the answer in constant time. Take care to convert the digit you compute by adding '0'. Lastly, if the carry bit is 1, we need to make the 0th index as 1, and return the string by using the sum array. If it's not 1, then the sum array has a leading 0 which we don't want. So we use Java's String constructor that takes in the char array, startingIndex in that array and the number of elements of that array we want. So if the carry isn't 1, we technically want everything from index 1 and # of elements = sum.length - 1 because we discard 0 index. */ char[] sum = new char[1 + Math.max(num1.length(), num2.length())]; int index = sum.length-1, idx1 = num1.length()-1, idx2 = num2.length()-1, carry = 0, total = 0; int n1, n2; while (idx1 \u003e= 0 || idx2 \u003e= 0){ n1 = idx1 \u003c 0 ? 0 : num1.charAt(idx1--)-'0'; n2 = idx2 \u003c 0 ? 0 : num2.charAt(idx2--)-'0'; total = n1 + n2 + carry; carry = total/10; sum[index--] = (char)(total % 10 + '0'); } if (carry == 1){ sum[0] = '1'; return new String(sum); } return new String(sum, 1, sum.length-1); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:85","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Construct Quad Tree private int[][] grid; // Store it once, instead of passing it over \u0026 over. public Node construct(int[][] _grid) { grid = _grid; return helper(0,0,grid.length); // Ask helper to build the tree. } private Node helper(int top, int left, int len){ if (len \u003c= 0) // Base case: if empty grid or if we are done return null; // checking the full grid, return null int key = grid[top][left]; // Get the topleft value, and start checking the box for (int i = 0; i \u003c len; ++i){ // of len*len. If at any point, the value doesn't for (int j = 0; j \u003c len; ++j){ // match the key, we have found a breakpoint from if (grid[top+i][left+j] != key){ // where we need to break the grid into four int offset = len/2; // grids, each of len = len/2. The topleft grid has return new Node(true, false, // the same top and left point, the topright helper(top,left, offset), // grid has left point shifted to helper(top, left + offset, offset), // the right by offset. helper(top+offset, left, offset), // The bottom left grid helper(top+offset, left+offset, offset)); // is shifted } // downwards by offset with the same left point. The bottom right grid will } // have an index where it's top is shifted down by len/2 and left by left/2. } // We know that the node will have a value = true if 1 else false and it won't be a leaf, so true, false, topleft, topright, bottomleft, bottomright. return new Node(key == 1, true, null, null, null, null); // Everything passed, so we return a new Node whose value is true if key is 1, else false and it will be a leaf, with // no children, so 4 nulls. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:86","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"N-ary Tree Level Order Traversal public List\u003cList\u003cInteger\u003e\u003e levelOrder(Node root) { List\u003cList\u003cInteger\u003e\u003e res = new ArrayList\u003c\u003e(); // Result list if (root == null) // If root is null, return empty list. return res; Queue\u003cNode\u003e q = new LinkedList\u003c\u003e(); // BFS Queue. Add the root. q.add(root); while (!q.isEmpty()){ // While q isn't empty int size = q.size(); // Check how many elements in that level List\u003cInteger\u003e level = new ArrayList\u003c\u003e(size);// level list to store elements. for (int i = 0; i \u003c size; i++){ // Remove each node for whatever the size Node n = q.poll(); // Add that node's value and add all of level.add(n.val); // its children to the queue. for (Node child: n.children) q.add(child); } res.add(level); // Add the level array to the result } return res; // Return the result list. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:87","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Number of Segments in a String public int countSegments(String s) { if (s.length() == 0) // Empty String return 0; int segments = 0; // Record segments char prev = s.charAt(0); // We will compare adjacent characters. for (int i = 1; i \u003c s.length(); ++i){ // Start looking at chars from index 0 char curr = s.charAt(i); // Get the current char if (prev != ' ' \u0026\u0026 curr == ' ') // If previous char wasn't a space but the ++segments; // current char is, we found a segment. prev = curr; // Make previous = current for next iteration } /** This line is important. If prev was an empty space, that means that all we have been looking at was empty spaces towards the end. So return whatever segments we found in the beginning of the string. But if prev wasn't a space, that means the char next to prev might have been an empty space or just a normal character. In any case, we would want to include that last segment, so we return segment+1. */ return prev == ' ' ? segments : segments+1; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:88","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Tree Level Order Traversal public List\u003cList\u003cInteger\u003e\u003e levelOrder(TreeNode root) { List\u003cList\u003cInteger\u003e\u003e result = new ArrayList\u003c\u003e(); if (root == null) // Empty Tree return result; Queue\u003cTreeNode\u003e q = new LinkedList\u003c\u003e(); // BFS Queue q.add(root); while (!q.isEmpty()){ // While we have something to process List\u003cInteger\u003e level = new ArrayList\u003c\u003e(); int size = q.size(); // Check how many elements at the current level for (int i = 0; i \u003c size; i++){ TreeNode node = q.poll(); // Remove one element each time if (node != null){ // If not null, add it's val to the level list, level.add(node.val); // and it's left and right children to the queue q.add(node.left); // to process in order q.add(node.right); } } if (!level.isEmpty()) // If level list wasn't empty, result.add(level); // add it to the result list. } return result; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:89","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Path Sum III HashMap\u003cInteger, Integer\u003e sumToWays; // Record how many ways there are to form sum int ways; // Total number of ways. public int pathSum(TreeNode root, int sum) { sumToWays = new HashMap\u003c\u003e(); ways = 0; sumToWays.put(0,1); // 1 way to form a sum of 0. helper(root, 0, sum); return ways; } /** The idea here is as follows. Start with the root node, and keep a running total. We maintain how many ways there to form a running sum. Then we check how many ways there are to form (running sum) - (sum we are looking for). If there is a way to form it, then we increase the number of ways to form sum. We then have to update the map to record how many ways can the running sum be formed. If it's something we could form before, increment it, or else set it to 1. Now, traverse the left side and then the right side. In the end, for each time we incremented the count for a running sum, we need to decrement it because we are backtracking. We are first going down, incrementing the count for runningSum, then we move up and decrement it by 1 for each time we observed it. This is to maintain the Pre-Order traversal. */ private void helper(TreeNode node, int runningSum, int sum){ if (node == null) return; runningSum += node.val; ways += sumToWays.getOrDefault(runningSum-sum, 0); sumToWays.put(runningSum, sumToWays.getOrDefault(runningSum, 0)+1); helper(node.left, runningSum, sum); helper(node.right, runningSum, sum); sumToWays.put(runningSum, sumToWays.get(runningSum)-1); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:90","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find All Anagrams in a String public List\u003cInteger\u003e findAnagrams(String s, String p) { List\u003cInteger\u003e result = new ArrayList\u003c\u003e(); int start = 0, end = 0, slen = s.length(), plen = p.length(); if (slen == 0 || slen \u003c plen || plen == 0) return result; int[] freq = new int[26]; // Store the freq of chars in p for (char c: p.toCharArray()) freq[c-'a']++; char[] sArr = s.toCharArray(); // Get the chars of the string s as an array while (end \u003c slen){ // While everything is not processed if (--freq[sArr[end]-'a'] \u003e= 0) // decrease the freq of the char at index end plen--; // if it's \u003e 0, then we matched something in p // so decrease plen by 1. while (plen == 0){ // If plen goes to 0, we were able to match all if (end-start+1 == p.length()) // chars of p. If length of the matched chars is result.add(start); // equal to length p, we found a start point. if (freq[sArr[start]-'a'] \u003e= 0) // Check if the freq of char at start index is plen++; // \u003e= 0. If it is, shift the window to the right ++freq[sArr[start++]-'a']; // but first restore the frequency of the char } // at the index start. end++; // Get ready to inspect the new element } return result; // Return the answer. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:91","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Arranging Coins The idea is as follows. Sum of first n numbers is given by $\\frac{n^2+n}{2}$. We need to find $n$ such that sum of $n$ numbers is closest to the number of coins we have. That is, $\\frac{n^2+n}{2} = k$ where $k$ is the number of coins we have. So, everything boils down to solving the quadratic equation $n^2 + n - 2k = 0$. We use the quadratic formula where for any quadratic equation $ax^2 -bx + c$ is solved substituting for $a$, $b$ and $c$ in $x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2}$. Here, $a$ and $b$ are always going to be 1, while $c$ is always going to be $2k$. Substitute those, and solve the equation. public int arrangeCoins(int n) { // return solveQuadratic(n); return iterative(n); } private int solveQuadratic(int n){ return (int)(Math.sqrt(1 + 8*(long)n)-1)/2; } private int iterative(int n){ int used = 1, level = 0; // Coins used, and level completed. while (n \u003e 0){ // While coins left are greater than 0. n-=used; // Calculcate remaining coins. if (n \u003e -1) // If there are still some coins left, ++level; // we were able to fill the level. ++used; // Prepare used for the next level, which is plus 1. } return level; // Return level } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:92","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Hamming Distance public int hammingDistance(int x, int y) { int diff = 0; // Track differences while (x != 0 || y != 0) { // While both of them aren't 0 if (x % 2 != y % 2) // Check the bit of x and y by mod 2. If they are unequal diff++; // increment difference. x /= 2; // Divide x and y by 2. y /= 2; } return diff; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:93","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"String Compression public int compress(char[] chars) { int len = chars.length; // No need to reverse array of length 0 or 1 if (len \u003c 2) return len; int arrayIndex = 0; // To maintain the length of new array. int start = 0; // start index int end = 0; // end index while (end \u003c len){ char first = chars[start]; // Record the char we are looking at. int count = 0; // count is 0. while (end \u003c len \u0026\u0026 chars[end] == first){ // while the char is the same ++end; // increment end to check next char ++count; // and increment the count. } start = end; // shift start to end to check next sequence of chars chars[arrayIndex++] = first; // our arrayIndex points to to the new array's if (count != 1){ // indices. So copy the first char to arrayIndex. if (count \u003e 1 \u0026\u0026 count \u003c 10) //Only if count isn't 1, if count is less than 10 chars[arrayIndex++] = (char)(count+'0'); // then we simply convert count to char and write it next to the char we just overwrote. else // Otherwise, it has many digits. So convert it to for (char c: String.valueOf(count).toCharArray()){ // string and add all it's digit to the array one by one while increment arrayIndex. chars[arrayIndex++] = c; } } } return arrayIndex; // Wherever arrayIndex is, is the new length for the array. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:94","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Number of Boomerangs public int numberOfBoomerangs(int[][] points) { int boomerangs = 0; HashMap\u003cDouble, Integer\u003e map = new HashMap\u003c\u003e(); // To record points with same dist for (int[] i: points){ // Compute distance between one point and every other. map.clear() // clear map before each relative distance computation for (int[] j: points){ // Compute distance with other points if (i == j) // Don't compare the same two points. continue; double dist = Math.sqrt(Math.pow(i[0]-j[0],2) + Math.pow(i[1]-j[1],2)); int prevCount = map.getOrDefault(dist, 0); // Check how many points are equidistant from point i. boomerangs += prevCount * 2; // Number of boomerangs = whatever pairs there were before times 2, because you can form twice the number of different orders. map.put(dist, prevCount+1); // Increase the count of points observed for that distance. } } return boomerangs; // return number of boomerangs } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:95","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find All Numbers Disappeared in an Array /** The idea is simple. For each number in the array, since it's gauranteed that that the values lie are inclusive [1,n], we can look at the index value-1. So check that index, and mark that value as negative. That is why I take the absolute value. Check value at that index, if negative, it means we have visited it via some other duplicate value. But if it's positive, then we are seeing it for the first time, so make it's value negative. Make a second pass. For values that are still positive, that means those indices were never visited, hence left positive. So add 1 to them and add it to the set. Eg: Given array a = [4,3,2,7,8,2,3,1], 1. val = 4 =\u003e idx = 3 \u0026 a[3] \u003e 0, therefore, a[3] *= -1 a = [4,3,2,-7,8,2,3,1] 2. val = 3 =\u003e idx = 2 \u0026 a[2] \u003e 0, therefore a[2] *= -1 a = [4,3,-2,-7,8,2,3,1] 3. val = -2 =\u003e idx = abs(-2)-1 = 1 \u0026 a[1] \u003e 0, therefore a[1] *= -1 a = [4,-3,-2,-7,8,2,3,1] 4. val = -7 =\u003e idx = abs(-7)-1 = 6 \u0026 a[6] \u003e 0, therfore a[6] *= -1 a = [4,-3,-2,-7,8,2,-3,1] 5. val = 8 =\u003e idx = abs(8)-1 = 7 \u0026 a[7] \u003e 0, therfore a[7] *= -1 a = [4,-3,-2,-7,8,2,-3,-1] 6. val = 2 =\u003e idx = 1 but a[2] \u003c 0. No change. 7. val = -3 =\u003e idx = abs(-3)-1 = 2 but a[2] \u003c 0. No change. 8. val = -1 =\u003e idx = abs(-1)-1 = 0 \u0026 a[0] \u003e 0, therefore a[0] *= -1 a = [-4,-3,-2,-7,8,2,-3,-1] Observation: Notice index 4 and 5 have positive values, since those values were never encountered, so the values at those indexes never became negative. Hence missing values are 5 and 6. */ public List\u003cInteger\u003e findDisappearedNumbers(int[] nums) { List\u003cInteger\u003e result = new ArrayList\u003c\u003e(); for (int i: nums){ // For each number in the array int idx = Math.abs(i)-1; // Look at the index that the number corresponds to if (nums[idx] \u003e 0) // If val is -ve, then it means we have encountered it. nums[idx] *= -1; // If not, make it -ve. } for (int i = 0; i \u003c nums.length; ++i) if (nums[i] \u003e 0) // Make another pass through the array, and the indices result.add(i+1); // where value was positive, index+1 was missing from return result; // the array } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:96","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Assign Cookies /** We will employ a greedy algorithm where we first try to content children whose requirements are small. We do this by sorting both the arrays, so we can match the child with least requirement with the smallest cookie available. */ public int findContentChildren(int[] g, int[] s) { Arrays.sort(g); Arrays.sort(s); int satisfied = 0, i = 0, j = 0; while (i \u003c g.length \u0026\u0026 j \u003c s.length){ // While children are left and we have cookies, if (s[j] \u003e= g[i]){ // Check if the cookie at index j \u003e= child i's requirement satisfied++; // If so, increment the number of content child and we will i++; // process the next child. } // If cookie j \u003c child i's demand, check the next cookie by j++; // incrementing j. If cookie j \u003e child i's demand, we will } // still need to increment j, hence outside the conditional. return satisfied; // Return number of satisfied children } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:97","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Poor Pigs Link to the solution explanation. This problem is phrased poorly and I had to read the comments by other users to understand what it required from me. The link I marked here explains the logic pretty good. But the simple logic is this: The number of rounds $r = \\frac{Total Test Time}{Minutes To Die} +1$. Each pig has chances of dying in each round or staying alive till the end, so we plus 1. Now given the number of rounds $r$ and the number of samples $s$, how many volunteers $v$ will you need? $r^v = s$. Each round has some volunteers which in total at the end should be able to test out all the samples. Therefore, $v =\\log_rs$. public int poorPigs(int buckets, int minutesToDie, int minutesToTest) { int base = minutesToTest/minutesToDie+1; // How many rounds can you perform? return (int)Math.ceil(Math.log(buckets)/Math.log(base)); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:98","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find Pivot Index public int pivotIndex(int[] nums) { int sum = 0, leftSum = 0; // We will test each index as a pivot by sliding it -\u003e for (int i: nums) // Precalculate the sum of the array sum += i; for (int i = 0; i \u003c nums.length; ++i){ // Check if the sum of the leftSide of i is if (leftSum == sum - leftSum - nums[i]) // equal to totalSum - leftSideSum - pivot return i; // which is i. If so, return i. leftSum += nums[i]; // Otherwise add nums[i] to the leftSum and } // slide pivot to the -\u003e. return -1; // No pivot found. Return -1. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:99","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Squares of a Sorted Array public int[] sortedSquares(int[] A) { int len = A.length; // Length of array A int pivot = 0; // Pivot is the index where values goes from -ve to +ve. while (pivot \u003c len \u0026\u0026 A[pivot] \u003c 0) // While values are -ve. ++pivot; // increment pivot. We exit when we find a positive. int[] squares = new int[len]; // Result array int index = 0; // Keeps track of where to where to put elements in result array if (pivot == 0) // pivot = 0 means pivot didn't shift, there are only +ve values for (int i: A) // So fill in the array with squares of numbers. squares[index++] = i*i; else{ // Otherwise we have a negative somewhere. int left = pivot-1; // So we will compare values left and right of the pivot int right = pivot; // and whichever's smaller fills up the array first. while (left \u003e -1 \u0026\u0026 right \u003c len){ int lsquare = A[left] * A[left]; int rsquare = A[right] * A[right]; if (lsquare \u003c rsquare){ // left \u003c right, so add left square. decrement left squares[index++] = lsquare; --left; } else if (rsquare \u003c lsquare){ // right \u003c left, add right square and increment. squares[index++] = rsquare; ++right; } else{ squares[index++] = lsquare; // both are equal. add both square and squares[index++] = rsquare; // decrement left, increment right. --left; // Continue doing this until we hit either end ++right; // of the array. } // In the end we need to check if elements on } // either side are left to be filled in. while (left \u003e -1) // Left side elements remain, so fill their squares[index++] = A[left] * A[left--]; // squares one by one till none left. while (right \u003c len) // Right side elements remain, so fill their squares[index++] = A[right] * A[right++]; // squares in } return squares; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:100","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Repeated Substring Pattern We use the KMP Algorithm that allows us to match a string ’s’ with another string ‘p’ to find the longest sequence of characters in ’s’ that match ‘p’. We can use a Naive Pattern match where we start from the beginning of the string and start comparing the characters of ’s’ with ‘p’. Initially, we keep the partition at index 0. If the character’s match, we move partition to the right by 1 till we get to the end of the string. If something doesn’t match, we don’t move the partition but look at the next character to match. In the end, wherever the partition is, that’s our longest length we could match with string ‘p’. The complexity of that is O(len(p)(len(s)-len(p)+1)). KMP fixes it by skipping characters that we know already match. In this problem, we aren’t matching with any other string but itself. So, we start from index 1 of the string and compare it from the beginning. If they match, we increase j by 1, note it down in lps array and then increase i by 1 to check the next character. j basically measures the longest chain of characters we were able to match. If we couldn’t match character at index i and if streak was greater than 0, then our new streak becomes whatever it was in the previous round of matching characters. If the streak is 0, then we simply note down at index i in our lps array 0, meaning longest length measured upto index i was 0. public boolean repeatedSubstringPattern(String s) { int maxLength = lps(s); return maxLength \u003e 0 \u0026\u0026 s.length() % (s.length() - maxLength) == 0; } private int lps(String s){ int len = s.length(); int[] lps = new int[len]; int i = 1; // To match the string with itself. int j = 0; while (i \u003c len){ if (s.charAt(i) == s.charAt(j)){ // if the chars match lps[i] = ++j; // we record that # of matches at index i was ++i; // 1+j and increment i to check next character } else{ // character did not match if (j \u003e 0) // If our matching streak \u003e 0 j = lps[j-1]; // our new streak becomes the previous round's streak else // Otherwise, streak is already 0. lps[i++] = 0; // So we record that # of matches made at i is 0 } // We increment i to check next index. } return lps[len-1]; // Longest prefix length that was also a suffix } // is whatever was recorded at the end of array. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:101","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Island Perimeter The idea is simple. Count the number of cells with value 1 which denotes the land. Check towards the left and up to that cell and check if it shares any edge with another cell with value 1. If it does record that. In the end, the formula for perimeter is 4 * (the number of land cells) - 2 * (overlapping edges). Reasoning: Perimeter of a square is 4 times the length of it’s side. Here all squares are of length 1. So total perimeter is 4*(number of cells with value = 1). But we also need to account the edges that are common between two adjacent land cells. If one square shares an edge with another, we just lost one side from both the square, resulting in a loss of two sides. Therefore, we need to subtract twice the number of overlapping edges from the total perimeter to get the total perimeter. public int islandPerimeter(int[][] grid) { int land = 0; int overlap = 0; for (int row = 0; row \u003c grid.length; ++row) for (int col = 0; col \u003c grid[0].length; ++col){ if (grid[row][col] == 1){ ++land; if (row-1 \u003e -1 \u0026\u0026 grid[row-1][col] == 1) // Check above the current cell. ++overlap; // If it's a land, we need to record one overlap. if (col-1 \u003e -1 \u0026\u0026 grid[row][col-1] == 1) // Similarly, check to the left. ++overlap; // If it's a land, we need to increment overlap } } return 4*land - 2*overlap; // Check the reasoning above. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:102","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Number Complement public int findComplement(int num) { int pow2 = 1; // Easily keep track of power of 2. int comp = 0; // Complement number while (num != 0){ // Since num gets divided by 2, it will be 0 in the end. int bit = num % 2 == 0 ? 1 : 0; // If bit is 0 then complement is 1 \u0026 vice versa. comp += bit * pow2; // Multiply it by the appropriate power of 2 and add to comp pow2 *= 2; // Update power of 2 for next iteration. num /= 2; // Divide num by 2 to get the next bit. } return comp; // Comp is now the complement. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:103","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Watch The idea is as follows. We have 10 lights. First 4 represent hours. Namely 1, 2, 4 and 8, which are the first four powers of 2. The next 6 lights, represent minutes. Those are 1, 2, 4, 8, 16 and 32. These are powers of 2 from 0-5. So if we iterate from 1 to 9, powers of numbers 1-3 gives us hours and powers of numbers 4-9 minus 4 gives us minutes. So, if we have, let’s say 2 lights, we need to find every combination of 2 lights. So in our helper function, we iterate from 1-9 to check every hour and minute combination. We also need to keep a track of the lights that we used, so we don’t use the same light again. If hours are \u003e 11 or minutes are \u003e 59, we have an invalid time and we can abort. If the number of lights are 0, that means we found a valid time and we should add it to the result. Now, if the lights are not 0, then we need to check every possible combination from the last light used to 9. If i \u003c 4, then we are looking at an hourly combination, otherwise it’s a minute combination. So we recurse with updated lights used, decrease the numOfLights since we used one, update respective hours or minutes until we hit base case. List\u003cString\u003e result; public List\u003cString\u003e readBinaryWatch(int num) { result = new ArrayList\u003c\u003e(); helper(0, num, 0, 0); return result; } private void helper(int lightsUsed, int numOfLights, int hrs, int min){ if (hrs \u003e 11 || min \u003e 59) // Base case. Invalid time return; if (numOfLights == 0){ // All lights used, so add time to the list. result.add(hrs + \":\" + (min \u003c 10 ? \"0\" + min : min)); return; } for (int i = lightsUsed; i \u003c 10; i++){ // Otherwise start recursing from number of prev if (i \u003c 4) // light used. i \u003c 4 means hours helper(i+1, numOfLights-1, hrs + (int)Math.pow(2, i), min); else // i = [4,9] means minute. So recurse. helper(i+1, numOfLights-1, hrs, min + (int)Math.pow(2,i-4)); } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:104","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Minimum Moves to Equal Array Elements This was an interesting problem. But after working out a few examples by hand, you can notice that it is always a question of bringing the minimum element in par with everyone. So if you know the minimum of the array, we can check how many steps it will take to bring the minimum in par with other element by calculating the distance between them. For example, Let the array be [1,2,3] We can observe that the minimum here is 1. Let us list down all steps to make all elements equal. [2,2,4], Keeping the second element fixed. Notice that distance between the element where 1 was and where 3 was is till the same. [3,3,4], Keeping the last element fixed. [4,4,4], Keeping last element fixed. Here, we first tried to make 1 equal to it’s neighbor, which required us 1 step. Now, once it becomes equal to 1, the problem is how to make the last element in the original array, which is 3 equal to 1. It requires 2 steps, resulting in a total of of 3. The reason is that the moment you decide to increment the minimum element to match the next element, you fix the neighboring element and have to increment everything else. This will make the minimum and its neighbor the same, but it will also keep the distance between the minimum and all other elements the same because we just incremented everything. So, the total number of moves required is the distance between the elements of the array and the minimum. public int minMoves(int[] nums){ int min = nums[0]; for (int i: nums) if (i \u003c min) min = i; int moves = 0; for (int i: nums) moves += i-min; return moves; } Now the above solution required two passes of the array. Can we do even better? Notice that in the end, all we are doing is finding the min and subtracting min from all the elements in the array. That means we are subtracting min n times where n is the length of the array. Why n times? Because there are n elements in the array. Shouldn’t it be (n-1) times? No, because the distance of the min from min is 0. So we need to subtract min from itself too, so n times. We can achieve this by first calculating the total of the array while simultaneously keeping track of the minimum. Once done, all we need to do is subtract min n times from the sum, which is equivalent to subtracting min from each element. This results in a much overall better algorithm, requiring only 1 pass of the array. public int minMoves(int[] nums) { int sum = 0, min = nums[0]; for (int i: nums){ sum += i; if (i \u003c min) min = i; } return sum - min*nums.length; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:105","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"License Key Formatting The idea is simple. I maintain a temporary array s that contains only the characters in string S after converting them to uppercase. I maintain a variable length that counts how many characters I found in the string S. If length is 0, that means it contains only dashes (-). Then I record the offset. Offset basically measures how many characters of the String S will be grouped unevenly in the beginning part of the string. I can check that by using the modulus operator and finding out the remainder. That many characters (of length \u003c K) will be in the beginning part of the string. Next step is to calculate how many dashes I will need. It’s basically length / K. Then I create the char array that will hold the characters of the formatted key. It’s length will be number of characters + the dashes we will need. We need to take care of a special case here. If the offset is 0, meaning I was able to divide characters in equal group, I need to subtract 1. Eg, let’s say we had 8 characters and K was 4. dashes = 8 / 4 = 2. We can divide 8 characters equally into 2 groups using only 1 dash. But since dashes was 2, it is clearly off by 1. This is the case when offset is 0. kIndex tracks where character is to be inserted in the key array. used tracks how many characters of the array s, which indirectly holds the characters of String S, are used. First I copy down the characters of length offset. Because those are the ones of uneven length. kIndex and used variables are updated. Last thing to do is to use all the remaining characters in array s, but we take K characters at a time, because we know that the segments are going to be of equal length. We also need to insert ‘-’ after each segment, but only if kIndex is not at the beginning or at the end of the key array, because inserting it at those points is invalid. Create a new string and return it. public String licenseKeyFormatting(String S, int K) { char[] s = new char[S.length()]; int length = 0; for (char c: S.toCharArray()) if (c != '-') s[length++] = Character.toUpperCase(c); if (length == 0) return \"\"; int offset = length % K; int dashes = length / K; char[] key = new char[length + dashes + (offset == 0 ? -1 : 0)]; int kIndex = 0; int used = 0; while (used \u003c offset) key[kIndex++] = s[used++]; while (used \u003c index){ if (kIndex \u003e 0 \u0026\u0026 kIndex \u003c key.length) key[kIndex++] = '-'; for (int i = 0; i \u003c K; ++i) key[kIndex++] = s[used++]; } return new String(key); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:106","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Max Consecutive Ones Solution 1: I came up with this solution initially. 4 ms runtime and passes 99.97% submissions. public int findMaxConsecutiveOnes(int[] nums) { int start = 0; // Keep track of start of a streak, if any int max = 0; // max length of the streak while (start \u003c nums.length){ // While we are not at the end of the array if (nums[start] == 1){ // Check if we have a 1 at start, if so int streak = 0; // initialize streak and check how long can we continue while (start \u003c nums.length \u0026\u0026 nums[start] == 1){ // that streak. ++streak; // Increment streak and left for each consecutive 1 ++start; // make sure you don't forget that start \u003c nums.length } // before checking nums[start] to prevent out-of-bounds if (streak \u003e max) // Check if the current streak is better than the max = streak; // previous streak. } ++start; // Increment start in either case to check for new } // streaks. return max; } Solution 2: After analyzing the problem further, I noticed that 0 denotes the end of a streak. If we observe 1, we increment streak by 1. But if I see a 0, I reset my streak to 0. This solution too had a 4 ms runtime and passed 99.97% submissions. public int findMaxConsecutiveOnes(int[] nums) { int max = 0; // Global max streak int streak = 0; // Local max streak. for (int i: nums){ // For each number in nums if (i == 1){ // If we see a 1 ++streak; // increment our ongoing streak. if (streak \u003e max) // If the local streak \u003e global max max = streak; // update global max streak. } else // otherwise we just saw a 0. streak = 0; // So our streak resets to 0. } return max; // return the global max streak. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:107","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Permutations The idea is as follows. Given an array a = {1,2,3}, we want to generate all it’s possible combinations. What we are trying to do here is that we first take the element at index 0, and find permutations of the remaining thing. When we do that, we insert the element at index 0 in front of the list to get 1 permutation. Similarly, we then take the element at index 1, and permute the remaining contents of the array and insert the element at index 1 in the beginning of the array to get another permutation and so on. In this problem, we are asked to return a list of list, so we first copy the numbers of the array into an ArrayList. Let’s run this code for the above example. Given nums = {1,2,3}, our ArrayList will be the same, al = [1,2,3]. Our result list is empty, result = [] and index = 0. helper([1,2,3], 0) swap (0, 0) → al = [1,2,3] helper(1,2,3, 1) swap(1, 1) → al = [1,2,3] helper([1,2,3], 2) swap(2, 2) → [1,2,3] helper([1,2,3], 3) We update our result list now, because index == length. Therefore, result = [[1,2,3]]. Our recursive stack collapses and we move on to the next instruction, which is undo the step, al = [1,2,3]. swap(1, 2) → al = [1,3,2] helper([1,3,2], 3) Again, index == length, add it to the list. result = [[1,2,3], [1,3,2]]. Recursion stack collapses, we undo the swap, al = [1,2,3] swap(0, 1) → al = [2,1,3] helper([2,1,3], 1) swap(1,1) → al = [2,1,3] helper([2,1,3], 2) swap(2, 2) → al = [2,1,3] helper([2,1,3], 3) index == length, add the current order to the list. result = [[1,2,3], [1,3,2], [2,1,3]] swap(1, 2) → al = [2,3,1] helper([2,3,1], 3) index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1]] swap(0, 2) → al = [3,2,1] helper([3,2,1], 2) swap(2,2) → al = [3,2,1] helper([3,2,1], 3) index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1]] swap(1,2) → al = [3,1,2] helper([3,1,2], 3) index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]] All branches have been explored now, since the iteration ends and we return the result list. int len; // To store the length of the input array List\u003cList\u003cInteger\u003e\u003e result; // Result list public List\u003cList\u003cInteger\u003e\u003e permute(int[] nums) { result = new ArrayList\u003c\u003e(); List\u003cInteger\u003e numList = new ArrayList\u003c\u003e(); // Creating a copy of the nums array for (int i: nums) // because it's easier to create a list from a list. numList.add(i); // Add everything to the list. len = nums.length; helper(numList, 0); // Call the aux function. return result; } private void helper(List\u003cInteger\u003e order, int index){ if (index == len) // If we have checked all the numbers in the array, add a result.add(new ArrayList\u003c\u003e(order)); // clone of the list to the array. for (int i = index; i \u003c len; ++i){ // Otherwise from index to the end of the array, swap(order, i, index); // take one element, swap it with itself, then the next and helper(order, index+1); // so on. Recurse again, but on the next index we just swapped. swap(order, i, index); // Undo the swap so that it helps us in generating the next } // permutation. } private void swap(List\u003cInteger\u003e list, int i, int j){ // Swap elements in a list. int temp = list.get(i); list.set(i, list.get(j)); list.set(j, temp); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:108","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Construct the Rectangle The idea is very simple. We just need to iterate from width = sqrt(area) to 1 and check if area is perfectly divisible by width. If at any point, width is divisible, then that must be our minimum difference length and width, because we are diverging from the center on both sides. Width decreases while length keeps increasing. Think of it like this, for area = 24, we have many factors of 24, namely 1, 2, 3,4, 6, 8, 12, 24. It’s sqrt when rounded down is 4. So we check for width = 4, is 24 perfectly divisible by 4? Yes, so divide it and whatever you get is going to be the minimal difference values. Suppose 4 and 6 weren’t the factors for 24. In that case we decrease width by 1, which is 3. Check again, is 24 divisible by 3. Yes? Then that must be our answer. We are diverging away from the center on both sides equally, width to the left towards 1 and length to the right towards area . Therefore the moment we find one value that divides area perfectly, that’s our required values. public int[] constructRectangle(int area) { int[] dimensions = {area, 1}; // We know that if nothing works out, n*1 is always boolean done = false; // going to be the answer int width = (int)Math.sqrt(area); // We only need to check width from sqrt(area) while (!done){ // While not done if (area % length == 0){ // check if area is perfectly divisible by width dimensions[0] = width; // if so, we found our width and the length. dimensions[1] = area/width; done = true; // mark done as false } --width; // otherwise decrease the length } return dimensions; // return the dimensions found. ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:109","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Merge Intervals public List\u003cInterval\u003e merge(List\u003cInterval\u003e intervals) { if (intervals == null || intervals.size() \u003c 2) return intervals; Collections.sort(intervals, (a,b) -\u003e a.start-b.start); // Sort the list so we can // compare adjacent intervals. List\u003cInterval\u003e merged = new ArrayList\u003c\u003e(); merged.add(intervals.get(0)); // Add the initial interval. for (Interval i: intervals){ // For each interval Interval last = merged.get(merged.size()-1);// Get the last added time. if (i.start \u003e last.end) // If it's time is greater than the last merged.add(i); // interval's end, it doesn't overlap else{ // otherwise it does. last.end = last.end \u003e i.end ? last.end : i.end; // So check which has greater end time, and make the last added interval's time equals that merged.set(merged.size()-1, last); // And set it as the last added interval } } return merged; // Return the merged list. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:110","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Merged sorted lists counterA keeps track of which element we are looking at in array ‘a’. Same with counterB counterK keeps track of where to insert the element in array ‘a’, since a has enough space. The problem states that it might have more than enough space, so we use only the spaces we need, which is the total of both their sizes. Since indexing in an array is 0-based, we subtract 1. We insert elements from the end, since the end part of ‘a’ is empty. We can insert from the front, but then we would need to shift elements to the right after each insertion from ‘b’. If array values are equal, add them to the end, and decrease both their counter to check new values in the next iteration If not equal, then check which one is greater, since the last part of the array should contain larger values. Whichever’s greater, put it in ‘a’ at index ‘counterA’ and decrement the respective counter. In the end, we might have some leftover elements either from ‘a’ or ‘b’ because we only process elements that are equal to the min(size(a), size(b)), until we run out of elements in one of the array. So, whichever array has elements pending, add it to the front of the array and return a. public int[] merge(int[] a, int sizeA, int[] b, int sizeB) { int counterA = sizeA-1, counterB = sizeB-1, counterK = sizeA+sizeB-1; while (counterA \u003e -1 \u0026\u0026 counterB \u003e -1){ if (a[counterA] == b[counterB]){ a[counterK--] = a[counterA--]; a[counterK--] = b[counterB--]; } else a[counterK--] = a[counterA] \u003e b[counterB] ? a[counterA--] : b[counterB--]; } while (counterA \u003e -1) a[counterK--] = a[counterA--]; while (counterB \u003e -1) a[counterK--] = b[counterB--]; return a; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:111","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Next Greater Element I public int[] nextGreaterElement(int[] nums1, int[] nums2) { HashMap\u003cInteger, Integer\u003e index = new HashMap\u003c\u003e(); // We use the hashmap to keep a for (int i = 0; i \u003c nums2.length; ++i) // track of the index of each value index.put(nums2[i], i); // in nums 2. That way, when we want // to look for a value greater than a val in nums1, we know int[] result = new int[nums1.length]; // which index to start iterating from. for (int i = 0; i \u003c nums1.length; ++i){ // So for each val in nums1 int val = nums1[i]; for (int j = index.get(val); j \u003c nums2.length; ++j){ // Iterate from that value's if (nums2[j] \u003e val){ // index in nums2 to the end, and see if you can result[i] = nums2[j]; // find any val \u003e nums1[i]. If you do, save it break; // in the result array and break the loop. } } if (result[i] == 0) // Now if we didn't find any value, then result[i] would be result[i] = -1; // 0, so we set that index to -1 in our result array. } return result; // simply return the result array. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:112","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"String Without AAA or BBB public String strWithout3a3b(int A, int B) { char[] ch = new char[A+B]; // We create an char array to store string chars int index = 0; char max = A \u003e B ? 'a' : 'b'; // record the most frequent occurring element char min = max == 'a' ? 'b' : 'a'; // and the least frequent occurring element while (A \u003e 0 || B \u003e 0){ // While we haven't added all of the elements // We check that if our current index \u003e 1 and our previoud two characters in the array // are the same, then we must have written the max occurring char, so it's time to write // the minimum occurring element. We write it, and then decrement the specific A or B. if (index \u003e 1 \u0026\u0026 max == ch[index-1] \u0026\u0026 max == ch[index-2]){ ch[index++] = min; if (min == 'a') // If the minimum freq element is 'a', decrement A A--; else B--; // otherwise decrement B } else if (B \u003e A){ // Otherwise, if B occurs more than A, then set char to B ch[index++] = 'b'; // decrement B and increment index B--; } else{ // A occurs more, so add A to the char array. ch[index++] = 'a'; // Increment index, decrement A count A--; } } return new String(ch); // Create a string from the char array and return it. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:113","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Keyboard Row // Maps each character to the row in the keyboard in which it occurs. private int[] map = {2,3,3,2,1,2,2,2,1,2,2,2,3,3,1,1,1,1,2,1,1,3,1,3,1,3}; public String[] findWords(String[] words) { String[] w = new String[words.length]; // Store filtered words int index = 0; // Where to insert the filtered words for (String s: words) // for each word in words if (checkWord(s.toLowerCase())) // convert it to lowercase and check if all char w[index++] = s; // occurs in the same row, if it does, add it return Arrays.copyOfRange(w, 0, index); // Simply return a copy of the array from 0 } // index private boolean checkWord(String word){ // Check if all chars in the word belong in the int row = map[word.charAt(0)-'a']; // same row. Check first chars row for (char c: word.toCharArray()){ // For all the chars in the word if (map[c-'a'] != row) // if that char belongs to a different row, return false; // return false } return true; // All chars in same row, return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:114","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find Mode in Binary Search Tree private TreeNode parent; // Keep track of parent at each node private int maxMode; // maxMode we found private int currentMode; // mode recorded at each node private Set\u003cInteger\u003e modes; // keep distinct modes found public int[] findMode(TreeNode root){ if (root == null) // node is null, so return empty array return new int[0]; maxMode = 1; // we have just seen the root, so maxMode so far is 1. currentMode = 1; // so is the current mode modes = new HashSet\u003c\u003e(); modes.add(root.val); // add the root to our modes set traverse(root); // start traversing it's left and right branches int[] result = new int[modes.size()]; // We have found all the modes int idx = 0; // keep track of where to insert elements in result array for (int i: modes) // add all the distinct modes one by one result[idx++] = i; return result; // and return it. } private void traverse(TreeNode node){ if (node == null) // if node is null, stop return; // otherwise traverse the left branch traverse(node.left); // Once we hit the null, we start backtracking to the leaf updateMode(node); // then we call updateMode with the node parent = node; // once it's done, we update parent as the current node, so traverse(node.right); // when we backtrack, we can easily check that node and it's } // next node's value for similarity. Then traverse right. private void updateMode(TreeNode node){ if (parent != null \u0026\u0026 parent.val == node.val){ // If parent node isn't null and the ++currentMode; // node's value is the same as parent, we update currentMode if (currentMode \u003e= maxMode){ // If the currentMode is greater or equal to maxMode if (currentMode \u003e maxMode) // just check if it's greater. If it is, remove all modes.clear(); // previously recorded modes modes.add(node.val); // Add the current node to the set and update the maxMode = currentMode; // maxMode } } else{ // otherwise, value's aren't the same. so our currentMode currentMode = 1; // becomes 1. If maxMode is also 1, then all we have been if (maxMode == 1) // seeing are distinct values, so add that node's value to modes.add(node.val);// to the mode's set. } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:115","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Base 7 Solution 1 without StringBuilder (Beats 100%, 7ms) public String convertToBase7(int num) { if (num == 0) return \"0\"; int len = (int)(Math.log(Math.abs(num))/Math.log(7))+1; // Calculate # of bits int idx; // where to start inserting from char[] digits; if (num \u003c 0) { // If num is negative num = -num; // Make it positive digits = new char[len+1]; // We need one more space for -ve sign in the front digits[0] = '-'; // Put the -ve sign idx = len; // and index is now len } else{ digits = new char[len]; // otherwise we only need \"len\" spaces idx = len-1; // index is len-1 } while (num != 0) { // While num != 0, calculate remainder and add it. digits[idx--] = (char)(num % 7 + '0'); // Divide number by 7 num /= 7; } return new String(digits); // Just create a string and return it. } Solution 2 with StringBuilder public String convertToBase7(int num) { StringBuilder sb = new StringBuilder(); boolean isNegative = num \u003c 0; // Just so we can know if we need to add the \"-\" sign if (num \u003c 0) // Take the absolute value of num num = -num; while (num \u003e 6) { // Keep adding the remainder, and dividing num by 7. sb.append(num % 7); num /= 7; } sb.append(num); // Add whatever is left at the end. if (isNegative) // If num was negative, add the minus sign. sb.append('-'); return sb.reverse().toString(); // Reverse the builder and return the toString() } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:116","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Relative Ranks The idea employed here is simple. We need to store the relative ranks in sorted order. We can sort the array for that, but that is O(n log n). We can do better than that by finding the relative rank in linear time. First we find the maximum score in the array and create another array of length = maxScore + 1. We add 1 so that when we see the maxScore in the nums, we can assign it to maxScore index. Once we have done that, now we iterate over the nums array. Variable i keeps track of what rank to assign. We check a value in the array and at that index in our reverse sorted array, we put i+1, which basically marks it’s rank based on it’s position in the rankings. Some of then indexes would be default, that is a score of 0. We then check each value in the descend array and if it’s not 0, we assign it a rank, but not if the ranks are 1, 2 or 3. In that case, we assign it a special value of Gold, SIlver or Bronze. public String[] findRelativeRanks(int[] nums) { int maxScore = nums[0]; for (int n: nums) if (n \u003e maxScore) maxScore = n; int[] descend = new int[maxScore+1]; for (int i = 0; i \u003c nums.length; ++i) descend[nums[i]] = i+1; String[] result = new String[nums.length]; int rank = 1; for (int i = descend.length-1; i \u003e -1; --i){ int idx = descend[i]; if (descend[i] != 0){ if (rank == 1) result[idx-1] = \"Gold Medal\"; else if (rank == 2) result[idx-1] = \"Silver Medal\"; else if (rank == 3) result[idx-1] = \"Bronze Medal\"; else result[idx-1] = rank + \"\"; ++rank; } } return result; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:117","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Perfect Number public boolean checkPerfectNumber(int num) { if (num == 1) // 1 is a special case, where it's only factor is itself. return false; int total = 1; // We know our total will atleast be 1, 1 is everyone's factor for (int i = 2; i \u003c= Math.sqrt(num); ++i) // Only loop through num's sqrt if (num % i == 0){ // If i divides num perfectly int otherFactor = num/i; // Calculate the other factor total += i + (otherFactor == i ? 0 : otherFactor); // If i and other factor are } // different, add them both, otherwise just i. return total == num; // Check in the end if your total is the same as num } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:118","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Detect Capital public boolean detectCapitalUse(String word) { int len = word.length(); if (len \u003c 2) // Empty or size 1 words are ok. return true; char[] chars = word.toCharArray(); // Get the char array boolean isUpper = false; // by default we let isUpper to false if (chars[0] \u003e= 'A' \u0026\u0026 chars[0] \u003c= 'Z') // Check if first two letters are uppercase isUpper = chars[1] \u003e= 'A' \u0026\u0026 chars[1] \u003c= 'Z'; // If first was upper and second wasnt for (int i = 1; i \u003c len; ++i){ // isUpper = false, otherwise true. boolean isAlsoUpper = chars[i] \u003e= 'A' \u0026\u0026 chars[i] \u003c= 'Z'; // We check onwards 1 char if (isUpper \u0026\u0026 !isAlsoUpper) // If that char is lower and previous part was return false; // not lower, invalid use. if (!isUpper \u0026\u0026 isAlsoUpper) // Or if previous part was lower and current letter return false; // is upper, we return false. } return true; // Everything proceeded smoothly. So return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:119","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Longest Uncommon Subsequence I This is those kind of problems that shouldn’t be up there. The problem is stated rather poorly and the solution is even stupider. All you are checking for is if the two string’s aren’t the same, then whichever one has a larger length is essentially the longest uncommon subsequence because the other string cannot form the full string. I know, it’s stupid. public int findLUSlength(String a, String b) { if (a.equals(b)) return -1; return a.length() \u003e b.length() ? a.length() : b.length(); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:120","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Course Schedule II This is a graph problem where we require to sort the vertices topologically. There are two choices we have for sorting topologically - Depth First Search approach based on finshing times or the Kahn’s Algorithm. I have used Kahn’s algorithm in this solution. Runtime is 2ms [beats 100%] and uses 45.3 MB space [beats than 90.16%]. The idea for Kahn’s is simple - Enqueue all the nodes which has 0 incoming edges because those are the ones that can be started first. Then while the queue isn’t empty, remove one node at a time, process it’s outgoing nodes and decrease their indegrees by one. The reasoning behind that is let’s say Node 2 has two prerequisites, Node 0 and Node 1. Node 0 and Node 1 have 0 indegrees. So our first two nodes would be Node 1 and Node 0 and if they are finished, then their outgoing Nodes can be started, that is Node 2. Now when you decrease any node’s indegree and they become zero, add them to the queue because they can now be started. Keep doing this until the queue is empty. In my approach, I’m avoiding any unnecessary data structure and using only the most basic ones like array’s. So instead of using the queue, what I do is fill the array order which also stores the topological order. idx keeps track of the last index available to fill in the array. start mimics the poll behaviour of a queue. while (start != idx) makes sure that while we still have nodes to process, remove the one that can be started and decrease all the indegrees of outgoing edges. public int[] findOrder(int numCourses, int[][] prerequisites) { int[] indegrees = new int[numCourses]; // We maintain each node's indegree List\u003cInteger\u003e[] graph = new ArrayList[numCourses]; // Each node's outgoing edges for (int[] edge: prerequisites) { // Process each edge indegrees[edge[0]]++; // Update indegrees if (graph[edge[1]] == null) // Also store the edge in graph graph[edge[1]] = new ArrayList\u003cInteger\u003e(); graph[edge[1]].add(edge[0]); } int[] order = new int[numCourses]; // We don't technically need a queue. int idx = 0; for (int i = 0; i \u003c numCourses; ++i) // Find all nodes who indegree is 0 if (indegrees[i] == 0) // and put them in the order array order[idx++] = i; int start = 0; // start tracks node to be polled. while (start != idx) { // while we can poll the queue int u = order[start++]; // poll the node u if (graph[u] != null) // If node u has outgoing edges for (int out: graph[u]) // Then for each of those nodes if (--indegrees[out] == 0) // decrease their indegrees and check if it's 0 order[idx++] = out; // if it's 0, add it to our queue (order) } if (idx != numCourses) // Cycle check. If our idx != numCourses then return new int[] {}; // not all nodes could be processed. So we have return order; // a cycle. Otherwise return our order array. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:121","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Letter Combinations of a Phone Number Runtime: 0 ms, faster than 100.00% of Java online submissions for Letter Combinations of a Phone Number. Memory Usage: 35.9 MB, less than 98.63% of Java online submissions for Letter Combinations of a Phone Number. How do we count numbers? 16, 17, 18, 19 and then what? 20 right? We see that the last number is 19, we can’t go past 9 so we set it to 0 and then increment the precedding digit to get 20. The idea is the same for this problem too. We keep a levels array to keep track of which character do we take from which number’s allowed alphabet letters. For example, let’s say the input string is 23. Our levels array would [0, 0] in the beginning. This says pick characters at index 0 and 0 from alphabet characters corresponding to 2 and 3 which gives us ad. Then, we increase the last most counter in our levels array by 1 giving us [0, 1]. This allows us to get ae in the next iteration and levels array would be [0, 2]. We get af and levels array becomes [0, 3]. Now this is where it becomes interesting. We are only allowed three letters for the digit corresponding to 3 and since we already used all of them , we now need to shift to the next character for digit 2, which is b. Level array looks like [1, 0]. This will allow us to get [b,e]. So you get the rough idea now. Only thing now is we watch out when to stop. We stop when we have utilized all available characters from the 0th index’s number’s allowed alphabet letters. In this case, we stop when levels array look like [3, 0]. class Solution { private char[][] map = { {'a', 'b', 'c'}, // 2 {'d', 'e', 'f'}, // 3 {'g', 'h', 'i'}, // 4 {'j', 'k', 'l'}, // 5 {'m', 'n', 'o'}, // 6 {'p', 'q', 'r', 's'}, // 7 {'t', 'u', 'v'}, // 8 {'w', 'x', 'y', 'z'} // 9 }; private List\u003cString\u003e result = new ArrayList\u003c\u003e(); // Maintain the list of combinations private int[] numbers; // numbers parsed from input private int[] levels; // utility array to keep track of next character in string private int n; // number of input digits. private List\u003cString\u003e solution(String digits) { if (digits == null || digits.length() == 0) // stop if null or empty string return result; n = digits.length(); numbers = new int[n]; levels = new int[n]; for (int i = 0; i \u003c digits.length(); ++i) { // parse all the digits from the string as int if ((numbers[i] = digits.charAt(i) - '0') \u003c 2) // stop if any of them is 0 or 1 return result; } helper(); // start recursion return result; } private void helper() { if (levels[0] == map[numbers[0]-2].length) // if we are done iterating over all possible combinations, return; // stop recursion. char[] s = new char[n]; // stores all the characters of the string for (int i = 0; i \u003c n; ++i) // loop through levels array. The value at each index s[i] = map[numbers[i]-2][levels[i]]; // tells us which character to keep from which map index levels[n-1]++; // Increase the entry at the end of the levels array for (int i = levels.length-1; i \u003e 0; --i) { // Now loop through the levels array from the end if (levels[i] == map[numbers[i]-2].length) { // If the value = total number of characters allowed for that number levels[i] = 0; // then we set it to 0 and increment the previous level entry levels[i - 1]++; } } result.add(new String(s)); // Add the string and induce next recursive call. helper(); } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:122","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Sudoku Solver Runtime: 4 ms, faster than 90.01% of Java online submissions for Sudoku Solver. Memory Usage: 35.1 MB, less than 71.93% of Java online submissions for Sudoku Solver. private char[][] board; public void solveSudoku(char[][] board) { this.board = board; solve(0, 0); } private boolean solve(int row, int col) { if (col == 9) { // If col is 9, make it 0 and shift to the next row col = 0; row += 1; if (row == 9) // If row is also 9 now, then it means we have successfully filled all cells return true; // So return true and end backtracking. } for (int i = 1; i \u003c 10; ++i) { // Otherwise, we start picking values from 1-9 if (board[row][col] == '.') { // And try to plug it into empty cells if (isValid(row, col, i)) { // If that value is valid in that cell board[row][col] = (char)(i+'0'); // fill it if (solve(row, col+1)) // and move on to fill the next cell via recursive call return true; // If the recursion ended by returning true, then return true to signal success else // Otherwise, we were not able to put an value in that cell board[row][col] = '.'; // so change it back to 0 and the backtracking would try the next higher value in that cell. } } else return solve(row, col+1); // That cell wasn't empty, so move on to the next empty cell. } return false; // No solution found. } private boolean isValid(int row, int col, int val) { // row check for (int c = 0; c \u003c 9; ++c) if (board[row][c] - '0' == val) return false; // column check for (int r = 0; r \u003c 9; ++r) if (board[r][col] - '0' == val) return false; // box check int top = row / 3 * 3; int left = col / 3 * 3; for (int i = 0; i \u003c 3; ++i) { for (int j = 0; j \u003c 3; ++j) { if (board[top+i][left+j] - '0' == val) return false; } } return true; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:123","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Bulls and Cows Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows. Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Bulls and Cows. The idea is simple, first record the frequency of the digits of the secret number. Then we first find number of bulls by checking for exact indices match. After that we start to record the number of cows. The way we do is by again iterating over the guess string; only if there was a character mismatch and we still have the character available from freq table, we have a cow. Update it and decrement the frequency of the number we just used up. public String getHint(String secret, String guess) { int bulls = 0; int cows = 0; int[] freq = new int[10]; // Freq of available digits from secret for (int i = 0; i \u003c guess.length(); ++i) { char s = secret.charAt(i); freq[s - '0']++; // Record the freq of the digit if (s == guess.charAt(i)) { // If it's a match, we have a bulls. bulls++; freq[s - '0']--; // We just used the character, so decrement it. } } for (int i = 0; i \u003c guess.length(); ++i) { int s = secret.charAt(i) - '0'; // Convert the chars into int int g = guess.charAt(i) - '0'; if (s != g \u0026\u0026 freq[g] \u003e 0) { // Only if they are a mismtach and we have a number g available in freq table cows++; // then it's a cow. freq[g]--; // We used up the number, so decrement it's freq. } } return new StringBuilder().append(bulls).append(\"A\").append(cows).append(\"B\").toString(); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:124","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"N-Queens I Runtime: 3 ms, faster than 73.76% of Java online submissions for N-Queens. Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for N-Queens. The idea is same as sudoku, but insteading of scanning rows, we scan columns. Start with row 0, column 0 and see if we can place a queen there, if yes place it and try the next cell of row 0 by recursing. We can’t put the queen in the same row again, so we keep changing rows with column 1 until we find somewhere to place it. Keep doing this until you were successfully able to place all the queens as checked by the condition col == n. If so, add that solution to our list of accepted solutions. public class NQueens { private int[][] board; private int n; private List\u003cList\u003cString\u003e\u003e result; public List\u003cList\u003cString\u003e\u003e solveNQueens(int n) { this.n = n; board = new int[n][n]; result = new ArrayList\u003c\u003e(); solve(0); return result; } private boolean solve(int col) { if (col == n) addToList(); for (int row = 0; row \u003c n; ++row) { if (canPlaceQueen(row, col)) { board[row][col] = 1; if (solve(col+1)) { return true; } else board[row][col] = 0; } } return false; } private void addToList() { List\u003cString\u003e list = new LinkedList\u003c\u003e(); StringBuilder sb; for (int[] r: board) { sb = new StringBuilder(); for (int i: r) sb.append(i == 1 ? 'Q' : '.'); list.add(sb.toString()); } result.add(list); } private boolean canPlaceQueen(int row, int col) { // Check all rows for the same column for (int i = 0; i \u003c col; ++i) { if (board[row][i] == 1) return false; } // Check upper left diagonal of the cell for (int i = row, j = col; i \u003e= 0 \u0026\u0026 j \u003e= 0; i--, j--) { if (board[i][j] == 1) return false; } // Check lower left diagonal of the cell. for (int i = row, j = col; i \u003c n \u0026\u0026 j \u003e= 0; i++, j--) { if (board[i][j] == 1) return false; } return true; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:125","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"K-diff pairs in an Array Pretty intuitive solution. Build a frequency HashMap for all the numbers in the array. In a special case where diff is 0, just count occurences in our freq map whose values are 2 or more. In other case, just loop through all the keys and make sure it’s supplement exists to count the number of K-diff pairs. public int findPairs(int[] nums, int k) { if (k \u003c 0) return 0; int pairs = 0; HashMap\u003cInteger, Integer\u003e freq = new HashMap\u003c\u003e(); for (int i: nums) { freq.put(i, freq.getOrDefault(i, 0)+1); } if (k == 0) { for (int i: freq.values()) if (i \u003e 1) pairs++; return pairs; } for (int i: freq.keySet()) { if (freq.containsKey(i+k)) pairs++; } return pairs; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:126","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Is Subsequence Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence. Memory Usage: 49.6 MB, less than 100.00% of Java online submissions for Is Subsequence. public boolean isSubsequence(String s, String t) { int idx = -1; // Set it to 0 to start check for 0th index for (char c: s.toCharArray()) { // For all the characters in String s idx = t.indexOf(c, idx+1); // Find it's index in String t from index one more than the last index matched if (idx \u003c 0) // idx \u003c 0 means not found return false; } return true; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:127","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Minimum Absolute Difference in BST The idea is to use the Inorder traversal of a BST. We repeatively iterate over the left branch to find the minimum diff and then do the same for the right branch, but this time we already know that the parent of the right branch has to be its minimum, so first set it and then traverse the right branch to find the minimum difference. int res = Integer.MAX_VALUE; // Hold the minimum difference. int prev = Integer.MAX_VALUE; // Holds the minimum value observed for the right branch public int getMinimumDifference(TreeNode root) { traverse(root); // Start iterating from the root. return res; } private void traverse(TreeNode node) { if (node == null) // Null node, so stop recursion return; traverse(node.left); // Keep traversing till the end of the tree res = Math.min(Math.abs(node.val-prev), res); // Check if we have a minimum, if so set it. prev = node.val; // The smallest value for the right branch is it's parent traverse(node.right); // Set it first and then traverse. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:128","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"BST Tree to Greater Tree The idea is simple. In a BST, we know everything on the right side of a node is greater than it and it’s left side. So when we are at any node, it’s value would be its value + sum of everything on its right side. So, we first compute the node’s value and then notice that the value for the node on the left is nothing but its value + parents value. So the node’s value is computed, do the same thing for the left side, but this time, the starting sum would be the parent’s value. public TreeNode convertBST(TreeNode root) { traverse(root, 0); return root; } private int traverse(TreeNode node, int sum) { if (node == null) return sum; node.val += traverse(node.right, sum); return traverse(node.left, node.val); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:129","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Student Attendance Record I public boolean checkRecord(String s) { int A = 0; // Count number of A's seen int L = 0; // Count number of consecutive L's seen for (char c: s.toCharArray()) { // Loop through each character if (c == 'A') { // If c is A, increment A A++; if (A \u003e 1) // If A is more than 1, return false return false L = 0; // Always set L count to 0 } else if (c == 'L') { // If c is L, L++; // We might have consecutive L's, so start counting if (L \u003e 2) { // If we have more than 2 consecutive L's return false; // return false } } else // Lastly, we might have a P, that will reset our L = 0; // consecutive L streak. } return true; // Everything passed, so return true. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:130","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reverse Words in String III Runtime: 2 ms, faster than 99.34% of Java online submissions for Reverse Words in a String III. Memory Usage: 37.9 MB, less than 100.00% of Java online submissions for Reverse Words in a String III. public String reverseWords(String s) { char[] arr = s.toCharArray(); int len = arr.length; int start = 0; int end; while (start \u003c len) { // Check the whole string end = start; // find the index of the first whitespace while(end \u003c len \u0026\u0026 arr[end] != ' ') // denoting end of the word end++; reverseWord(arr, start, end-1); // reverse that specific word start = end+1; // update start to the new word beginning } return new String(arr); // create a new string out of the array } /* Reverses a word in-place by iterating n/2 times where n = len of the word. Traverse upto the middle point of the word while swapping each word from start+offset to end- offset. **/ private void reverseWord(char[] arr, int start, int stop) { for (int i = 0; i \u003c= (stop-start)/2; ++i) { char temp = arr[start+i]; arr[start+i] = arr[stop-i]; arr[stop-i] = temp; } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:131","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Quad Tree Intersection public Node intersect(Node qt1, Node qt2) { if (qt1.isLeaf) // If only a leaf, then return the one with true val return qt1.val ? qt1 : qt2; if (qt2.isLeaf) return qt2.val ? qt2 : qt1; Node n = new Node(); // Prepare for recursion n.val = true; // By default, each level node is not a leaf with n.isLeaf = false; // value = true // Keep traversing all the way to a terminal node and then store it. n.topLeft = intersect(qt1.topLeft, qt2.topLeft); n.topRight = intersect(qt1.topRight, qt2.topRight); n.bottomLeft = intersect(qt1.bottomLeft, qt2.bottomLeft); n.bottomRight = intersect(qt1.bottomRight, qt2.bottomRight); // Check now if you're at the base case. If n's children are leaves and all their values are same, then make n a leaf and it's value the same as it's child. if (n.topLeft.isLeaf \u0026\u0026 n.topRight.isLeaf \u0026\u0026 n.bottomLeft.isLeaf \u0026\u0026 n.bottomRight.isLeaf \u0026\u0026 (n.topLeft.val == n.topRight.val \u0026\u0026 n.topRight.val == n.bottomLeft.val \u0026\u0026 n.bottomLeft.val == n.bottomRight.val)) { n.isLeaf = true; n.val = n.topLeft.val; } return n; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:132","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Long Pressed Name Runtime: 0 ms, faster than 100.00% of Java online submissions for Long Pressed Name. Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Long Pressed Name. public boolean isLongPressedName(String name, String typed) { char[] n = name.toCharArray(); // Arrays are much nicer to work with char[] t = typed.toCharArray(); // Record start and stop points for both int startN = 0, endN = n.length, startT = 0, endT = t.length; while (startT \u003c endT) { // While we haven't looked at the whole string int temp = startN+1; // Let's first count same consecutive letters int countN = 1; // in String name while (temp \u003c endN \u0026\u0026 n[startN] == n[temp]) { temp++; countN++; } int countT = 0; // Do the same for typed string while (startT \u003c endT \u0026\u0026 n[startN] == t[startT]) { startT++; countT++; } // If consecutive letters in typed string are if (countT \u003c countN) // less than the ones in original name return false; // return false startN = temp; // Otherwise, prepare for next character } return startN == endN; // Lastly, check if we were able to match } // all character of the name string ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:133","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Tree Zigzag Level Order Traversal The idea here is simple. We perform a BFS as usual using a Queue but I maintain a variable called dir to check which side do I add from. dir=1 means add from Right-\u003eLeft and dir=-1 means add from usual Left-\u003eRight. I am also using LinkedList because of easy addition of elements in both direction. When I need to add from Right-\u003eLeft, I use the addFirst(E e) method of LinkedList to add to the head, otherwise normal add to the tail. One important thing to take care of at each iteration is to know how many nodes to dequeue, hence the usage of the variable children. This allows me to keep track of how many children were added to the queue at each stage so I dequeue exactly that many children in the next stage. Apart from that, everything is straightforward. public List\u003cList\u003cInteger\u003e\u003e zigzagLevelOrder(TreeNode root) { List\u003cList\u003cInteger\u003e\u003e list = new LinkedList\u003c\u003e(); if (root == null) return list; Queue\u003cTreeNode\u003e q = new LinkedList\u003c\u003e(); q.add(root); // Children = 1 because only root is added. int dir = 1, children = 1; // Added the root, so next time dir = 1 (Right-\u003eLeft) while(!q.isEmpty()) { int pushed = 0; LinkedList\u003cInteger\u003e l = new LinkedList\u003c\u003e(); for (int i = 0; i \u003c children; ++i) { // Poll only those nodes that were queued in TreeNode u = q.poll(); // the previous stage. if (dir == 1) l.add(u.val); else l.addFirst(u.val); // Left-\u003eRight add if (u.left != null) { // Add children, notice I am counting here q.add(u.left); // how many children I am pushing/queuing ++pushed; // to the queue } if (u.right != null) { // Same thing for right child. q.add(u.right); ++pushed; } } list.add(l); // Add this list to main list children = pushed; // update # of children pushed dir = dir == 1 ? -1: 1; // update dir for next iteration } return list; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:134","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Array Partition I Runtime: 3 ms, faster than 99.90% of Java online submissions for Array Partition I. Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Array Partition I. I originally came up with the sorting solution where you sort the array and look at two numbers at a time and keep the smaller number out of them and add to the sum. It was way slower, so I checked the fastest submission and this one is pretty smart. The idea is really good. We know there are going to be 20,001 numbers, so reserve an array for it. Now let’s say we had duplicates in our array, ex [1,2,1,4,1,1], if we were to sort it, we would get [1,1,1,1,2,4]. Notice that those four 1’s don’t really matter because each of them pairs up with the other to give you a one 1. That is why we mark those particular indices as true and false. Notice that in our variable sum we would have counted them individually, making sum = 4 when in fact it should be 2 since we only take one of them from two pairs. If we have even occurrence of any number, they would be false, meaning we don’t need to account them in the diff calculation. Now coming to diff how do we compute it? First we have the seen array to know which elements we need to look at. If that particular index is true, then we check if it’s the first element of the pair which we maintain via the boolean value firstElemOfPair. If its true, then first becomes that value. Otherwise, we know that we’re looking at the second element so we update the diff which is basically that value subtract first. Notice that if we look at a pair in our example as (2,4), we would pick 2 and the diff would be 2. This needs to be subtracted from our sum, hence the reason to maintain both of them. At the end, we finally subtract sum and diff and divide the result by 2 because we were doubling our diff’s too. public int arrayPairSum(int[] nums) { boolean[] seen = new boolean[20001]; int sum = 0; for (int n: nums) { seen[n + 10000] = !seen[n+10000]; sum += n; } int diff = 0; int first = 0; boolean firstElemOfPair = true; for (int i = 0; i \u003c seen.length; ++i) { if (seen[i]) { if (firstElemOfPair) first = i; else diff += i-first; firstElemOfPair = !firstElemOfPair; } } return (sum-diff)/2; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:135","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Reshape the Matrix Runtime: 1 ms, faster than 100.00% of Java online submissions for Reshape the Matrix. Memory Usage: 38.4 MB, less than 100.00% of Java online submissions for Reshape the Matrix. public int[][] matrixReshape(int[][] nums, int r, int c) { int numsR = nums.length; // Get rows and col of nums int numsC = nums[0].length; if (numsR * numsC != r*c || (numsR == r \u0026\u0026 numsC == c)) // If can't reshape or problems return nums; // asks to reshape in the same dimensions, return the same array int[][] mat = new int[r][c]; // New matrix to be returned int row = 0, col = 0, nR = 0, nC = 0; // To keep track of which element to consume and where to place it in the new matrix while (row != r) { mat[row][col++] = nums[nR][nC++]; // Increment only the column value for both if (col == c) { // Check if we are at boundary, if so, increment row col = 0; // and set col to 0 for both cases. ++row; } if (nC == numsC) { nC = 0; ++nR; } } return mat; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:136","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Swap Nodes in Pairs Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs. Memory Usage: 34.5 MB, less than 100.00% of Java online submissions for Swap Nodes in Pairs. The idea is simple. We add a dummy node in front for simplicity as it allows us to generalize the concept of getting two nodes at a time. We maintain a current pointer that points to the node in the actual LinkedList. Then, we get it’s next and it’s next.next and store it into n1 and n2. Now notice that before making n2’s next = n1, we need to store n2’s next into n1’s next. After we do that, we need to make sure that current’s next is n2 which is now working with the actual LinkedList. Then, we need to make sure that current.next.next is n1 which we just fixed and update current which is basically n1. public ListNode swapPairs(ListNode head) { ListNode dummy = new ListNode(0); dummy.next = head; ListNode curr = dummy; while (curr.next != null \u0026\u0026 curr.next.next != null) { ListNode n1 = curr.next; ListNode n2 = n1.next; n1.next = n2.next; curr.next = n2; curr.next.next = n1; curr = curr.next.next; } return dummy.next; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:137","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Generate Parentheses Iterative Approach 1: This one is very slow. Runtime: 4 ms, faster than 8.87% of Java online submissions for Generate Parentheses. Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses. The idea is simple. We basically do a BFS and keep track of the parentheses combination we have obtained so far. Poll the queue and check if it’s length is 2*n (for a given n, we would have # of open brackets = # of closed brackets), add it to the list and check next combination. If not, then check if we can add an open bracket, add it and update number of open bracket count and add this combination to the queue. Then try to see if we can add a closed bracket, if you can add it, then update closed bracket count add that combination to the queue. Keep doing this until the queue becomes empty. This is the first approach I came up with which is naive as you can see since it’s doing an exhaustive search for all valid combination. private class Node { private String data; private int open; private int close; Node(String s, int o, int c) { data = s; open = o; close = c; } } public List\u003cString\u003e generateParenthesis(int n) { List\u003cString\u003e list = new LinkedList\u003c\u003e(); Queue\u003cNode\u003e q = new LinkedList\u003c\u003e(); q.add(new Node(\"(\", 1, 0)); while (!q.isEmpty()) { Node u = q.poll(); if (u.data.length() == 2*n) list.add(u.data); else { Node n1 = new Node(u.data, u.open, u.close); Node n2 = new Node(u.data, u.open, u.close); if (n1.open \u003c n) { n1.data = u.data + '('; ++n1.open; q.add(n1); } if (n2.close \u003c u.open) { n2.data = u.data + ')'; ++n2.close; q.add(n2); } } } return list; } Recursive Solution 2: This one is much more faster. I generalized the above idea into the fact that I am adding only valid combinations and any invalid combinations are automatically discarded. The logic is as follows: We know for a given n, the string length should be 2*n. So that forms our base case for recursion, if the length of String s is 2n, we want to add it to the list. Otherwise, we check if the number of open brackets we have so far is less than n. If so, we can add an open bracket. Then check if number of close bracket is less than open, if so that sequence would be valid and add a close bracket and recurse. Runtime: 1 ms, faster than 95.16% of Java online submissions for Generate Parentheses. Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses. public List\u003cString\u003e generateParenthesis(int n) { List\u003cString\u003e list = new ArrayList\u003c\u003e(); helper(list, \"(\", 1, 0, n); return list; } private void helper(List\u003cString\u003e list, String s, int open, int close, int n) { if (s.length() == 2*n) list.add(s); else { if (open \u003c n) helper(list, s+'(', open+1, close, n); if (close \u003c open) helper(list, s+')', open, close+1, n); } } ###Distribute Candies Pretty simple solution. We want to give maximize the number of unique candies to give to the sister. So we maintain a hashset to collect all the unique candies first. Both of them get half the candies, so let s = number of candies they get. Now, if the size of the set is greater than or equal to s, then the sister only gets s candies out of it. Otherwise, the maximum amount of unique candies she can get is equal to the set size. public int distributeCandies(int[] candies) { Set\u003cInteger\u003e set = new HashSet\u003c\u003e(candies.length); for (int i: candies) set.add(i); int share = candies.length/2; return set.size() \u003e= share ? share: set.size(); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:138","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Maximum subproduct subarray Credits for this simplistic solution to LeetCode user mzchen. The approach is very clever. Notice that if this problem was about finding maximum sum subarray, then a negative number would break the contiguous array. Here, what it does is that it makes our maximum product minimum when we see a negative number and vice versa. We keep track of maximum and minimum we have so far and check if we have a negative number. If so swap our max and min. Then, find the local maximum and minimum between current number and multiplying that number with our current max or min. After that, update our global max value and keep doing this for all values in the array. public int maxProduct(int[] nums) { int max = nums[0]; for (int i = 1, imax = max, imin = max; i \u003c nums.length; ++i) { if (nums[i] \u003c 0) { int temp = imax; imax = imin; imin = temp; } imax = Math.max(nums[i], imax * nums[i]); imin = Math.min(nums[i], imin * nums[i]); max = Math.max(max, imax); } return max; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:139","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Tree Right Side View Runtime: 1 ms, faster than 95.45% of Java online submissions for Binary Tree Right Side View. Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Binary Tree Right Side View. This is an interesting problem cause initially, I thought we would always have a complete binary tree and I made my initial solution oriented towards it. But then I saw that it doesn’t say that anywhere and it could be any kind of binary tree. So it got me thinking towards a more generalized approach. Notice that to get a right side view of the binary tree, we only need the last value at any given level and put it into the list. So we maintain a queue and also the number of elements we enqueue at each stage. Initially, we put the root node in our queue and our enqueue count is 1. We dequeue exactly that many elements and again enqueue each of those dequeued node’s children. Notice that I am using the variable newEnqueued to keep track of newly enqueued elements. Lastly, we need to check if we dequeued the last element. If so, that must be a part of the solution since it has to be the rightmost element at that level, so I add it to the list. Update enqueued to the new value and repeat until our queue isn’t empty. public List\u003cInteger\u003e rightSideView(TreeNode root) { List\u003cInteger\u003e list = new ArrayList\u003c\u003e(); if (root == null) return list; Queue\u003cTreeNode\u003e q = new LinkedList\u003c\u003e(); q.add(root); int enqueued = 1; while (!q.isEmpty()) { int newEnqueued = 0; for (int i = 0; i \u003c enqueued; ++i) { TreeNode u = q.poll(); if (u.left != null) { q.add(u.left); ++newEnqueued; } if (u.right != null) { q.add(u.right); ++newEnqueued; } if (i == enqueued-1) list.add(u.val); } enqueued = newEnqueued; } return list; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:140","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find Minimum in Rotated Sorted Array Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Minimum in Rotated Sorted Array. Memory Usage: 38.6 MB, less than 77.27% of Java online submissions for Find Minimum in Rotated Sorted Array. public int findMin(int[] nums) { if (nums.length == 1) // Base case. return nums[0]; int left = 0; int right = nums.length-1; int mid; while (nums[left] \u003e nums[right]) { // While we are in the ascending order half, mid = (left + right)/2; // Find the middle element if (nums[mid] \u003e= nums[left]) // If mid element \u003e= left element, then our min left = mid + 1; // must be in the right half. else right = mid; // otherwise min in the left half. } return nums[left]; // left points to minimum element. } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:141","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Binary Search Tree Iterator Runtime: 15 ms, faster than 99.74% of Java online submissions for Binary Search Tree Iterator. Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator. Logic is same as your In-Order traversal of any Binary Tree, but store the node values you visit in any data structure. Here I am using an ArrayList for storing each of the visited node’s value. Maintain idx value to keep track of which value to return. hasNext() method returns true as long as idx \u003c list.size(). class BSTIterator { private List\u003cInteger\u003e list; private int idx = 0; public BSTIterator(TreeNode root) { list = new ArrayList\u003c\u003e(); traverse(root); } private void traverse(TreeNode node) { if (node == null) return; traverse(node.left); list.add(node.val); traverse(node.right); } /** @return the next smallest number */ public int next() { return list.get(idx++); } /** @return whether we have a next smallest number */ public boolean hasNext() { return idx != list.size(); } } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:142","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Find Peak Element This question was asked to me for my internship at Yahoo! The idea is simple, we want any one of the peak. So to achieve O(log n) time, we have to mimic binary search algorithm. We look at the middle element and check it’s neighbor, if it’s greater than the middle element, then we know we will have atleast one peak on the right side. Why? Think what could happen. We know that the element next to middle is greater than it, so there are two possibilities on the right side, either elements keep increasing to the right of the middle’s next element or we might go up till a particular index and then go down. So in any case, we will have a peak on the right side. On the other case, if the element on the right side is smaller than the middle, then we know that the left half including the middle will have the peak cause middle is already greater than middle’s right, so we might have middle as the peak itself. public int findPeakElement(int[] nums) { if (nums.length == 1) return 0; int low = nums[0], high = nums.length - 1, mid; while (low \u003c high) { mid = (low + high)/2; if (nums[mid] \u003c nums[mid+1]) low = mid+1; else high = mid; } return low; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:143","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Next Permutation Runtime: 0 ms, faster than 100.00% of Java online submissions for Next Permutation. Memory Usage: 40.3 MB, less than 47.00% of Java online submissions for Next Permutation. This one was quite interesting in the sense it seems difficult but is very simple once you try out a few example. If we want to find the next lexicographical greater number, then we need to find a particular index from the right side of the array such that the number after it is greater than itself, because by swapping them would give us a next larger number. So what I first do is find the index of the number such that num[idx] \u003e num[idx-1]. We know at this point that all the numbers after that index are reverse sorted, so we need to fix it and sort them in increasing order because lexicographical order demands all the numbers in increasing manner. Example, say nums = [2,3,1,4,2,1,0]. You can see that that the next number should be [2,3,2,0,1,1,4]. Notice that I replaced the number at index 2 with the first number which is greater than it if the array after index 2 was sorted. This gaurantees us a larger lexicographical number. So the first while loop finds us that index number and then I reverse the array after it. Once you reverse it, we should expect the nums array to look like [2,3,1,0,1,2,4]. Note that now we need to find the number larger than the number at index 2, which is 1 in this case. The first number greater than 1 is 2, so the second while loop finds it and then we simply swap them to give us the next larger lexicographically greater number =\u003e [2,3,2,0,1,1,4]. public void nextPermutation(int[] nums) { if (nums.length \u003c 2) return; int idx = nums.length-1; while (idx \u003e 0 \u0026\u0026 nums[idx] \u003c= nums[idx-1]) --idx; reverse(nums, idx); if (idx == 0) return; int val = nums[idx-1]; int i = idx; while (i \u003c nums.length \u0026\u0026 nums[i] \u003c= val) ++i; swap(nums, i, idx-1); } private void swap(int[] arr, int idx1, int idx2) { int temp = arr[idx1]; arr[idx1] = arr[idx2]; arr[idx2] = temp; } private void reverse(int[] arr, int start) { int end = arr.length-1; while (start \u003c end) swap(arr, start++, end--); } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:144","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Search in Rotated Sorted Array The idea is same as binary search except you need to keep track of which half to stay in. We compute the middle index and the value at that index. If the middle value is the target, then return that index. Otherwise, find the correct half. If the number on the left side is \u003c middle value then we know that between the left and middle index, values are increasing. We only need to now check if target is \u003c middle value, if so we need to adjust our right pointer otherwise adjust the left pointer. If left value is not \u003c middle value then we are at a shift where the array is pivoted. We again need to confirm now which half to take. There would be some index i such that nums[left] \u003e nums[i] \u003c nums[mid] and value are increasing upto i and shifts from index i onwards. In this case, we again need to adjust our index pointers and we repeat this loop until left \u003c= right public int search(int[] nums, int target) { int left = 0, right = nums.length-1; while (left \u003c= right) { int mid = (left + right)/2; int midVal = nums[mid]; if (target == midVal) return mid; else if (nums[left] \u003c= midVal) { if (target \u003c midVal \u0026\u0026 target \u003e= nums[left]) right = mid - 1; else left = mid + 1; } else { if (target \u003e midVal \u0026\u0026 target \u003c= nums[right]) left = mid+1; else right = mid - 1; } } return -1; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:145","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Transpose Matrix Pretty straightforward. Create matrix B of opposite dimensions to those of A. We maintain br and bc which tracks row and columns of B. We iterate over each element of A and put it in B[br][bc] and then ideally we would increment bc for an exact copy, but since we want transpose, we increment br and then reset it to 0 if we fill all the values in a row and increment column count, giving us the tranpose of the matrix. public int[][] transpose(int[][] A) { int[][] B = new int[A[0].length][A.length]; int br = 0, bc = 0; for (int i = 0; i \u003c A.length; ++i) { for (int j = 0; j \u003c A[0].length; ++j) { B[br][bc] = A[i][j]; if (++br == B.length) { br = 0; ++bc; } } } return B; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:146","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["leetcode"],"content":"Merge K Sorted Lists This was an onsite interview question at ThousandEyes. The idea is simple. Basically, we have multiple sorted lists so we have access to one value at a time, that is head of the lists initially and the consecutive nodes. So we need to fetch the minimum element out of all of them in constant time. The easiest way for us to do this is to use a PriorityQueue and define the logic of comparision of two ListNodes. Then, we add all the nodes inside the PQ and build our resulting List. Fetch the minimum valued ListNode and add it to our list. Then we also need to update that particular list’s head, so we add that list’s next in the PQ so the next time it is fetched, we fetch the correct node of the list. Repeat this until the list is empty and return dummy’s next node. public ListNode mergeKLists(ListNode[] lists) { if (lists.length == 0) return null; PriorityQueue\u003cListNode\u003e pq = new PriorityQueue\u003c\u003e(lists.length, (n1, n2) -\u003e n1.val - n2.val); for (ListNode ln: lists) if (ln != null) pq.add(ln); if (pq.isEmpty()) return null; ListNode node = new ListNode(-1); ListNode ret = node; while (!pq.isEmpty()) { node.next = pq.poll(); node = node.next; if (node.next != null) pq.add(node.next); } return ret.next; } ","date":"2022-10-14","objectID":"/leetcode-solutions-cheatsheet/:45:147","tags":["coding","computer-science","leetcode","leetcode-solutions","leetcode-solutions-cheetsheet","leetcode-cheetsheet","important-leetcode-solutions-markdown","markdown","important-leetcode-questions","java","python","cpp"],"title":"Leetcode Solutions Cheatsheet","uri":"/leetcode-solutions-cheatsheet/"},{"categories":["data-structures-and-algorithms","coding-interview"],"content":"All the Data Structures and Algorithms concepts and solutions to various problems in Python3 stored in a structured manner.","date":"2022-10-13","objectID":"/data-structures-and-algorithms-for-coding-interview/","tags":["data-structures-and-algorithms-for-coding-interview","data-structures","algorithms","interview","coding-interview","dsalgo","leetcode","gfg","geeksforgeeks","dynamic-programming","sorting-algorithms","linkedList","object-oriented-programming","binary-trees","graph-algorithms","heap","matrix","trie","binary-search","backtracking","stack","queue","greedy","string","bit-manipulation","array","hashmap","dfs","bfs","two-pointers","math","recursion","codechef","codeforces","hackerrank","dsa","coding"],"title":"Data Structures and Algorithms for Coding Interview","uri":"/data-structures-and-algorithms-for-coding-interview/"},{"categories":["data-structures-and-algorithms","coding-interview"],"content":"\rData Structures \u0026 Algorithms for Coding Interview\rIf you appreciate my work, please 🌟 this repository. It motivates me. 🚀🚀\rView this repository with improved user experience▶️https://samirpaul1.github.io/DSAlgo🚀\rIn this repository, I have stored solutions to various problems and concepts of Data Structures and Algorithms in Python3 in a structured manner.✨ ✔️ Topics Covered: Dynamic Programming Sorting Algorithms LinkedList Object-Oriented Programming Binary Trees Graph Algorithms Heap Matrix Trie Binary Search Backtracking Stack Queue Greedy String Bit Manipulation Array HashMap DFS BFS Two Pointers Math Recursion In various folders of the above topics, you can find questions and concepts related to that topic. In the Dynamic Programming section, you can find all the questions covered and not covered in Aditya Verma’s dynamic programming playlist folder-wise with my handwritten notes.✍️ If you are preparing for an interview from Striver’s SDE Sheet then the 30-Days-SDE-Sheet-Practice will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.🎯 In the Questions-Sheet directory, you can find questions asked by top product-based companies. There is a collection of books and pdfs on various important computer science fundamentals in the BOOKS-and-PDFs directory.📚 I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.💻 Things you can contribute to: Update the existing solution with a better one (better complexity). Add new questions and solutions in Python3 to the respective directory. Add new resources to BOOKS-and-PDFs \u0026 Questions-Sheet. Solve issues raised by other people or yourself. Provide well-documented source code with detailed explanations. ","date":"2022-10-13","objectID":"/data-structures-and-algorithms-for-coding-interview/:0:0","tags":["data-structures-and-algorithms-for-coding-interview","data-structures","algorithms","interview","coding-interview","dsalgo","leetcode","gfg","geeksforgeeks","dynamic-programming","sorting-algorithms","linkedList","object-oriented-programming","binary-trees","graph-algorithms","heap","matrix","trie","binary-search","backtracking","stack","queue","greedy","string","bit-manipulation","array","hashmap","dfs","bfs","two-pointers","math","recursion","codechef","codeforces","hackerrank","dsa","coding"],"title":"Data Structures and Algorithms for Coding Interview","uri":"/data-structures-and-algorithms-for-coding-interview/"},{"categories":["data-structures-and-algorithms","coding-interview"],"content":"List of Important Questions:✨ The following list of questions was recommended by Love Babbar on this video. I have documented all those questions here.✌️ Topic Important DSA Questions Link Topic: Problem: Related Link \u003c-\u003e Array Reverse the array \u003c-\u003e Array Find the maximum and minimum element in an array \u003c-\u003e Array Find the “Kth” max and min element of an array \u003c-\u003e Array Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo \u003c-\u003e Array Move all the negative elements to one side of the array \u003c-\u003e Array Find the Union and Intersection of the two sorted arrays. \u003c-\u003e Array Write a program to cyclically rotate an array by one. https://leetcode.com/problems/rotate-array/ Array find Largest sum contiguous Subarray [V. IMP] https://leetcode.com/problems/maximum-subarray/ Array Minimise the maximum difference between heights [V.IMP] https://leetcode.com/problems/smallest-range-ii/ Array Minimum no. of Jumps to reach end of an array https://leetcode.com/problems/jump-game Array find duplicate in an array of N+1 Integers \u003c-\u003e Array Merge 2 sorted arrays without using Extra space. \u003c-\u003e Array Kadane’s Algorithm https://leetcode.com/problems/maximum-subarray/ Array Merge Intervals \u003c-\u003e Array Next Permutation \u003c-\u003e Array Count Inversion \u003c-\u003e Array Best time to buy and Sell stock \u003c-\u003e Array find all pairs on integer array whose sum is equal to given number \u003c-\u003e Array find common elements In 3 sorted arrays \u003c-\u003e Array Rearrange the array in alternating positive and negative items with O(1) extra space \u003c-\u003e Array Find if there is any subarray with sum equal to 0 https://leetcode.com/problems/subarray-sum-equals-k/ Array Find factorial of a large number \u003c-\u003e Array find maximum product subarray \u003c-\u003e Array Find longest coinsecutive subsequence \u003c-\u003e Array Given an array of size n and a number k, fin all elements that appear more than \" n/k \" times. \u003c-\u003e Array Maximum profit by buying and selling a share atmost twice \u003c-\u003e Array Find whether an array is a subset of another array \u003c-\u003e Array Find the triplet that sum to a given value \u003c-\u003e Array Trapping Rain water problem \u003c-\u003e Array Chocolate Distribution problem \u003c-\u003e Array Smallest Subarray with sum greater than a given value \u003c-\u003e Array Three way partitioning of an array around a given value \u003c-\u003e Array Minimum swaps required bring elements less equal K together \u003c-\u003e Array Minimum no. of operations required to make an array palindrome \u003c-\u003e Array Median of 2 sorted arrays of equal size \u003c-\u003e Array Median of 2 sorted arrays of different size \u003c-\u003e Array Subarray Sums Divisible by K Array Continuous Subarray Sum \u003c-\u003e \u003c-\u003e Matrix Spiral traversal on a Matrix \u003c-\u003e Matrix Search an element in a matriix \u003c-\u003e Matrix Find median in a row wise sorted matrix \u003c-\u003e Matrix Find row with maximum no. of 1’s \u003c-\u003e Matrix Print elements in sorted order using row-column wise sorted matrix \u003c-\u003e Matrix Largest Rectangle in Histogram Matrix Maximum size rectangle https://practice.geeksforgeeks.org/problems/max-rectangle/1 Matrix Find a specific pair in matrix \u003c-\u003e Matrix Rotate matrix by 90 degrees \u003c-\u003e Matrix Kth smallest element in a row-cpumn wise sorted matrix \u003c-\u003e Matrix Common elements in all rows of a given matrix \u003c-\u003e String Reverse a String \u003c-\u003e String Check whether a String is Palindrome or not \u003c-\u003e String Find Duplicate characters in a string \u003c-\u003e String Why strings are immutable in Java? \u003c-\u003e String Write a Code to check whether one string is a rotation of another \u003c-\u003e String Write a Program to check whether a string is a valid shuffle of two strings or not \u003c-\u003e String Count and Say problem \u003c-\u003e String Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring] \u003c-\u003e String Find Longest Recurring Subsequence in String \u003c-\u003e String Print all Subsequences of a string. \u003c-\u003e String Print all the permutations of the given string \u003c-\u003e String Split the Binary string into two substring with equal 0’s and 1’s \u003c-\u003e String Word Wrap Problem [VERY IMP]. \u003c-\u003e String EDIT Distance [Very Imp] \u003c-\u003e String Find next","date":"2022-10-13","objectID":"/data-structures-and-algorithms-for-coding-interview/:0:1","tags":["data-structures-and-algorithms-for-coding-interview","data-structures","algorithms","interview","coding-interview","dsalgo","leetcode","gfg","geeksforgeeks","dynamic-programming","sorting-algorithms","linkedList","object-oriented-programming","binary-trees","graph-algorithms","heap","matrix","trie","binary-search","backtracking","stack","queue","greedy","string","bit-manipulation","array","hashmap","dfs","bfs","two-pointers","math","recursion","codechef","codeforces","hackerrank","dsa","coding"],"title":"Data Structures and Algorithms for Coding Interview","uri":"/data-structures-and-algorithms-for-coding-interview/"},{"categories":["data-structures-and-algorithms","coding-interview"],"content":"30 Days Interview Preparation Plan🎯 Originally the below sheet was prepared by Raj Vikramaditya A.K.A Striver. I have documented this sheet here in markdown. Day1: (Arrays) Sort an array of 0’s 1’s 2’s without using extra space or sorting algo Repeat and Missing Number Merge two sorted Arrays without extra space Kadane’s Algorithm Merge Overlapping Subintervals Find the duplicate in an array of N+1 integers. Day2: (Arrays) Set Matrix Zeros Pascal Triangle Next Permutation Inversion of Array (Using Merge Sort) Stock Buy and Sell Ro tate Matrix Day3: (Arrays/maths) Search in a 2D matrix Pow(X,n) Majority Element (\u003eN/2 times) Majority Element (\u003eN/3 times) Grid Unique Paths Reverse Pairs (Leetcode) Go through Puzzles from GFG** (Search on own) Day4: (Hashing) 2 Sum problem 4 Sum problem Longest Consecutive Sequence Largest Subarray with 0 sum Count number of subarrays with given XOR (this clearsa lot of problems) Longest substring without repeat Day5: (LinkedList) Reverse a LinkedList Find middle of LinkedList Merge two sorted Linked List Remove N-th node from back of LinkedList Delete a given Node when a node is given. (0(1) solution) Add two numbers as LinkedList Day6: Find intersection point of Y LinkedList Detect a cycle in Linked List Reverse a LinkedList in groups of size k Check if a LinkedList is palindrome or not. Find the starting point of the Loop of LinkedList Flattening of a LinkedList** Rotate a LinkedList Day7: (2-pointer) Clone a Linked List with random and next pointer 3 sum Trapping rainwater Remove Duplicate from Sorted array Max consecutive ones Day8: (Greedy) N meeting in one room Minimum number of platforms required for a railway Job sequencing Problem Fractional Knapsack Problem Greedy algorithm to find minimum number of coins Activity Selection (it i s same as N meeting in one room) Day9 (Recursion): Subset Sums Subset-II Combination sum- Combination sum Palindrome Partitioning K-th permutation Sequence Day10: (Recursion and Backtracking) Print all Permutations of a string/array N queens Problem SudokuSolver M coloring Problem Rat in a Maze 6.Word Break -\u003e print all ways Day11 : (Binary Search) N-th root of an integer (use binary search) (square root, cube root, ..) Matrix Median Find the element that appears once in sorted array, and rest element appears twice (Binary search) Search element in a sorted and rotated array/ find pivot where it is rotated** Median of 2 sorted arrays K-th element of two sorted arrays Allocate Minimum Number of Pages Aggressive Cows Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might ask) Check if a number if a power of 2 or not in O(1) Count total set bits Divide Integers without / operator Power Set (this is very important) Find MSB in o(1) Find square of a number without using multiplication or division operators. Day13: (Stack and Queue) Implement Stack Using Arrays Implement Queue Using Arrays Implement Stack using Queue (using single queue) Implement Queue using Stack (0(1) amortised method) Check for balanced parentheses Next Greater Element Sort a Stack Day14: Next Smaller Element Similar to previous question next greater element, just do pop the greater elements out .. LRU cache (vvvv. imp) LFU Cache (Hard, can be ignored) 4.Largest rectangle in histogram (Do the one pass solution) Two pass One pass Sliding Window maximum video Implement Min Stack Rotten Orange (Using BFS) Stock Span Problem Find maximum of minimums of every window size 10.The Celebrity Problem Day15: (String) Reverse Words in a String Longest Palindrome in a string Roman Number to Integer and vice versa Implement ATOI/STRSTR Longest Common Prefix Rabin Karp Day16: (String) Prefix Function/Z-Function KMP algo / LPS(pi) array Minimum characters needed to be inserted in the beginning to make it palindromic. Check for Anagrams Count and Say Compare version numbers Day17: (Binary Tree) Inorder Traversal (with recursion and without recursion) Preorder Traversal (w","date":"2022-10-13","objectID":"/data-structures-and-algorithms-for-coding-interview/:0:2","tags":["data-structures-and-algorithms-for-coding-interview","data-structures","algorithms","interview","coding-interview","dsalgo","leetcode","gfg","geeksforgeeks","dynamic-programming","sorting-algorithms","linkedList","object-oriented-programming","binary-trees","graph-algorithms","heap","matrix","trie","binary-search","backtracking","stack","queue","greedy","string","bit-manipulation","array","hashmap","dfs","bfs","two-pointers","math","recursion","codechef","codeforces","hackerrank","dsa","coding"],"title":"Data Structures and Algorithms for Coding Interview","uri":"/data-structures-and-algorithms-for-coding-interview/"},{"categories":["data-structures-and-algorithms","coding-interview"],"content":"System Design – Concepts📚 https://github.com/SamirPaul1/system-design-primer https://www.freecodecamp.org/news/systems-design-for-interviews/ https://github.com/shashank88/system_design ","date":"2022-10-13","objectID":"/data-structures-and-algorithms-for-coding-interview/:0:3","tags":["data-structures-and-algorithms-for-coding-interview","data-structures","algorithms","interview","coding-interview","dsalgo","leetcode","gfg","geeksforgeeks","dynamic-programming","sorting-algorithms","linkedList","object-oriented-programming","binary-trees","graph-algorithms","heap","matrix","trie","binary-search","backtracking","stack","queue","greedy","string","bit-manipulation","array","hashmap","dfs","bfs","two-pointers","math","recursion","codechef","codeforces","hackerrank","dsa","coding"],"title":"Data Structures and Algorithms for Coding Interview","uri":"/data-structures-and-algorithms-for-coding-interview/"},{"categories":["system-design","coding-interview"],"content":"Learn how to design systems at scale and prepare for system design interviews","date":"2022-10-04","objectID":"/system-design/","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"System Design Course Learn how to design systems at scale and prepare for system design interviews. Table of contents Getting Started What is system design? Chapter I IP OSI Model TCP and UDP Domain Name System (DNS) Load Balancing Clustering Caching Content Delivery Network (CDN) Proxy Availability Scalability Storage Chapter II Databases and DBMS SQL databases NoSQL databases SQL vs NoSQL databases Database Replication Indexes Normalization and Denormalization ACID and BASE consistency models CAP theorem PACELC Theorem Transactions Distributed Transactions Sharding Consistent Hashing Database Federation Chapter III N-tier architecture Message Brokers Message Queues Publish-Subscribe Enterprise Service Bus (ESB) Monoliths and Microservices Event-Driven Architecture (EDA) Event Sourcing Command and Query Responsibility Segregation (CQRS) API Gateway REST, GraphQL, gRPC Long polling, WebSockets, Server-Sent Events (SSE) Chapter IV Geohashing and Quadtrees Circuit breaker Rate Limiting Service Discovery SLA, SLO, SLI Disaster recovery Virtual Machines (VMs) and Containers OAuth 2.0 and OpenID Connect (OIDC) Single Sign-On (SSO) SSL, TLS, mTLS Chapter V System Design Interviews URL Shortener Whatsapp Twitter Netflix Uber Appendix Next Steps References What is system design? Before we start this course, let’s talk about what even is system design. System design is the process of defining the architecture, interfaces, and data for a system that satisfies specific requirements. System design meets the needs of your business or organization through coherent and efficient systems. It requires a systematic approach to building and engineering systems. A good system design requires us to think about everything, from infrastructure all the way down to the data and how it’s stored. ","date":"2022-10-04","objectID":"/system-design/:0:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why is System Design so important? System design helps us define a solution that meets the business requirements. It is one of the earliest decisions we can make when building a system. Often it is essential to think from a high level as these decisions are very difficult to correct later. It also makes it easier to reason about and manage architectural changes as the system evolves. IP An IP address is a unique address that identifies a device on the internet or a local network. IP stands for “Internet Protocol”, which is the set of rules governing the format of data sent via the internet or local network. In essence, IP addresses are the identifier that allows information to be sent between devices on a network. They contain location information and make devices accessible for communication. The internet needs a way to differentiate between different computers, routers, and websites. IP addresses provide a way of doing so and form an essential part of how the internet works. ","date":"2022-10-04","objectID":"/system-design/:1:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Versions Now, let’s learn about the different versions of IP addresses: ","date":"2022-10-04","objectID":"/system-design/:2:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"IPv4 The original Internet Protocol is IPv4 which uses a 32-bit numeric dot-decimal notation that only allows for around 4 billion IP addresses. Initially, it was more than enough but as internet adoption grew we needed something better. Example: 102.22.192.181 ","date":"2022-10-04","objectID":"/system-design/:2:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"IPv6 IPv6 is a new protocol that was introduced in 1998. Deployment commenced in the mid-2000s and since the internet users have grown exponentially, it is still ongoing. This new protocol uses 128-bit alphanumeric hexadecimal notation. This means that IPv6 can provide about ~340e+36 IP addresses. That’s more than enough to meet the growing demand for years to come. Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ","date":"2022-10-04","objectID":"/system-design/:2:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types Let’s discuss types of IP addresses: ","date":"2022-10-04","objectID":"/system-design/:3:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Public A public IP address is an address where one primary address is associated with your whole network. In this type of IP address, each of the connected devices has the same IP address. Example: IP address provided to your router by the ISP. ","date":"2022-10-04","objectID":"/system-design/:3:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Private A private IP address is a unique IP number assigned to every device that connects to your internet network, which includes devices like computers, tablets, and smartphones, which are used in your household. Example: IP addresses generated by your home router for your devices. ","date":"2022-10-04","objectID":"/system-design/:3:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Static A static IP address does not change and is one that was manually created, as opposed to having been assigned. These addresses are usually more expensive but are more reliable. Example: They are usually used for important things like reliable geo-location services, remote access, server hosting, etc. ","date":"2022-10-04","objectID":"/system-design/:3:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Dynamic A dynamic IP address changes from time to time and is not always the same. It has been assigned by a Dynamic Host Configuration Protocol (DHCP) server. Dynamic IP addresses are the most common type of internet protocol addresses. They are cheaper to deploy and allow us to reuse IP addresses within a network as needed. Example: They are more commonly used for consumer equipment and personal use. OSI Model The OSI Model is a logical and conceptual model that defines network communication used by systems open to interconnection and communication with other systems. The Open System Interconnection (OSI Model) also defines a logical network and effectively describes computer packet transfer by using various layers of protocols. The OSI Model can be seen as a universal language for computer networking. It’s based on the concept of splitting up a communication system into seven abstract layers, each one stacked upon the last. ","date":"2022-10-04","objectID":"/system-design/:3:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why does the OSI model matter? The Open System Interconnection (OSI) model has defined the common terminology used in networking discussions and documentation. This allows us to take a very complex communications process apart and evaluate its components. While this model is not directly implemented in the TCP/IP networks that are most common today, it can still help us do so much more, such as: Make troubleshooting easier and help identify threats across the entire stack. Encourage hardware manufacturers to create networking products that can communicate with each other over the network. Essential for developing a security-first mindset. Separate a complex function into simpler components. ","date":"2022-10-04","objectID":"/system-design/:4:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Layers The seven abstraction layers of the OSI model can be defined as follows, from top to bottom: ","date":"2022-10-04","objectID":"/system-design/:5:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Application This is the only layer that directly interacts with data from the user. Software applications like web browsers and email clients rely on the application layer to initiate communication. But it should be made clear that client software applications are not part of the application layer, rather the application layer is responsible for the protocols and data manipulation that the software relies on to present meaningful data to the user. Application layer protocols include HTTP as well as SMTP. ","date":"2022-10-04","objectID":"/system-design/:5:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Presentation The presentation layer is also called the Translation layer. The data from the application layer is extracted here and manipulated as per the required format to transmit over the network. The functions of the presentation layer are translation, encryption/decryption, and compression. ","date":"2022-10-04","objectID":"/system-design/:5:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Session This is the layer responsible for opening and closing communication between the two devices. The time between when the communication is opened and closed is known as the session. The session layer ensures that the session stays open long enough to transfer all the data being exchanged, and then promptly closes the session in order to avoid wasting resources. The session layer also synchronizes data transfer with checkpoints. ","date":"2022-10-04","objectID":"/system-design/:5:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Transport The transport layer (also known as layer 4) is responsible for end-to-end communication between the two devices. This includes taking data from the session layer and breaking it up into chunks called segments before sending it to the Network layer (layer 3). It is also responsible for reassembling the segments on the receiving device into data the session layer can consume. ","date":"2022-10-04","objectID":"/system-design/:5:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Network The network layer is responsible for facilitating data transfer between two different networks. The network layer breaks up segments from the transport layer into smaller units, called packets, on the sender’s device, and reassembles these packets on the receiving device. The network layer also finds the best physical path for the data to reach its destination this is known as routing. If the two devices communicating are on the same network, then the network layer is unnecessary. ","date":"2022-10-04","objectID":"/system-design/:5:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Link The data link layer is very similar to the network layer, except the data link layer facilitates data transfer between two devices on the same network. The data link layer takes packets from the network layer and breaks them into smaller pieces called frames. ","date":"2022-10-04","objectID":"/system-design/:5:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Physical This layer includes the physical equipment involved in the data transfer, such as the cables and switches. This is also the layer where the data gets converted into a bit stream, which is a string of 1s and 0s. The physical layer of both devices must also agree on a signal convention so that the 1s can be distinguished from the 0s on both devices. TCP and UDP ","date":"2022-10-04","objectID":"/system-design/:5:7","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"TCP Transmission Control Protocol (TCP) is connection-oriented, meaning once a connection has been established, data can be transmitted in both directions. TCP has built-in systems to check for errors and to guarantee data will be delivered in the order it was sent, making it the perfect protocol for transferring information like still images, data files, and web pages. But while TCP is instinctively reliable, its feedback mechanisms also result in a larger overhead, translating to greater use of the available bandwidth on the network. ","date":"2022-10-04","objectID":"/system-design/:6:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"UDP User Datagram Protocol (UDP) is a simpler, connectionless internet protocol in which error-checking and recovery services are not required. With UDP, there is no overhead for opening a connection, maintaining a connection, or terminating a connection. Data is continuously sent to the recipient, whether or not they receive it. It is largely preferred for real-time communications like broadcast or multicast network transmission. We should use UDP over TCP when we need the lowest latency and late data is worse than the loss of data. ","date":"2022-10-04","objectID":"/system-design/:7:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"TCP vs UDP TCP is a connection-oriented protocol, whereas UDP is a connectionless protocol. A key difference between TCP and UDP is speed, as TCP is comparatively slower than UDP. Overall, UDP is a much faster, simpler, and more efficient protocol, however, retransmission of lost data packets is only possible with TCP. TCP provides ordered delivery of data from user to server (and vice versa), whereas UDP is not dedicated to end-to-end communications, nor does it check the readiness of the receiver. Feature TCP UDP Connection Requires an established connection Connectionless protocol Guaranteed delivery Can guarantee delivery of data Cannot guarantee delivery of data Re-transmission Re-transmission of lost packets is possible No re-transmission of lost packets Speed Slower than UDP Faster than TCP Broadcasting Does not support broadcasting Supports broadcasting Use cases HTTPS, HTTP, SMTP, POP, FTP, etc Video streaming, DNS, VoIP, etc Domain Name System (DNS) Earlier we learned about IP addresses that enable every machine to connect with other machines. But as we know humans are more comfortable with names than numbers. It’s easier to remember a name like google.com than something like 122.250.192.232. This brings us to Domain Name System (DNS) which is a hierarchical and decentralized naming system used for translating human-readable domain names to IP addresses. ","date":"2022-10-04","objectID":"/system-design/:8:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How DNS works Video: https://youtu.be/vhfRArT11jc DNS lookup involves the following eight steps: A client types example.com into a web browser, the query travels to the internet and is received by a DNS resolver. The resolver then recursively queries a DNS root nameserver. The root server responds to the resolver with the address of a Top Level Domain (TLD). The resolver then makes a request to the .com TLD. The TLD server then responds with the IP address of the domain’s nameserver, example.com. Lastly, the recursive resolver sends a query to the domain’s nameserver. The IP address for example.com is then returned to the resolver from the nameserver. The DNS resolver then responds to the web browser with the IP address of the domain requested initially. Once the IP address has been resolved, the client should be able to request content from the resolved IP address. For example, the resolved IP may return a webpage to be rendered in the browser ","date":"2022-10-04","objectID":"/system-design/:9:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Server types Now, let’s look at the four key groups of servers that make up the DNS infrastructure. ","date":"2022-10-04","objectID":"/system-design/:10:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"DNS Resolver A DNS resolver (also known as a DNS recursive resolver) is the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver. After receiving a DNS query from a web client, a recursive resolver will either respond with cached data, or send a request to a root nameserver, followed by another request to a TLD nameserver, and then one last request to an authoritative nameserver. After receiving a response from the authoritative nameserver containing the requested IP address, the recursive resolver then sends a response to the client. ","date":"2022-10-04","objectID":"/system-design/:10:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"DNS root server A root server accepts a recursive resolver’s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.). The root nameservers are overseen by a nonprofit called the Internet Corporation for Assigned Names and Numbers (ICANN). There are 13 DNS root nameservers known to every recursive resolver. Note that while there are 13 root nameservers, that doesn’t mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world, which use Anycast routing to provide speedy responses. ","date":"2022-10-04","objectID":"/system-design/:10:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"TLD nameserver A TLD nameserver maintains information for all the domain names that share a common domain extension, such as .com, .net, or whatever comes after the last dot in a URL. Management of TLD nameservers is handled by the Internet Assigned Numbers Authority (IANA), which is a branch of ICANN. The IANA breaks up the TLD servers into two main groups: Generic top-level domains: These are domains like .com, .org, .net, .edu, and .gov. Country code top-level domains: These include any domains that are specific to a country or state. Examples include .uk, .us, .ru, and .jp. ","date":"2022-10-04","objectID":"/system-design/:10:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Authoritative DNS server The authoritative nameserver is usually the resolver’s last step in the journey for an IP address. The authoritative nameserver contains information specific to the domain name it serves (e.g. google.com) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address). If it cannot find the domain, returns the NXDOMAIN message. ","date":"2022-10-04","objectID":"/system-design/:10:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Query Types Video: https://youtu.be/BZISxpdl4lQ There are three types of queries in a DNS system: ","date":"2022-10-04","objectID":"/system-design/:11:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Recursive In a recursive query, a DNS client requires that a DNS server (typically a DNS recursive resolver) will respond to the client with either the requested resource record or an error message if the resolver can’t find the record. ","date":"2022-10-04","objectID":"/system-design/:11:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Iterative In an iterative query, a DNS client provides a hostname, and the DNS Resolver returns the best answer it can. If the DNS resolver has the relevant DNS records in its cache, it returns them. If not, it refers the DNS client to the Root Server or another Authoritative Name Server that is nearest to the required DNS zone. The DNS client must then repeat the query directly against the DNS server it was referred. ","date":"2022-10-04","objectID":"/system-design/:11:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-recursive A non-recursive query is a query in which the DNS Resolver already knows the answer. It either immediately returns a DNS record because it already stores it in a local cache, or queries a DNS Name Server which is authoritative for the record, meaning it definitely holds the correct IP for that hostname. In both cases, there is no need for additional rounds of queries (like in recursive or iterative queries). Rather, a response is immediately returned to the client. ","date":"2022-10-04","objectID":"/system-design/:11:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Records Types DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain. These records consist of a series of text files written in what is known as DNS syntax. DNS syntax is just a string of characters used as commands that tell the DNS server what to do. All DNS records also have a “TTL”, which stands for time-to-live, and indicates how often a DNS server will refresh that record. There are more record types but for now, let’s look at some of the most commonly used ones: A (Address record): This is the record that holds the IP address of a domain. AAAA (IP Version 6 Address record): The record that contains the IPv6 address for a domain (as opposed to A records, which stores the IPv4 address). CNAME (Canonical Name record): Forwards one domain or subdomain to another domain, does NOT provide an IP address. MX (Mail exchanger record): Directs mail to an email server. TXT (Text Record): This record lets an admin store text notes in the record. These records are often used for email security. NS (Name Server records): Stores the name server for a DNS entry. SOA (Start of Authority): Stores admin information about a domain. SRV (Service Location record): Specifies a port for specific services. PTR (Reverse-lookup Pointer records): Provides a domain name in reverse lookups. CERT (Certificate record): Stores public key certificates. ","date":"2022-10-04","objectID":"/system-design/:12:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Subdomains A subdomain is an additional part of our main domain name. It is commonly used to logically separate a website into sections. We can create multiple subdomains or child domains on the main domain. For example, blog.example.com where blog is the subdomain, example is the primary domain and .com is the top-level domain (TLD). Similar examples can be support.example.com or careers.example.com. ","date":"2022-10-04","objectID":"/system-design/:13:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"DNS Zones A DNS zone is a distinct part of the domain namespace which is delegated to a legal entity like a person, organization, or company, who is responsible for maintaining the DNS zone. A DNS zone is also an administrative function, allowing for granular control of DNS components, such as authoritative name servers. ","date":"2022-10-04","objectID":"/system-design/:14:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"DNS Caching A DNS cache (sometimes called a DNS resolver cache) is a temporary database, maintained by a computer’s operating system, that contains records of all the recent visits and attempted visits to websites and other internet domains. In other words, a DNS cache is just a memory of recent DNS lookups that our computer can quickly refer to when it’s trying to figure out how to load a website. The Domain Name System implements a time-to-live (TTL) on every DNS record. TTL specifies the number of seconds the record can be cached by a DNS client or server. When the record is stored in a cache, whatever TTL value came with it gets stored as well. The server continues to update the TTL of the record stored in the cache, counting down every second. When it hits zero, the record is deleted or purged from the cache. At that point, if a query for that record is received, the DNS server has to start the resolution process. ","date":"2022-10-04","objectID":"/system-design/:15:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Reverse DNS A reverse DNS lookup is a DNS query for the domain name associated with a given IP address. This accomplishes the opposite of the more commonly used forward DNS lookup, in which the DNS system is queried to return an IP address. The process of reverse resolving an IP address uses PTR records. If the server does not have a PTR record, it cannot resolve a reverse lookup. Reverse lookups are commonly used by email servers. Email servers check and see if an email message came from a valid server before bringing it onto their network. Many email servers will reject messages from any server that does not support reverse lookups or from a server that is highly unlikely to be legitimate. Note: Reverse DNS lookups are not universally adopted as they are not critical to the normal function of the internet. ","date":"2022-10-04","objectID":"/system-design/:16:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples These are some widely used managed DNS solutions: Route53 Cloudflare DNS Google Cloud DNS Azure DNS NS1 Load Balancing Load balancing lets us distribute incoming network traffic across multiple resources ensuring high availability and reliability by sending requests only to resources that are online. This provides the flexibility to add or subtract resources as demand dictates. For additional scalability and redundancy, we can try to load balance at each layer of our system: ","date":"2022-10-04","objectID":"/system-design/:17:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"But why? Modern high-traffic websites must serve hundreds of thousands, if not millions, of concurrent requests from users or clients. To cost-effectively scale to meet these high volumes, modern computing best practice generally requires adding more servers. A load balancer can sit in front of the servers and route client requests across all servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization. This ensures that no single server is overworked, which could degrade performance. If a single server goes down, the load balancer redirects traffic to the remaining online servers. When a new server is added to the server group, the load balancer automatically starts sending requests to it. ","date":"2022-10-04","objectID":"/system-design/:18:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Workload distribution This is the core functionality provided by a load balancer and has several common variations: Host-based: Distributes requests based on the requested hostname. Path-based: Using the entire URL to distribute requests as opposed to just the hostname. Content-based: Inspects the message content of a request. This allows distribution based on content such as the value of a parameter. ","date":"2022-10-04","objectID":"/system-design/:19:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Layers Generally speaking, load balancers operate at one of the two levels: ","date":"2022-10-04","objectID":"/system-design/:20:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Network layer This is the load balancer that works at the network’s transport layer, also known as layer 4. This performs routing based on networking information such as IP addresses and is not able to perform content-based routing. These are often dedicated hardware devices that can operate at high speed. ","date":"2022-10-04","objectID":"/system-design/:20:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Application layer This is the load balancer that operates at the application layer, also known as layer 7. Load balancers can read requests in their entirety and perform content-based routing. This allows the management of load based on a full understanding of traffic. ","date":"2022-10-04","objectID":"/system-design/:20:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types Let’s look at different types of load balancers: ","date":"2022-10-04","objectID":"/system-design/:21:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Software Software load balancers usually are easier to deploy than hardware versions. They also tend to be more cost-effective and flexible, and they are used in conjunction with software development environments. The software approach gives us the flexibility of configuring the load balancer to our environment’s specific needs. The boost in flexibility may come at the cost of having to do more work to set up the load balancer. Compared to hardware versions, which offer more of a closed-box approach, software balancers give us more freedom to make changes and upgrades. Software load balancers are widely used and are available either as installable solutions that require configuration and management or as a managed cloud service. ","date":"2022-10-04","objectID":"/system-design/:21:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Hardware As the name implies, a hardware load balancer relies on physical, on-premises hardware to distribute application and network traffic. These devices can handle a large volume of traffic but often carry a hefty price tag and are fairly limited in terms of flexibility. Hardware load balancers include proprietary firmware that requires maintenance and updates as new versions and security patches are released. ","date":"2022-10-04","objectID":"/system-design/:21:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"DNS DNS load balancing is the practice of configuring a domain in the Domain Name System (DNS) such that client requests to the domain are distributed across a group of server machines. Unfortunately, DNS load balancing has inherent problems limiting its reliability and efficiency. Most significantly, DNS does not check for server and network outages, or errors. It always returns the same set of IP addresses for a domain even if servers are down or inaccessible. ","date":"2022-10-04","objectID":"/system-design/:21:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Routing Algorithms Now, let’s discuss commonly used routing algorithms: Round-robin: Requests are distributed to application servers in rotation. Weighted Round-robin: Builds on the simple Round-robin technique to account for differing server characteristics such as compute and traffic handling capacity using weights that can be assigned via DNS records by the administrator. Least Connections: A new request is sent to the server with the fewest current connections to clients. The relative computing capacity of each server is factored into determining which one has the least connections. Least Response Time: Sends requests to the server selected by a formula that combines the fastest response time and fewest active connections. Least Bandwidth: This method measures traffic in megabits per second (Mbps), sending client requests to the server with the least Mbps of traffic. Hashing: Distributes requests based on a key we define, such as the client IP address or the request URL. ","date":"2022-10-04","objectID":"/system-design/:22:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Load balancing also plays a key role in preventing downtime, other advantages of load balancing include the following: Scalability Redundancy Flexibility Efficiency ","date":"2022-10-04","objectID":"/system-design/:23:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Redundant load balancers As you must’ve already guessed, the load balancer itself can be a single point of failure. To overcome this, a second or N number of load balancers can be used in a cluster mode. And, if there’s a failure detection and the active load balancer fails, another passive load balancer can take over which will make our system more fault-tolerant. ","date":"2022-10-04","objectID":"/system-design/:24:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Features Here are some commonly desired features of load balancers: Autoscaling: Starting up and shutting down resources in response to demand conditions. Sticky sessions: The ability to assign the same user or device to the same resource in order to maintain the session state on the resource. Healthchecks: The ability to determine if a resource is down or performing poorly in order to remove the resource from the load balancing pool. Persistence connections: Allowing a server to open a persistent connection with a client such as a WebSocket. Encryption: Handling encrypted connections such as TLS and SSL. Certificates: Presenting certificates to a client and authentication of client certificates. Compression: Compression of responses. Caching: An application-layer load balancer may offer the ability to cache responses. Logging: Logging of request and response metadata can serve as an important audit trail or source for analytics data. Request tracing: Assigning each request a unique id for the purposes of logging, monitoring, and troubleshooting. Redirects: The ability to redirect an incoming request based on factors such as the requested path. Fixed response: Returning a static response for a request such as an error message. ","date":"2022-10-04","objectID":"/system-design/:25:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Following are some of the load balancing solutions commonly used in the industry: Amazon Elastic Load Balancing Azure Load Balancing GCP Load Balancing DigitalOcean Load Balancer Nginx HAProxy Clustering At a high level, a computer cluster is a group of two or more computers, or nodes, that run in parallel to achieve a common goal. This allows workloads consisting of a high number of individual, parallelizable tasks to be distributed among the nodes in the cluster. As a result, these tasks can leverage the combined memory and processing power of each computer to increase overall performance. To build a computer cluster, the individual nodes should be connected to a network to enable internode communication. The software can then be used to join the nodes together and form a cluster. It may have a shared storage device and/or local storage on each node. Typically, at least one node is designated as the leader node and acts as the entry point to the cluster. The leader node may be responsible for delegating incoming work to the other nodes and, if necessary, aggregating the results and returning a response to the user. Ideally, a cluster functions as if it were a single system. A user accessing the cluster should not need to know whether the system is a cluster or an individual machine. Furthermore, a cluster should be designed to minimize latency and prevent bottlenecks in node-to-node communication. ","date":"2022-10-04","objectID":"/system-design/:26:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types Computer clusters can generally be categorized into three types: Highly available or fail-over Load balancing High-performance computing ","date":"2022-10-04","objectID":"/system-design/:27:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Configurations The two most commonly used high availability (HA) clustering configurations are active-active and active-passive. ","date":"2022-10-04","objectID":"/system-design/:28:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Active-Active An active-active cluster is typically made up of at least two nodes, both actively running the same kind of service simultaneously. The main purpose of an active-active cluster is to achieve load balancing. A load balancer distributes workloads across all nodes to prevent any single node from getting overloaded. Because there are more nodes available to serve, there will also be an improvement in throughput and response times. ","date":"2022-10-04","objectID":"/system-design/:28:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Active-Passive Like the active-active cluster configuration, an active-passive cluster also consists of at least two nodes. However, as the name active-passive implies, not all nodes are going to be active. For example, in the case of two nodes, if the first node is already active, then the second node must be passive or on standby. ","date":"2022-10-04","objectID":"/system-design/:28:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Four key advantages of cluster computing are as follows: High availability Scalability Performance Cost-effective ","date":"2022-10-04","objectID":"/system-design/:29:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Load balancing vs Clustering Load balancing shares some common traits with clustering, but they are different processes. Clustering provides redundancy and boosts capacity and availability. Servers in a cluster are aware of each other and work together toward a common purpose. But with load balancing, servers are not aware of each other. Instead, they react to the requests they receive from the load balancer. We can employ load balancing in conjunction with clustering but it also is applicable in cases involving independent servers that share a common purpose such as to run a website, business application, web service, or some other IT resource. ","date":"2022-10-04","objectID":"/system-design/:30:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Challenges The most obvious challenge clustering presents is the increased complexity of installation and maintenance. An operating system, the application, and its dependencies must each be installed and updated on every node. This becomes even more complicated if the nodes in the cluster are not homogeneous. Resource utilization for each node must also be closely monitored, and logs should be aggregated to ensure that the software is behaving correctly. Additionally, storage becomes more difficult to manage, a shared storage device must prevent nodes from overwriting one another and distributed data stores have to be kept in sync. ","date":"2022-10-04","objectID":"/system-design/:31:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Clustering is commonly used in the industry, and often many technologies offer some sort of clustering mode. For example: Containers (eg. Kubernetes, Amazon ECS) Databases (eg. Cassandra, MongoDB) Cache (eg. Redis) Caching “There are only two hard things in Computer Science: cache invalidation and naming things.” - Phil Karlton A cache’s primary purpose is to increase data retrieval performance by reducing the need to access the underlying slower storage layer. Trading off capacity for speed, a cache typically stores a subset of data transiently, in contrast to databases whose data is usually complete and durable. Caches take advantage of the locality of reference principle “recently requested data is likely to be requested again”. ","date":"2022-10-04","objectID":"/system-design/:32:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching and Memory Similar to a computer’s memory, a cache is a compact, fast-performing memory that stores data in a hierarchy of levels, starting at level one, and progressing from there sequentially. They are labeled as L1, L2, L3, and so on. A cache also gets written if requested, such as when there has been an update and new content needs to be saved to the cache, replacing the older content that was saved. No matter whether the cache is read or written, it’s done one block at a time. Each block also has a tag that includes the location where the data was stored in the cache. When data is requested from the cache, a search occurs through the tags to find the specific content that’s needed in level one (L1) of the memory. If the correct data isn’t found, more searches are conducted in L2. If the data isn’t found there, searches are continued in L3, then L4, and so on until it has been found, then, it’s read and loaded. If the data isn’t found in the cache at all, then it’s written into it for quick retrieval the next time. ","date":"2022-10-04","objectID":"/system-design/:33:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache hit and Cache miss ","date":"2022-10-04","objectID":"/system-design/:34:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache hit A cache hit describes the situation where content is successfully served from the cache. The tags are searched in the memory rapidly, and when the data is found and read, it’s considered a cache hit. Cold, Warm, and Hot Caches A cache hit can also be described as cold, warm, or hot. In each of these, the speed at which the data is read is described. A hot cache is an instance where data was read from the memory at the fastest possible rate. This happens when the data is retrieved from L1. A cold cache is the slowest possible rate for data to be read, though, it’s still successful so it’s still considered a cache hit. The data is just found lower in the memory hierarchy such as in L3, or lower. A warm cache is used to describe data that’s found in L2 or L3. It’s not as fast as a hot cache, but it’s still faster than a cold cache. Generally, calling a cache warm is used to express that it’s slower and closer to a cold cache than a hot one. ","date":"2022-10-04","objectID":"/system-design/:34:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache miss A cache miss refers to the instance when the memory is searched and the data isn’t found. When this happens, the content is transferred and written into the cache. ","date":"2022-10-04","objectID":"/system-design/:34:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache Invalidation Cache invalidation is a process where the computer system declares the cache entries as invalid and removes or replaces them. If the data is modified, it should be invalidated in the cache, if not, this can cause inconsistent application behavior. There are three kinds of caching systems: ","date":"2022-10-04","objectID":"/system-design/:35:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Write-through cache Data is written into the cache and the corresponding database simultaneously. Pro: Fast retrieval, complete data consistency between cache and storage. Con: Higher latency for write operations. ","date":"2022-10-04","objectID":"/system-design/:35:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Write-around cache Where write directly goes to the database or permanent storage, bypassing the cache. Pro: This may reduce latency. Con: It increases cache misses because the cache system has to read the information from the database in case of a cache miss. As a result, this can lead to higher read latency in the case of applications that write and re-read the information quickly. Read happen from slower back-end storage and experiences higher latency. ","date":"2022-10-04","objectID":"/system-design/:35:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Write-back cache Where the write is only done to the caching layer and the write is confirmed as soon as the write to the cache completes. The cache then asynchronously syncs this write to the database. Pro: This would lead to reduced latency and high throughput for write-intensive applications. Con: There is a risk of data loss in case the caching layer crashes. We can improve this by having more than one replica acknowledging the write in the cache. ","date":"2022-10-04","objectID":"/system-design/:35:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Eviction policies Following are some of the most common cache eviction policies: First In First Out (FIFO): The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before. Last In First Out (LIFO): The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before. Least Recently Used (LRU): Discards the least recently used items first. Most Recently Used (MRU): Discards, in contrast to LRU, the most recently used items first. Least Frequently Used (LFU): Counts how often an item is needed. Those that are used least often are discarded first. Random Replacement (RR): Randomly selects a candidate item and discards it to make space when necessary. ","date":"2022-10-04","objectID":"/system-design/:36:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Distributed Cache A distributed cache is a system that pools together the random-access memory (RAM) of multiple networked computers into a single in-memory data store used as a data cache to provide fast access to data. While most caches are traditionally in one physical server or hardware component, a distributed cache can grow beyond the memory limits of a single computer by linking together multiple computers. ","date":"2022-10-04","objectID":"/system-design/:37:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Global Cache As the name suggests, we will have a single shared cache that all the application nodes will use. When the requested data is not found in the global cache, it’s the responsibility of the cache to find out the missing piece of data from the underlying data store. ","date":"2022-10-04","objectID":"/system-design/:38:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Caching can have many real-world use cases such as: Database Caching Content Delivery Network (CDN) Domain Name System (DNS) Caching API Caching When not to use caching? Let’s also look at some scenarios where we should not use cache: Caching isn’t helpful when it takes just as long to access the cache as it does to access the primary data store. Caching doesn’t work as well when requests have low repetition (higher randomness), because caching performance comes from repeated memory access patterns. Caching isn’t helpful when the data changes frequently, as the cached version gets out of sync, and the primary data store must be accessed every time. It’s important to note that a cache should not be used as permanent data storage. They are almost always implemented in volatile memory because it is faster, and thus should be considered transient. ","date":"2022-10-04","objectID":"/system-design/:39:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Below are some advantages of caching: Improves performance Reduce latency Reduce load on the database Reduce network cost Increase Read Throughput ","date":"2022-10-04","objectID":"/system-design/:40:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some commonly used technologies for caching: Redis Memcached Amazon Elasticache Aerospike Content Delivery Network (CDN) A content delivery network (CDN) is a geographically distributed group of servers that work together to provide fast delivery of internet content. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN. ","date":"2022-10-04","objectID":"/system-design/:41:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why use a CDN? Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs and improving security. Serving content from CDNs can significantly improve performance as users receive content from data centers close to them and our servers do not have to serve requests that the CDN fulfills. ","date":"2022-10-04","objectID":"/system-design/:42:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How does a CDN work? In a CDN, the origin server contains the original versions of the content while the edge servers are numerous and distributed across various locations around the world. To minimize the distance between the visitors and the website’s server, a CDN stores a cached version of its content in multiple geographical locations known as edge locations. Each edge location contains a number of caching servers responsible for content delivery to visitors within its proximity. Once the static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin, thus reducing origin load and improving scalability. For example, when someone in the UK requests our website which might be hosted in the USA, they will be served from the closest edge location such as the London edge location. This is much quicker than having the visitor make a complete request to the origin server which will increase the latency. ","date":"2022-10-04","objectID":"/system-design/:43:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types CDNs are generally divided into two types: ","date":"2022-10-04","objectID":"/system-design/:44:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Push CDNs Push CDNs receive new content whenever changes occur on the server. We take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. We can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage. Sites with a small amount of traffic or sites with content that isn’t often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals. ","date":"2022-10-04","objectID":"/system-design/:44:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Pull CDNs In a Pull CDN situation, the cache is updated based on request. When the client sends a request that requires static assets to be fetched from the CDN if the CDN doesn’t have it, then it will fetch the newly updated assets from the origin server and populate its cache with this new asset, and then send this new cached asset to the user. Contrary to the Push CDN, this requires less maintenance because cache updates on CDN nodes are performed based on requests from the client to the origin server. Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN. ","date":"2022-10-04","objectID":"/system-design/:44:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages As we all know good things come with extra costs, so let’s discuss some disadvantages of CDNs: Extra charges: It can be expensive to use a CDN, especially for high-traffic services. Restrictions: Some organizations and countries have blocked the domains or IP addresses of popular CDNs. Location: If most of our audience is located in a country where the CDN has no servers, the data on our website may have to travel further than without using any CDN. ","date":"2022-10-04","objectID":"/system-design/:45:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some widely used CDNs: Amazon CloudFront Google Cloud CDN Cloudflare CDN Fastly Proxy A proxy server is an intermediary piece of hardware/software sitting between the client and the backend server. It receives requests from clients and relays them to the origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compression). ","date":"2022-10-04","objectID":"/system-design/:46:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types There are two types of proxies: ","date":"2022-10-04","objectID":"/system-design/:47:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Forward Proxy A forward proxy, often called a proxy, proxy server, or web proxy is a server that sits in front of a group of client machines. When those computers make requests to sites and services on the internet, the proxy server intercepts those requests and then communicates with web servers on behalf of those clients, like a middleman. Advantages Here are some advantages of a forward proxy: Block access to certain content Allows access to geo-restricted content Provides anonymity Avoid other browsing restrictions Although proxies provide the benefits of anonymity, they can still track our personal information. Setup and maintenance of a proxy server can be costly and requires configurations. ","date":"2022-10-04","objectID":"/system-design/:47:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Reverse Proxy A reverse proxy is a server that sits in front of one or more web servers, intercepting requests from clients. When clients send requests to the origin server of a website, those requests are intercepted by the reverse proxy server. The difference between a forward and reverse proxy is subtle but important. A simplified way to sum it up would be to say that a forward proxy sits in front of a client and ensures that no origin server ever communicates directly with that specific client. On the other hand, a reverse proxy sits in front of an origin server and ensures that no client ever communicates directly with that origin server. Introducing reverse proxy results in increased complexity. A single reverse proxy is a single point of failure, configuring multiple reverse proxies (i.e. a failover) further increases complexity. Advantages Here are some advantages of using a reverse proxy: Improved security Caching SSL encryption Load balancing Scalability and flexibility ","date":"2022-10-04","objectID":"/system-design/:47:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Load balancer vs Reverse Proxy Wait, isn’t reverse proxy similar to a load balancer? Well, no as a load balancer is useful when we have multiple servers. Often, load balancers route traffic to a set of servers serving the same function, while, reverse proxies can be useful even with just one web server or application server. A reverse proxy can also act as a load balancer but not the other way around. ","date":"2022-10-04","objectID":"/system-design/:48:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Below are some commonly used proxy technologies: Nginx HAProxy Traefik Envoy Availability Availability is the time a system remains operational to perform its required function in a specific period. It is a simple measure of the percentage of time that a system, service, or machine remains operational under normal conditions. ","date":"2022-10-04","objectID":"/system-design/:49:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"The Nine’s of availability Availability is often quantified by uptime (or downtime) as a percentage of time the service is available. It is generally measured in the number of 9s. $$ Availability = \\frac{Uptime}{(Uptime + Downtime)} $$ If availability is 99.00% available, it is said to have “2 nines” of availability, and if it is 99.9%, it is called “3 nines”, and so on. Availability (Percent) Downtime (Year) Downtime (Month) Downtime (Week) 90% (one nine) 36.53 days 72 hours 16.8 hours 99% (two nines) 3.65 days 7.20 hours 1.68 hours 99.9% (three nines) 8.77 hours 43.8 minutes 10.1 minutes 99.99% (four nines) 52.6 minutes 4.32 minutes 1.01 minutes 99.999% (five nines) 5.25 minutes 25.9 seconds 6.05 seconds 99.9999% (six nines) 31.56 seconds 2.59 seconds 604.8 milliseconds 99.99999% (seven nines) 3.15 seconds 263 milliseconds 60.5 milliseconds 99.999999% (eight nines) 315.6 milliseconds 26.3 milliseconds 6 milliseconds 99.9999999% (nine nines) 31.6 milliseconds 2.6 milliseconds 0.6 milliseconds ","date":"2022-10-04","objectID":"/system-design/:50:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Availability in Sequence vs Parallel If a service consists of multiple components prone to failure, the service’s overall availability depends on whether the components are in sequence or in parallel. ","date":"2022-10-04","objectID":"/system-design/:51:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sequence Overall availability decreases when two components are in sequence. $$ Availability \\space (Total) = Availability \\space (Foo) * Availability \\space (Bar) $$ For example, if both Foo and Bar each had 99.9% availability, their total availability in sequence would be 99.8%. ","date":"2022-10-04","objectID":"/system-design/:51:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Parallel Overall availability increases when two components are in parallel. $$ Availability \\space (Total) = 1 - (1 - Availability \\space (Foo)) * (1 - Availability \\space (Bar)) $$ For example, if both Foo and Bar each had 99.9% availability, their total availability in parallel would be 99.9999%. ","date":"2022-10-04","objectID":"/system-design/:51:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Availability vs Reliability If a system is reliable, it is available. However, if it is available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve high availability even with an unreliable system. ","date":"2022-10-04","objectID":"/system-design/:52:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High availability vs Fault Tolerance Both high availability and fault tolerance apply to methods for providing high uptime levels. However, they accomplish the objective differently. A fault-tolerant system has no service interruption but a significantly higher cost, while a highly available system has minimal service interruption. Fault-tolerance requires full hardware redundancy as if the main system fails, with no loss in uptime, another system should take over. Scalability Scalability is the measure of how well a system responds to changes by adding or removing resources to meet demands. Let’s discuss different types of scaling: ","date":"2022-10-04","objectID":"/system-design/:53:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Vertical scaling Vertical scaling (also known as scaling up) expands a system’s scalability by adding more power to an existing machine. In other words, vertical scaling refers to improving an application’s capability via increasing hardware capacity. ","date":"2022-10-04","objectID":"/system-design/:54:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Simple to implement Easier to manage Data consistent ","date":"2022-10-04","objectID":"/system-design/:54:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Risk of high downtime Harder to upgrade Can be a single point of failure ","date":"2022-10-04","objectID":"/system-design/:54:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Horizontal scaling Horizontal scaling (also known as scaling out) expands a system’s scale by adding more machines. It improves the performance of the server by adding more instances to the existing pool of servers, allowing the load to be distributed more evenly. ","date":"2022-10-04","objectID":"/system-design/:55:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Increased redundancy Better fault tolerance Flexible and efficient Easier to upgrade ","date":"2022-10-04","objectID":"/system-design/:55:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Increased complexity Data inconsistency Increased load on downstream services Storage Storage is a mechanism that enables a system to retain data, either temporarily or permanently. This topic is mostly skipped over in the context of system design, however, it is important to have a basic understanding of some common types of storage techniques that can help us fine-tune our storage components. Let’s discuss some important storage concepts: ","date":"2022-10-04","objectID":"/system-design/:55:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"RAID RAID (Redundant Array of Independent Disks) is a way of storing the same data on multiple hard disks or solid-state drives (SSDs) to protect data in the case of a drive failure. There are different RAID levels, however, and not all have the goal of providing redundancy. Let’s discuss some commonly used RAID levels: RAID 0: Also known as striping, data is split evenly across all the drives in the array. RAID 1: Also known as mirroring, at least two drives contains the exact copy of a set of data. If a drive fails, others will still work. RAID 5: Striping with parity. Requires the use of at least 3 drives, striping the data across multiple drives like RAID 0, but also has a parity distributed across the drives. RAID 6: Striping with double parity. RAID 6 is like RAID 5, but the parity data are written to two drives. RAID 10: Combines striping plus mirroring from RAID 0 and RAID 1. It provides security by mirroring all data on secondary drives while using striping across each set of drives to speed up data transfers. ","date":"2022-10-04","objectID":"/system-design/:56:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Comparison Let’s compare all the features of different RAID levels: Features RAID 0 RAID 1 RAID 5 RAID 6 RAID 10 Description Striping Mirroring Striping with Parity Striping with double parity Striping and Mirroring Minimum Disks 2 2 3 4 4 Read Performance High High High High High Write Performance High Medium High High Medium Cost Low High Low Low High Fault Tolerance None Single-drive failure Single-drive failure Two-drive failure Up to one disk failure in each sub-array Capacity Utilization 100% 50% 67%-94% 50%-80% 50% ","date":"2022-10-04","objectID":"/system-design/:56:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Volumes Volume is a fixed amount of storage on a disk or tape. The term volume is often used as a synonym for the storage itself, but it is possible for a single disk to contain more than one volume or a volume to span more than one disk. ","date":"2022-10-04","objectID":"/system-design/:57:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"File storage File storage is a solution to store data as files and present it to its final users as a hierarchical directories structure. The main advantage is to provide a user-friendly solution to store and retrieve files. To locate a file in file storage, the complete path of the file is required. It is economical and easily structured and is usually found on hard drives, which means that they appear exactly the same for the user and on the hard drive. Example: Amazon EFS, Azure files, Google Cloud Filestore, etc. ","date":"2022-10-04","objectID":"/system-design/:58:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Block storage Block storage divides data into blocks (chunks) and stores them as separate pieces. Each block of data is given a unique identifier, which allows a storage system to place the smaller pieces of data wherever it is most convenient. Block storage also decouples data from user environments, allowing that data to be spread across multiple environments. This creates multiple paths to the data and allows the user to retrieve it quickly. When a user or application requests data from a block storage system, the underlying storage system reassembles the data blocks and presents the data to the user or application Example: Amazon EBS. ","date":"2022-10-04","objectID":"/system-design/:59:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Object Storage Object storage, which is also known as object-based storage, breaks data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. Example: Amazon S3, Azure Blob Storage, Google Cloud Storage, etc. ","date":"2022-10-04","objectID":"/system-design/:60:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"NAS A NAS (Network Attached Storage) is a storage device connected to a network that allows storage and retrieval of data from a central location for authorized network users. NAS devices are flexible, meaning that as we need additional storage, we can add to what we have. It’s faster, less expensive, and provides all the benefits of a public cloud on-site, giving us complete control. ","date":"2022-10-04","objectID":"/system-design/:61:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"HDFS The Hadoop Distributed File System (HDFS) is a distributed file system designed to run on commodity hardware. HDFS is highly fault-tolerant and is designed to be deployed on low-cost hardware. HDFS provides high throughput access to application data and is suitable for applications that have large data sets. It has many similarities with existing distributed file systems. HDFS is designed to reliably store very large files across machines in a large cluster. It stores each file as a sequence of blocks, all blocks in a file except the last block are the same size. The blocks of a file are replicated for fault tolerance. Databases and DBMS ","date":"2022-10-04","objectID":"/system-design/:62:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is a Database? A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a Database Management System (DBMS). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database. ","date":"2022-10-04","objectID":"/system-design/:63:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is DBMS? A database typically requires a comprehensive database software program known as a Database Management System (DBMS). A DBMS serves as an interface between the database and its end-users or programs, allowing users to retrieve, update, and manage how the information is organized and optimized. A DBMS also facilitates oversight and control of databases, enabling a variety of administrative operations such as performance monitoring, tuning, and backup and recovery. ","date":"2022-10-04","objectID":"/system-design/:64:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Components Here are some common components found across different databases: ","date":"2022-10-04","objectID":"/system-design/:65:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Schema The role of a schema is to define the shape of a data structure, and specify what kinds of data can go where. Schemas can be strictly enforced across the entire database, loosely enforced on part of the database, or they might not exist at all. ","date":"2022-10-04","objectID":"/system-design/:65:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Table Each table contains various columns just like in a spreadsheet. A table can have as meager as two columns and upwards of a hundred or more columns, depending upon the kind of information being put in the table. ","date":"2022-10-04","objectID":"/system-design/:65:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Column A column contains a set of data values of a particular type, one value for each row of the database. A column may contain text values, numbers, enums, timestamps, etc. ","date":"2022-10-04","objectID":"/system-design/:65:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Row Data in a table is recorded in rows. There can be thousands or millions of rows in a table having any particular information. ","date":"2022-10-04","objectID":"/system-design/:65:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types Below are different types of databases: SQL NoSQL Document Key-value Graph Timeseries Wide column Multi-model SQL and NoSQL databases are broad topics and will be discussed separately in SQL databases and NoSQL databases. Learn how they compare to each other in SQL vs NoSQL databases. ","date":"2022-10-04","objectID":"/system-design/:66:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Challenges Some common challenges faced while running databases at scale: Absorbing significant increases in data volume: The explosion of data coming in from sensors, connected machines, and dozens of other sources. Ensuring data security: Data breaches are happening everywhere these days, it’s more important than ever to ensure that data is secure but also easily accessible to users. Keeping up with demand: Companies need real-time access to their data to support timely decision-making and to take advantage of new opportunities. Managing and maintaining the database and infrastructure: As databases become more complex and data volumes grow, companies are faced with the expense of hiring additional talent to manage their databases. Removing limits on scalability: A business needs to grow if it’s going to survive, and its data management must grow along with it. But it’s very difficult to predict how much capacity the company will need, particularly with on-premises databases. Ensuring data residency, data sovereignty, or latency requirements: Some organizations have use cases that are better suited to run on-premises. In those cases, engineered systems that are pre-configured and pre-optimized for running the database are ideal. SQL databases A SQL (or relational) database is a collection of data items with pre-defined relationships between them. These items are organized as a set of tables with columns and rows. Tables are used to hold information about the objects to be represented in the database. Each column in a table holds a certain kind of data and a field stores the actual value of an attribute. The rows in the table represent a collection of related values of one object or entity. Each row in a table could be marked with a unique identifier called a primary key, and rows among multiple tables can be made related using foreign keys. This data can be accessed in many different ways without re-organizing the database tables themselves. SQL databases usually follow the ACID consistency model. ","date":"2022-10-04","objectID":"/system-design/:67:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Materialized views A materialized view is a pre-computed data set derived from a query specification and stored for later use. Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view. This performance difference can be significant when a query is run frequently or is sufficiently complex. It also enables data subsetting and improves the performance of complex queries that run on large data sets which reduces network loads. There are other uses of materialized views, but they are mostly used for performance and replication. ","date":"2022-10-04","objectID":"/system-design/:68:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"N+1 query problem The N+1 query problem happens when the data access layer executes N additional SQL statements to fetch the same data that could have been retrieved when executing the primary SQL query. The larger the value of N, the more queries will be executed, the larger the performance impact. This is commonly seen in GraphQL and ORM (Object-Relational Mapping) tools and can be addressed by optimizing the SQL query or using a dataloader that batches consecutive requests and makes a single data request under the hood. ","date":"2022-10-04","objectID":"/system-design/:69:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s look at some advantages of using relational databases: Simple and accurate Accessibility Data consistency Flexibility ","date":"2022-10-04","objectID":"/system-design/:70:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are the disadvantages of relational databases: Expensive to maintain Difficult schema evolution Performance hits (join, denormalization, etc.) Difficult to scale due to poor horizontal scalability ","date":"2022-10-04","objectID":"/system-design/:71:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some commonly used relational databases: PostgreSQL MySQL MariaDB Amazon Aurora NoSQL databases NoSQL is a broad category that includes any database that doesn’t use SQL as its primary data access language. These types of databases are also sometimes referred to as non-relational databases. Unlike in relational databases, data in a NoSQL database doesn’t have to conform to a pre-defined schema. NoSQL databases follow BASE consistency model. Below are different types of NoSQL databases: ","date":"2022-10-04","objectID":"/system-design/:72:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Document A document database (also known as a document-oriented database or a document store) is a database that stores information in documents. They are general-purpose databases that serve a variety of use cases for both transactional and analytical applications. Advantages Intuitive and flexible Easy horizontal scaling Schemaless Disadvantages Schemaless Non-relational Examples MongoDB Amazon DocumentDB CouchDB ","date":"2022-10-04","objectID":"/system-design/:72:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Key-value One of the simplest types of NoSQL databases, key-value databases save data as a group of key-value pairs made up of two data items each. They’re also sometimes referred to as a key-value store. Advantages Simple and performant Highly scalable for high volumes of traffic Session management Optimized lookups Disadvantages Basic CRUD Values can’t be filtered Lacks indexing and scanning capabilities Not optimized for complex queries Examples Redis Memcached Amazon DynamoDB Aerospike ","date":"2022-10-04","objectID":"/system-design/:72:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Graph A graph database is a NoSQL database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data instead of tables or documents. The graph relates the data items in the store to a collection of nodes and edges, the edges representing the relationships between the nodes. The relationships allow data in the store to be linked together directly and, in many cases, retrieved with one operation. Advantages Query speed Agile and flexible Explicit data representation Disadvantages Complex No standardized query language Use cases Fraud detection Recommendation engines Social networks Network mapping Examples Neo4j ArangoDB Amazon Neptune JanusGraph ","date":"2022-10-04","objectID":"/system-design/:72:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Time series A time-series database is a database optimized for time-stamped, or time series, data. Advantages Fast insertion and retrieval Efficient data storage Use cases IoT data Metrics analysis Application monitoring Understand financial trends Examples InfluxDB Apache Druid ","date":"2022-10-04","objectID":"/system-design/:72:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Wide column Wide column databases, also known as wide column stores, are schema-agnostic. Data is stored in column families, rather than in rows and columns. Advantages Highly scalable, can handle petabytes of data Ideal for real-time big data applications Disadvantages Expensive Increased write time Use cases Business analytics Attribute-based data storage Examples BigTable Apache Cassandra ScyllaDB ","date":"2022-10-04","objectID":"/system-design/:72:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Multi-model Multi-model databases combine different database models (i.e. relational, graph, key-value, document, etc.) into a single, integrated backend. This means they can accommodate various data types, indexes, queries, and store data in more than one model. Advantages Flexibility Suitable for complex projects Data consistent Disadvantages Complex Less mature Examples ArangoDB Azure Cosmos DB Couchbase SQL vs NoSQL databases In the world of databases, there are two main types of solutions, SQL (relational) and NoSQL (non-relational) databases. Both of them differ in the way they were built, the kind of information they store, and how they store it. Relational databases are structured and have predefined schemas while non-relational databases are unstructured, distributed, and have a dynamic schema. ","date":"2022-10-04","objectID":"/system-design/:72:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level differences Here are some high-level differences between SQL and NoSQL: ","date":"2022-10-04","objectID":"/system-design/:73:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage SQL stores data in tables, where each row represents an entity and each column represents a data point about that entity. NoSQL databases have different data storage models such as key-value, graph, document, etc. ","date":"2022-10-04","objectID":"/system-design/:73:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Schema In SQL, each record conforms to a fixed schema, meaning the columns must be decided and chosen before data entry and each row must have data for each column. The schema can be altered later, but it involves modifying the database using migrations. Whereas in NoSQL, schemas are dynamic. Fields can be added on the fly, and each record (or equivalent) doesn’t have to contain data for each field. ","date":"2022-10-04","objectID":"/system-design/:73:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Querying SQL databases use SQL (structured query language) for defining and manipulating the data, which is very powerful. In a NoSQL database, queries are focused on a collection of documents. Different databases have different syntax for querying. ","date":"2022-10-04","objectID":"/system-design/:73:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Scalability In most common situations, SQL databases are vertically scalable, which can get very expensive. It is possible to scale a relational database across multiple servers, but this is a challenging and time-consuming process. On the other hand, NoSQL databases are horizontally scalable, meaning we can add more servers easily to our NoSQL database infrastructure to handle large traffic. Any cheap commodity hardware or cloud instances can host NoSQL databases, thus making it a lot more cost-effective than vertical scaling. A lot of NoSQL technologies also distribute data across servers automatically. ","date":"2022-10-04","objectID":"/system-design/:73:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Reliability The vast majority of relational databases are ACID compliant. So, when it comes to data reliability and a safe guarantee of performing transactions, SQL databases are still the better bet. Most of the NoSQL solutions sacrifice ACID compliance for performance and scalability. ","date":"2022-10-04","objectID":"/system-design/:73:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Reasons As always we should always pick the technology that fits the requirements better. So, let’s look at some reasons for picking SQL or NoSQL based database: For SQL Structured data with strict schema Relational data Need for complex joins Transactions Lookups by index are very fast For NoSQL Dynamic or flexible schema Non-relational data No need for complex joins Very data-intensive workload Very high throughput for IOPS Database Replication Replication is a process that involves sharing information to ensure consistency between redundant resources such as multiple databases, to improve reliability, fault-tolerance, or accessibility. ","date":"2022-10-04","objectID":"/system-design/:74:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Master-Slave Replication The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned. ","date":"2022-10-04","objectID":"/system-design/:75:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Backups of the entire database of relatively no impact on the master. Applications can read from the slave(s) without impacting the master. Slaves can be taken offline and synced back to the master without any downtime. ","date":"2022-10-04","objectID":"/system-design/:75:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Replication adds more hardware and additional complexity. Downtime and possibly loss of data when a master fails. All writes also have to be made to the master in a master-slave architecture. The more read slaves, the more we have to replicate, which will increase replication lag. ","date":"2022-10-04","objectID":"/system-design/:75:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Master-Master Replication Both masters serve reads/writes and coordinate with each other. If either master goes down, the system can continue to operate with both reads and writes. ","date":"2022-10-04","objectID":"/system-design/:76:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Applications can read from both masters. Distributes write load across both master nodes. Simple, automatic, and quick failover. ","date":"2022-10-04","objectID":"/system-design/:76:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Not as simple as master-slave to configure and deploy. Either loosely consistent or have increased write latency due to synchronization. Conflict resolution comes into play as more write nodes are added and as latency increases. ","date":"2022-10-04","objectID":"/system-design/:76:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Synchronous vs Asynchronous replication The primary difference between synchronous and asynchronous replication is how the data is written to the replica. In synchronous replication, data is written to primary storage and the replica simultaneously. As such, the primary copy and the replica should always remain synchronized. In contrast, asynchronous replication copies the data to the replica after the data is already written to the primary storage. Although the replication process may occur in near-real-time, it is more common for replication to occur on a scheduled basis and it is more cost-effective. Indexes Indexes are well known when it comes to databases, they are used to improve the speed of data retrieval operations on the data store. An index makes the trade-offs of increased storage overhead, and slower writes (since we not only have to write the data but also have to update the index) for the benefit of faster reads. Indexes are used to quickly locate data without having to examine every row in a database table. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access to ordered records. An index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives. So when we create an index on a column of a table, we store that column and a pointer to the whole row in the index. Indexes are also used to create different views of the same data. For large data sets, this is an excellent way to specify different filters or sorting schemes without resorting to creating multiple additional copies of the data. One quality that database indexes can have is that they can be dense or sparse. Each of these index qualities comes with its own trade-offs. Let’s look at how each index type would work: ","date":"2022-10-04","objectID":"/system-design/:77:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Dense Index In a dense index, an index record is created for every row of the table. Records can be located directly as each record of the index holds the search key value and the pointer to the actual record. Dense indexes require more maintenance than sparse indexes at write-time. Since every row must have an entry, the database must maintain the index on inserts, updates, and deletes. Having an entry for every row also means that dense indexes will require more memory. The benefit of a dense index is that values can be quickly found with just a binary search. Dense indexes also do not impose any ordering requirements on the data. ","date":"2022-10-04","objectID":"/system-design/:78:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sparse Index In a sparse index, records are created only for some of the records. Sparse indexes require less maintenance than dense indexes at write-time since they only contain a subset of the values. This lighter maintenance burden means that inserts, updates, and deletes will be faster. Having fewer entries also means that the index will use less memory. Finding data is slower since a scan across the page typically follows the binary search. Sparse indexes are also optional when working with ordered data. Normalization and Denormalization ","date":"2022-10-04","objectID":"/system-design/:79:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Terms Before we go any further, let’s look at some commonly used terms in normalization and denormalization. ","date":"2022-10-04","objectID":"/system-design/:80:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Keys Primary key: Column or group of columns that can be used to uniquely identify every row of the table. Composite key: A primary key made up of multiple columns. Super key: Set of all keys that can uniquely identify all the rows present in a table. Candidate key: Attributes that identify rows uniquely in a table. Foreign key: It is a reference to a primary key of another table. Alternate key: Keys that are not primary keys are known as alternate keys. Surrogate key: A system-generated value that uniquely identifies each entry in a table when no other column was able to hold properties of a primary key. ","date":"2022-10-04","objectID":"/system-design/:80:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Dependencies Partial dependency: Occurs when the primary key determines some other attributes. Functional dependency: It is a relationship that exists between two attributes, typically between the primary key and non-key attribute within a table. Transitive functional dependency: Occurs when some non-key attribute determines some other attribute. ","date":"2022-10-04","objectID":"/system-design/:80:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Anomalies Database anomaly happens when there is a flaw in the database due to incorrect planning or storing everything in a flat database. This is generally addressed by the process of normalization. There are three types of database anomalies: Insertion anomaly: Occurs when we are not able to insert certain attributes in the database without the presence of other attributes. Update anomaly: Occurs in case of data redundancy and partial update. In other words, a correct update of the database needs other actions such as addition, deletion, or both. Deletion anomaly: Occurs where deletion of some data requires deletion of other data. Example Let’s consider the following table which is not normalized: ID Name Role Team 1 Peter Software Engineer A 2 Brian DevOps Engineer B 3 Hailey Product Manager C 4 Hailey Product Manager C 5 Steve Frontend Engineer D Let’s imagine, we hired a new person “John” but they might not be assigned a team immediately. This will cause an insertion anomaly as the team attribute is not yet present. Next, let’s say Hailey from Team C got promoted, to reflect that change in the database, we will need to update 2 rows to maintain consistency which can cause an update anomaly. Finally, we would like to remove Team B but to do that we will also need to remove additional information such as name and role, this is an example of a deletion anomaly. ","date":"2022-10-04","objectID":"/system-design/:80:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Normalization Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency. ","date":"2022-10-04","objectID":"/system-design/:81:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need normalization? The goal of normalization is to eliminate redundant data and ensure data is consistent. A fully normalized database allows its structure to be extended to accommodate new types of data without changing the existing structure too much. As a result, applications interacting with the database are minimally affected. ","date":"2022-10-04","objectID":"/system-design/:81:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Normal forms Normal forms are a series of guidelines to ensure that the database is normalized. Let’s discuss some essential normal forms: 1NF For a table to be in the first normal form (1NF), it should follow the following rules: Repeating groups are not permitted. Identify each set of related data with a primary key. Set of related data should have a separate table. Mixing data types in the same column is not permitted. 2NF For a table to be in the second normal form (2NF), it should follow the following rules: Satisfies the first normal form (1NF). Should not have any partial dependency. 3NF For a table to be in the third normal form (3NF), it should follow the following rules: Satisfies the second normal form (2NF). Transitive functional dependencies are not permitted. BCNF Boyce-Codd normal form (or BCNF) is a slightly stronger version of the third normal form (3NF) used to address certain types of anomalies not dealt with by 3NF as originally defined. Sometimes it is also known as the 3.5 normal form (3.5NF). For a table to be in the Boyce-Codd normal form (BCNF), it should follow the following rules: Satisfied the third normal form (3NF). For every functional dependency X → Y, X should be the super key. There are more normal forms such as 4NF, 5NF, and 6NF but we won’t discuss them here. Check out this amazing video that goes into detail. In a relational database, a relation is often described as “normalized” if it meets the third normal form. Most 3NF relations are free of insertion, update, and deletion anomalies. As with many formal rules and specifications, real-world scenarios do not always allow for perfect compliance. If you decide to violate one of the first three rules of normalization, make sure that your application anticipates any problems that could occur, such as redundant data and inconsistent dependencies. ","date":"2022-10-04","objectID":"/system-design/:81:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Here are some advantages of normalization: Reduces data redundancy. Better data design. Increases data consistency. Enforces referential integrity. ","date":"2022-10-04","objectID":"/system-design/:81:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Let’s look at some disadvantages of normalization: Data design is complex. Slower performance. Maintenance overhead. Require more joins. ","date":"2022-10-04","objectID":"/system-design/:81:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Denormalization Denormalization is a database optimization technique in which we add redundant data to one or more tables. This can help us avoid costly joins in a relational database. It attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins. Once data becomes distributed with techniques such as federation and sharding, managing joins across the network further increases complexity. Denormalization might circumvent the need for such complex joins. Note: Denormalization does not mean reversing normalization. ","date":"2022-10-04","objectID":"/system-design/:82:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s look at some advantages of denormalization: Retrieving data is faster. Writing queries is easier. Reduction in number of tables. Convenient to manage. ","date":"2022-10-04","objectID":"/system-design/:82:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are some disadvantages of denormalization: Expensive inserts and updates. Increases complexity of database design. Increases data redundancy. More chances of data inconsistency. ACID and BASE consistency models Let’s discuss the ACID and BASE consistency models. ","date":"2022-10-04","objectID":"/system-design/:82:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"ACID The term ACID stands for Atomicity, Consistency, Isolation, and Durability. ACID properties are used for maintaining data integrity during transaction processing. In order to maintain consistency before and after a transaction relational databases follow ACID properties. Let us understand these terms: ","date":"2022-10-04","objectID":"/system-design/:83:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Atomic All operations in a transaction succeed or every operation is rolled back. ","date":"2022-10-04","objectID":"/system-design/:83:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Consistent On the completion of a transaction, the database is structurally sound. ","date":"2022-10-04","objectID":"/system-design/:83:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Isolated Transactions do not contend with one another. Contentious access to data is moderated by the database so that transactions appear to run sequentially. ","date":"2022-10-04","objectID":"/system-design/:83:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Durable Once the transaction has been completed and the writes and updates have been written to the disk, it will remain in the system even if a system failure occurs. ","date":"2022-10-04","objectID":"/system-design/:83:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"BASE With the increasing amount of data and high availability requirements, the approach to database design has also changed dramatically. To increase the ability to scale and at the same time be highly available, we move the logic from the database to separate servers. In this way, the database becomes more independent and focused on the actual process of storing data. In the NoSQL database world, ACID transactions are less common as some databases have loosened the requirements for immediate consistency, data freshness, and accuracy in order to gain other benefits, like scale and resilience. BASE properties are much looser than ACID guarantees, but there isn’t a direct one-for-one mapping between the two consistency models. Let us understand these terms: ","date":"2022-10-04","objectID":"/system-design/:84:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Basic Availability The database appears to work most of the time. ","date":"2022-10-04","objectID":"/system-design/:84:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Soft-state Stores don’t have to be write-consistent, nor do different replicas have to be mutually consistent all the time. ","date":"2022-10-04","objectID":"/system-design/:84:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Eventual consistency The data might not be consistent immediately but eventually, it becomes consistent. Reads in the system are still possible even though they may not give the correct response due to inconsistency. ","date":"2022-10-04","objectID":"/system-design/:84:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"ACID vs BASE Trade-offs There’s no right answer to whether our application needs an ACID or a BASE consistency model. Both the models have been designed to satisfy different requirements. While choosing a database we need to keep the properties of both the models and the requirements of our application in mind. Given BASE’s loose consistency, developers need to be more knowledgeable and rigorous about consistent data if they choose a BASE store for their application. It’s essential to be familiar with the BASE behavior of the chosen database and work within those constraints. On the other hand, planning around BASE limitations can sometimes be a major disadvantage when compared to the simplicity of ACID transactions. A fully ACID database is the perfect fit for use cases where data reliability and consistency are essential. CAP Theorem Video: https://youtu.be/8UryASGBiR4 CAP theorem states that a distributed system can deliver only two of the three desired characteristics Consistency, Availability, and Partition tolerance (CAP). ","date":"2022-10-04","objectID":"/system-design/:85:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Consistency In a consistent system, all nodes see the same data simultaneously. If we perform a read operation on a consistent system, it should return the value of the most recent write operation. The read should cause all nodes to return the same data. All users see the same data at the same time, regardless of the node they connect to. When data is written to a single node, it is then replicated across the other nodes in the system. For this to happen, whenever data is written to one node, it must be instantly forwarded or replicated across all the nodes in the system before the write is deemed “successful”. Financial data is a good example. When a user logs in to their banking institution, they do not want to see an error that no data is returned, or that the value is higher or lower than it actually is. Banking apps should return the exact value of a user’s account information. In this case, banks would rely on consistent databases. Examples of a consistent database include: Bank account balances Text messages Database options for consistency: MongoDB Redis HBase ","date":"2022-10-04","objectID":"/system-design/:85:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Availability When availability is present in a distributed system, it means that the system remains operational all of the time. Every request will get a response regardless of the individual state of the nodes. This means that the system will operate even if there are multiple nodes down. Unlike a consistent system, there’s no guarantee that the response will be the most recent write operation. Example of a highly available database: On YouTube and social media like Facebook and Instagram, we can ignore consistency in views or likes count but the availability of videos and posts is essential. In e-commerce businesses. Online stores want to make their store and the functions of the shopping cart available 24/7 so shoppers can make purchases exactly when they need. Database options for availability: Cassandra DynamoDB Cosmos DB ","date":"2022-10-04","objectID":"/system-design/:85:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Partition tolerance When a distributed system encounters a partition, it means that there’s a break in communication between nodes. If a system is partition-tolerant, the system does not fail, regardless of whether messages are dropped or delayed between nodes within the system. To have partition tolerance, the system must replicate records across combinations of nodes and networks. ","date":"2022-10-04","objectID":"/system-design/:85:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"CAP theorem NoSQL databases NoSQL databases can be classified based on whether they support high availability or high consistency. NoSQL databases are great for distributed networks. They allow for horizontal scaling, and they can quickly scale across multiple nodes. When deciding which NoSQL database to use, it’s important to keep the CAP theorem in mind. NoSQL databases can be classified based on the two CAP features they support. ","date":"2022-10-04","objectID":"/system-design/:85:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Consistency-Availability Tradeoff We live in a physical world and can’t guarantee the stability of a network, so distributed databases must choose Partition Tolerance (P). This implies a tradeoff between Consistency (C) and Availability (A). ","date":"2022-10-04","objectID":"/system-design/:86:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"CA database Relational databases, such as PostgreSQL, allow for consistency and availability if the systems are vertically scale on a single machine, we can avoid fault tolerance. A CA database delivers consistency and availability across all nodes. It can’t do this if there is a partition between any two nodes in the system, and therefore can’t deliver fault tolerance. Example: PostgreSQL, MariaDB. ","date":"2022-10-04","objectID":"/system-design/:86:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"CP database CP databases enable consistency and partition tolerance, but not availability. When a partition occurs, the system has to turn off inconsistent nodes until the partition can be fixed. That’s why they are not 100% available. MongoDB is an example of a CP database. It’s a NoSQL database management system (DBMS) that uses documents for data storage. It’s considered schema-less, which means that it doesn’t require a defined database schema. It’s commonly used in big data and applications running in different locations. The CP system is structured so that there’s only one primary node that receives all of the write requests in a given replica set. Secondary nodes replicate the data in the primary nodes, so if the primary node fails, a secondary node can stand-in. Example: MongoDB, Apache HBase. ","date":"2022-10-04","objectID":"/system-design/:86:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"AP database AP databases enable availability and partition tolerance, but not consistency. In the event of a partition, all nodes are available, but they’re not all updated. For example, if a user tries to access data from a bad node, they won’t receive the most up-to-date version of the data. When the partition is eventually resolved, most AP databases will sync the nodes to ensure consistency across them. Apache Cassandra is an example of an AP database. It’s a NoSQL database with no primary node, meaning that all of the nodes remain available. Cassandra allows for eventual consistency because users can resync their data right after a partition is resolved. Example: Apache Cassandra, CouchDB. ","date":"2022-10-04","objectID":"/system-design/:86:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"CAP theorem and microservices Microservices are defined as loosely coupled services that can be independently developed, deployed, and maintained. They include their own stack, database, and database model, and communicate with each other through a network. Microservices have become especially popular in hybrid cloud and multi-cloud environments, and they are also widely used in on-premises data centers. If you want to create a microservices application, you can use the CAP theorem to help you determine a database that will best fit your needs. PACELC Theorem The PACELC theorem is an extension of the CAP theorem. The CAP theorem states that in the case of network partitioning (P) in a distributed system, one has to choose between Availability (A) and Consistency (C). PACELC extends the CAP theorem by introducing latency (L) as an additional attribute of a distributed system. The theorem states that else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and consistency (C). The PACELC theorem was first described by Daniel J. Abadi. PACELC theorem was developed to address a key limitation of the CAP theorem as it makes no provision for performance or latency. For example, according to the CAP theorem, a database can be considered Available if a query returns a response after 30 days. Obviously, such latency would be unacceptable for any real-world application. Transactions A transaction is a series of database operations that are considered to be a “single unit of work”. The operations in a transaction either all succeed, or they all fail. In this way, the notion of a transaction supports data integrity when part of a system fails. Not all databases choose to support ACID transactions, usually because they are prioritizing other optimizations that are hard or theoretically impossible to implement together. Usually, relational databases support ACID transactions, and non-relational databases don’t (there are exceptions). ","date":"2022-10-04","objectID":"/system-design/:86:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"States A transaction in a database can be in one of the following states: ","date":"2022-10-04","objectID":"/system-design/:87:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Active In this state, the transaction is being executed. This is the initial state of every transaction. ","date":"2022-10-04","objectID":"/system-design/:87:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Partially Committed When a transaction executes its final operation, it is said to be in a partially committed state. ","date":"2022-10-04","objectID":"/system-design/:87:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Committed If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the database system. ","date":"2022-10-04","objectID":"/system-design/:87:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Failed The transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer proceed further. ","date":"2022-10-04","objectID":"/system-design/:87:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Aborted If any of the checks fail and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state are aborted. The database recovery module can select one of the two operations after a transaction aborts: Restart the transaction Kill the transaction ","date":"2022-10-04","objectID":"/system-design/:87:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Terminated If there isn’t any roll-back or the transaction comes from the committed state, then the system is consistent and ready for a new transaction and the old transaction is terminated. Distributed Transactions A distributed transaction is a set of operations on data that is performed across two or more databases. It is typically coordinated across separate nodes connected by a network, but may also span multiple databases on a single server. ","date":"2022-10-04","objectID":"/system-design/:87:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need distributed transactions? Unlike an ACID transaction on a single database, a distributed transaction involves altering data on multiple databases. Consequently, distributed transaction processing is more complicated, because the database must coordinate the committing or rollback of the changes in a transaction as a self-contained unit. In other words, all the nodes must commit, or all must abort and the entire transaction rolls back. This is why we need distributed transactions. Now, let’s look at some popular solutions for distributed transactions: ","date":"2022-10-04","objectID":"/system-design/:88:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Two-Phase commit The two-phase commit (2PC) protocol is a distributed algorithm that coordinates all the processes that participate in a distributed transaction on whether to commit or abort (roll back) the transaction. This protocol achieves its goal even in many cases of temporary system failure and is thus widely used. However, it is not resilient to all possible failure configurations, and in rare cases, manual intervention is needed to remedy an outcome. This protocol requires a coordinator node, which basically coordinates and oversees the transaction across different nodes. The coordinator tries to establish the consensus among a set of processes in two phases, hence the name. ","date":"2022-10-04","objectID":"/system-design/:89:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Phases Two-phase commit consists of the following phases: Prepare phase The prepare phase involves the coordinator node collecting consensus from each of the participant nodes. The transaction will be aborted unless each of the nodes responds that they’re prepared. Commit phase If all participants respond to the coordinator that they are prepared, then the coordinator asks all the nodes to commit the transaction. If a failure occurs, the transaction will be rolled back. ","date":"2022-10-04","objectID":"/system-design/:89:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Problems Following problems may arise in the two-phase commit protocol: What if one of the nodes crashes? What if the coordinator itself crashes? It is a blocking protocol. ","date":"2022-10-04","objectID":"/system-design/:89:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Three-phase commit Three-phase commit (3PC) is an extension of the two-phase commit where the commit phase is split into two phases. This helps with the blocking problem that occurs in the two-phase commit protocol. ","date":"2022-10-04","objectID":"/system-design/:90:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Phases Three-phase commit consists of the following phases: Prepare phase This phase is the same as the two-phase commit. Pre-commit phase Coordinator issues the pre-commit message and all the participating nodes must acknowledge it. If a participant fails to receive this message in time, then the transaction is aborted. Commit phase This step is also similar to the two-phase commit protocol. ","date":"2022-10-04","objectID":"/system-design/:90:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why is the Pre-commit phase helpful? The pre-commit phase accomplishes the following: If the participant nodes are found in this phase, that means that every participant has completed the first phase. The completion of prepare phase is guaranteed. Every phase can now time out and avoid indefinite waits. ","date":"2022-10-04","objectID":"/system-design/:90:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sagas A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions. ","date":"2022-10-04","objectID":"/system-design/:91:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Coordination There are two common implementation approaches: Choreography: Each local transaction publishes domain events that trigger local transactions in other services. Orchestration: An orchestrator tells the participants what local transactions to execute. ","date":"2022-10-04","objectID":"/system-design/:91:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Problems The Saga pattern is particularly hard to debug. There’s a risk of cyclic dependency between saga participants. Lack of participant data isolation imposes durability challenges. Testing is difficult because all services must be running to simulate a transaction. Sharding Before we discuss sharding, let’s talk about data partitioning: ","date":"2022-10-04","objectID":"/system-design/:91:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning Data partitioning is a technique to break up a database into many smaller parts. It is the process of splitting up a database or a table across multiple machines to improve the manageability, performance, and availability of a database. ","date":"2022-10-04","objectID":"/system-design/:92:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Methods There are many different ways one could use to decide how to break up an application database into multiple smaller DBs. Below are three of the most popular methods used by various large-scale applications: Horizontal Partitioning (or Sharding) In this strategy, we split the table data horizontally based on the range of values defined by the partition key. It is also referred to as database sharding. Vertical Partitioning In vertical partitioning, we partition the data vertically based on columns. We divide tables into relatively smaller tables with few elements, and each part is present in a separate partition. In this tutorial, we will specifically focus on sharding. ","date":"2022-10-04","objectID":"/system-design/:92:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is sharding? Sharding is a database architecture pattern related to horizontal partitioning, which is the practice of separating one table’s rows into multiple different tables, known as partitions or shards. Each partition has the same schema and columns, but also a subset of the shared data. Likewise, the data held in each is unique and independent of the data held in other partitions. The justification for data sharding is that, after a certain point, it is cheaper and more feasible to scale horizontally by adding more machines than to scale it vertically by adding powerful servers. Sharding can be implemented at both application or the database level. ","date":"2022-10-04","objectID":"/system-design/:93:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Partitioning criteria There are a large number of criteria available for data partitioning. Some most commonly used criteria are: ","date":"2022-10-04","objectID":"/system-design/:94:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Hash-Based This strategy divides the rows into different partitions based on a hashing algorithm rather than grouping database rows based on continuous indexes. The disadvantage of this method is that dynamically adding/removing database servers becomes expensive. ","date":"2022-10-04","objectID":"/system-design/:94:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"List-Based In list-based partitioning, each partition is defined and selected based on the list of values on a column rather than a set of contiguous ranges of values. ","date":"2022-10-04","objectID":"/system-design/:94:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Range Based Range partitioning maps data to various partitions based on ranges of values of the partitioning key. In other words, we partition the table in such a way that each partition contains rows within a given range defined by the partition key. Ranges should be contiguous but not overlapping, where each range specifies a non-inclusive lower and upper bound for a partition. Any partitioning key values equal to or higher than the upper bound of the range are added to the next partition. ","date":"2022-10-04","objectID":"/system-design/:94:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Composite As the name suggests, composite partitioning partitions the data based on two or more partitioning techniques. Here we first partition the data using one technique, and then each partition is further subdivided into sub-partitions using the same or some other method. ","date":"2022-10-04","objectID":"/system-design/:94:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages But why do we need sharding? Here are some advantages: Availability: Provides logical independence to the partitioned database, ensuring the high availability of our application. Here individual partitions can be managed independently. Scalability: Proves to increase scalability by distributing the data across multiple partitions. Security: Helps improve the system’s security by storing sensitive and non-sensitive data in different partitions. This could provide better manageability and security to sensitive data. Query Performance: Improves the performance of the system. Instead of querying the whole database, now the system has to query only a smaller partition. Data Manageability: Divides tables and indexes into smaller and more manageable units. ","date":"2022-10-04","objectID":"/system-design/:95:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Complexity: Sharding increases the complexity of the system in general. Joins across shards: Once a database is partitioned and spread across multiple machines it is often not feasible to perform joins that span multiple database shards. Such joins will not be performance efficient since data has to be retrieved from multiple servers. Rebalancing: If the data distribution is not uniform or there is a lot of load on a single shard, in such cases we have to rebalance our shards so that the requests are as equally distributed among the shards as possible. ","date":"2022-10-04","objectID":"/system-design/:96:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"When to use sharding? Here are some reasons where sharding might be the right choice: Leveraging existing hardware instead of high-end machines. Maintain data in distinct geographic regions. Quickly scale by adding more shards. Better performance as each machine is under less load. When more concurrent connections are required. Consistent Hashing Let’s first understand the problem we’re trying to solve. ","date":"2022-10-04","objectID":"/system-design/:97:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need this? In traditional hashing-based distribution methods, we use a hash function to hash our partition keys (i.e. request ID or IP). Then if we use the modulo against the total number of nodes (server or databases). This will give us the node where we want to route our request. $$ \\begin{align*} \u0026 Hash(key_1) \\to H_1 \\bmod N = Node_0 \\ \u0026 Hash(key_2) \\to H_2 \\bmod N = Node_1 \\ \u0026 Hash(key_3) \\to H_3 \\bmod N = Node_2 \\ \u0026 … \\ \u0026 Hash(key_n) \\to H_n \\bmod N = Node_{n-1} \\end{align*} $$ Where, key: Request ID or IP. H: Hash function result. N: Total number of nodes. Node: The node where the request will be routed. The problem with this is if we add or remove a node, it will cause N to change, meaning our mapping strategy will break as the same requests will now map to a different server. As a consequence, the majority of requests will need to be redistributed which is very inefficient. We want to uniformly distribute requests among different nodes such that we should be able to add or remove nodes with minimal effort. Hence, we need a distribution scheme that does not depend directly on the number of nodes (or servers), so that, when adding or removing nodes, the number of keys that need to be relocated is minimized. Consistent hashing solves this horizontal scalability problem by ensuring that every time we scale up or down, we do not have to re-arrange all the keys or touch all the servers. Now that we understand the problem, let’s discuss consistent hashing in detail. ","date":"2022-10-04","objectID":"/system-design/:98:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How does it work Consistent Hashing is a distributed hashing scheme that operates independently of the number of nodes in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system. Using consistent hashing, only K/N data would require re-distributing. $$ R = K/N $$ Where, R: Data that would require re-distribution. K: Number of partition keys. N: Number of nodes. The output of the hash function is a range let’s say 0...m-1 which we can represent on our hash ring. We hash the requests and distribute them on the ring depending on what the output was. Similarly, we also hash the node and distribute them on the same ring as well. $$ \\begin{align*} \u0026 Hash(key_1) = P_1 \\ \u0026 Hash(key_2) = P_2 \\ \u0026 Hash(key_3) = P_3 \\ \u0026 … \\ \u0026 Hash(key_n) = P_{m-1} \\end{align*} $$ Where, key: Request/Node ID or IP. P: Position on the hash ring. m: Total range of the hash ring. Now, when the request comes in we can simply route it to the closest node in a clockwise (can be counterclockwise as well) manner. This means that if a new node is added or removed, we can use the nearest node and only a fraction of the requests need to be re-routed. In theory, consistent hashing should distribute the load evenly however it doesn’t happen in practice. Usually, the load distribution is uneven and one server may end up handling the majority of the request becoming a hotspot, essentially a bottleneck for the system. We can fix this by adding extra nodes but that can be expensive. Let’s see how we can address these issues. ","date":"2022-10-04","objectID":"/system-design/:99:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Virtual Nodes In order to ensure a more evenly distributed load, we can introduce the idea of a virtual node, sometimes also referred to as a VNode. Instead of assigning a single position to a node, the hash range is divided into multiple smaller ranges, and each physical node is assigned several of these smaller ranges. Each of these subranges is considered a VNode. Hence, virtual nodes are basically existing physical nodes mapped multiple times across the hash ring to minimize changes to a node’s assigned range. For this, we can use k number of hash functions. $$ \\begin{align*} \u0026 Hash_1(key_1) = P_1 \\ \u0026 Hash_2(key_2) = P_2 \\ \u0026 Hash_3(key_3) = P_3 \\ \u0026 . . . \\ \u0026 Hash_k(key_n) = P_{m-1} \\end{align*} $$ Where, key: Request/Node ID or IP. k: Number of hash functions. P: Position on the hash ring. m: Total range of the hash ring. As VNodes help spread the load more evenly across the physical nodes on the cluster by diving the hash ranges into smaller subranges, this speeds up the re-balancing process after adding or removing nodes. This also helps us reduce the probability of hotspots. ","date":"2022-10-04","objectID":"/system-design/:100:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data replication To ensure high availability and durability, consistent hashing replicates each data item on multiple N nodes in the system where the value N is equivalent to the replication factor. The replication factor is the number of nodes that will receive the copy of the same data. In eventually consistent systems, this is done asynchronously. ","date":"2022-10-04","objectID":"/system-design/:101:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s look at some advantages of consistent hashing: Makes rapid scaling up and down more predictable. Facilitates partitioning and replication across nodes. Enables scalability and availability. Reduces hotspots. ","date":"2022-10-04","objectID":"/system-design/:102:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are some disadvantages of consistent hashing: Increases complexity. Cascading failures. Load distribution can still be uneven. Key management can be expensive when nodes transiently fail. ","date":"2022-10-04","objectID":"/system-design/:103:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Let’s look at some examples where consistent hashing is used: Data partitioning in Apache Cassandra. Load distribution across multiple storage hosts in Amazon DynamoDB. Database Federation Federation (or functional partitioning) splits up databases by function. The federation architecture makes several distinct physical databases appear as one logical database to end-users. All of the components in a federation are tied together by one or more federal schemas that express the commonality of data throughout the federation. These federated schemas are used to specify the information that can be shared by the federation components and to provide a common basis for communication among them. Federation also provides a cohesive, unified view of data derived from multiple sources. The data sources for federated systems can include databases and various other forms of structured and unstructured data. ","date":"2022-10-04","objectID":"/system-design/:104:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Characteristics Let’s look at some key characteristics of a federated database: Transparency: Federated database masks user differences and implementations of underlying data sources. Therefore, the users do not need to be aware of where the data is stored. Heterogeneity: Data sources can differ in many ways. A federated database system can handle different hardware, network protocols, data models, etc. Extensibility: New sources may be needed to meet the changing needs of the business. A good federated database system needs to make it easy to add new sources. Autonomy: A Federated database does not change existing data sources, interfaces should remain the same. Data integration: A federated database can integrate data from different protocols, database management systems, etc. ","date":"2022-10-04","objectID":"/system-design/:105:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Here are some advantages of federated databases: Flexible data sharing. Autonomy among the database components. Access heterogeneous data in a unified way. No tight coupling of applications with legacy databases. ","date":"2022-10-04","objectID":"/system-design/:106:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are some disadvantages of federated databases: Adds more hardware and additional complexity. Joining data from two databases is complex. Dependence on autonomous data sources. Query performance and scalability. N-tier architecture N-tier architecture divides an application into logical layers and physical tiers. Layers are a way to separate responsibilities and manage dependencies. Each layer has a specific responsibility. A higher layer can use services in a lower layer, but not the other way around. Tiers are physically separated, running on separate machines. A tier can call to another tier directly, or use asynchronous messaging. Although each layer might be hosted in its own tier, that’s not required. Several layers might be hosted on the same tier. Physically separating the tiers improves scalability and resiliency and adds latency from the additional network communication. An N-tier architecture can be of two types: In a closed layer architecture, a layer can only call the next layer immediately down. In an open layer architecture, a layer can call any of the layers below it. A closed-layer architecture limits the dependencies between layers. However, it might create unnecessary network traffic, if one layer simply passes requests along to the next layer. ","date":"2022-10-04","objectID":"/system-design/:107:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types of N-Tier architectures Let’s look at some examples of N-Tier architecture: ","date":"2022-10-04","objectID":"/system-design/:108:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"3-Tier architecture 3-Tier is widely used and consists of the following different layers: Presentation layer: Handles user interactions with the application. Business Logic layer: Accepts the data from the application layer, validates it as per business logic and passes it to the data layer. Data Access layer: Receives the data from the business layer and performs the necessary operation on the database. ","date":"2022-10-04","objectID":"/system-design/:108:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"2-Tier architecture In this architecture, the presentation layer runs on the client and communicates with a data store. There is no business logic layer or immediate layer between client and server. ","date":"2022-10-04","objectID":"/system-design/:108:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Single Tier or 1-Tier architecture It is the simplest one as it is equivalent to running the application on a personal computer. All of the required components for an application to run are on a single application or server. ","date":"2022-10-04","objectID":"/system-design/:108:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Here are some advantages of using N-tier architecture: Can improve availability. Better security as layers can behave like a firewall. Separate tiers allow us to scale them as needed. Improve maintenance as different people can manage different tiers. ","date":"2022-10-04","objectID":"/system-design/:109:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are some disadvantages of N-tier architecture: Increased complexity of the system as a whole. Increased network latency as the number of tiers increases. Expensive as every tier will have its own hardware cost. Difficult to manage network security. Message Brokers A message broker is a software that enables applications, systems, and services to communicate with each other and exchange information. The message broker does this by translating messages between formal messaging protocols. This allows interdependent services to “talk” with one another directly, even if they were written in different languages or implemented on different platforms. Message brokers can validate, store, route, and deliver messages to the appropriate destinations. They serve as intermediaries between other applications, allowing senders to issue messages without knowing where the receivers are, whether or not they are active, or how many of them there are. This facilitates the decoupling of processes and services within systems. ","date":"2022-10-04","objectID":"/system-design/:110:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Models Message brokers offer two basic message distribution patterns or messaging styles: Point-to-Point messaging: This is the distribution pattern utilized in message queues with a one-to-one relationship between the message’s sender and receiver. Publish-subscribe messaging: In this message distribution pattern, often referred to as “pub/sub”, the producer of each message publishes it to a topic, and multiple message consumers subscribe to topics from which they want to receive messages. We will discuss these messaging patterns in detail in the later tutorials. ","date":"2022-10-04","objectID":"/system-design/:111:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Message brokers vs Event streaming Message brokers can support two or more messaging patterns, including message queues and pub/sub, while event streaming platforms only offer pub/sub-style distribution patterns. Designed for use with high volumes of messages, event streaming platforms are readily scalable. They’re capable of ordering streams of records into categories called topics and storing them for a predetermined amount of time. Unlike message brokers, however, event streaming platforms cannot guarantee message delivery or track which consumers have received the messages. Event streaming platforms offer more scalability than message brokers but fewer features that ensure fault tolerance like message resending, as well as more limited message routing and queueing capabilities. ","date":"2022-10-04","objectID":"/system-design/:112:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Message brokers vs Enterprise Service Bus (ESB) Enterprise Service Bus (ESB) infrastructure is complex and can be challenging to integrate and expensive to maintain. It’s difficult to troubleshoot them when problems occur in production environments, they’re not easy to scale, and updating is tedious. Whereas message brokers are a “lightweight” alternative to ESBs that provide similar functionality, a mechanism for inter-service communication, at a lower cost. They’re well-suited for use in the microservices architectures that have become more prevalent as ESBs have fallen out of favor. ","date":"2022-10-04","objectID":"/system-design/:113:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some commonly used message brokers: NATS Apache Kafka RabbitMQ ActiveMQ Message Queues A message queue is a form of service-to-service communication that facilitates asynchronous communication. It asynchronously receives messages from producers and sends them to consumers. Queues are used to effectively manage requests in large-scale distributed systems. In small systems with minimal processing loads and small databases, writes can be predictably fast. However, in more complex and large systems writes can take an almost non-deterministic amount of time. ","date":"2022-10-04","objectID":"/system-design/:114:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Working Messages are stored in the queue until they are processed and deleted. Each message is processed only once by a single consumer. Here’s how it works: A producer publishes a job to the queue, then notifies the user of the job status. A consumer picks up the job from the queue, processes it, then signals that the job is complete. ","date":"2022-10-04","objectID":"/system-design/:115:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of using a message queue: Scalability: Message queues make it possible to scale precisely where we need to. When workloads peak, multiple instances of our application can all add requests to the queue without the risk of collision Decoupling: Message queues remove dependencies between components and significantly simplify the implementation of decoupled applications. Performance: Message queues enable asynchronous communication, which means that the endpoints that are producing and consuming messages interact with the queue, not each other. Producers can add requests to the queue without waiting for them to be processed. Reliability: Queues make our data persistent, and reduce the errors that happen when different parts of our system go offline. ","date":"2022-10-04","objectID":"/system-design/:116:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Features Now, let’s discuss some desired features of message queues: ","date":"2022-10-04","objectID":"/system-design/:117:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Push or Pull Delivery Most message queues provide both push and pull options for retrieving messages. Pull means continuously querying the queue for new messages. Push means that a consumer is notified when a message is available. We can also use long-polling to allow pulls to wait a specified amount of time for new messages to arrive. ","date":"2022-10-04","objectID":"/system-design/:117:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"FIFO (First-In-First-Out) Queues In these queues, the oldest (or first) entry, sometimes called the “head” of the queue, is processed first. ","date":"2022-10-04","objectID":"/system-design/:117:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Schedule or Delay Delivery Many message queues support setting a specific delivery time for a message. If we need to have a common delay for all messages, we can set up a delay queue. ","date":"2022-10-04","objectID":"/system-design/:117:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"At-Least-Once Delivery Message queues may store multiple copies of messages for redundancy and high availability, and resend messages in the event of communication failures or errors to ensure they are delivered at least once. ","date":"2022-10-04","objectID":"/system-design/:117:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Exactly-Once Delivery When duplicates can’t be tolerated, FIFO (first-in-first-out) message queues will make sure that each message is delivered exactly once (and only once) by filtering out duplicates automatically. ","date":"2022-10-04","objectID":"/system-design/:117:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Dead-letter Queues A dead-letter queue is a queue to which other queues can send messages that can’t be processed successfully. This makes it easy to set them aside for further inspection without blocking the queue processing or spending CPU cycles on a message that might never be consumed successfully. ","date":"2022-10-04","objectID":"/system-design/:117:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Ordering Most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they’re sent and that a message is delivered at least once. ","date":"2022-10-04","objectID":"/system-design/:117:7","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Poison-pill Messages Poison pills are special messages that can be received, but not processed. They are a mechanism used in order to signal a consumer to end its work so it is no longer waiting for new inputs, and are similar to closing a socket in a client/server model. ","date":"2022-10-04","objectID":"/system-design/:117:8","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Security Message queues will authenticate applications that try to access the queue, this allows us to encrypt messages over the network as well as in the queue itself. ","date":"2022-10-04","objectID":"/system-design/:117:9","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Task Queues Tasks queues receive tasks and their related data, run them, then deliver their results. They can support scheduling and can be used to run computationally-intensive jobs in the background. ","date":"2022-10-04","objectID":"/system-design/:117:10","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Backpressure If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance. Backpressure can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue. Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later. Clients can retry the request at a later time, perhaps with exponential backoff strategy. ","date":"2022-10-04","objectID":"/system-design/:118:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Following are some widely used message queues: Amazon SQS RabbitMQ ActiveMQ ZeroMQ Publish-Subscribe Similar to a message queue, publish-subscribe is also a form of service-to-service communication that facilitates asynchronous communication. In a pub/sub model, any message published to a topic is pushed immediately to all the subscribers of the topic. The subscribers to the message topic often perform different functions, and can each do something different with the message in parallel. The publisher doesn’t need to know who is using the information that it is broadcasting, and the subscribers don’t need to know where the message comes from. This style of messaging is a bit different than message queues, where the component that sends the message often knows the destination it is sending to. ","date":"2022-10-04","objectID":"/system-design/:119:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Working Unlike message queues, which batch messages until they are retrieved, message topics transfer messages with little or no queuing and push them out immediately to all subscribers. Here’s how it works: A message topic provides a lightweight mechanism to broadcast asynchronous event notifications and endpoints that allow software components to connect to the topic in order to send and receive those messages. To broadcast a message, a component called a publisher simply pushes a message to the topic. All components that subscribe to the topic (known as subscribers) will receive every message that was broadcasted. ","date":"2022-10-04","objectID":"/system-design/:120:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of using publish-subscribe: Eliminate Polling: Message topics allow instantaneous, push-based delivery, eliminating the need for message consumers to periodically check or “poll” for new information and updates. This promotes faster response time and reduces the delivery latency which can be particularly problematic in systems where delays cannot be tolerated. Dynamic Targeting: Pub/Sub makes the discovery of services easier, more natural, and less error-prone. Instead of maintaining a roster of peers where an application can send messages, a publisher will simply post messages to a topic. Then, any interested party will subscribe its endpoint to the topic, and start receiving these messages. Subscribers can change, upgrade, multiply or disappear and the system dynamically adjusts. Decoupled and Independent Scaling: Publishers and subscribers are decoupled and work independently from each other, which allows us to develop and scale them independently. Simplify Communication: The Publish-Subscribe model reduces complexity by removing all the point-to-point connections with a single connection to a message topic, which will manage subscriptions and decide what messages should be delivered to which endpoints. ","date":"2022-10-04","objectID":"/system-design/:121:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Features Now, let’s discuss some desired features of publish-subscribe: ","date":"2022-10-04","objectID":"/system-design/:122:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Push Delivery Pub/Sub messaging instantly pushes asynchronous event notifications when messages are published to the message topic. Subscribers are notified when a message is available. ","date":"2022-10-04","objectID":"/system-design/:122:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Multiple Delivery Protocols In the Publish-Subscribe model, topics can typically connect to multiple types of endpoints, such as message queues, serverless functions, HTTP servers, etc. ","date":"2022-10-04","objectID":"/system-design/:122:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Fanout This scenario happens when a message is sent to a topic and then replicated and pushed to multiple endpoints. Fanout provides asynchronous event notifications which in turn allows for parallel processing. ","date":"2022-10-04","objectID":"/system-design/:122:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Filtering This feature empowers the subscriber to create a message filtering policy so that it will only get the notifications it is interested in, as opposed to receiving every single message posted to the topic. ","date":"2022-10-04","objectID":"/system-design/:122:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Durability Pub/Sub messaging services often provide very high durability, and at least once delivery, by storing copies of the same message on multiple servers. ","date":"2022-10-04","objectID":"/system-design/:122:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Security Message topics authenticate applications that try to publish content, this allows us to use encrypted endpoints and encrypt messages in transit over the network. ","date":"2022-10-04","objectID":"/system-design/:122:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some technologies commonly used for publish-subscribe: Amazon SNS Google Pub/Sub Enterprise Service Bus (ESB) An Enterprise Service Bus (ESB) is an architectural pattern whereby a centralized software component performs integrations between applications. It performs transformations of data models, handles connectivity, performs message routing, converts communication protocols, and potentially manages the composition of multiple requests. The ESB can make these integrations and transformations available as a service interface for reuse by new applications. ","date":"2022-10-04","objectID":"/system-design/:123:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages In theory, a centralized ESB offers the potential to standardize and dramatically simplify communication, messaging, and integration between services across the enterprise. Here are some advantages of using an ESB: Improved developer productivity: Enables developers to incorporate new technologies into one part of an application without touching the rest of the application. Simpler, more cost-effective scalability: Components can be scaled independently of others. Greater resilience: Failure of one component does not impact the others, and each microservice can adhere to its own availability requirements without risking the availability of other components in the system. ","date":"2022-10-04","objectID":"/system-design/:124:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages While ESBs were deployed successfully in many organizations, in many other organizations the ESB came to be seen as a bottleneck. Here are some disadvantages of using an ESB: Making changes or enhancements to one integration could destabilize others who use that same integration. A single point of failure can bring down all communications. Updates to the ESB often impact existing integrations, so there is significant testing required to perform any update. ESB is centrally managed which makes cross-team collaboration challenging. High configuration and maintenance complexity. ","date":"2022-10-04","objectID":"/system-design/:125:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Below are some widely used Enterprise Service Bus (ESB) technologies: Azure Service Bus IBM App Connect Apache Camel Fuse ESB Monoliths and Microservices ","date":"2022-10-04","objectID":"/system-design/:126:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Monoliths A monolith is a self-contained and independent application. It is built as a single unit and is responsible for not just a particular task, but can perform every step needed to satisfy a business need. ","date":"2022-10-04","objectID":"/system-design/:127:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Following are some advantages of monoliths: Simple to develop or debug. Fast and reliable communication. Easy monitoring and testing. Supports ACID transactions. ","date":"2022-10-04","objectID":"/system-design/:127:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Some common disadvantages of monoliths are: Maintenance becomes hard as the codebase grows. Tightly coupled application, hard to extend. Requires commitment to a particular technology stack. On each update, the entire application is redeployed. Reduced reliability as a single bug can bring down the entire system. Difficult to scale or adopt technologies new technologies. ","date":"2022-10-04","objectID":"/system-design/:127:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Modular monoliths A Modular Monolith is an approach where we build and deploy a single application (that’s the Monolith part), but we build it in a way that breaks up the code into independent modules for each of the features needed in our application. This approach reduces the dependencies of a module in such as way that we can enhance or change a module without affecting other modules. When done right, this can be really beneficial in the long term as it reduces the complexity that comes with maintaining a monolith as the system grows. ","date":"2022-10-04","objectID":"/system-design/:128:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Microservices A microservices architecture consists of a collection of small, autonomous services where each service is self-contained and should implement a single business capability within a bounded context. A bounded context is a natural division of business logic that provides an explicit boundary within which a domain model exists. Each service has a separate codebase, which can be managed by a small development team. Services can be deployed independently and a team can update an existing service without rebuilding and redeploying the entire application. Services are responsible for persisting their own data or external state (database per service). This differs from the traditional model, where a separate data layer handles data persistence. ","date":"2022-10-04","objectID":"/system-design/:129:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Characteristics The microservices architecture style has the following characteristics: Loosely coupled: Services should be loosely coupled so that they can be independently deployed and scaled. This will lead to the decentralization of development teams and thus, enabling them to develop and deploy faster with minimal constraints and operational dependencies. Small but focused: It’s about scope and responsibilities and not size, a service should be focused on a specific problem. Basically, “It does one thing and does it well”. Ideally, they can be independent of the underlying architecture. Built for businesses: The microservices architecture is usually organized around business capabilities and priorities. Resilience \u0026 Fault tolerance: Services should be designed in such a way that they still function in case of failure or errors. In environments with independently deployable services, failure tolerance is of the highest importance. Highly maintainable: Service should be easy to maintainable and test because services that cannot be maintained will be re-written. ","date":"2022-10-04","objectID":"/system-design/:129:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Here are some advantages of microservices architecture: Loosely coupled services. Services can be deployed independently. Highly agile for multiple development teams. Improves fault tolerance and data isolation. Better scalability as each service can be scaled independently. Eliminates any long-term commitment to a particular technology stack. ","date":"2022-10-04","objectID":"/system-design/:129:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Microservices architecture brings its own set of challenges: Complexity of a distributed system. Testing is more difficult. Expensive to maintain (individual servers, databases, etc.). Inter-service communication has its own challenges. Data integrity and consistency. Network congestion and latency. ","date":"2022-10-04","objectID":"/system-design/:129:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Best practices Let’s discuss some microservices best practices: Model services around the business domain. Services should have loose coupling and high functional cohesion. Isolate failures and use resiliency strategies to prevent failures within a service from cascading. Services should only communicate through well-designed APIs. Avoid leaking implementation details. Data storage should be private to the service that owns the data Avoid coupling between services. Causes of coupling include shared database schemas and rigid communication protocols. Decentralize everything. Individual teams are responsible for designing and building services. Avoid sharing code or data schemas. Fail fast by using a circuit breaker to achieve fault tolerance. Ensure that the API changes are backward compatible. ","date":"2022-10-04","objectID":"/system-design/:129:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Pitfalls Below are some common pitfalls of microservices architecture: Service boundaries are not based on the business domain. Underestimating how hard is to build a distributed system. Shared database or common dependencies between services. Lack of Business Alignment. Lack of clear ownership. Lack of idempotency. Trying to do everything ACID instead of BASE. Lack of design for fault tolerance may result in cascading failures. ","date":"2022-10-04","objectID":"/system-design/:129:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Beware of the distributed monolith Distributed Monolith is a system that resembles the microservices architecture but is tightly coupled within itself like a monolithic application. Adopting microservices architecture comes with a lot of advantages. But while making one, there are good chances that we might end up with a distributed monolith. Our microservices are just a distributed monolith if any of these apply to it: Requires low latency communication. Services don’t scale easily. Dependency between services. Sharing the same resources such as databases. Tightly coupled systems. One of the primary reasons to build an application using microservices architecture is to have scalability. Therefore, microservices should have loosely coupled services which enable every service to be independent. The distributed monolith architecture takes this away and causes most components to depend on one another, increasing design complexity. ","date":"2022-10-04","objectID":"/system-design/:130:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Microservices vs Service-oriented architecture (SOA) You might have seen Service-oriented architecture (SOA) mentioned around the internet, sometimes even interchangeably with microservices, but they are different from each other and the main distinction between the two approaches comes down to scope. Service-oriented architecture (SOA) defines a way to make software components reusable via service interfaces. These interfaces utilize common communication standards and focus on maximizing application service reusability whereas microservices are built as a collection of various smallest independent service units focused on team autonomy and decoupling. ","date":"2022-10-04","objectID":"/system-design/:131:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why you don’t need microservices So, you might be wondering, monoliths seem like a bad idea to begin with, why would anyone use that? Well, it depends. While each approach has its own advantages and disadvantages, it is advised to start with a monolith when building a new system. It is important to understand, that microservices are not a silver bullet instead they solve an organizational problem. Microservices architecture is about your organizational priorities and team as much as it’s about technology. Before making the decision to move to microservices architecture, you need to ask yourself questions like: “Is the team too large to work effectively on a shared codebase?” “Are teams blocked on other teams?” “Does microservices deliver clear business value for us?” “Is my business mature enough to use microservices?” “Is our current architecture limiting us with communication overhead?” If your application does not require to be broken down into microservices, you don’t need this. There is no absolute necessity that all applications should be broken down into microservices. We frequently draw inspiration from companies such as Netflix and their use of microservices, but we overlook the fact that we are not Netflix. They went through a lot of iterations and models before they had a market-ready solution, and this architecture became acceptable for them when they identified and solved the problem they were trying to tackle. That’s why it’s essential to understand in-depth if your business actually needs microservices. What I’m trying to say is microservices are solutions to complex concerns and if your business doesn’t have complex issues, you don’t need them. Event-Driven Architecture (EDA) Event-Driven Architecture (EDA) is about using events as a way to communicate within a system. Generally, leveraging a message broker to publish and consume events asynchronously. The publisher is unaware of who is consuming an event and the consumers are unaware of each other. Event-Driven Architecture is simply a way of achieving loose coupling between services within a system. ","date":"2022-10-04","objectID":"/system-design/:132:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is an event? An event is a data point that represents state changes in a system. It doesn’t specify what should happen and how the change should modify the system, it only notifies the system of a particular state change. When a user makes an action, they trigger an event. ","date":"2022-10-04","objectID":"/system-design/:133:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Components Event-driven architectures have three key components: Event producers: Publishes an event to the router. Event routers: Filters and pushes the events to consumers. Event consumers: Uses events to reflect changes in the system. Note: Dots in the diagram represents different events in the system. ","date":"2022-10-04","objectID":"/system-design/:134:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Patterns There are several ways to implement the event-driven architecture, and which method we use depends on the use case but here are some common examples: Sagas Publish-Subscribe Event Sourcing Command and Query Responsibility Segregation (CQRS) Note: Each of these methods is discussed separately. ","date":"2022-10-04","objectID":"/system-design/:135:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages: Decoupled producers and consumers. Highly scalable and distributed. Easy to add new consumers. Improves agility. ","date":"2022-10-04","objectID":"/system-design/:136:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Challenges Here are some challenges of event-drive architecture: Guaranteed delivery. Error handling is difficult. Event-driven systems are complex in general. Exactly once, in-order processing of events. ","date":"2022-10-04","objectID":"/system-design/:137:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Below are some common use cases where event-driven architectures are beneficial: Metadata and metrics. Server and security logs. Integrating heterogeneous systems. Fanout and parallel processing. ","date":"2022-10-04","objectID":"/system-design/:138:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some widely used technologies for implementing event-driven architectures: NATS Apache Kafka Amazon EventBridge Amazon SNS Google PubSub Event Sourcing Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects. This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and responsiveness. It can also provide consistency for transactional data, and maintain full audit trails and history that can enable compensating actions. ","date":"2022-10-04","objectID":"/system-design/:139:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Event sourcing vs Event-Driven Architecture (EDA) Event sourcing is seemingly constantly being confused with Event-driven Architecture (EDA). Event-driven architecture is about using events to communicate between service boundaries. Generally, leveraging a message broker to publish and consume events asynchronously within other boundaries. Whereas, event sourcing is about using events as a state, which is a different approach to storing data. Rather than storing the current state, we’re instead going to be storing events. Also, event sourcing is one of the several patterns to implement an event-driven architecture. ","date":"2022-10-04","objectID":"/system-design/:140:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of using event sourcing: Excellent for real-time data reporting. Great for fail-safety, data can be reconstituted from the event store. Extremely flexible, any type of message can be stored. Preferred way of achieving audit logs functionality for high compliance systems. ","date":"2022-10-04","objectID":"/system-design/:141:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Following are the disadvantages of event sourcing: Requires an extremely efficient network infrastructure. Requires a reliable way to control message formats, such as a schema registry. Different events will contain different payloads. Command and Query Responsibility Segregation (CQRS) Command Query Responsibility Segregation (CQRS) is an architectural pattern that divides a system’s actions into commands and queries. It was first described by Greg Young. In CQRS, a command is an instruction, a directive to perform a specific task. It is an intention to change something and doesn’t return a value, only an indication of success or failure. And, a query is a request for information that doesn’t change the system’s state or cause any side effects. The core principle of CQRS is the separation of commands and queries. They perform fundamentally different roles within a system, and separating them means that each can be optimized as needed, which distributed systems can really benefit from. ","date":"2022-10-04","objectID":"/system-design/:142:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"CQRS with Event Sourcing The CQRS pattern is often used along with the Event Sourcing pattern. CQRS-based systems use separate read and write data models, each tailored to relevant tasks and often located in physically separate stores. When used with the Event Sourcing pattern, the store of events is the write model and is the official source of information. The read model of a CQRS-based system provides materialized views of the data, typically as highly denormalized views. ","date":"2022-10-04","objectID":"/system-design/:143:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of CQRS: Allows independent scaling of read and write workloads. Easier scaling, optimizations, and architectural changes. Closer to business logic with loose coupling. The application can avoid complex joins when querying. Clear boundaries between the system behavior. ","date":"2022-10-04","objectID":"/system-design/:144:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Below are some disadvantages of CQRS: More complex application design. Message failures or duplicate messages can occur. Dealing with eventual consistency is a challenge. Increased system maintenance efforts. ","date":"2022-10-04","objectID":"/system-design/:145:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Here are some scenarios where CQRS will be helpful: The performance of data reads must be fine-tuned separately from the performance of data writes. The system is expected to evolve over time and might contain multiple versions of the model, or where business rules change regularly. Integration with other systems, especially in combination with event sourcing, where the temporal failure of one subsystem shouldn’t affect the availability of the others. Better security to ensure that only the right domain entities are performing writes on the data. API Gateway The API Gateway is an API management tool that sits between a client and a collection of backend services. It is a single entry point into a system that encapsulates the internal system architecture and provides an API that is tailored to each client. It also has other responsibilities such as authentication, monitoring, load balancing, caching, throttling, logging, etc. ","date":"2022-10-04","objectID":"/system-design/:146:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need an API Gateway? The granularity of APIs provided by microservices is often different than what a client needs. Microservices typically provide fine-grained APIs, which means that clients need to interact with multiple services. Hence, an API gateway can provide a single entry point for all clients with some additional features and better management. ","date":"2022-10-04","objectID":"/system-design/:147:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Features Below are some desired features of an API Gateway: Authentication and Authorization Service discovery Reverse Proxy Caching Security Retry and Circuit breaking Load balancing Logging, Tracing API composition Rate limiting and throttling Versioning Routing IP whitelisting or blacklisting ","date":"2022-10-04","objectID":"/system-design/:148:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s look at some advantages of using an API Gateway: Encapsulates the internal structure of an API. Provides a centralized view of the API. Simplifies the client code. Monitoring, analytics, tracing, and other such features. ","date":"2022-10-04","objectID":"/system-design/:149:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Here are some possible disadvantages of an API Gateway: Possible single point of failure. Might impact performance. Can become a bottleneck if not scaled properly. Configuration can be challenging. ","date":"2022-10-04","objectID":"/system-design/:150:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Backend For Frontend (BFF) pattern In the Backend For Frontend (BFF) pattern, we create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when we want to avoid customizing a single backend for multiple interfaces. This pattern was first described by Sam Newman. Also, sometimes the output of data returned by the microservices to the front end is not in the exact format or filtered as needed by the front end. To solve this issue, the frontend should have some logic to reformat the data, and therefore, we can use BFF to shift some of this logic to the intermediate layer. The primary function of the backend for the frontend pattern is to get the required data from the appropriate service, format the data, and sent it to the frontend. GraphQL performs really well as a backend for frontend (BFF). ","date":"2022-10-04","objectID":"/system-design/:151:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"When to use this pattern? We should consider using a Backend For Frontend (BFF) pattern when: A shared or general purpose backend service must be maintained with significant development overhead. We want to optimize the backend for the requirements of a specific client. Customizations are made to a general-purpose backend to accommodate multiple interfaces. ","date":"2022-10-04","objectID":"/system-design/:151:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Following are some widely used gateways technologies: Amazon API Gateway Apigee API Gateway Azure API Gateway Kong API Gateway REST, GraphQL, gRPC A good API design is always a crucial part of any system. But it is also important to pick the right API technology. So, in this tutorial, we will briefly discuss different API technologies such as REST, GraphQL, and gRPC. ","date":"2022-10-04","objectID":"/system-design/:152:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What’s an API? Before we even get into API technologies, let’s first understand what is an API. An API is a set of definitions and protocols for building and integrating application software. It’s sometimes referred to as a contract between an information provider and an information user establishing the content required from the producer and the content required by the consumer. In other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and complete the request. ","date":"2022-10-04","objectID":"/system-design/:153:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"REST A REST API (also known as RESTful API) is an application programming interface that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for Representational State Transfer and it was first introduced by Roy Fielding in the year 2000. In REST API, the fundamental unit is a resource. ","date":"2022-10-04","objectID":"/system-design/:154:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Concepts Let’s discuss some concepts of a RESTful API. Constraints In order for an API to be considered RESTful, it has to conform to these architectural constraints: Uniform Interface: There should be a uniform way of interacting with a given server. Client-Server: A client-server architecture managed through HTTP. Stateless: No client context shall be stored on the server between requests. Cacheable: Every response should include whether the response is cacheable or not and for how much duration responses can be cached at the client-side. Layered system: An application architecture needs to be composed of multiple layers. Code on demand: Return executable code to support a part of your application. (optional) HTTP Verbs HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. Although they can also be nouns, these request methods are sometimes referred to as HTTP verbs. Each of them implements a different semantic, but some common features are shared by a group of them. Below are some commonly used HTTP verbs: GET: Request a representation of the specified resource. HEAD: Response is identical to a GET request, but without the response body. POST: Submits an entity to the specified resource, often causing a change in state or side effects on the server. PUT: Replaces all current representations of the target resource with the request payload. DELETE: Deletes the specified resource. PATCH: Applies partial modifications to a resource. HTTP response codes HTTP response status codes indicate whether a specific HTTP request has been successfully completed. There are five classes defined by the standard: 1xx - Informational responses. 2xx - Successful responses. 3xx - Redirection responses. 4xx - Client error responses. 5xx - Server error responses. For example, HTTP 200 means that the request was successful. ","date":"2022-10-04","objectID":"/system-design/:154:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of REST API: Simple and easy to understand. Flexible and portable. Good caching support. Client and server are decoupled. ","date":"2022-10-04","objectID":"/system-design/:154:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Let’s discuss some disadvantages of REST API: Over-fetching of data. Sometimes multiple round trips to the server are required. ","date":"2022-10-04","objectID":"/system-design/:154:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases REST APIs are pretty much used universally and are the default standard for designing APIs. Overall REST APIs are quite flexible and can fit almost all scenarios. ","date":"2022-10-04","objectID":"/system-design/:154:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Example Here’s an example usage of a REST API that operates on a users resource. URI HTTP verb Description /users GET Get all users /users/{id} GET Get a user by id /users POST Add a new user /users/{id} PATCH Update a user by id /users/{id} DELETE Delete a user by id There is so much more to learn when it comes to REST APIs, I will highly recommend looking into Hypermedia as the Engine of Application State (HATEOAS). ","date":"2022-10-04","objectID":"/system-design/:154:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"GraphQL GraphQL is a query language and server-side runtime for APIs that prioritizes giving clients exactly the data they request and no more. It was developed by Facebook and later open-sourced in 2015. GraphQL is designed to make APIs fast, flexible, and developer-friendly. Additionally, GraphQL gives API maintainers the flexibility to add or deprecate fields without impacting existing queries. Developers can build APIs with whatever methods they prefer, and the GraphQL specification will ensure they function in predictable ways to clients. In GraphQL, the fundamental unit is a query. ","date":"2022-10-04","objectID":"/system-design/:155:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Concepts Let’s briefly discuss some key concepts in GraphQL: Schema A GraphQL schema describes the functionality clients can utilize once they connect to the GraphQL server. Queries A query is a request made by the client. It can consist of fields and arguments for the query. The operation type of a query can also be a mutation which provides a way to modify server-side data. Resolvers Resolver is a collection of functions that generate responses for a GraphQL query. In simple terms, a resolver acts as a GraphQL query handler. ","date":"2022-10-04","objectID":"/system-design/:155:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of GraphQL: Eliminates over-fetching of data. Strongly defined schema. Code generation support. Payload optimization. ","date":"2022-10-04","objectID":"/system-design/:155:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Let’s discuss some disadvantages of GraphQL: Shifts complexity to server-side. Caching becomes hard. Versioning is ambiguous. N+1 problem. ","date":"2022-10-04","objectID":"/system-design/:155:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases GraphQL proves to be essential in the following scenarios: Reducing app bandwidth usage as we can query multiple resources in a single query. Rapid prototyping for complex systems. When we are working with a graph-like data model. ","date":"2022-10-04","objectID":"/system-design/:155:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Example Here’s a GraphQL schema that defines a User type and a Query type. type Query { getUser: User } type User { id: ID name: String city: String state: String } Using the above schema, the client can request the required fields easily without having to fetch the entire resource or guess what the API might return. { getUser { id name city } } This will give the following response to the client. { \"getUser\": { \"id\": 123, \"name\": \"Karan\", \"city\": \"San Francisco\" } } Learn more about GraphQL at graphql.org. ","date":"2022-10-04","objectID":"/system-design/:155:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"gRPC gRPC is a modern open-source high-performance Remote Procedure Call (RPC) framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking, authentication and much more. ","date":"2022-10-04","objectID":"/system-design/:156:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Concepts Let’s discuss some key concepts of gRPC. Protocol buffers Protocol buffers provide a language and platform-neutral extensible mechanism for serializing structured data in a forward and backward-compatible way. It’s like JSON, except it’s smaller and faster, and it generates native language bindings. Service definition Like many RPC systems, gRPC is based on the idea of defining a service and specifying the methods that can be called remotely with their parameters and return types. gRPC uses protocol buffers as the Interface Definition Language (IDL) for describing both the service interface and the structure of the payload messages. ","date":"2022-10-04","objectID":"/system-design/:156:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Let’s discuss some advantages of gRPC: Lightweight and efficient. High performance. Built-in code generation support. Bi-directional streaming. ","date":"2022-10-04","objectID":"/system-design/:156:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Let’s discuss some disadvantages of gRPC: Relatively new compared to REST and GraphQL. Limited browser support. Steeper learning curve. Not human readable. ","date":"2022-10-04","objectID":"/system-design/:156:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Below are some good use cases for gRPC: Real-time communication via bi-directional streaming. Efficient inter-service communication in microservices. Low latency and high throughput communication. Polyglot environments. ","date":"2022-10-04","objectID":"/system-design/:156:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Example Here’s a basic example of a gRPC service defined in a *.proto file. Using this definition, we can easily code generate the HelloService service in the programming language of our choice. service HelloService { rpc SayHello (HelloRequest) returns (HelloResponse); } message HelloRequest { string greeting = 1; } message HelloResponse { string reply = 1; } ","date":"2022-10-04","objectID":"/system-design/:156:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"REST vs GraphQL vs gRPC Now that we know how these API designing techniques work, let’s compare them based on the following parameters: Will it cause tight coupling? How chatty (distinct API calls to get needed information) are the APIs? What’s the performance like? How complex is it to integrate? How well does the caching work? Built-in tooling and code generation? What’s API discoverability like? How easy is it to version APIs? Type Coupling Chattiness Performance Complexity Caching Codegen Discoverability Versioning REST Low High Good Medium Great Bad Good Easy GraphQL Medium Low Good High Custom Good Good Custom gRPC High Medium Great Low Custom Great Bad Hard ","date":"2022-10-04","objectID":"/system-design/:157:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Which API technology is better? Well, the answer is none of them. There is no silver bullet as each of these technologies has its own advantages and disadvantages. Users only care about using our APIs in a consistent way, so make sure to focus on your domain and requirements when designing your API. Long polling, WebSockets, Server-Sent Events (SSE) Web applications were initially developed around a client-server model, where the web client is always the initiator of transactions like requesting data from the server. Thus, there was no mechanism for the server to independently send, or push, data to the client without the client first making a request. Let’s discuss some approaches to overcome this problem. ","date":"2022-10-04","objectID":"/system-design/:157:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Long polling HTTP Long polling is a technique used to push information to a client as soon as possible from the server. As a result, the server does not have to wait for the client to send a request. In Long polling, the server does not close the connection once it receives a request from the client. Instead, the server responds only if any new message is available or a timeout threshold is reached. Once the client receives a response, it immediately sends a new request to the server to have a new pending connection to send data to the client, and the operation is repeated. With this approach, the server emulates a real-time server push feature. ","date":"2022-10-04","objectID":"/system-design/:158:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Working Let’s understand how long polling works: The client makes an initial request and waits for a response. The server receives the request and delays sending anything until an update is available. Once an update is available, the response is sent to the client. The client receives the response and makes a new request immediately or after some defined interval to establish a connection again. ","date":"2022-10-04","objectID":"/system-design/:158:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Here are some advantages of long polling: Easy to implement, good for small-scale projects. Nearly universally supported. ","date":"2022-10-04","objectID":"/system-design/:158:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages A major downside of long polling is that it is usually not scalable. Below are some of the other reasons: Creates a new connection each time, which can be intensive on the server. Reliable message ordering can be an issue for multiple requests. Increased latency as the server needs to wait for a new request. ","date":"2022-10-04","objectID":"/system-design/:158:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"WebSockets WebSocket provides full-duplex communication channels over a single TCP connection. It is a persistent connection between a client and a server that both parties can use to start sending data at any time. The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables the communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the client without being asked and allowing for messages to be passed back and forth while keeping the connection open. ","date":"2022-10-04","objectID":"/system-design/:159:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Working Let’s understand how WebSockets work: The client initiates a WebSocket handshake process by sending a request. The request also contains an HTTP Upgrade header that allows the request to switch to the WebSocket protocol (ws://). The server sends a response to the client, acknowledging the WebSocket handshake request. A WebSocket connection will be opened once the client receives a successful handshake response. Now the client and server can start sending data in both directions allowing real-time communication. The connection is closed once the server or the client decides to close the connection. ","date":"2022-10-04","objectID":"/system-design/:159:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Below are some advantages of WebSockets: Full-duplex asynchronous messaging. Better origin-based security model. Lightweight for both client and server. ","date":"2022-10-04","objectID":"/system-design/:159:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Let’s discuss some disadvantages of WebSockets: Terminated connections aren’t automatically recovered. Older browsers don’t support WebSockets (becoming less relevant). ","date":"2022-10-04","objectID":"/system-design/:159:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Server-Sent Events (SSE) Server-Sent Events (SSE) is a way of establishing long-term communication between client and server that enables the server to proactively push data to the client. It is unidirectional, meaning once the client sends the request it can only receive the responses without the ability to send new requests over the same connection. ","date":"2022-10-04","objectID":"/system-design/:160:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Working Let’s understand how server-sent events work: The client makes a request to the server. The connection between client and server is established and it remains open. The server sends responses or events to the client when new data is available. ","date":"2022-10-04","objectID":"/system-design/:160:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Simple to implement and use for both client and server. Supported by most browsers. No trouble with firewalls. ","date":"2022-10-04","objectID":"/system-design/:160:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Unidirectional nature can be limiting. Limitation for the maximum number of open connections. Does not support binary data. Geohashing and Quadtrees ","date":"2022-10-04","objectID":"/system-design/:160:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Geohashing Geohashing is a geocoding method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by Gustavo Niemeyer in 2008. For example, San Francisco with coordinates 37.7564, -122.4016 can be represented in geohash as 9q8yy9mf. ","date":"2022-10-04","objectID":"/system-design/:161:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How does Geohashing work? Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell. Geohashing guarantees that points are spatially closer if their Geohashes share a longer prefix which means the more characters in the string, the more precise the location. For example, geohashes 9q8yy9mf and 9q8yy9vx are spatially closer as they share the prefix 9q8yy9. Geohashing can also be used to provide a degree of anonymity as we don’t need to expose the exact location of the user because depending on the length of the geohash we just know they are somewhere within an area. The cell sizes of the geohashes of different lengths are as follows: Geohash length Cell width Cell height 1 5000 km 5000 km 2 1250 km 1250 km 3 156 km 156 km 4 39.1 km 19.5 km 5 4.89 km 4.89 km 6 1.22 km 0.61 km 7 153 m 153 m 8 38.2 m 19.1 m 9 4.77 m 4.77 m 10 1.19 m 0.596 m 11 149 mm 149 mm 12 37.2 mm 18.6 mm ","date":"2022-10-04","objectID":"/system-design/:161:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Here are some common use cases for Geohashing: It is a simple way to represent and store a location in a database. It can also be shared on social media as URLs since it is easier to share, and remember than latitudes and longitudes. We can efficiently find the nearest neighbors of a point through very simple string comparisons and efficient searching of indexes. ","date":"2022-10-04","objectID":"/system-design/:161:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Geohashing is widely used and it is supported by popular databases. MySQL Redis Amazon DynamoDB Google Cloud Firestore ","date":"2022-10-04","objectID":"/system-design/:161:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Quadtrees A quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of Octrees which are used to partition three-dimensional space. ","date":"2022-10-04","objectID":"/system-design/:162:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Types of Quadtrees Quadtrees may be classified according to the type of data they represent, including areas, points, lines, and curves. The following are common types of quadtrees: Point quadtrees Point-region (PR) quadtrees Polygonal map (PM) quadtrees Compressed quadtrees Edge quadtrees ","date":"2022-10-04","objectID":"/system-design/:162:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need Quadtrees? Aren’t latitude and longitude enough? Why do we need quadtrees? While in theory using latitude and longitude we can determine things such as how close points are to each other using euclidean distance, for practical use cases it is simply not scalable because of its CPU-intensive nature with large data sets. Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates. Additionally, we can save further computation by only subdividing a node after a certain threshold. And with the application of mapping algorithms such as the Hilbert curve, we can easily improve range query performance. ","date":"2022-10-04","objectID":"/system-design/:162:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Use cases Below are some common uses of quadtrees: Image representation, processing, and compression. Spacial indexing and range queries. Location-based services like Google Maps, Uber, etc. Mesh generation and computer graphics. Sparse data storage. Circuit breaker The circuit breaker is a design pattern used to detect failures and encapsulates the logic of preventing a failure from constantly recurring during maintenance, temporary external system failure, or unexpected system difficulties. The basic idea behind the circuit breaker is very simple. We wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually, we’ll also want some kind of monitor alert if the circuit breaker trips. ","date":"2022-10-04","objectID":"/system-design/:162:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need circuit breaking? It’s common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What’s worse if we have many callers on an unresponsive supplier, then we can run out of critical resources leading to cascading failures across multiple systems. ","date":"2022-10-04","objectID":"/system-design/:163:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"States Let’s discuss circuit breaker states: ","date":"2022-10-04","objectID":"/system-design/:164:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Closed When everything is normal, the circuit breakers remain closed, and all the request passes through to the services as normal. If the number of failures increases beyond the threshold, the circuit breaker trips and goes into an open state. ","date":"2022-10-04","objectID":"/system-design/:164:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Open In this state circuit breaker returns an error immediately without even invoking the services. The Circuit breakers move into the half-open state after a certain timeout period elapses. Usually, it will have a monitoring system where the timeout will be specified. ","date":"2022-10-04","objectID":"/system-design/:164:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Half-open In this state, the circuit breaker allows a limited number of requests from the service to pass through and invoke the operation. If the requests are successful, then the circuit breaker will go to the closed state. However, if the requests continue to fail, then it goes back to the open state. Rate Limiting Rate limiting refers to preventing the frequency of an operation from exceeding a defined limit. In large-scale systems, rate limiting is commonly used to protect underlying services and resources. Rate limiting is generally used as a defensive mechanism in distributed systems, so that shared resources can maintain availability. It also protects our APIs from unintended or malicious overuse by limiting the number of requests that can reach our API in a given period of time. ","date":"2022-10-04","objectID":"/system-design/:164:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need Rate Limiting? Rate limiting is a very important part of any large-scale system and it can be used to accomplish the following: Avoid resource starvation as a result of Denial of Service (DoS) attacks. Rate Limiting helps in controlling operational costs by putting a virtual cap on the auto-scaling of resources which if not monitored might lead to exponential bills. Rate limiting can be used as defense or mitigation against some common attacks. For APIs that process massive amounts of data, rate limiting can be used to control the flow of that data. ","date":"2022-10-04","objectID":"/system-design/:165:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Algorithms There are various algorithms for API rate limiting, each with its advantages and disadvantages. Let’s briefly discuss some of these algorithms: ","date":"2022-10-04","objectID":"/system-design/:166:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Leaky Bucket Leaky Bucket is an algorithm that provides a simple, intuitive approach to rate limiting via a queue. When registering a request, the system appends it to the end of the queue. Processing for the first item on the queue occurs at a regular interval or first-in, first-out (FIFO). If the queue is full, then additional requests are discarded (or leaked). ","date":"2022-10-04","objectID":"/system-design/:166:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Token Bucket Here we use a concept of a bucket. When a request comes in, a token from the bucket must be taken and processed. The request will be refused if no token is available in the bucket, and the requester will have to try again later. As a result, the token bucket gets refreshed after a certain time period. ","date":"2022-10-04","objectID":"/system-design/:166:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Fixed Window The system uses a window size of n seconds to track the fixed window algorithm rate. Each incoming request increments the counter for the window. It discards the request if the counter exceeds a threshold. ","date":"2022-10-04","objectID":"/system-design/:166:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sliding Log Sliding Log rate-limiting involves tracking a time-stamped log for each request. The system stores these logs in a time-sorted hash set or table. It also discards logs with timestamps beyond a threshold. When a new request comes in, we calculate the sum of logs to determine the request rate. If the request would exceed the threshold rate, then it is held. ","date":"2022-10-04","objectID":"/system-design/:166:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sliding Window Sliding Window is a hybrid approach that combines the fixed window algorithm’s low processing cost and the sliding log’s improved boundary conditions. Like the fixed window algorithm, we track a counter for each fixed window. Next, we account for a weighted value of the previous window’s request rate based on the current timestamp to smooth out bursts of traffic. ","date":"2022-10-04","objectID":"/system-design/:166:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Rate Limiting in Distributed Systems Rate Limiting becomes complicated when distributed systems are involved. The two broad problems that come with rate limiting in distributed systems are: ","date":"2022-10-04","objectID":"/system-design/:167:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Inconsistencies When using a cluster of multiple nodes, we might need to enforce a global rate limit policy. Because if each node were to track its rate limit, a consumer could exceed a global rate limit when sending requests to different nodes. The greater the number of nodes, the more likely the user will exceed the global limit. The simplest way to solve this problem is to use sticky sessions in our load balancers so that each consumer gets sent to exactly one node but this causes a lack of fault tolerance and scaling problems. Another approach might be to use a centralized data store like Redis but this will increase latency and cause race conditions. ","date":"2022-10-04","objectID":"/system-design/:167:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Race Conditions This issue happens when we use a naive “get-then-set” approach, in which we retrieve the current rate limit counter, increment it, and then push it back to the datastore. This model’s problem is that additional requests can come through in the time it takes to perform a full cycle of read-increment-store, each attempting to store the increment counter with an invalid (lower) counter value. This allows a consumer to send a very large number of requests to bypass the rate limiting controls. One way to avoid this problem is to use some sort of distributed locking mechanism around the key, preventing any other processes from accessing or writing to the counter. Though the lock will become a significant bottleneck and will not scale well. A better approach might be to use a “set-then-get” approach, allowing us to quickly increment and check counter values without letting the atomic operations get in the way. Service Discovery Service discovery is the detection of services within a computer network. Service Discovery Protocol (SDP) is a networking standard that accomplishes the detection of networks by identifying resources. ","date":"2022-10-04","objectID":"/system-design/:167:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need Service Discovery? In a monolithic application, services invoke one another through language-level methods or procedure calls. However, modern microservices-based applications typically run in virtualized or containerized environments where the number of instances of a service and their locations change dynamically. Consequently, we need a mechanism that enables the clients of service to make requests to a dynamically changing set of ephemeral service instances. ","date":"2022-10-04","objectID":"/system-design/:168:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Implementations There are two main service discovery patterns: ","date":"2022-10-04","objectID":"/system-design/:169:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Client-side discovery In this approach, the client obtains the location of another service by querying a service registry which is responsible for managing and storing the network locations of all the services. ","date":"2022-10-04","objectID":"/system-design/:169:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Server-side discovery In this approach, we use an intermediate component such as a load balancer. The client makes a request to the service via a load balancer which then forwards the request to an available service instance. ","date":"2022-10-04","objectID":"/system-design/:169:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Service Registry A service registry is basically a database containing the network locations of service instances to which the clients can reach out. A Service Registry must be highly available and up-to-date. ","date":"2022-10-04","objectID":"/system-design/:170:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Service Registration We also need a way to obtain service information, often known as service registration. Let’s look at two possible service registration approaches: ","date":"2022-10-04","objectID":"/system-design/:171:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Self-Registration When using the self-registration model, a service instance is responsible for registering and de-registering itself in the Service Registry. In addition, if necessary, a service instance sends heartbeat requests to keep its registration alive. ","date":"2022-10-04","objectID":"/system-design/:171:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Third-party Registration The registry keeps track of changes to running instances by polling the deployment environment or subscribing to events. When it detects a newly available service instance, it records it in its database. The Service Registry also de-registers terminated service instances. ","date":"2022-10-04","objectID":"/system-design/:171:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Service mesh Service-to-service communication is essential in a distributed application but routing this communication, both within and across application clusters, becomes increasingly complex as the number of services grows. Service mesh enables managed, observable, and secure communication between individual services. It works with a service discovery protocol to detect services. Istio and envoy are some of the most commonly used service mesh technologies. ","date":"2022-10-04","objectID":"/system-design/:172:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples Here are some commonly used service discovery infrastructure tools: etcd Consul Apache Thrift Apache Zookeeper SLA, SLO, SLI Let’s briefly discuss SLA, SLO, and SLI. These are mostly related to the business and site reliability side of things but good to know nonetheless. ","date":"2022-10-04","objectID":"/system-design/:173:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why are they important? SLAs, SLOs, and SLIs allow companies to define, track and monitor the promises made for a service to its users. Together, SLAs, SLOs, and SLIs should help teams generate more user trust in their services with an added emphasis on continuous improvement to incident management and response processes. ","date":"2022-10-04","objectID":"/system-design/:174:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SLA An SLA, or Service Level Agreement, is an agreement made between a company and its users of a given service. The SLA defines the different promises that the company makes to users regarding specific metrics, such as service availability. SLAs are often written by a company’s business or legal team. ","date":"2022-10-04","objectID":"/system-design/:175:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SLO An SLO, or Service Level Objective, is the promise that a company makes to users regarding a specific metric such as incident response or uptime. SLOs exist within an SLA as individual promises contained within the full user agreement. The SLO is the specific goal that the service must meet in order to comply with the SLA. SLOs should always be simple, clearly defined, and easily measured to determine whether or not the objective is being fulfilled. ","date":"2022-10-04","objectID":"/system-design/:176:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SLI An SLI, or Service Level Indicator, is a key metric used to determine whether or not the SLO is being met. It is the measured value of the metric described within the SLO. In order to remain in compliance with the SLA, the SLI’s value must always meet or exceed the value determined by the SLO. Disaster recovery Disaster recovery (DR) is a process of regaining access and functionality of the infrastructure after events like a natural disaster, cyber attack, or even business disruptions. Disaster recovery relies upon the replication of data and computer processing in an off-premises location not affected by the disaster. When servers go down because of a disaster, a business needs to recover lost data from a second location where the data is backed up. Ideally, an organization can transfer its computer processing to that remote location as well in order to continue operations. Disaster Recovery is often not actively discussed during system design interviews but it’s important to have some basic understanding of this topic. You can learn more about disaster recovery from AWS Well-Architected Framework. ","date":"2022-10-04","objectID":"/system-design/:177:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why is disaster recovery important? Disaster recovery can have the following benefits: Minimize interruption and downtime Limit damages Fast restoration Better customer retention ","date":"2022-10-04","objectID":"/system-design/:178:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Terms Let’s discuss some important terms relevantly for disaster recovery: ","date":"2022-10-04","objectID":"/system-design/:179:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"RTO Recovery Time Objective (RTO) is the maximum acceptable delay between the interruption of service and restoration of service. This determines what is considered an acceptable time window when service is unavailable. ","date":"2022-10-04","objectID":"/system-design/:179:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"RPO Recovery Point Objective (RPO) is the maximum acceptable amount of time since the last data recovery point. This determines what is considered an acceptable loss of data between the last recovery point and the interruption of service. ","date":"2022-10-04","objectID":"/system-design/:179:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Strategies A variety of disaster recovery (DR) strategies can be part of a disaster recovery plan. ","date":"2022-10-04","objectID":"/system-design/:180:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Back-up This is the simplest type of disaster recovery and involves storing data off-site or on a removable drive. ","date":"2022-10-04","objectID":"/system-design/:180:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cold Site In this type of disaster recovery, an organization sets up basic infrastructure in a second site. ","date":"2022-10-04","objectID":"/system-design/:180:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Hot site A hot site maintains up-to-date copies of data at all times. Hot sites are time-consuming to set up and more expensive than cold sites, but they dramatically reduce downtime. Virtual Machines (VMs) and Containers Before we discuss virtualization vs containerization, let’s learn what are virtual machines (VMs) and Containers. ","date":"2022-10-04","objectID":"/system-design/:180:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Virtual Machines (VM) A Virtual Machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system. A software called a hypervisor separates the machine’s resources from the hardware and provisions them appropriately so they can be used by the VM. VMs are isolated from the rest of the system, and multiple VMs can exist on a single piece of hardware, like a server. They can be moved between host servers depending on the demand or to use resources more efficiently. ","date":"2022-10-04","objectID":"/system-design/:181:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is a Hypervisor? A Hypervisor sometimes called a Virtual Machine Monitor (VMM), isolates the operating system and resources from the virtual machines and enables the creation and management of those VMs. The hypervisor treats resources like CPU, memory, and storage as a pool of resources that can be easily reallocated between existing guests or new virtual machines. ","date":"2022-10-04","objectID":"/system-design/:181:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why use a Virtual Machine? Server consolidation is a top reason to use VMs. Most operating system and application deployments only use a small amount of the physical resources available. By virtualizing our servers, we can place many virtual servers onto each physical server to improve hardware utilization. This keeps us from needing to purchase additional physical resources. A VM provides an environment that is isolated from the rest of a system, so whatever is running inside a VM won’t interfere with anything else running on the host hardware. Because VMs are isolated, they are a good option for testing new applications or setting up a production environment. We can also run a single-purpose VM to support a specific use case. ","date":"2022-10-04","objectID":"/system-design/:181:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Containers A container is a standard unit of software that packages up code and all its dependencies such as specific versions of runtimes and libraries so that the application runs quickly and reliably from one computing environment to another. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently, regardless of the target environment. ","date":"2022-10-04","objectID":"/system-design/:182:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need containers? Let’s discuss some advantages of using containers: Separation of responsibility Containerization provides a clear separation of responsibility, as developers focus on application logic and dependencies, while operations teams can focus on deployment and management. Workload portability Containers can run virtually anywhere, greatly easing development and deployment. Application isolation Containers virtualize CPU, memory, storage, and network resources at the operating system level, providing developers with a view of the OS logically isolated from other applications. Agile development Containers allow developers to move much more quickly by avoiding concerns about dependencies and environments. Efficient operations Containers are lightweight and allow us to use just the computing resources we need. ","date":"2022-10-04","objectID":"/system-design/:182:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Virtualization vs Containerization In traditional virtualization, a hypervisor virtualizes physical hardware. The result is that each virtual machine contains a guest OS, a virtual copy of the hardware that the OS requires to run, and an application and its associated libraries and dependencies. Instead of virtualizing the underlying hardware, containers virtualize the operating system so each container contains only the application and its dependencies making them much more lightweight than VMs. Containers also share the OS kernel and use a fraction of the memory VMs require. OAuth 2.0 and OpenID Connect (OIDC) ","date":"2022-10-04","objectID":"/system-design/:183:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"OAuth 2.0 OAuth 2.0, which stands for Open Authorization, is a standard designed to provide consented access to resources on behalf of the user, without ever sharing the user’s credentials. OAuth 2.0 is an authorization protocol and not an authentication protocol, it is designed primarily as a means of granting access to a set of resources, for example, remote APIs or user’s data. ","date":"2022-10-04","objectID":"/system-design/:184:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Concepts The OAuth 2.0 protocol defines the following entities: Resource Owner: The user or system that owns the protected resources and can grant access to them. Client: The client is the system that requires access to the protected resources. Authorization Server: This server receives requests from the Client for Access Tokens and issues them upon successful authentication and consent by the Resource Owner. Resource Server: A server that protects the user’s resources and receives access requests from the Client. It accepts and validates an Access Token from the Client and returns the appropriate resources. Scopes: They are used to specify exactly the reason for which access to resources may be granted. Acceptable scope values, and which resources they relate to, are dependent on the Resource Server. Access Token: A piece of data that represents the authorization to access resources on behalf of the end-user. ","date":"2022-10-04","objectID":"/system-design/:184:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How does OAuth 2.0 work? Let’s learn how OAuth 2.0 works: The client requests authorization from the Authorization Server, supplying the client id and secret as identification. It also provides the scopes and an endpoint URI to send the Access Token or the Authorization Code. The Authorization Server authenticates the client and verifies that the requested scopes are permitted. The resource owner interacts with the authorization server to grant access. The Authorization Server redirects back to the client with either an Authorization Code or Access Token, depending on the grant type. A Refresh Token may also be returned. With the Access Token, the client can request access to the resource from the Resource Server. ","date":"2022-10-04","objectID":"/system-design/:184:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Here are the most common disadvantages of OAuth 2.0: Lacks built-in security features. No standard implementation. No common set of scopes. ","date":"2022-10-04","objectID":"/system-design/:184:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"OpenID Connect OAuth 2.0 is designed only for authorization, for granting access to data and features from one application to another. OpenID Connect (OIDC) is a thin layer that sits on top of OAuth 2.0 that adds login and profile information about the person who is logged in. When an Authorization Server supports OIDC, it is sometimes called an identity provider (IdP), since it provides information about the Resource Owner back to the Client. OpenID Connect is relatively new, resulting in lower adoption and industry implementation of best practices compared to OAuth. ","date":"2022-10-04","objectID":"/system-design/:185:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Concepts The OpenID Connect (OIDC) protocol defines the following entities: Relying Party: The current application. OpenID Provider: This is essentially an intermediate service that provides a one-time code to the Relying Party. Token Endpoint: A web server that accepts the One-Time Code (OTC) and provides an access code that’s valid for an hour. The main difference between OIDC and OAuth 2.0 is that the token is provided using JSON Web Token (JWT). UserInfo Endpoint: The Relying Party communicates with this endpoint, providing a secure token and receiving information about the end-user Both OAuth 2.0 and OIDC are easy to implement and are JSON based, which is supported by most web and mobile applications. However, the OpenID Connect (OIDC) specification is more strict than that of basic OAuth. Single Sign-On (SSO) Single Sign-On (SSO) is an authentication process in which a user is provided access to multiple applications or websites by using only a single set of login credentials. This prevents the need for the user to log separately into the different applications. The user credentials and other identifying information are stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider is a trusted system that provides access to other websites and applications. Single Sign-On (SSO) based authentication systems are commonly used in enterprise environments where employees require access to multiple applications of their organizations. ","date":"2022-10-04","objectID":"/system-design/:185:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Components Let’s discuss some key components of Single Sign-On (SSO). ","date":"2022-10-04","objectID":"/system-design/:186:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identity Provider (IdP) User Identity information is stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider authenticates the user and provides access to the service provider. The identity provider can directly authenticate the user by validating a username and password or by validating an assertion about the user’s identity as presented by a separate identity provider. The identity provider handles the management of user identities in order to free the service provider from this responsibility. ","date":"2022-10-04","objectID":"/system-design/:186:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Service Provider A service provider provides services to the end-user. They rely on identity providers to assert the identity of a user, and typically certain attributes about the user are managed by the identity provider. Service providers may also maintain a local account for the user along with attributes that are unique to their service. ","date":"2022-10-04","objectID":"/system-design/:186:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identity Broker An identity broker acts as an intermediary that connects multiple service providers with various different identity providers. Using Identity Broker, we can perform single sign-on over any application without the hassle of the protocol it follows. ","date":"2022-10-04","objectID":"/system-design/:186:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SAML Security Assertion Markup Language is an open standard that allows clients to share security information about identity, authentication, and permission across different systems. SAML is implemented with the Extensible Markup Language (XML) standard for sharing data. SAML specifically enables identity federation, making it possible for identity providers (IdPs) to seamlessly and securely pass authenticated identities and their attributes to service providers. ","date":"2022-10-04","objectID":"/system-design/:187:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How does SSO work? Now, let’s discuss how Single Sign-On works: The user requests a resource from their desired application. The application redirects the user to the Identity Provider (IdP) for authentication. The user signs in with their credentials (usually, username and password). Identity Provider (IdP) sends a Single Sign-On response back to the client application. The application grants access to the user. ","date":"2022-10-04","objectID":"/system-design/:188:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SAML vs OAuth 2.0 and OpenID Connect (OIDC) There are many differences between SAML, OAuth, and OIDC. SAML uses XML to pass messages, while OAuth and OIDC use JSON. OAuth provides a simpler experience, while SAML is geared towards enterprise security. OAuth and OIDC use RESTful communication extensively, which is why mobile, and modern web applications find OAuth and OIDC a better experience for the user. SAML, on the other hand, drops a session cookie in a browser that allows a user to access certain web pages. This is great for short-lived workloads. OIDC is developer-friendly and simpler to implement, which broadens the use cases for which it might be implemented. It can be implemented from scratch pretty fast, via freely available libraries in all common programming languages. SAML can be complex to install and maintain, which only enterprise-size companies can handle well. OpenID Connect is essentially a layer on top of the OAuth framework. Therefore, it can offer a built-in layer of permission that asks a user to agree to what the service provider might access. Although SAML is also capable of allowing consent flow, it achieves this by hard-coding carried out by a developer and not as part of its protocol. Both of these authentication protocols are good at what they do. As always, a lot depends on our specific use cases and target audience. ","date":"2022-10-04","objectID":"/system-design/:189:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Advantages Following are the benefits of using Single Sign-On: Ease of use as users only need to remember one set of credentials. Ease of access without having to go through a lengthy authorization process. Enforced security and compliance to protect sensitive data. Simplifying the management with reduced IT support cost and admin time. ","date":"2022-10-04","objectID":"/system-design/:190:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Disadvantages Here are some disadvantages of Single Sign-On: Single Password Vulnerability, if the main SSO password gets compromised, all the supported applications get compromised. The authentication process using Single Sign-On is slower than traditional authentication as every application has to request the SSO provider for verification. ","date":"2022-10-04","objectID":"/system-design/:191:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Examples These are some commonly used Identity Providers (IdP): Okta Google Auth0 OneLogin SSL, TLS, mTLS Let’s briefly discuss some important communication security protocols such as SSL, TLS, and mTLS. I would say that from a “big picture” system design perspective, this topic is not very important but still good to know about. ","date":"2022-10-04","objectID":"/system-design/:192:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"SSL SSL stands for Secure Sockets Layer, and it refers to a protocol for encrypting and securing communications that take place on the internet. It was first developed in 1995 but since has been deprecated in favor of TLS (Transport Layer Security). ","date":"2022-10-04","objectID":"/system-design/:193:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why is it called an SSL certificate if it is deprecated? Most major certificate providers still refer to certificates as SSL certificates, which is why the naming convention persists. ","date":"2022-10-04","objectID":"/system-design/:193:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why was SSL so important? Originally, data on the web was transmitted in plaintext that anyone could read if they intercepted the message. SSL was created to correct this problem and protect user privacy. By encrypting any data that goes between the user and a web server, SSL also stops certain kinds of cyber attacks by preventing attackers from tampering with data in transit. ","date":"2022-10-04","objectID":"/system-design/:193:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"TLS Transport Layer Security, or TLS, is a widely adopted security protocol designed to facilitate privacy and data security for communications over the internet. TLS evolved from a previous encryption protocol called Secure Sockets Layer (SSL). A primary use case of TLS is encrypting the communication between web applications and servers. There are three main components to what the TLS protocol accomplishes: Encryption: hides the data being transferred from third parties. Authentication: ensures that the parties exchanging information are who they claim to be. Integrity: verifies that the data has not been forged or tampered with. ","date":"2022-10-04","objectID":"/system-design/:194:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"mTLS Mutual TLS, or mTLS, is a method for mutual authentication. mTLS ensures that the parties at each end of a network connection are who they claim to be by verifying that they both have the correct private key. The information within their respective TLS certificates provides additional verification. ","date":"2022-10-04","objectID":"/system-design/:195:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why use mTLS? mTLS helps ensure that the traffic is secure and trusted in both directions between a client and server. This provides an additional layer of security for users who log in to an organization’s network or applications. It also verifies connections with client devices that do not follow a login process, such as Internet of Things (IoT) devices. Nowadays, mTLS is commonly used by microservices or distributed systems in a zero trust security model to verify each other. System Design Interviews System design is a very extensive topic and system design interviews are designed to evaluate your capability to produce technical solutions to abstract problems, as such, they’re not designed for a specific answer. The unique aspect of system design interviews is the two-way nature between the candidate and the interviewer. Expectations are quite different at different engineering levels as well. Because someone with a lot of practical experience will approach it quite differently from someone who’s new in the industry. As a result, it’s hard to come up with a single strategy that will help us stay organized during the interview. Let’s look at some common strategies for the system design interviews: ","date":"2022-10-04","objectID":"/system-design/:195:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements clarifications System design interview questions, by nature, are vague or abstract. Asking questions about the exact scope of the problem, and clarifying functional requirements early in the interview is essential. Usually, requirements are divided into three parts: ","date":"2022-10-04","objectID":"/system-design/:196:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements These are the requirements that the end user specifically demands as basic functionalities that the system should offer. All these functionalities need to be necessarily incorporated into the system as part of the contract. For example: “What are the features that we need to design for this system?” “What are the edge cases we need to consider, if any, in our design?” ","date":"2022-10-04","objectID":"/system-design/:196:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-functional requirements These are the quality constraints that the system must satisfy according to the project contract. The priority or extent to which these factors are implemented varies from one project to another. They are also called non-behavioral requirements. For example, portability, maintainability, reliability, scalability, security, etc. For example: “Each request should be processed with the minimum latency” “System should be highly available” ","date":"2022-10-04","objectID":"/system-design/:196:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements These are basically “nice to have” requirements that might be out of the scope of the system. For example: “Our system should record metrics and analytics” “Service health and performance monitoring?” ","date":"2022-10-04","objectID":"/system-design/:196:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Estimate the scale of the system we’re going to design. It is important to ask questions such as: “What is the desired scale that this system will need to handle?” “What is the read/write ratio of our system?” “How many requests per second?” “How much storage will be needed?” These questions will help us scale our design later. ","date":"2022-10-04","objectID":"/system-design/:197:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design Once we have the estimations, we can start with defining the database schema. Doing so in the early stages of the interview would help us to understand the data flow which is the core of every system. In this step, we basically define all the entities and relationships between them. “What are the different entities in the system?” “What are the relationships between these entities?” “How many tables do we need?” “Is NoSQL a better choice here?” ","date":"2022-10-04","objectID":"/system-design/:198:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Next, we can start designing APIs for the system. These APIs will help us define the expectations from the system explicitly. We don’t have to write any code, just a simple interface defining the API requirements such as parameters, functions, classes, types, entities, etc. For example: createUser(name: string, email: string): User It is advised to keep the interface as simple as possible and come back to it later when covering extended requirements. ","date":"2022-10-04","objectID":"/system-design/:199:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level component design Now we have established our data model and API design, it’s time to identify system components (such as Load Balancers, API Gateway, etc.) that are needed to solve our problem and draft the first design of our system. “Is it best to design a monolithic or a microservices architecture?” “What type of database should we use?” Once we have a basic diagram, we can start discussing with the interviewer how the system will work from the client’s perspective. ","date":"2022-10-04","objectID":"/system-design/:200:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design Now it’s time to go into detail about the major components of the system we designed. As always discuss with the interviewer which component may need further improvements. Here is a good opportunity to demonstrate your experience in the areas of your expertise. Present different approaches, advantages, and disadvantages. Explain your design decisions, and back them up with examples. This is also a good time to discuss any additional features the system might be able to support, though this is optional. “How should we partition our data?” “What about load distribution?” “Should we use cache?” “How will we handle a sudden spike in traffic?” Also, try not to be too opinionated about certain technologies, statements like “I believe that NoSQL databases are just better, SQL databases are not scalable” reflect poorly. As someone who has interviewed a lot of people over the years, my two cents here would be to be humble about what you know and what you do not. Use your existing knowledge with examples to navigate this part of the interview. ","date":"2022-10-04","objectID":"/system-design/:201:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Finally, it’s time to discuss bottlenecks and approaches to mitigate them. Here are some important questions to ask: “Do we have enough database replicas?” “Is there any single point of failure?” “Is database sharding required?” “How can we make our system more robust?” “How to improve the availability of our cache?” Make sure to read the engineering blog of the company you’re interviewing with. This will help you get a sense of what technology stack they’re using and which problems are important to them. URL Shortener Let’s design a URL shortener, similar to services like Bitly, TinyURL. ","date":"2022-10-04","objectID":"/system-design/:202:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is a URL Shortener? A URL shortener service creates an alias or a short URL for a long URL. Users are redirected to the original URL when they visit these short links. For example, the following long URL can be changed to a shorter URL. Long URL: https://karanpratapsingh.com/courses/system-design/url-shortener Short URL: https://bit.ly/3I71d3o ","date":"2022-10-04","objectID":"/system-design/:203:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need a URL shortener? URL shortener saves space in general when we are sharing URLs. Users are also less likely to mistype shorter URLs. Moreover, we can also optimize links across devices, this allows us to track individual links. ","date":"2022-10-04","objectID":"/system-design/:204:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements Our URL shortening system should meet the following requirements: ","date":"2022-10-04","objectID":"/system-design/:205:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements Given a URL, our service should generate a shorter and unique alias for it. Users should be redirected to the original URL when they visit the short link. Links should expire after a default timespan. ","date":"2022-10-04","objectID":"/system-design/:205:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-functional requirements High availability with minimal latency. The system should be scalable and efficient. ","date":"2022-10-04","objectID":"/system-design/:205:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements Prevent abuse of services. Record analytics and metrics for redirections. ","date":"2022-10-04","objectID":"/system-design/:205:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Let’s start with the estimation and constraints. Note: Make sure to check any scale or traffic related assumptions with your interviewer. ","date":"2022-10-04","objectID":"/system-design/:206:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Traffic This will be a read-heavy system, so let’s assume a 100:1 read/write ratio with 100 million links generated per month. Reads/Writes Per month For reads per month: $$ 100 \\times 100 \\space million = 10 \\space billion/month $$ Similarly for writes: $$ 1 \\times 100 \\space million = 100 \\space million/month $$ What would be Requests Per Second (RPS) for our system? 100 million requests per month translate into 40 requests per second. $$ \\frac{100 \\space million}{(30 \\space days \\times 24 \\space hrs \\times 3600 \\space seconds)} = \\sim 40 \\space URLs/second $$ And with a 100:1 read/write ratio, the number of redirections will be: $$ 100 \\times 40 \\space URLs/second = 4000 \\space requests/second $$ ","date":"2022-10-04","objectID":"/system-design/:206:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Bandwidth Since we expect about 40 URLs every second, and if we assume each request is of size 500 bytes then the total incoming data for then write requests would be: $$ 40 \\times 500 \\space bytes = 20 \\space KB/second $$ Similarly, for the read requests, since we expect about 4K redirections, the total outgoing data would be: $$ 4000 \\space URLs/second \\times 500 \\space bytes = \\sim 2 \\space MB/second $$ ","date":"2022-10-04","objectID":"/system-design/:206:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage For storage, we will assume we store each link or record in our database for 10 years. Since we expect around 100M new requests every month, the total number of records we will need to store would be: $$ 100 \\space million \\times 10\\space years \\times 12 \\space months = 12 \\space billion $$ Like earlier, if we assume each stored recorded will be approximately 500 bytes. We will need around 6TB of storage: $$ 12 \\space billion \\times 500 \\space bytes = 6 \\space TB $$ ","date":"2022-10-04","objectID":"/system-design/:206:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache For caching, we will follow the classic Pareto principle also known as the 80/20 rule. This means that 80% of the requests are for 20% of the data, so we can cache around 20% of our requests. Since we get around 4K read or redirection requests each second. This translates into 350M requests per day. $$ 4000 \\space URLs/second \\times 24 \\space hours \\times 3600 \\space seconds = \\sim 350 \\space million \\space requests/day $$ Hence, we will need around 35GB of memory per day. $$ 20 \\space percent \\times 350 \\space million \\times 500 \\space bytes = 35 \\space GB/day $$ ","date":"2022-10-04","objectID":"/system-design/:206:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level estimate Here is our high-level estimate: Type Estimate Writes (New URLs) 40/s Reads (Redirection) 4K/s Bandwidth (Incoming) 20 KB/s Bandwidth (Outgoing) 2 MB/s Storage (10 years) 6 TB Memory (Caching) ~35 GB/day ","date":"2022-10-04","objectID":"/system-design/:206:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design Next, we will focus on the data model design. Here is our database schema: Initially, we can get started with just two tables: users Stores user’s details such as name, email, createdAt, etc. urls Contains the new short URL’s properties such as expiration, hash, originalURL, and userID of the user who created the short URL. We can also use the hash column as an index to improve the query performance. ","date":"2022-10-04","objectID":"/system-design/:207:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What kind of database should we use? Since the data is not strongly relational, NoSQL databases such as Amazon DynamoDB, Apache Cassandra, or MongoDB will be a better choice here, if we do decide to use an SQL database then we can use something like Azure SQL Database or Amazon RDS. For more details, refer to SQL vs NoSQL. ","date":"2022-10-04","objectID":"/system-design/:207:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Let us do a basic API design for our services: ","date":"2022-10-04","objectID":"/system-design/:208:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Create URL This API should create a new short URL in our system given an original URL. createURL(apiKey: string, originalURL: string, expiration?: Date): string Parameters API Key (string): API key provided by the user. Original Url (string): Original URL to be shortened. Expiration (Date): Expiration date of the new URL (optional). Returns Short URL (string): New shortened URL. ","date":"2022-10-04","objectID":"/system-design/:208:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Get URL This API should retrieve the original URL from a given short URL. getURL(apiKey: string, shortURL: string): string Parameters API Key (string): API key provided by the user. Short Url (string): Short URL mapped to the original URL. Returns Original URL (string): Original URL to be retrieved. ","date":"2022-10-04","objectID":"/system-design/:208:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Delete URL This API should delete a given shortURL from our system. deleteURL(apiKey: string, shortURL: string): boolean Parameters API Key (string): API key provided by the user. Short Url (string): Short URL to be deleted. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:208:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Why do we need an API key? As you must’ve noticed, we’re using an API key to prevent abuse of our services. Using this API key we can limit the users to a certain number of requests per second or minute. This is quite a standard practice for developer APIs and should cover our extended requirement. ","date":"2022-10-04","objectID":"/system-design/:208:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level design Now let us do a high-level design of our system. ","date":"2022-10-04","objectID":"/system-design/:209:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"URL Encoding Our system’s primary goal is to shorten a given URL, let’s look at different approaches: Base62 Approach In this approach, we can encode the original URL using Base62 which consists of the capital letters A-Z, the lower case letters a-z, and the numbers 0-9. $$ Number \\space of \\space URLs = 62^N $$ Where, N: Number of characters in the generated URL. So, if we want to generate a URL that is 7 characters long, we will generate ~3.5 trillion different URLs. $$ \\begin{gather*} 62^5 = \\sim 916 \\space million \\space URLs \\ 62^6 = \\sim 56.8 \\space billion \\space URLs \\ 62^7 = \\sim 3.5 \\space trillion \\space URLs \\end{gather*} $$ This is the simplest solution here, but it does not guarantee non-duplicate or collision-resistant keys. MD5 Approach The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value (or 32 hexadecimal digits). We can use these 32 hexadecimal digits for generating 7 characters long URL. $$ MD5(original_url) \\rightarrow base62encode \\rightarrow hash $$ However, this creates a new issue for us, which is duplication and collision. We can try to re-compute the hash until we find a unique one but that will increase the overhead of our systems. It’s better to look for more scalable approaches. Counter Approach In this approach, we will start with a single server which will maintain the count of the keys generated. Once our service receives a request, it can reach out to the counter which returns a unique number and increments the counter. When the next request comes the counter again returns the unique number and this goes on. $$ Counter(0-3.5 \\space trillion) \\rightarrow base62encode \\rightarrow hash $$ The problem with this approach is that it can quickly become a single point for failure. And if we run multiple instances of the counter we can have collision as it’s essentially a distributed system. To solve this issue we can use a distributed system manager such as Zookeeper which can provide distributed synchronization. Zookeeper can maintain multiple ranges for our servers. $$ \\begin{align*} \u0026 Range \\space 1: \\space 1 \\rightarrow 1,000,000 \\ \u0026 Range \\space 2: \\space 1,000,001 \\rightarrow 2,000,000 \\ \u0026 Range \\space 3: \\space 2,000,001 \\rightarrow 3,000,000 \\ \u0026 … \\end{align*} $$ Once a server reaches its maximum range Zookeeper will assign an unused counter range to the new server. This approach can guarantee non-duplicate and collision-resistant URLs. Also, we can run multiple instances of Zookeeper to remove the single point of failure. ","date":"2022-10-04","objectID":"/system-design/:209:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Key Generation Service (KGS) As we discussed, generating a unique key at scale without duplication and collisions can be a bit of a challenge. To solve this problem, we can create a standalone Key Generation Service (KGS) that generates a unique key ahead of time and stores it in a separate database for later use. This approach can make things simple for us. How to handle concurrent access? Once the key is used, we can mark it in the database to make sure we don’t reuse it, however, if there are multiple server instances reading data concurrently, two or more servers might try to use the same key. The easiest way to solve this would be to store keys in two tables. As soon as a key is used, we move it to a separate table with appropriate locking in place. Also, to improve reads, we can keep some of the keys in memory. KGS database estimations As per our discussion, we can generate up to ~56.8 billion unique 6 character long keys which will result in us having to store 300 GB of keys. $$ 6 \\space characters \\times 56.8 \\space billion = \\sim 390 \\space GB $$ While 390 GB seems like a lot for this simple use case, it is important to remember this is for the entirety of our service lifetime and the size of the keys database would not increase like our main database. ","date":"2022-10-04","objectID":"/system-design/:209:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching Now, let’s talk about caching. As per our estimations, we will require around ~35 GB of memory per day to cache 20% of the incoming requests to our services. For this use case, we can use Redis or Memcached servers alongside our API server. For more details, refer to caching. ","date":"2022-10-04","objectID":"/system-design/:209:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Design Now that we have identified some core components, let’s do the first draft of our system design. Here’s how it works: Creating a new URL When a user creates a new URL, our API server requests a new unique key from the Key Generation Service (KGS). Key Generation Service provides a unique key to the API server and marks the key as used. API server writes the new URL entry to the database and cache. Our service returns an HTTP 201 (Created) response to the user. Accessing a URL When a client navigates to a certain short URL, the request is sent to the API servers. The request first hits the cache, and if the entry is not found there then it is retrieved from the database and an HTTP 301 (Redirect) is issued to the original URL. If the key is still not found in the database, an HTTP 404 (Not found) error is sent to the user. ","date":"2022-10-04","objectID":"/system-design/:209:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design It’s time to discuss the finer details of our design. ","date":"2022-10-04","objectID":"/system-design/:210:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning To scale out our databases we will need to partition our data. Horizontal partitioning (aka Sharding) can be a good first step. We can use partitions schemes such as: Hash-Based Partitioning List-Based Partitioning Range Based Partitioning Composite Partitioning The above approaches can still cause uneven data and load distribution, we can solve this using Consistent hashing. For more details, refer to Sharding and Consistent Hashing. ","date":"2022-10-04","objectID":"/system-design/:210:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Database cleanup This is more of a maintenance step for our services and depends on whether we keep the expired entries or remove them. If we do decide to remove expired entries, we can approach this in two different ways: Active cleanup In active cleanup, we will run a separate cleanup service which will periodically remove expired links from our storage and cache. This will be a very lightweight service like a cron job. Passive cleanup For passive cleanup, we can remove the entry when a user tries to access an expired link. This can ensure a lazy cleanup of our database and cache. ","date":"2022-10-04","objectID":"/system-design/:210:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cache Now let us talk about caching. Which cache eviction policy to use? As we discussed before, we can use solutions like Redis or Memcached and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs? Least Recently Used (LRU) can be a good policy for our system. In this policy, we discard the least recently used key first. How to handle cache miss? Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries. ","date":"2022-10-04","objectID":"/system-design/:210:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Metrics and Analytics Recording analytics and metrics is one of our extended requirements. We can store and update metadata like visitor’s country, platform, the number of views, etc alongside the URL entry in our database. ","date":"2022-10-04","objectID":"/system-design/:210:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Security For security, we can introduce private URLs and authorization. A separate table can be used to store user ids that have permission to access a specific URL. If a user does not have proper permissions, we can return an HTTP 401 (Unauthorized) error. We can also use an API Gateway as they can support capabilities like authorization, rate limiting, and load balancing out of the box. ","date":"2022-10-04","objectID":"/system-design/:210:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Let us identify and resolve bottlenecks such as single points of failure in our design: “What if the API service or Key Generation Service crashes?” “How will we distribute our traffic between our components?” “How can we reduce the load on our database?” “What if the key database used by KGS fails?” “How to improve the availability of our cache?” To make our system more resilient we can do the following: Running multiple instances of our Servers and Key Generation Service. Introducing load balancers between clients, servers, databases, and cache servers. Using multiple read replicas for our database as it’s a read-heavy system. Standby replica for our key database in case it fails. Multiple instances and replicas for our distributed cache. WhatsApp Let’s design a WhatsApp like instant messaging service, similar to services like WhatsApp, Facebook Messenger, and WeChat. ","date":"2022-10-04","objectID":"/system-design/:211:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is WhatsApp? WhatsApp is a chat application that provides instant messaging services to its users. It is one of the most used mobile applications on the planet connecting over 2 billion users in 180+ countries. WhatsApp is also available on the web. ","date":"2022-10-04","objectID":"/system-design/:212:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements Our system should meet the following requirements: ","date":"2022-10-04","objectID":"/system-design/:213:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements Should support one-on-one chat. Group chats (max 100 people). Should support file sharing (image, video, etc.). ","date":"2022-10-04","objectID":"/system-design/:213:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-functional requirements High availability with minimal latency. The system should be scalable and efficient. ","date":"2022-10-04","objectID":"/system-design/:213:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements Sent, Delivered, and Read receipts of the messages. Show the last seen time of users. Push notifications. ","date":"2022-10-04","objectID":"/system-design/:213:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Let’s start with the estimation and constraints. Note: Make sure to check any scale or traffic-related assumptions with your interviewer. ","date":"2022-10-04","objectID":"/system-design/:214:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Traffic Let us assume we have 50 million daily active users (DAU) and on average each user sends at least 10 messages to 4 different people every day. This gives us 2 billion messages per day. $$ 50 \\space million \\times 20 \\space messages = 2 \\space billion/day $$ Messages can also contain media such as images, videos, or other files. We can assume that 5 percent of messages are media files shared by the users, which gives us additional 200 million files we would need to store. $$ 5 \\space percent \\times 2 \\space billion = 200 \\space million/day $$ What would be Requests Per Second (RPS) for our system? 2 billion requests per day translate into 24K requests per second. $$ \\frac{2 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 24K \\space requests/second $$ ","date":"2022-10-04","objectID":"/system-design/:214:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage If we assume each message on average is 100 bytes, we will require about 200 GB of database storage every day. $$ 2 \\space billion \\times 100 \\space bytes = \\sim 200 \\space GB/day $$ As per our requirements, we also know that around 5 percent of our daily messages (100 million) are media files. If we assume each file is 50 KB on average, we will require 10 TB of storage every day. $$ 100 \\space million \\times 100 \\space KB = 10 \\space TB/day $$ And for 10 years, we will require about 38 PB of storage. $$ (10 \\space TB + 0.2 \\space TB) \\times 10 \\space years \\times 365 \\space days = \\sim 38 \\space PB $$ ","date":"2022-10-04","objectID":"/system-design/:214:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Bandwidth As our system is handling 10.2 TB of ingress every day, we will require a minimum bandwidth of around 120 MB per second. $$ \\frac{10.2 \\space TB}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 120 \\space MB/second $$ ","date":"2022-10-04","objectID":"/system-design/:214:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level estimate Here is our high-level estimate: Type Estimate Daily active users (DAU) 50 million Requests per second (RPS) 24K/s Storage (per day) ~10.2 TB Storage (10 years) ~38 PB Bandwidth ~120 MB/s ","date":"2022-10-04","objectID":"/system-design/:214:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design This is the general data model which reflects our requirements. We have the following tables: users This table will contain a user’s information such as name, phoneNumber, and other details. messages As the name suggests, this table will store messages with properties such as type (text, image, video, etc.), content, and timestamps for message delivery. The message will also have a corresponding chatID or groupID. chats This table basically represents a private chat between two users and can contain multiple messages. users_chats This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa. groups This table represents a group between multiple users. users_groups This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa. ","date":"2022-10-04","objectID":"/system-design/:215:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What kind of database should we use? While our data model seems quite relational, we don’t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck. We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as PostgreSQL or a distributed NoSQL database such as Apache Cassandra for our use case. ","date":"2022-10-04","objectID":"/system-design/:215:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Let us do a basic API design for our services: ","date":"2022-10-04","objectID":"/system-design/:216:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Get all chats or groups This API will get all chats or groups for a given userID. getAll(userID: UUID): Chat[] | Group[] Parameters User ID (UUID): ID of the current user. Returns Result (Chat[] | Group[]): All the chats and groups the user is a part of. ","date":"2022-10-04","objectID":"/system-design/:216:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Get messages Get all messages for a user given the channelID (chat or group id). getMessages(userID: UUID, channelID: UUID): Message[] Parameters User ID (UUID): ID of the current user. Channel ID (UUID): ID of the channel (chat or group) from which messages need to be retrieved. Returns Messages (Message[]): All the messages in a given chat or group. ","date":"2022-10-04","objectID":"/system-design/:216:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Send message Send a message from a user to a channel (chat or group). sendMessage(userID: UUID, channelID: UUID, message: Message): boolean Parameters User ID (UUID): ID of the current user. Channel ID (UUID): ID of the channel (chat or group) user wants to send a message to. Message (Message): The message (text, image, video, etc.) that the user wants to send. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:216:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Join or leave a group Send a message from a user to a channel (chat or group). joinGroup(userID: UUID, channelID: UUID): boolean leaveGroup(userID: UUID, channelID: UUID): boolean Parameters User ID (UUID): ID of the current user. Channel ID (UUID): ID of the channel (chat or group) the user wants to join or leave. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:216:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level design Now let us do a high-level design of our system. ","date":"2022-10-04","objectID":"/system-design/:217:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Architecture We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let’s try to divide our system into some core services. User Service This is an HTTP-based service that handles user-related concerns such as authentication and user information. Chat Service The chat service will use WebSockets and establish connections with the client to handle chat and group message-related functionality. We can also use cache to keep track of all the active connections sort of like sessions which will help us determine if the user is online or not. Notification Service This service will simply send push notifications to the users. It will be discussed in detail separately. Presence Service The presence service will keep track of the last seen status of all users. It will be discussed in detail separately. Media service This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately. What about inter-service communication and service discovery? Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using gRPC which is more lightweight and efficient. Service discovery is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services. Note: Learn more about REST, GraphQL, gRPC and how they compare with each other. ","date":"2022-10-04","objectID":"/system-design/:217:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Real-time messaging How do we efficiently send and receive messages? We have two different options: Pull model The client can periodically send an HTTP request to servers to check if there are any new messages. This can be achieved via something like Long polling. Push model The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use WebSockets or Server-Sent Events (SSE) for this. The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with WebSockets is a better choice because then we can push data to the client once it’s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike Server-Sent Events (SSE) which are only unidirectional. Note: Learn more about Long polling, WebSockets, Server-Sent Events (SSE). ","date":"2022-10-04","objectID":"/system-design/:217:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Last seen To implement the last seen functionality, we can use a heartbeat mechanism, where the client can periodically ping the servers indicating its liveness. Since this needs to be as low overhead as possible, we can store the last active timestamp in the cache as follows: Key Value User A 2022-07-01T14:32:50 User B 2022-07-05T05:10:35 User C 2022-07-10T04:33:25 This will give us the last time the user was active. This functionality will be handled by the presence service combined with Redis or Memcached as our cache. Another way to implement this is to track the latest action of the user, once the last activity crosses a certain threshold, such as “user hasn’t performed any action in the last 30 seconds”, we can show the user as offline and last seen with the last recorded timestamp. This will be more of a lazy update approach and might benefit us over heartbeat in certain cases. ","date":"2022-10-04","objectID":"/system-design/:217:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Notifications Once a message is sent in a chat or a group, we will first check if the recipient is active or not, we can get this information by taking the user’s active connection and last seen into consideration. If the recipient is not active, the chat service will add an event to a message queue with additional metadata such as the client’s device platform which will be used to route the notification to the correct platform later on. The notification service will then consume the event from the message queue and forward the request to Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) based on the client’s device platform (Android, iOS, web, etc). We can also add support for email and SMS. Why are we using a message queue? Since most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they’re sent and that a message is delivered at least once which is an important part of our service functionality. While this seems like a classic publish-subscribe use case, it is actually not as mobile devices and browsers each have their own way of handling push notifications. Usually, notifications are handled externally via Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) unlike message fan-out which we commonly see in backend services. We can use something like Amazon SQS or RabbitMQ to support this functionality. ","date":"2022-10-04","objectID":"/system-design/:217:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Read receipts Handling read receipts can be tricky, for this use case we can wait for some sort of Acknowledgment (ACK) from the client to determine if the message was delivered and update the corresponding deliveredAt field. Similarly, we will mark message the message seen once the user opens the chat and update the corresponding seenAt timestamp field. ","date":"2022-10-04","objectID":"/system-design/:217:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Design Now that we have identified some core components, let’s do the first draft of our system design. ","date":"2022-10-04","objectID":"/system-design/:217:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design It’s time to discuss our design decisions in detail. ","date":"2022-10-04","objectID":"/system-design/:218:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning To scale out our databases we will need to partition our data. Horizontal partitioning (aka Sharding) can be a good first step. We can use partitions schemes such as: Hash-Based Partitioning List-Based Partitioning Range Based Partitioning Composite Partitioning The above approaches can still cause uneven data and load distribution, we can solve this using Consistent hashing. For more details, refer to Sharding and Consistent Hashing. ","date":"2022-10-04","objectID":"/system-design/:218:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching In a messaging application, we have to be careful about using cache as our users expect the latest data, but many users will be requesting the same messages, especially in a group chat. So, to prevent usage spikes from our resources we can cache older messages. Some group chats can have thousands of messages and sending that over the network will be really inefficient, to improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won’t have to retrieve old messages unless requested. Which cache eviction policy to use? We can use solutions like Redis or Memcached and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs? Least Recently Used (LRU) can be a good policy for our system. In this policy, we discard the least recently used key first. How to handle cache miss? Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries. For more details, refer to Caching. ","date":"2022-10-04","objectID":"/system-design/:218:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Media access and storage As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files. But where can we store files at scale? Well, object storage is what we’re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as HDFS or GlusterFS. Fun fact: WhatsApp deletes media on its servers once it has been downloaded by the user. We can use object stores like Amazon S3, Azure Blob Storage, or Google Cloud Storage for this use case. ","date":"2022-10-04","objectID":"/system-design/:218:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Content Delivery Network (CDN) Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like Amazon CloudFront or Cloudflare CDN for this use case. ","date":"2022-10-04","objectID":"/system-design/:218:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API gateway Since we will be using multiple protocols like HTTP, WebSocket, TCP/IP, deploying multiple L4 (transport layer) or L7 (application layer) type load balancers separately for each protocol will be expensive. Instead, we can use an API Gateway that supports multiple protocols without any issues. API Gateway can also offer other features such as authentication, authorization, rate limiting, throttling, and API versioning which will improve the quality of our services. We can use services like Amazon API Gateway or Azure API Gateway for this use case. ","date":"2022-10-04","objectID":"/system-design/:218:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Let us identify and resolve bottlenecks such as single points of failure in our design: “What if one of our services crashes?” “How will we distribute our traffic between our components?” “How can we reduce the load on our database?” “How to improve the availability of our cache?” “Wouldn’t API Gateway be a single point of failure?” “How can we make our notification system more robust?” “How can we reduce media storage costs”? “Does chat service has too much responsibility?” To make our system more resilient we can do the following: Running multiple instances of each of our services. Introducing load balancers between clients, servers, databases, and cache servers. Using multiple read replicas for our databases. Multiple instances and replicas for our distributed cache. We can have a standby replica of our API Gateway. Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated message broker such as Apache Kafka or NATS to make our notification system more robust. We can add media processing and compression capabilities to the media service to compress large files similar to WhatsApp which will save a lot of storage space and reduce cost. We can create a group service separate from the chat service to further decouple our services. Twitter Let’s design a Twitter like social media service, similar to services like Facebook, Instagram, etc. ","date":"2022-10-04","objectID":"/system-design/:219:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is Twitter? Twitter is a social media service where users can read or post short messages (up to 280 characters) called tweets. It is available on the web and mobile platforms such as Android and iOS. ","date":"2022-10-04","objectID":"/system-design/:220:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements Our system should meet the following requirements: ","date":"2022-10-04","objectID":"/system-design/:221:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements Should be able to post new tweets (can be text, image, video, etc.). Should be able to follow other users. Should have a newsfeed feature consisting of tweets from the people the user is following. Should be able to search tweets. ","date":"2022-10-04","objectID":"/system-design/:221:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-Functional requirements High availability with minimal latency. The system should be scalable and efficient. ","date":"2022-10-04","objectID":"/system-design/:221:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements Metrics and analytics. Retweet functionality. Favorite tweets. ","date":"2022-10-04","objectID":"/system-design/:221:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Let’s start with the estimation and constraints. Note: Make sure to check any scale or traffic-related assumptions with your interviewer. ","date":"2022-10-04","objectID":"/system-design/:222:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Traffic This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user tweets 5 times a day. This gives us 1 billion tweets per day. $$ 200 \\space million \\times 5 \\space messages = 1 \\space billion/day $$ Tweets can also contain media such as images, or videos. We can assume that 10 percent of tweets are media files shared by the users, which gives us additional 100 million files we would need to store. $$ 10 \\space percent \\times 1 \\space billion = 100 \\space million/day $$ What would be Requests Per Second (RPS) for our system? 1 billion requests per day translate into 12K requests per second. $$ \\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 12K \\space requests/second $$ ","date":"2022-10-04","objectID":"/system-design/:222:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage If we assume each message on average is 100 bytes, we will require about 100 GB of database storage every day. $$ 1 \\space billion \\times 100 \\space bytes = \\sim 100 \\space GB/day $$ We also know that around 10 percent of our daily messages (100 million) are media files per our requirements. If we assume each file is 50 KB on average, we will require 5 TB of storage every day. $$ 100 \\space million \\times 100 \\space KB = 5 \\space TB/day $$ And for 10 years, we will require about 19 PB of storage. $$ (5 \\space TB + 0.1 \\space TB) \\times 365 \\space days \\times 10 \\space years = \\sim 19 \\space PB $$ ","date":"2022-10-04","objectID":"/system-design/:222:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Bandwidth As our system is handling 5.1 TB of ingress every day, we will require a minimum bandwidth of around 60 MB per second. $$ \\frac{5.1 \\space TB}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 60 \\space MB/second $$ ","date":"2022-10-04","objectID":"/system-design/:222:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level estimate Here is our high-level estimate: Type Estimate Daily active users (DAU) 100 million Requests per second (RPS) 12K/s Storage (per day) ~5.1 TB Storage (10 years) ~19 PB Bandwidth ~60 MB/s ","date":"2022-10-04","objectID":"/system-design/:222:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design This is the general data model which reflects our requirements. We have the following tables: users This table will contain a user’s information such as name, email, dob, and other details. tweets As the name suggests, this table will store tweets and their properties such as type (text, image, video, etc.), content, etc. We will also store the corresponding userID. favorites This table maps tweets with users for the favorite tweets functionality in our application. followers This table maps the followers and followees as users can follow each other (N:M relationship). feeds This table stores feed properties with the corresponding userID. feeds_tweets This table maps tweets and feed (N:M relationship). ","date":"2022-10-04","objectID":"/system-design/:223:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What kind of database should we use? While our data model seems quite relational, we don’t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck. We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as PostgreSQL or a distributed NoSQL database such as Apache Cassandra for our use case. ","date":"2022-10-04","objectID":"/system-design/:223:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Let us do a basic API design for our services: ","date":"2022-10-04","objectID":"/system-design/:224:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Post a tweet This API will allow the user to post a tweet on the platform. postTweet(userID: UUID, content: string, mediaURL?: string): boolean Parameters User ID (UUID): ID of the user. Content (string): Contents of the tweet. Media URL (string): URL of the attached media (optional). Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:224:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Follow or unfollow a user This API will allow the user to follow or unfollow another user. follow(followerID: UUID, followeeID: UUID): boolean unfollow(followerID: UUID, followeeID: UUID): boolean Parameters Follower ID (UUID): ID of the current user. Followee ID (UUID): ID of the user we want to follow or unfollow. Media URL (string): URL of the attached media (optional). Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:224:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Get newsfeed This API will return all the tweets to be shown within a given newsfeed. getNewsfeed(userID: UUID): Tweet[] Parameters User ID (UUID): ID of the user. Returns Tweets (Tweet[]): All the tweets to be shown within a given newsfeed. ","date":"2022-10-04","objectID":"/system-design/:224:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level design Now let us do a high-level design of our system. ","date":"2022-10-04","objectID":"/system-design/:225:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Architecture We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let’s try to divide our system into some core services. User Service This service handles user-related concerns such as authentication and user information. Newsfeed Service This service will handle the generation and publishing of user newsfeeds. It will be discussed in detail separately. Tweet Service The tweet service will handle tweet-related use cases such as posting a tweet, favorites, etc. Search Service The service is responsible for handling search-related functionality. It will be discussed in detail separately. Media service This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately. Notification Service This service will simply send push notifications to the users. Analytics Service This service will be used for metrics and analytics use cases. What about inter-service communication and service discovery? Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using gRPC which is more lightweight and efficient. Service discovery is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services. Note: Learn more about REST, GraphQL, gRPC and how they compare with each other. ","date":"2022-10-04","objectID":"/system-design/:225:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Newsfeed When it comes to the newsfeed, it seems easy enough to implement, but there are a lot of things that can make or break this feature. So, let’s divide our problem into two parts: Generation Let’s assume we want to generate the feed for user A, we will perform the following steps: Retrieve the IDs of all the users and entities (hashtags, topics, etc.) user A follows. Fetch the relevant tweets for each of the retrieved IDs. Use a ranking algorithm to rank the tweets based on parameters such as relevance, time, engagement, etc. Return the ranked tweets data to the client in a paginated manner. Feed generation is an intensive process and can take quite a lot of time, especially for users following a lot of people. To improve the performance, the feed can be pre-generated and stored in the cache, then we can have a mechanism to periodically update the feed and apply our ranking algorithm to the new tweets. Publishing Publishing is the step where the feed data is pushed according to each specific user. This can be a quite heavy operation, as a user may have millions of friends or followers. To deal with this, we have three different approaches: Pull Model (or Fan-out on load) When a user creates a tweet, and a follower reloads their newsfeed, the feed is created and stored in memory. The most recent feed is only loaded when the user requests it. This approach reduces the number of write operations on our database. The downside of this approach is that the users will not be able to view recent feeds unless they “pull” the data from the server, which will increase the number of read operations on the server. Push Model (or Fan-out on write) In this model, once a user creates a tweet, it is “pushed” to all the follower’s feeds immediately. This prevents the system from having to go through a user’s entire followers list to check for updates. However, the downside of this approach is that it would increase the number of write operations on the database. Hybrid Model A third approach is a hybrid model between the pull and push model. It combines the beneficial features of the above two models and tries to provide a balanced approach between the two. The hybrid model allows only users with a lesser number of followers to use the push model and for users with a higher number of followers celebrities, the pull model will be used. ","date":"2022-10-04","objectID":"/system-design/:225:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Ranking Algorithm As we discussed, we will need a ranking algorithm to rank each tweet according to its relevance to each specific user. For example, Facebook used to utilize an EdgeRank algorithm, here, the rank of each feed item is described by: $$ Rank = Affinity \\times Weight \\times Decay $$ Where, Affinity: is the “closeness” of the user to the creator of the edge. If a user frequently likes, comments, or messages the edge creator, then the value of affinity will be higher, resulting in a higher rank for the post. Weight: is the value assigned according to each edge. A comment can have a higher weightage than likes, and thus a post with more comments is more likely to get a higher rank. Decay: is the measure of the creation of the edge. The older the edge, the lesser will be the value of decay and eventually the rank. Nowadays, algorithms are much more complex and ranking is done using machine learning models which can take thousands of factors into consideration. ","date":"2022-10-04","objectID":"/system-design/:225:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Retweets Retweets are one of our extended requirements. To implement this feature we can simply create a new tweet with the user id of the user retweeting the original tweet and then modify the type enum and content property of the new tweet to link it with the original tweet. For example, the type enum property can be of type tweet, similar to text, video, etc and content can be the id of the original tweet. Here the first row indicates the original tweet while the second row is how we can represent a retweet. id userID type content createdAt ad34-291a-45f6-b36c 7a2c-62c4-4dc8-b1bb text Hey, this is my first tweet… 1658905644054 f064-49ad-9aa2-84a6 6aa2-2bc9-4331-879f tweet ad34-291a-45f6-b36c 1658906165427 This is a very basic implementation, to improve this we can create a separate table itself to store retweets. ","date":"2022-10-04","objectID":"/system-design/:225:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Search Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. Elasticsearch can help us with this use case. Elasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of Apache Lucene. How do we identify trending topics? Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries, hashtags, and topics in the last N seconds and update them every M seconds using some sort of batch job mechanism. Our ranking algorithm can also be applied to the trending topics to give them more weight and personalize them for the user. ","date":"2022-10-04","objectID":"/system-design/:225:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Notifications Push notifications are an integral part of any social media platform. We can use a message queue or a message broker such as Apache Kafka with the notification service to dispatch requests to Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) which will handle the delivery of the push notifications to user devices. For more details, refer to the WhatsApp system design where we discuss push notifications. ","date":"2022-10-04","objectID":"/system-design/:225:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design It’s time to discuss our design decisions in detail. ","date":"2022-10-04","objectID":"/system-design/:226:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning To scale out our databases we will need to partition our data. Horizontal partitioning (aka Sharding) can be a good first step. We can use partitions schemes such as: Hash-Based Partitioning List-Based Partitioning Range Based Partitioning Composite Partitioning The above approaches can still cause uneven data and load distribution, we can solve this using Consistent hashing. For more details, refer to Sharding and Consistent Hashing. ","date":"2022-10-04","objectID":"/system-design/:226:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Mutual friends For mutual friends, we can build a social graph for every user. Each node in the graph will represent a user and a directional edge will represent followers and followees. After that, we can traverse the followers of a user to find and suggest a mutual friend. This would require a graph database such as Neo4j and ArangoDB. This is a pretty simple algorithm, to improve our suggestion accuracy, we will need to incorporate a recommendation model which uses machine learning as part of our algorithm. ","date":"2022-10-04","objectID":"/system-design/:226:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Metrics and Analytics Recording analytics and metrics is one of our extended requirements. As we will be using Apache Kafka to publish all sorts of events, we can process these events and run analytics on the data using Apache Spark which is an open-source unified analytics engine for large-scale data processing. ","date":"2022-10-04","objectID":"/system-design/:226:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching In a social media application, we have to be careful about using cache as our users expect the latest data. So, to prevent usage spikes from our resources we can cache the top 20% of the tweets. To further improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won’t have to retrieve old messages unless requested. Which cache eviction policy to use? We can use solutions like Redis or Memcached and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs? Least Recently Used (LRU) can be a good policy for our system. In this policy, we discard the least recently used key first. How to handle cache miss? Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries. For more details, refer to Caching. ","date":"2022-10-04","objectID":"/system-design/:226:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Media access and storage As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files. But where can we store files at scale? Well, object storage is what we’re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as HDFS or GlusterFS. ","date":"2022-10-04","objectID":"/system-design/:226:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Content Delivery Network (CDN) Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like Amazon CloudFront or Cloudflare CDN for this use case. ","date":"2022-10-04","objectID":"/system-design/:226:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Let us identify and resolve bottlenecks such as single points of failure in our design: “What if one of our services crashes?” “How will we distribute our traffic between our components?” “How can we reduce the load on our database?” “How to improve the availability of our cache?” “How can we make our notification system more robust?” “How can we reduce media storage costs”? To make our system more resilient we can do the following: Running multiple instances of each of our services. Introducing load balancers between clients, servers, databases, and cache servers. Using multiple read replicas for our databases. Multiple instances and replicas for our distributed cache. Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated message broker such as Apache Kafka or NATS to make our notification system more robust. We can add media processing and compression capabilities to the media service to compress large files which will save a lot of storage space and reduce cost. Netflix Let’s design a Netflix like video streaming service, similar to services like Amazon Prime Video, Disney Plus, Hulu, Youtube, Vimeo, etc. ","date":"2022-10-04","objectID":"/system-design/:227:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is Netflix? Netflix is a subscription-based streaming service that allows its members to watch TV shows and movies on an internet-connected device. It is available on platforms such as the Web, iOS, Android, TV, etc. ","date":"2022-10-04","objectID":"/system-design/:228:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements Our system should meet the following requirements: ","date":"2022-10-04","objectID":"/system-design/:229:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements Users should be able to stream and share videos. The content team (or users in YouTube’s case) should be able to upload new videos (movies, tv shows episodes, and other content). Users should be able to search for videos using titles or tags. Users should be able to comment on a video similar to YouTube. ","date":"2022-10-04","objectID":"/system-design/:229:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-Functional requirements High availability with minimal latency. High reliability, no uploads should be lost. The system should be scalable and efficient. ","date":"2022-10-04","objectID":"/system-design/:229:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements Certain content should be geo-blocked. Resume video playback from the point user left off. Record metrics and analytics of videos. ","date":"2022-10-04","objectID":"/system-design/:229:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Let’s start with the estimation and constraints. Note: Make sure to check any scale or traffic-related assumptions with your interviewer. ","date":"2022-10-04","objectID":"/system-design/:230:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Traffic This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user watches 5 videos a day. This gives us 1 billion videos watched per day. $$ 200 \\space million \\times 5 \\space videos = 1 \\space billion/day $$ Assuming, a 200:1 read/write ratio, about 50 million videos will be uploaded every day. $$ \\frac{1}{200} \\times 1 \\space billion = 50 \\space million/day $$ What would be Requests Per Second (RPS) for our system? 1 billion requests per day translate into 12K requests per second. $$ \\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 12K \\space requests/second $$ ","date":"2022-10-04","objectID":"/system-design/:230:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage If we assume each video is 100 MB on average, we will require about 5 PB of storage every day. $$ 50 \\space million \\times 100 \\space MB = 5 \\space PB/day $$ And for 10 years, we will require an astounding 18,250 PB of storage. $$ 5 \\space PB \\times 365 \\space days \\times 10 \\space years = \\sim 18,250 \\space PB $$ ","date":"2022-10-04","objectID":"/system-design/:230:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Bandwidth As our system is handling 5 PB of ingress every day, we will require a minimum bandwidth of around 58 GB per second. $$ \\frac{5 \\space PB}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 58 \\space GB/second $$ ","date":"2022-10-04","objectID":"/system-design/:230:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level estimate Here is our high-level estimate: Type Estimate Daily active users (DAU) 200 million Requests per second (RPS) 12K/s Storage (per day) ~5 PB Storage (10 years) ~18,250 PB Bandwidth ~58 GB/s ","date":"2022-10-04","objectID":"/system-design/:230:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design This is the general data model which reflects our requirements. We have the following tables: users This table will contain a user’s information such as name, email, dob, and other details. videos As the name suggests, this table will store videos and their properties such as title, streamURL, tags, etc. We will also store the corresponding userID. tags This table will simply store tags associated with a video. views This table helps us to store all the views received on a video. comments This table stores all the comments received on a video (like YouTube). ","date":"2022-10-04","objectID":"/system-design/:231:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What kind of database should we use? While our data model seems quite relational, we don’t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck. We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as PostgreSQL or a distributed NoSQL database such as Apache Cassandra for our use case. ","date":"2022-10-04","objectID":"/system-design/:231:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Let us do a basic API design for our services: ","date":"2022-10-04","objectID":"/system-design/:232:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Upload a video Given a byte stream, this API enables video to be uploaded to our service. uploadVideo(title: string, description: string, data: Stream\u003cbyte\u003e, tags?: string[]): boolean Parameters Title (string): Title of the new video. Description (string): Description of the new video. Data (Byte[]): Byte stream of the video data. Tags (string[]): Tags for the video (optional). Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:232:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Streaming a video This API allows our users to stream a video with the preferred codec and resolution. streamVideo(videoID: UUID, codec: Enum\u003cstring\u003e, resolution: Tuple\u003cint\u003e, offset?: int): VideoStream Parameters Video ID (UUID): ID of the video that needs to be streamed. Codec (Enum\u003cstring\u003e): Required codec of the requested video, such as h.265, h.264, VP9, etc. Resolution (Tuple\u003cint\u003e): Resolution of the requested video. Offset (int): Offset of the video stream in seconds to stream data from any point in the video (optional). Returns Stream (VideoStream): Data stream of the requested video. ","date":"2022-10-04","objectID":"/system-design/:232:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Search for a video This API will enable our users to search for a video based on its title or tags. searchVideo(query: string, nextPage?: string): Video[] Parameters Query (string): Search query from the user. Next Page (string): Token for the next page, this can be used for pagination (optional). Returns Videos (Video[]): All the videos available for a particular search query. ","date":"2022-10-04","objectID":"/system-design/:232:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Add a comment This API will allow our users to post a comment on a video (like YouTube). comment(videoID: UUID, comment: string): boolean Parameters VideoID (UUID): ID of the video user wants to comment on. Comment (string): The text content of the comment. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:232:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level design Now let us do a high-level design of our system. ","date":"2022-10-04","objectID":"/system-design/:233:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Architecture We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let’s try to divide our system into some core services. User Service This service handles user-related concerns such as authentication and user information. Stream Service The tweet service will handle video streaming-related functionality. Search Service The service is responsible for handling search-related functionality. It will be discussed in detail separately. Media service This service will handle the video uploads and processing. It will be discussed in detail separately. Analytics Service This service will be used for metrics and analytics use cases. What about inter-service communication and service discovery? Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using gRPC which is more lightweight and efficient. Service discovery is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services. Note: Learn more about REST, GraphQL, gRPC and how they compare with each other. ","date":"2022-10-04","objectID":"/system-design/:233:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Video processing There are so many variables in play when it comes to processing a video. For example, an average data size of two-hour raw 8K footage from a high-end camera can easily be up to 4 TB, thus we need to have some kind of processing to reduce both storage and delivery costs. Here’s how we can process videos once they’re uploaded by the content team (or users in YouTube’s case) and are queued for processing in our message queue. Let’s discuss how this works: File Chunker This is the first step of our processing pipeline. File chunking is the process of splitting a file into smaller pieces called chunks. It can help us eliminate duplicate copies of repeating data on storage, and reduces the amount of data sent over the network by only selecting changed chunks. Usually, a video file can be split into equal size chunks based on timestamps but Netflix instead splits chunks based on scenes, this slight variation becomes a huge factor for a better user experience as whenever the client requests a chunk from the server, there is a lower chance of interruption as a complete scene will be retrieved. Content Filter This step checks if the video adheres to the content policy of the platform, this can be pre-approved in the case of Netflix as per the content rating of the media or can be strictly enforced like YouTube. This entire step is done by a machine learning model which performs copyright, piracy, and NSFW checks. If issues are found, we can push the task to a dead-letter queue (DLQ) and someone from the moderation team can do further inspection. Transcoder Transcoding is a process in which the original data is decoded to an intermediate uncompressed format, which is then encoded into the target format. This process uses different codecs to perform bitrate adjustment, image downsampling, or re-encoding the media. This results in a smaller size file and a much more optimized format for the target devices. Standalone solutions such as FFmpeg or cloud-based solutions like AWS Elemental MediaConvert can be used to implement this step of the pipeline. Quality Conversion This is the last step of the processing pipeline and as the name suggests, this step handles the conversion of the transcoded media from the previous step into different resolutions such as 4K, 1440p, 1080p, 720p, etc. This allows us to fetch the desired quality of the video as per the user’s request, and once the media file finishes processing, it will be uploaded to a distributed file storage such as HDFS, GlusterFS, or an object storage such as Amazon S3 for later retrieval during streaming. Note: We can add additional steps such as subtitles and thumbnails generation as part of our pipeline. Why are we using a message queue? Processing videos as a long-running task makes much more sense, and a message queue also decouples our video processing pipeline from the uploads functionality. We can use something like Amazon SQS or RabbitMQ to support this. ","date":"2022-10-04","objectID":"/system-design/:233:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Video streaming Video streaming is a challenging task from both the client and server perspectives. Moreover, internet connection speeds vary quite a lot between different users. To make sure users don’t re-fetch the same content, we can use a Content Delivery Network (CDN). Netflix takes this a step further with its Open Connect program. In this approach, they partner with thousands of Internet Service Providers (ISPs) to localize their traffic and deliver their content more efficiently. What is the difference between Netflix’s Open Connect and a traditional Content Delivery Network (CDN)? Netflix Open Connect is our purpose-built Content Delivery Network (CDN) responsible for serving Netflix’s video traffic. Around 95% of the traffic globally is delivered via direct connections between Open Connect and the ISPs their customers use to access the internet. Currently, they have Open Connect Appliances (OCAs) in over 1000 separate locations around the world. In case of issues, Open Connect Appliances (OCAs) can failover, and the traffic can be re-routed to Netflix servers. Additionally, we can use Adaptive bitrate streaming protocols such as HTTP Live Streaming (HLS) which is designed for reliability and it dynamically adapts to network conditions by optimizing playback for the available speed of the connections. Lastly, for playing the video from where the user left off (part of our extended requirements), we can simply use the offset property we stored in the views table to retrieve the scene chunk at that particular timestamp and resume the playback for the user. ","date":"2022-10-04","objectID":"/system-design/:233:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Searching Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. Elasticsearch can help us with this use case. Elasticsearch is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of Apache Lucene. How do we identify trending content? Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries in the last N seconds and update them every M seconds using some sort of batch job mechanism. ","date":"2022-10-04","objectID":"/system-design/:233:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Sharing Sharing content is an important part of any platform, for this, we can have some sort of URL shortener service in place that can generate short URLs for the users to share. For more details, refer to the URL Shortener system design. ","date":"2022-10-04","objectID":"/system-design/:233:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design It’s time to discuss our design decisions in detail. ","date":"2022-10-04","objectID":"/system-design/:234:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning To scale out our databases we will need to partition our data. Horizontal partitioning (aka Sharding) can be a good first step. We can use partitions schemes such as: Hash-Based Partitioning List-Based Partitioning Range Based Partitioning Composite Partitioning The above approaches can still cause uneven data and load distribution, we can solve this using Consistent hashing. For more details, refer to Sharding and Consistent Hashing. ","date":"2022-10-04","objectID":"/system-design/:234:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Geo-blocking Platforms like Netflix and YouTube use Geo-blocking to restrict content in certain geographical areas or countries. This is primarily done due to legal distribution laws that Netflix has to adhere to when they make a deal with the production and distribution companies. In the case of YouTube, this will be controlled by the user during the publishing of the content. We can determine the user’s location either using their IP or region settings in their profile then use services like Amazon CloudFront which supports a geographic restrictions feature or a geolocation routing policy with Amazon Route53 to restrict the content and re-route the user to an error page if the content is not available in that particular region or country. ","date":"2022-10-04","objectID":"/system-design/:234:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Recommendations Netflix uses a machine learning model which uses the user’s viewing history to predict what the user might like to watch next, an algorithm like Collaborative Filtering can be used. However, Netflix (like YouTube) uses its own algorithm called Netflix Recommendation Engine which can track several data points such as: User profile information like age, gender, and location. Browsing and scrolling behavior of the user. Time and date a user watched a title. The device which was used to stream the content. The number of searches and what terms were searched. For more detail, refer to Netflix recommendation research. ","date":"2022-10-04","objectID":"/system-design/:234:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Metrics and Analytics Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using Apache Spark which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data. ","date":"2022-10-04","objectID":"/system-design/:234:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching In a streaming platform, caching is important. We have to be able to cache as much static media content as possible to improve user experience. We can use solutions like Redis or Memcached but what kind of cache eviction policy would best fit our needs? Which cache eviction policy to use? Least Recently Used (LRU) can be a good policy for our system. In this policy, we discard the least recently used key first. How to handle cache miss? Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries. For more details, refer to Caching. ","date":"2022-10-04","objectID":"/system-design/:234:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Media streaming and storage As most of our storage space will be used for storing media files such as thumbnails and videos. Per our discussion earlier, the media service will be handling both the upload and processing of media files. We will use distributed file storage such as HDFS, GlusterFS, or an object storage such as Amazon S3 for storage and streaming of the content. ","date":"2022-10-04","objectID":"/system-design/:234:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Content Delivery Network (CDN) Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like Amazon CloudFront or Cloudflare CDN for this use case. ","date":"2022-10-04","objectID":"/system-design/:234:7","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Let us identify and resolve bottlenecks such as single points of failure in our design: “What if one of our services crashes?” “How will we distribute our traffic between our components?” “How can we reduce the load on our database?” “How to improve the availability of our cache?” To make our system more resilient we can do the following: Running multiple instances of each of our services. Introducing load balancers between clients, servers, databases, and cache servers. Using multiple read replicas for our databases. Multiple instances and replicas for our distributed cache. Uber Let’s design an Uber like ride-hailing service, similar to services like Lyft, OLA Cabs, etc. ","date":"2022-10-04","objectID":"/system-design/:235:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What is Uber? Uber is a mobility service provider, allowing users to book rides and a driver to transport them in a way similar to a taxi. It is available on the web and mobile platforms such as Android and iOS. ","date":"2022-10-04","objectID":"/system-design/:236:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Requirements Our system should meet the following requirements: ","date":"2022-10-04","objectID":"/system-design/:237:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Functional requirements We will design our system for two types of users: Customers and Drivers. Customers Customers should be able to see all the cabs in the vicinity with an ETA and pricing information. Customers should be able to book a cab to a destination. Customers should be able to see the location of the driver. Drivers Drivers should be able to accept or deny the customer requested ride. Once a driver accepts the ride, they should see the pickup location of the customer. Drivers should be able to mark the trip as complete on reaching the destination. ","date":"2022-10-04","objectID":"/system-design/:237:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Non-Functional requirements High reliability. High availability with minimal latency. The system should be scalable and efficient. ","date":"2022-10-04","objectID":"/system-design/:237:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Extended requirements Customers can rate the trip after it’s completed. Payment processing. Metrics and analytics. ","date":"2022-10-04","objectID":"/system-design/:237:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Estimation and Constraints Let’s start with the estimation and constraints. Note: Make sure to check any scale or traffic-related assumptions with your interviewer. ","date":"2022-10-04","objectID":"/system-design/:238:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Traffic Let us assume we have 100 million daily active users (DAU) with 1 million drivers and on average our platform enables 10 million rides daily. If on average each user performs 10 actions (such as request a check available rides, fares, book rides, etc.) we will have to handle 1 billion requests daily. $$ 100 \\space million \\times 10 \\space actions = 1 \\space billion/day $$ What would be Requests Per Second (RPS) for our system? 1 billion requests per day translate into 12K requests per second. $$ \\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 12K \\space requests/second $$ ","date":"2022-10-04","objectID":"/system-design/:238:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Storage If we assume each message on average is 400 bytes, we will require about 400 GB of database storage every day. $$ 1 \\space billion \\times 400 \\space bytes = \\sim 400 \\space GB/day $$ And for 10 years, we will require about 1.4 PB of storage. $$ 400 \\space GB \\times 10 \\space years \\times 365 \\space days = \\sim 1.4 \\space PB $$ ","date":"2022-10-04","objectID":"/system-design/:238:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Bandwidth As our system is handling 400 GB of ingress every day, we will require a minimum bandwidth of around 4 MB per second. $$ \\frac{400 \\space GB}{(24 \\space hrs \\times 3600 \\space seconds)} = \\sim 5 \\space MB/second $$ ","date":"2022-10-04","objectID":"/system-design/:238:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level estimate Here is our high-level estimate: Type Estimate Daily active users (DAU) 100 million Requests per second (RPS) 12K/s Storage (per day) ~400 GB Storage (10 years) ~1.4 PB Bandwidth ~5 MB/s ","date":"2022-10-04","objectID":"/system-design/:238:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data model design This is the general data model which reflects our requirements. We have the following tables: customers This table will contain a customer’s information such as name, email, and other details. drivers This table will contain a driver’s information such as name, email, dob and other details. trips This table represents the trip taken by the customer and stores data such as source, destination, and status of the trip. cabs This table stores data such as the registration number, and type (like Uber Go, Uber XL, etc.) of the cab that the driver will be driving. ratings As the name suggests, this table stores the rating and feedback for the trip. payments The payments table contains the payment-related data with the corresponding tripID. ","date":"2022-10-04","objectID":"/system-design/:239:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"What kind of database should we use? While our data model seems quite relational, we don’t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck. We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as PostgreSQL or a distributed NoSQL database such as Apache Cassandra for our use case. ","date":"2022-10-04","objectID":"/system-design/:239:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"API design Let us do a basic API design for our services: ","date":"2022-10-04","objectID":"/system-design/:240:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Request a Ride Through this API, customers will be able to request a ride. requestRide(customerID: UUID, source: Tuple\u003cfloat\u003e, destination: Tuple\u003cfloat\u003e, cabType: Enum\u003cstring\u003e, paymentMethod: Enum\u003cstring\u003e): Ride Parameters Customer ID (UUID): ID of the customer. Source (Tuple\u003cfloat\u003e): Tuple containing the latitude and longitude of the trip’s starting location. Destination (Tuple\u003cfloat\u003e): Tuple containing the latitude and longitude of the trip’s destination. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:240:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Cancel the Ride This API will allow customers to cancel the ride. cancelRide(customerID: UUID, reason?: string): boolean Parameters Customer ID (UUID): ID of the customer. Reason (UUID): Reason for canceling the ride (optional). Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:240:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Accept or Deny the Ride This API will allow the driver to accept or deny the trip. acceptRide(driverID: UUID, rideID: UUID): boolean denyRide(driverID: UUID, rideID: UUID): boolean Parameters Driver ID (UUID): ID of the driver. Ride ID (UUID): ID of the customer requested ride. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:240:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Start or End the Trip Using this API, a driver will be able to start and end the trip. startTrip(driverID: UUID, tripID: UUID): boolean endTrip(driverID: UUID, tripID: UUID): boolean Parameters Driver ID (UUID): ID of the driver. Trip ID (UUID): ID of the requested trip. Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:240:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Rate the Trip This API will enable customers to rate the trip. rateTrip(customerID: UUID, tripID: UUID, rating: int, feedback?: string): boolean Parameters Customer ID (UUID): ID of the customer. Trip ID (UUID): ID of the completed trip. Rating (int): Rating of the trip. Feedback (string): Feedback about the trip by the customer (optional). Returns Result (boolean): Represents whether the operation was successful or not. ","date":"2022-10-04","objectID":"/system-design/:240:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"High-level design Now let us do a high-level design of our system. ","date":"2022-10-04","objectID":"/system-design/:241:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Architecture We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let’s try to divide our system into some core services. Customer Service This service handles customer-related concerns such as authentication and customer information. Driver Service This service handles driver-related concerns such as authentication and driver information. Ride Service This service will be responsible for ride matching and quadtree aggregation. It will be discussed in detail separately. Trip Service This service handles trip-related functionality in our system. Payment Service This service will be responsible for handling payments in our system. Notification Service This service will simply send push notifications to the users. It will be discussed in detail separately. Analytics Service This service will be used for metrics and analytics use cases. What about inter-service communication and service discovery? Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using gRPC which is more lightweight and efficient. Service discovery is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services. Note: Learn more about REST, GraphQL, gRPC and how they compare with each other. ","date":"2022-10-04","objectID":"/system-design/:241:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"How is the service expected to work? Here’s how our service is expected to work: Customer requests a ride by specifying the source, destination, cab type, payment method, etc. Ride service registers this request, finds nearby drivers, and calculates the estimated time of arrival (ETA). The request is then broadcasted to the nearby drivers for them to accept or deny. If the driver accepts, the customer is notified about the live location of the driver with the estimated time of arrival (ETA) while they wait for pickup. The customer is picked up and the driver can start the trip. Once the destination is reached, the driver will mark the ride as complete and collect payment. After the payment is complete, the customer can leave a rating and feedback for the trip if they like. ","date":"2022-10-04","objectID":"/system-design/:241:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Location Tracking How do we efficiently send and receive live location data from the client (customers and drivers) to our backend? We have two different options: Pull model The client can periodically send an HTTP request to servers to report its current location and receive ETA and pricing information. This can be achieved via something like Long polling. Push model The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use WebSockets or Server-Sent Events (SSE) for this. The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with WebSockets is a better choice because then we can push data to the client once it’s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike Server-Sent Events (SSE) which are only unidirectional. Additionally, the client application should have some sort of background job mechanism to ping GPS location while the application is in the background. Note: Learn more about Long polling, WebSockets, Server-Sent Events (SSE). ","date":"2022-10-04","objectID":"/system-design/:241:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Ride Matching We need a way to efficiently store and query nearby drivers. Let’s explore different solutions we can incorporate into our design. SQL We already have access to the latitude and longitude of our customers, and with databases like PostgreSQL and MySQL we can perform a query to find nearby driver locations given a latitude and longitude (X, Y) within a radius (R). SELECT * FROM locations WHERE lat BETWEEN X-R AND X+R AND long BETWEEN Y-R AND Y+R However, this is not scalable, and performing this query on large datasets will be quite slow. Geohashing Geohashing is a geocoding method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by Gustavo Niemeyer in 2008. Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell. For example, San Francisco with coordinates 37.7564, -122.4016 can be represented in geohash as 9q8yy9mf. Now, using the customer’s geohash we can determine the nearest available driver by simply comparing it with the driver’s geohash. For better performance, we will index and store the geohash of the driver in memory for faster retrieval. Quadtrees A Quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of Octrees which are used to partition three-dimensional space. Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates. We can save further computation by only subdividing a node after a certain threshold. Quadtree seems perfect for our use case, we can update the Quadtree every time we receive a new location update from the driver. To reduce the load on the quadtree servers we can use an in-memory datastore such as Redis to cache the latest updates. And with the application of mapping algorithms such as the Hilbert curve, we can perform efficient range queries to find nearby drivers for the customer. What about race conditions? Race conditions can easily occur when a large number of customers will be requesting rides simultaneously. To avoid this, we can wrap our ride matching logic in a Mutex to avoid any race conditions. Furthermore, every action should be transactional in nature. For more details, refer to Transactions and Distributed Transactions. How to find the best drivers nearby? Once we have a list of nearby drivers from the Quadtree servers, we can perform some sort of ranking based on parameters like average ratings, relevance, past customer feedback, etc. This will allow us to broadcast notifications to the best available drivers first. Dealing with high demand In cases of high demand, we can use the concept of Surge Pricing. Surge pricing is a dynamic pricing method where prices are temporarily increased as a reaction to increased demand and mostly limited supply. This surge price can be added to the base price of the trip. For more details, learn how surge pricing works with Uber. ","date":"2022-10-04","objectID":"/system-design/:241:4","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Payments Handling payments at scale is challenging, to simplify our system we can use a third-party payment processor like Stripe or PayPal. Once the payment is complete, the payment processor will redirect the user back to our application and we can set up a webhook to capture all the payment-related data. ","date":"2022-10-04","objectID":"/system-design/:241:5","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Notifications Push notifications will be an integral part of our platform. We can use a message queue or a message broker such as Apache Kafka with the notification service to dispatch requests to Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) which will handle the delivery of the push notifications to user devices. For more details, refer to the WhatsApp system design where we discuss push notifications. ","date":"2022-10-04","objectID":"/system-design/:241:6","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Detailed design It’s time to discuss our design decisions in detail. ","date":"2022-10-04","objectID":"/system-design/:242:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Data Partitioning To scale out our databases we will need to partition our data. Horizontal partitioning (aka Sharding) can be a good first step. We can shard our database either based on existing partition schemes or regions. If we divide the locations into regions using let’s say zip codes, we can effectively store all the data in a given region on a fixed node. But this can still cause uneven data and load distribution, we can solve this using Consistent hashing. For more details, refer to Sharding and Consistent Hashing. ","date":"2022-10-04","objectID":"/system-design/:242:1","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Metrics and Analytics Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using Apache Spark which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data. ","date":"2022-10-04","objectID":"/system-design/:242:2","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Caching In a location services-based platform, caching is important. We have to be able to cache the recent locations of the customers and drivers for fast retrieval. We can use solutions like Redis or Memcached but what kind of cache eviction policy would best fit our needs? Which cache eviction policy to use? Least Recently Used (LRU) can be a good policy for our system. In this policy, we discard the least recently used key first. How to handle cache miss? Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries. For more details, refer to Caching. ","date":"2022-10-04","objectID":"/system-design/:242:3","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"},{"categories":["system-design","coding-interview"],"content":"Identify and resolve bottlenecks Let us identify and resolve bottlenecks such as single points of failure in our design: “What if one of our services crashes?” “How will we distribute our traffic between our components?” “How can we reduce the load on our database?” “How to improve the availability of our cache?” “How can we make our notification system more robust?” To make our system more resilient we can do the following: Running multiple instances of each of our services. Introducing load balancers between clients, servers, databases, and cache servers. Using multiple read replicas for our databases. Multiple instances and replicas for our distributed cache. Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated message broker such as Apache Kafka or NATS to make our notification system more robust. Next Steps Congratulations, you’ve finished the course! Now that you know the fundamentals of System Design, here are some additional resources: Distributed Systems (by Dr. Martin Kleppmann) System Design Interview: An Insider’s Guide Microservices (by Chris Richardson) Serverless computing Kubernetes It is also recommended to actively follow engineering blogs of companies putting what we learned in the course into practice at scale: Microsoft Engineering Google Research Blog Netflix Tech Blog AWS Blog Facebook Engineering Uber Engineering Blog Airbnb Engineering GitHub Engineering Blog Intel Software Blog LinkedIn Engineering Paypal Developer Blog Twitter Engineering Last but not least, volunteer for new projects at your company, and learn from senior engineers and architects to further improve your system design skills. I hope this course was a great learning experience. I would love to hear feedback from you. Wishing you all the best for further learning! References Here are the resources that were referenced while creating this course. Cloudflare learning center IBM Blogs Fastly Blogs NS1 Blogs Grokking the System Design Interview System Design Primer AWS Blogs Martin Fowler PagerDuty resources VMWare Blogs Blog Disclaimer: This webpage is a modification of @karanpratapsingh’s system-design repository with CC BY-NC-ND 4.0 license. All the diagrams were made using Excalidraw and are available here. ","date":"2022-10-04","objectID":"/system-design/:243:0","tags":["system-design","distributed-systems","hashing","caching","distributed-systems","sql","cdn","storage","rest-api","scalability","proxy-server","databases","design-patterns","transactions","sharding","nosql-database","design-system","database-replication","design-interviews","cap-theorem","system-design-interviews","api-gateway","rest","graphql","grpc","message-queues","monoliths","microservices"],"title":"System Design Course","uri":"/system-design/"}]
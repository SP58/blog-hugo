<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Technical Blog - Samir Paul</title>
        <link>https://samirpaul.netlify.app/posts/</link>
        <description>All Posts | Technical Blog - Samir Paul</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Creative Commons Attribution 4.0 International (CC BY 4.0)</copyright><lastBuildDate>Fri, 14 Oct 2022 17:13:35 &#43;0000</lastBuildDate><atom:link href="https://samirpaul.netlify.app/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Leetcode Solutions Cheatsheet</title>
    <link>https://samirpaul.netlify.app/leetcode-solutions-cheatsheet/</link>
    <pubDate>Fri, 14 Oct 2022 17:13:35 &#43;0000</pubDate>
    <author>Samir Paul</author>
    <guid>https://samirpaul.netlify.app/leetcode-solutions-cheatsheet/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/SamirPaulb/assets/main/leetcode-img-blogpost-leetcode-solutions-cheetsheet-md.jpeg" referrerpolicy="no-referrer">
            </div><h2 id="quick-access-links">Quick Access Links</h2>
<h3 id="leetcode">LeetCode</h3>
<ul>
<li><a href="#leetcode---cheatsheet" rel="">LeetCode - CheatSheet</a>
<ul>
<li><a href="#getting-started" rel="">Getting Started</a>
<ul>
<li><a href="#prerequisites" rel="">Prerequisites</a></li>
</ul>
</li>
<li><a href="#built-with" rel="">Built With</a></li>
<li><a href="#authors" rel="">Authors</a></li>
<li><a href="#acknowledgments" rel="">Acknowledgments</a></li>
<li><a href="#quick-access-links" rel="">Quick Access Links</a>
<ul>
<li><a href="#leetcode" rel="">LeetCode</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#1-two-sum" rel="">1-Two Sum</a>
<ul>
<li><a href="#brute-force" rel="">Brute Force</a></li>
<li><a href="#one-pass-hash-table" rel="">One Pass Hash Table</a></li>
</ul>
</li>
<li><a href="#2-add-two-numbers" rel="">2-Add Two Numbers</a>
<ul>
<li><a href="#elementary-math-solution" rel="">Elementary Math Solution</a></li>
</ul>
</li>
<li><a href="#3-substring-no-repeat" rel="">3-Substring No Repeat</a>
<ul>
<li><a href="#brute-force-1" rel="">Brute Force</a></li>
<li><a href="#sliding-window" rel="">Sliding Window</a></li>
<li><a href="#sliding-window-optimized" rel="">Sliding Window Optimized</a></li>
</ul>
</li>
<li><a href="#4-median-of-two-sorted-arrays" rel="">4-Median of Two Sorted Arrays</a>
<ul>
<li><a href="#recursive-approach" rel="">Recursive Approach</a></li>
</ul>
</li>
<li><a href="#5-longest-palindromic-substring" rel="">5-Longest Palindromic Substring</a>
<ul>
<li><a href="#longest-common-substring" rel="">Longest Common Substring</a></li>
<li><a href="#brute-force-2" rel="">Brute Force</a></li>
<li><a href="#dynamic-programming" rel="">Dynamic Programming</a></li>
<li><a href="#expand-around-center" rel="">Expand Around Center</a></li>
<li><a href="#manachers-algorithm" rel="">Manacher&rsquo;s Algorithm</a></li>
</ul>
</li>
<li><a href="#6-zigzag-conversion" rel="">6-ZigZag Conversion</a>
<ul>
<li><a href="#sort-by-row" rel="">Sort by Row</a></li>
<li><a href="#visit-by-row" rel="">Visit by Row</a></li>
</ul>
</li>
<li><a href="#7-reverse-integer" rel="">7-Reverse Integer</a>
<ul>
<li><a href="#pop-and-push-digits-and-check-before-overflow" rel="">Pop and Push Digits and Check Before Overflow</a></li>
</ul>
</li>
<li><a href="#8-string-to-integer-atoi" rel="">8-String to Integer (atoi)</a>
<ul>
<li><a href="#ascii-conversion" rel="">ASCII Conversion</a></li>
</ul>
</li>
<li><a href="#9-palindrome-number" rel="">9-Palindrome Number</a>
<ul>
<li><a href="#revert-half-of-the-number" rel="">Revert Half of the Number</a></li>
</ul>
</li>
<li><a href="#10-regular-expression-matching" rel="">10-Regular Expression Matching</a>
<ul>
<li><a href="#recursion" rel="">Recursion</a></li>
<li><a href="#dynamic-programming-1" rel="">Dynamic Programming</a></li>
<li><a href="#non-recursive" rel="">Non-Recursive</a></li>
</ul>
</li>
<li><a href="#11-container-with-the-most-water" rel="">11-Container with the Most Water</a>
<ul>
<li><a href="#brute-force-3" rel="">Brute Force</a></li>
<li><a href="#two-pointer-approach" rel="">Two Pointer Approach</a></li>
</ul>
</li>
<li><a href="#12-integer-to-roman" rel="">12-Integer To Roman</a>
<ul>
<li><a href="#string-array" rel="">String Array</a></li>
</ul>
</li>
<li><a href="#13-roman-to-integer" rel="">13-Roman to Integer</a>
<ul>
<li><a href="#character-array" rel="">Character Array</a></li>
</ul>
</li>
<li><a href="#14-longest-common-prefix" rel="">14-Longest Common Prefix</a>
<ul>
<li><a href="#horizontal-scanning" rel="">Horizontal Scanning</a></li>
<li><a href="#vertical-scanning" rel="">Vertical Scanning</a></li>
<li><a href="#divide-and-conquer" rel="">Divide and Conquer</a></li>
<li><a href="#binary-search" rel="">Binary Search</a></li>
<li><a href="#further-thoughts" rel="">Further Thoughts</a></li>
</ul>
</li>
<li><a href="#15-3sum" rel="">15-3Sum</a>
<ul>
<li><a href="#sorted-array" rel="">Sorted Array</a></li>
</ul>
</li>
<li><a href="#16-3sum-closest" rel="">16-3Sum Closest</a>
<ul>
<li><a href="#3-pointers" rel="">3 Pointers</a></li>
</ul>
</li>
<li><a href="#17-letter-combinations-of-a-phone-number" rel="">17-Letter Combinations of a Phone Number</a>
<ul>
<li><a href="#backtracking" rel="">Backtracking</a></li>
<li><a href="#first-in-first-out-fifo-queue" rel="">First In First Out (FIFO) Queue</a></li>
</ul>
</li>
<li><a href="#18-4sum" rel="">18-4Sum</a>
<ul>
<li><a href="#sorted-array-1" rel="">Sorted Array</a></li>
</ul>
</li>
<li><a href="#19-remove-nth-node-from-end-of-list" rel="">19-Remove Nth Node From End of List</a>
<ul>
<li><a href="#two-pass-algorithm" rel="">Two Pass Algorithm</a></li>
<li><a href="#one-pass-algorithm" rel="">One Pass Algorithm</a></li>
</ul>
</li>
<li><a href="#20-valid-parentheses" rel="">20-Valid Parentheses</a>
<ul>
<li><a href="#counting-method" rel="">Counting method</a></li>
<li><a href="#stacks" rel="">Stacks</a></li>
</ul>
</li>
<li><a href="#21-merge-two-sorted-lists" rel="">21-Merge Two Sorted Lists</a>
<ul>
<li><a href="#recursive" rel="">Recursive</a></li>
<li><a href="#non-recursive-1" rel="">Non-Recursive</a></li>
</ul>
</li>
<li><a href="#22-generate-parentheses" rel="">22-Generate Parentheses</a>
<ul>
<li><a href="#brute-force-4" rel="">Brute Force</a></li>
<li><a href="#backtracking-1" rel="">Backtracking</a></li>
<li><a href="#closure-number" rel="">Closure Number</a></li>
</ul>
</li>
<li><a href="#23-merge-k-sorted-lists" rel="">23-Merge k Sorted Lists</a>
<ul>
<li><a href="#brute-force-5" rel="">Brute Force</a></li>
</ul>
</li>
<li><a href="#146-lru-cache" rel="">146-LRU Cache</a></li>
</ul>
<p><br><br><br><br><br></p>
<hr>
<p><br><br><br></p>
<p><a name="twoSum"></a></p>
<h1 id="1-two-sum">1-Two Sum</h1>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.
You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Given nums = [2, 7, 11, 15], target = 9,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Because nums[0] + nums[1] = 2 + 7 = 9,
</span></span><span class="line"><span class="cl">return [0, 1].
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="twoSumBruteForce"></a></p>
<h2 id="brute-force">Brute Force</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time complexity:   O(n^2)       we have a nested loop 
</span></span><span class="line"><span class="cl">* Space complexity:  O(1) 	  we do not allocate any additional memory
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="twoSumOnePassHashTable"></a></p>
<h2 id="one-pass-hash-table">One Pass Hash Table</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">complement</span><span class="o">=</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">complement</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">complement</span><span class="o">),</span><span class="n">i</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;No two sum solution&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time complexity:   O(n)		each lookup in the hash table only requires O(1) time
</span></span><span class="line"><span class="cl">* Space complexity:  O(n)		we require additional space for the hash table which stores at most n
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="addTwoNumbers"></a></p>
<h1 id="2-add-two-numbers">2-Add Two Numbers</h1>
<p>Given two non-empty linked lists representing two non-negative integers with the digits stored in 
reverse order and each node containing a single digit, add the two numbers and return as a linked list</p>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Input (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) 
</span></span><span class="line"><span class="cl">Output 7 -&gt; 0 -&gt; 8 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">342 + 465 = 807
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="addTwoNumbersElementaryMath"></a></p>
<h2 id="elementary-math-solution">Elementary Math Solution</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Definition for singly-linked list.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * public class ListNode {
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     int val;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode next;
</span></span></span><span class="line"><span class="cl"><span class="cm"> *     ListNode(int x) { val = x; }
</span></span></span><span class="line"><span class="cl"><span class="cm"> * }
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">dummyHead</span><span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">p</span><span class="o">=</span><span class="n">l1</span><span class="o">,</span> <span class="n">q</span><span class="o">=</span><span class="n">l2</span><span class="o">,</span> <span class="n">curr</span><span class="o">=</span><span class="n">dummyHead</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">carry</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">||</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">x</span><span class="o">=</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span><span class="n">0</span><span class="o">;</span> <span class="c1">//if (p!=null) then x contains p.val
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span> <span class="o">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">:</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">carry</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">carry</span><span class="o">=</span><span class="n">sum</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">sum</span><span class="o">%</span><span class="n">10</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">=</span><span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">p</span><span class="o">=</span><span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="n">q</span><span class="o">=</span><span class="n">q</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">carry</span><span class="o">&gt;</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">carry</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">dummyHead</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time Complexity:  O(max(m,n))         depends on the lengths of the two linked lists 
</span></span><span class="line"><span class="cl">* Space Complexity: O(max(m,n))		the maximum length of the new list is max(m,n)+1
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="substringNoRepeat"></a></p>
<h1 id="3-substring-no-repeat">3-Substring No Repeat</h1>
<p>Longest Substring Without Repeating Characters</p>
<p>Given a string find the length of the longest substring without repeating characters.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example
</span></span><span class="line"><span class="cl">Input: 		&#34;abcabcbb&#34;
</span></span><span class="line"><span class="cl">Output:		3
</span></span><span class="line"><span class="cl">Explanation:	The answer is &#34;abc&#34;, with the length of 3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2
</span></span><span class="line"><span class="cl">Input:		&#34;bbbbb&#34;
</span></span><span class="line"><span class="cl">Output:		1
</span></span><span class="line"><span class="cl">Explanation:	The answer is &#34;b&#34;, with the length of 1
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3
</span></span><span class="line"><span class="cl">Input:		&#34;pwwkew&#34;
</span></span><span class="line"><span class="cl">Output:		3
</span></span><span class="line"><span class="cl">Explanation: 	The answer is &#34;wke&#34;, with the length of 3. Note that the answer must be a substring
</span></span><span class="line"><span class="cl">		&#34;pwke&#34; is a subsequence and not a substring 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="substringNoRepeatBruteForce"></a></p>
<h2 id="brute-force-1">Brute Force</h2>
<p><em>Algorithm</em></p>
<p>Suppose we have a function &ldquo;boolean allUnique(String substring)&rdquo; which returns true if all the
characters in the substring are unique and false otherwise. We can iterate through all the possible 
substrings of the given string s and call the function allUnique. If it turns out to be true, then we 
update our answer of the maximum length of substring without duplicate characters.</p>
<p>To enumerate all substrings of a given string we enumerate the start and end indices of them. Suppose
the start and end indices are i and j respectively. Then we have 0 &lt;= i &lt;= j &lt;= n. Thus using two 
nested loops with i from 0 to n-1 and j from i+1 to n, we can enumerate all the substrings of s</p>
<p>To check if one string has duplicate characters we can use a set. We iterate through all the 
characters in the string and put them into the set one by one. Before putting one character, we check
if the set already contains it. If so we return false and after the loop we return true.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">allUnique</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">))</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">allUnique</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Character</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">ch</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">* Time Complexity:   O(n^3)		Verifying if characters in   [i,j) are unique requires us to scan all of
</span></span><span class="line"><span class="cl">					them which would cost O(j-i) time. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					For a given i, the sum of time costed by each j -&gt; [i+1,n] is 
</span></span><span class="line"><span class="cl">					&#34;Summation from i+1 to n O(j-1)&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					Thus, the sum of all the time consumption is: 
</span></span><span class="line"><span class="cl">					O(summation from 0 to n-1(summation from j=i+1 to n (j-1))) 
</span></span><span class="line"><span class="cl">					O(summation from i=0 to n-1(1+n-i)(n-i)/2)) = O(n^3)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					*Note that the sum of all numbers up to n 1+2+3+...+n = n(n+1)/2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">* Space Complexity:  O(min(n,m))	We require O(k) space for checking a substring has no duplicate 
</span></span><span class="line"><span class="cl">					characters, where k is the size of the set. The size of the Set is 
</span></span><span class="line"><span class="cl">					upper bounded by the size of the string n amd the size of the charset
</span></span><span class="line"><span class="cl">					or alphabet m 
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="substringNoRepeatSlidingWindow"></a></p>
<h2 id="sliding-window">Sliding Window</h2>
<p>A sliding window is an abstract concept commonly used in array/string problems. A window is a range of 
elements in the array/string which usually defined by the start and end indices</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Ex. [i,j) left-closed, right-open
</span></span></code></pre></td></tr></table>
</div>
</div><p>A sliding window is a window that slides its two boundaries in a certain direction, for example if we
slide [i,j) to the right by 1 element, then it becomes [i+1, j+1) - left closed, right open.</p>
<p>Sliding Window approach, whenever we are looking at a section on an array usual to perform calculations
we don&rsquo;t need to completely recalculate everything for every section of the array. Usually we can use
the value obtained from another section of the array to determine something about this section of the 
array. For example if we are calculating the sum of sections of an array we can use the previously 
calculated value of a section to determine the sum of an adjacent section in the array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Ex. 1 2 3 4 5 6 7 8 
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we calculate the first section of four values we get 1+2+3+4 = 10 , then to calculate the next section
2+3+4+5 we can just take our first section (window_sum) and perform the operation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">window_sum-first entry + last entry = 10-1+5= 14
</span></span></code></pre></td></tr></table>
</div>
</div><p>So essentially for the window sliding technique we use what we know about an existing window to 
determine properties for another window.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>In the brute force approach, we repeatedly check a substring to see if it has duplicate characters but
this is unnecessary. If a substring from index i to j-1 is already checked to have no duplicate 
characters we only need to check if s[j] is already in the substring.</p>
<p>To check if a character is already in the substring we can scan the substring which leads to an O(n^2)
algorithm but we can improve on this runtime using a HashSet as a sliding window to check if a 
character exists in the current set O(1).</p>
<p>We use a HashSet to store the characters in the current window [i,j) and then we slide the index j to
the right, if it is not in the HashSet, we slide j further until s[j] is already in the HashSet. At
this point we found the maximum size of substrings without duplicate characters starting with index i.
If we do this for all i, then we obtain our answer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// try to extend the range [i, j]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))){</span>
</span></span><span class="line"><span class="cl">                <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">++));</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">++));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity:	O(2n)=O(n)	Worst case each character will be visited twice by i and j
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity: 	O(min(m,n))	Same as the brute force method, we need O(k) space for the 
</span></span><span class="line"><span class="cl">					sliding window where k is the size of the set. The size of the
</span></span><span class="line"><span class="cl">					set is bounded by the size of the string n and the size of the
</span></span><span class="line"><span class="cl">					charset/alphabet m
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="substringNoRepeatOptimized"></a></p>
<h2 id="sliding-window-optimized">Sliding Window Optimized</h2>
<p>The previously discussed sliding window approach requires at most 2n steps and this could in fact be
optimized even further to require only n steps. Instead of using a set to tell if a character exists or
not, we could define a mapping of the characters to its index. Then we can skip the characters 
immediately when we found a repeated character</p>
<p>If s[j] has a duplicate in the range [i , j) with index j&rsquo;, we don&rsquo;t need to increase i little be little
we can just skip all the elements in the range [i , j&rsquo;] and let i be j&rsquo;+1 directly</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// current index of character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// try to extend the range [i, j]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)),</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">),</span> <span class="n">j</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="medianofTwoSortedArrays"></a></p>
<h1 id="4-median-of-two-sorted-arrays">4-Median of Two Sorted Arrays</h1>
<p>There are two sorted arrays num1 and num2 of size m and n respectively. Find the median of the two 
sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2
cannot be both empty.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums1 = [1, 3] 
</span></span><span class="line"><span class="cl">nums2 = [2]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The median is 2.0
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nums1= [1, 2] 
</span></span><span class="line"><span class="cl">nums2= [3, 4] 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The median is (2+3)/2 = 2.5
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="medianofTwoSortedArraysRecursiveApproach"></a></p>
<h2 id="recursive-approach">Recursive Approach</h2>
<p>In statistics the median is used for dividing a set into two equal length subsets with one set being
always greater than the other set. To approach this problem first we cut A into two parts at a random
position i:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">         left_A                |           right_A 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  A[0], A[1], ... , A[i-1]         A[i], A[i+1], ... , A[m-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Since A has m elements, there are m+1 kinds of cutting as i can range from 0-m. We can also see that
left_A is empty when i is zero and right_A is empty when i=m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">len(left_A) = i and len(right_A)= m-i
</span></span></code></pre></td></tr></table>
</div>
</div><p>We can similarly cut B into two parts at a random position j:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	left_B			|	right_B
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  B[0], B[1], ... , B[j-1]	   B[j], B[j+1], ... , B[n-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now if we put left_A and left_B into one set and put right_A and right_B into another set and name 
them left_part and right_part, then we get</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	left_part		|	right_part
</span></span><span class="line"><span class="cl">  A[0], A[1], ... , A[i-1]	  A[i], A[i+1], ... , A[m-1]
</span></span><span class="line"><span class="cl">  B[0], B[1], ... , B[j-1]	  B[j], B[j+1], ... , B[n-1]
</span></span></code></pre></td></tr></table>
</div>
</div><p>If we can ensure that</p>
<ol>
<li>the len(left_part) = len(right_part)</li>
<li>max(left_part) &lt;= min(right_part)</li>
</ol>
<p>then we divide all the elements in {A,B} into two parts with equal length and one part is always
greater than the other. Then</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">median= (max(left_part)+min(right_part))/2
</span></span></code></pre></td></tr></table>
</div>
</div><p>To ensure these two conditions, we need to ensure:</p>
<ol>
<li>i+j= m-i+n-j (or: m-i+n-j+1) if n&gt;m, we just need to set i=0~m, j= (m+n+1)/2 - i</li>
<li>B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j]</li>
</ol>
<p>So, all we need to do is search for i in [0,m] to find an object i such that 
B[j-1]&lt;=A[i] and A[i-1]&lt;=B[j] where j=(m+n+1)/2 -i</p>
<p>Then we perform a binary search following the steps described below:</p>
<ol>
<li>Set imin=0, imax=0, then start searching in [imin, imax]</li>
<li>Set i=(imin+imax)/2 , j=(m+n+1)/2 - i</li>
<li>Now we have len(left_part) = len(right_part) and there are only 3 more situations which we may 
encounter:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">   - B[j-1] &lt;= A[i] and A[i-1]&lt;=B[j] 
</span></span><span class="line"><span class="cl">     This means that we have found the object i, so we can stop searching
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   - B[j-1] &gt; A[i]
</span></span><span class="line"><span class="cl">     Means A[i] is too small, we must adjust i to get B[j-1]&lt;=A[i] so we increase i because this will
</span></span><span class="line"><span class="cl">     cuase j to be decreased. We cannot decrease i because when i is decreased, j will be increased
</span></span><span class="line"><span class="cl">     so B[j-1] is increased and A[i] is decreased (B[j-1]&lt;= A[i] will never be satisfied)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   - A[i-1] &gt; B[j] 
</span></span><span class="line"><span class="cl">     Means A[i-1] is too big and thus we must decrease i to get A[i-1]&lt;=B[j]. In order to do that we 
</span></span><span class="line"><span class="cl">     must adjust the searching range to [imin, i-1] so we set imax=i-1 and go back to step 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>When the object i is found, then the media is:</p>
<p>max(A[i-1],B[j-1]), when m+n is odd
(max(A[i-1],B[j-1])+min(A[i],B[j]))/2, when m+n is even</p>
<p>Next is to consider the edge values i=0, i=m, j=0, j=n where A[i-1], B[j-1], A[i], B[j] may not exist</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">double</span> <span class="nf">findMedianSortedArrays</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">B</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">m</span><span class="o">&gt;</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>   	<span class="c1">//ensuring that m&lt;=n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="kt">int</span><span class="o">[]</span> <span class="n">temp</span><span class="o">=</span><span class="n">A</span><span class="o">;</span> <span class="n">A</span><span class="o">=</span><span class="n">B</span><span class="o">;</span> <span class="n">B</span><span class="o">=</span><span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">tmp</span><span class="o">=</span><span class="n">m</span><span class="o">;</span> <span class="n">m</span><span class="o">=</span><span class="n">n</span><span class="o">;</span> <span class="n">n</span><span class="o">=</span><span class="n">tmp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">iMin</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">iMax</span><span class="o">=</span><span class="n">m</span><span class="o">,</span> <span class="n">halfLen</span><span class="o">=(</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">iMin</span><span class="o">&lt;=</span><span class="n">iMax</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">i</span><span class="o">=(</span><span class="n">iMin</span><span class="o">+</span><span class="n">iMax</span><span class="o">)/</span><span class="n">2</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">j</span><span class="o">=</span> <span class="n">halfLen</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">iMax</span> <span class="o">&amp;&amp;</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="n">iMin</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="c1">//i is too small
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">iMin</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]&gt;</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">iMax</span><span class="o">=</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="c1">//i is too big
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span><span class="o">{</span> <span class="c1">//we have found the object i 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="kt">int</span> <span class="n">maxLeft</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">maxLeft</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">],</span> <span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">((</span><span class="n">m</span><span class="o">+</span><span class="n">n</span><span class="o">)%</span><span class="n">2</span> <span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="n">maxLeft</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">minRIght</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">minRight</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">B</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="o">(</span><span class="n">maxLeft</span><span class="o">+</span><span class="n">minRight</span><span class="o">)/</span><span class="n">2</span><span class="o">.</span><span class="na">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">0</span><span class="o">.</span><span class="na">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(log(min(m,n)))	At first the searching range is [0,m] and the length of this 
</span></span><span class="line"><span class="cl">					searching range will be reduced by half after each loop so we
</span></span><span class="line"><span class="cl">					only need log(m) loops. Since we do constant operations in 
</span></span><span class="line"><span class="cl">					each loop the time complexity is O(log(m) and since m&lt;=n the
</span></span><span class="line"><span class="cl">					time complexity is O(log(min(m,n))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(1)			We only need constant memory to store 9 local variables so the
</span></span><span class="line"><span class="cl">					space complexity is O(1)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="longestPalindromicSubstring"></a></p>
<h1 id="5-longest-palindromic-substring">5-Longest Palindromic Substring</h1>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length
of s is 1000.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;babad&#34; 
</span></span><span class="line"><span class="cl">Output: &#34;bab&#34; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Note: &#34;aba&#34; is also a valid answer 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;cbbd&#34;
</span></span><span class="line"><span class="cl">Output: &#34;bb&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestPalindromicSubstringLongestCommonSubstring"></a></p>
<h2 id="longest-common-substring">Longest Common Substring</h2>
<p>Some people will be tempted to come up with this quick solution which is unforunately flawed, &ldquo;reverse
S and become S&rsquo;. Find the longest common substring between S and S&rsquo; and that will be the longest
palindromic substring.&rdquo; This will work with some examples but there are some cases where the longest
common substring is not a valid palindrome.</p>
<pre><code>Ex. S=&quot;abacdfgdcaba&quot;, S'=&quot;abacdgfdcaba&quot; 	

The longest common substring between S and S' is &quot;abacd&quot; and clearly this is not a valid 
palindrome
</code></pre>
<p>We can solve this problem however by checking if the substring&rsquo;s indices are the same as the reversed
substring&rsquo;s original indices each time we find a longest common substring. If it is, then we attempt
to update the longest palindrome found so far, if not we skip this and find the next candidate</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n^2) 
</span></span><span class="line"><span class="cl">Space Complexity: O(n^2) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestPalindromicSubstringBruteForce"></a></p>
<h2 id="brute-force-2">Brute Force</h2>
<p>The obvious brute force solution is to pick all possible starting and ending position for a substring 
and verify if it is a palindrome</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n^3)		If n is the length of the input string, there are a total of 
</span></span><span class="line"><span class="cl">				(n 2) = n(n-1)/2 substrings and since verifying each substring takes 
</span></span><span class="line"><span class="cl">				O(n) time, the run time complexity is O(n^3)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(1) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestPalindromicSubstringDynamicProgramming"></a></p>
<h2 id="dynamic-programming">Dynamic Programming</h2>
<p>We can improve on the brute force solution by avoid some unnecessary re-computation while validating 
palidromes. Consider the word &ldquo;ababa&rdquo;, if we already know that &ldquo;bab&rdquo; is a palindrome then we can 
determine that ababa is a palindrome by noticing that the two left and right letters connected to bab
are the same.</p>
<p>This yields a straight forward dynamic programming solution where we initialize the one and two letters
palindromes and then work our way up finding all three letters palindromes and so on.</p>
<p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(n^2)	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(n^2)	Using O(n^2) space to store the table 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestPalindromicSubstringExpandAroundCenter"></a></p>
<h2 id="expand-around-center">Expand Around Center</h2>
<p>This approach allows us to solve this problem in O(n^2) time using only constant space complexity. We
observe that a palindrome mirrors around its enter and therefore a palindrome can be expanded from its
center and there are only 2n-1 such centers (for palindromes with an even number of letters like 
&ldquo;abba&rdquo; its center is in between two letters).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>     <span class="c1">//edge case 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">start</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">end</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len1</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len2</span><span class="o">=</span><span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span><span class="n">i</span><span class="o">,</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">len1</span><span class="o">,</span><span class="n">len2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">start</span><span class="o">=</span> <span class="n">i</span><span class="o">-(</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">end</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">len</span><span class="o">/</span><span class="n">2</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">expandAroundCenter</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">L</span><span class="o">=</span><span class="n">left</span><span class="o">,</span> <span class="n">R</span><span class="o">=</span><span class="n">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="o">(</span><span class="n">L</span><span class="o">&gt;=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">R</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">L</span><span class="o">)==</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">R</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">L</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">		<span class="n">R</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestPalindromicSubstringManacherAlgorithm"></a></p>
<h2 id="manachers-algorithm">Manacher&rsquo;s Algorithm</h2>
<p>There is an O(n) algorithm called Manacher&rsquo;s algorithm, however, it is a non-trivial algorithm and no 
one would expect you to come up with this algorithm in a 45 minute coding session</p>
<p><br><br><br></p>
<hr>
<p><a name="zigZagConversion"></a></p>
<h1 id="6-zigzag-conversion">6-ZigZag Conversion</h1>
<p>The string &ldquo;PAYPALISHIRING&rdquo; is written in a zigzag pattern on a given number of rows like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">P   A   H   N
</span></span><span class="line"><span class="cl">A P L S I I G
</span></span><span class="line"><span class="cl">Y   I   R
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then read line by line: &ldquo;PAHNAPLSIIGYIR&rdquo;. Write a code that will take a string and make this 
conversion given a number of rows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">string convert(string s, int numRows);
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: s=&#34;PAYPALISHIRING&#34;, numRows=3
</span></span><span class="line"><span class="cl">Output: &#34;PAHNAPLSIIGYIR&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: s=&#34;PAYPALISHIRING&#34;, numRows=4
</span></span><span class="line"><span class="cl">Output: &#34;PINALSIGYAHRPI&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">P           I          N
</span></span><span class="line"><span class="cl">A       L   S      I   G
</span></span><span class="line"><span class="cl">Y   A       H   R
</span></span><span class="line"><span class="cl">P           I
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="zigZagConversionSortbyRow"></a></p>
<h2 id="sort-by-row">Sort by Row</h2>
<p>By iterating through the string from left to right we can easily determine which row in the Zig-Zag
pattern that a character belongs to</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We can use min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern. 
Iterate through s from left to right appending each character to the appropriate row. The appropriate
row can be tracked using two variables: the current row and the current direction.</p>
<p>The current direction only changes when we moved to the topmost row or moved down to the bottommost 
row</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">s</span><span class="o">;</span>		<span class="c1">//if there is only one row return string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span> <span class="n">rows</span><span class="o">=</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">numRows</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="n">rows</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">curRow</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">goingDown</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">rows</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">curRow</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">curRow</span><span class="o">==</span><span class="n">0</span> <span class="o">||</span> <span class="n">curRow</span><span class="o">==</span><span class="n">numRows</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">goingDown</span><span class="o">=!</span><span class="n">goingDown</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">curRow</span><span class="o">+=</span><span class="n">goingDown</span> <span class="o">?</span> <span class="n">1</span> <span class="o">:</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">StringBuilder</span> <span class="n">ret</span><span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="o">(</span><span class="n">StringBuilder</span> <span class="n">row</span><span class="o">:</span><span class="n">rows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">row</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(n)	where n==len(s)
</span></span><span class="line"><span class="cl">Space Complexity: O(n)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="zigZagConversionVisitbyRow"></a></p>
<h2 id="visit-by-row">Visit by Row</h2>
<p>Visit the characters in the same order as reading the Zig-Zag pattern line by line</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Visit all characters in row 0 first, then row 1, then row 2, and so on.
For all whole numbers k, 
* characters in row 0 are located at indexes  k*(2*numRows-2)
* characters in row numRows -1 are located at indexes  k*(2*numRows-2)+ numRows -1 
* characters in inner row i are located at indexes  k*(2*numRows-2)+i and (k+1)(2*numRows-2)-i</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">convert</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">numRows</span><span class="o">==</span><span class="n">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">s</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">StringBuilder</span> <span class="n">ret</span><span class="o">=</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">cycleLen</span><span class="o">=</span> <span class="n">2</span><span class="o">*</span> <span class="n">numRows</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numRows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span> <span class="n">cycleLen</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">!=</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span><span class="o">!=</span><span class="n">numROws</span><span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">ret</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">cycleLen</span><span class="o">-</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(n)	where n==len(s) Each index is visited once
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(n) 	C++ implementation can achieve O(1) if the return string is not considered 
</span></span><span class="line"><span class="cl">			extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="reverseInteger"></a></p>
<h1 id="7-reverse-integer">7-Reverse Integer</h1>
<p>Given a 32- bit signed integer, reverse digits of an integer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 123
</span></span><span class="line"><span class="cl">Output: 321
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: -123
</span></span><span class="line"><span class="cl">Output: -321
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 120 
</span></span><span class="line"><span class="cl">Output: 21
</span></span></code></pre></td></tr></table>
</div>
</div><p>For the purpose of this problem assume that your function returns 0 when the reversed integer overflows</p>
<p><br><br>
<a name="reverseIntegerPopandPush"></a></p>
<h2 id="pop-and-push-digits-and-check-before-overflow">Pop and Push Digits and Check Before Overflow</h2>
<p>We can build up the reverse integer one digit at and time and before doing so we can check whether or
not appedning another digit would cause overflow</p>
<p><br><br>
<em>Algorithm</em></p>
<p>Reversing an integer can be done similarly to reversing a string. We want to repeatedly &ldquo;pop&rdquo; the last
digit off of x and push it to the back of the rev so that in the end rev is the reverse of x.</p>
<p>To push and pop digits without the help of some auxiliar stack/array we can use math</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//pop operation: 
</span></span><span class="line"><span class="cl">pop = x%10; 
</span></span><span class="line"><span class="cl">x/=10;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//push operation:
</span></span><span class="line"><span class="cl">temp=rev*10+pop;
</span></span><span class="line"><span class="cl">rev =temp;
</span></span></code></pre></td></tr></table>
</div>
</div><p>This statement is dangerous however as the statement temp=rev*10+pop may cause an overflow and luckily
it is easy to check beforehand whether or not this statement would cause an overflow.</p>
<ol>
<li>If temp=rev*10+pop causes an overflow, then rev&gt;=INTMAX/10</li>
<li>If rev&gt; INTMAX/10, then temp=rev*10+pop is guaranteed to overflow</li>
<li>if rev==INTMAX/10, then temp=rev*10 + pop will overflow if an only if pop&gt;7</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">rev</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">pop</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">rev</span><span class="o">&gt;</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&amp;&amp;</span> <span class="n">pop</span><span class="o">&gt;</span><span class="n">7</span><span class="o">))</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">rev</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span><span class="o">||(</span><span class="n">rev</span><span class="o">==</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&amp;&amp;</span> <span class="n">pop</span><span class="o">&lt;-</span><span class="n">8</span><span class="o">))</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">rev</span><span class="o">=</span><span class="n">rev</span><span class="o">*</span><span class="n">10</span> <span class="o">+</span><span class="n">pop</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">rev</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(log(x))	There are roughly log10(x) digits in x 
</span></span><span class="line"><span class="cl">Space Complexity: O(1)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="stringtoInteger"></a></p>
<h1 id="8-string-to-integer-atoi">8-String to Integer (atoi)</h1>
<p>Implement atoi which converts a string to an integer</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace
character is found. Then, starting from this character, takes an optional initial plus or minus sign
followed by as many numerical digits as possible and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are 
ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such
sequence exits because either str is empty or it contains only whitespace characters, no conversion is
performed.</p>
<p>If no valid conversion could be performed a zero value is returned</p>
<p>Note:</p>
<ul>
<li>only the space character &rsquo; &rsquo; is considered as whitespace character</li>
<li>assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31, 2^31-1]. If the numerical value is out of the range of representable values, INT_MAX (2^31-1) or INT_MIN (-2^31) is returned</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;42&#34;
</span></span><span class="line"><span class="cl">	Output: 42
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;      -42&#34; 
</span></span><span class="line"><span class="cl">	Output: -42
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 3:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Input: &#34;4193 with words &#34;
</span></span><span class="line"><span class="cl">	Output: 4193
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 4: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Input: &#34;words and 987&#34;
</span></span><span class="line"><span class="cl">	Output: 0
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Example 5:
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Input: &#34;-91283472332&#34;
</span></span><span class="line"><span class="cl">	Output: -2147483648 	//out of the range of a 32-bit signed integer so INT_MIN is returned
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="stringtoIntegerASCII"></a></p>
<h2 id="ascii-conversion">ASCII Conversion</h2>
<p>Recognize that ASCII characters are actually numbers and 0-9 digits are numbers starting from decimal
48 (0x30 hexadecimal)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;0&#39; is 48
</span></span><span class="line"><span class="cl">	&#39;1&#39; is 49
</span></span><span class="line"><span class="cl">	...
</span></span><span class="line"><span class="cl">	&#39;9&#39; is 57
</span></span></code></pre></td></tr></table>
</div>
</div><p>So to get the value of any character digit you can just remove the &lsquo;0&rsquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;1&#39; - &#39;0&#39; =&gt; 1
</span></span><span class="line"><span class="cl">	49  -  48 =&gt; 1
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">myAtoi</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">index</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">sign</span><span class="o">=</span><span class="n">1</span><span class="o">,</span> <span class="n">total</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//1. Empty string 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//2. Remove Spaces 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//3. Handle signs 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39;+&#39;</span> <span class="o">||</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)==</span><span class="sc">&#39;-&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">sign</span><span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">?</span> <span class="n">1</span><span class="o">:-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//4. COnvert number and avoid overflow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span><span class="o">(</span><span class="n">index</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">digit</span><span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">digit</span><span class="o">&lt;</span><span class="n">0</span><span class="o">||</span><span class="n">digit</span><span class="o">&gt;</span><span class="n">9</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">//check if total will overflow after 10 times and add digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="o">||</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">/</span><span class="n">10</span> <span class="o">==</span> <span class="n">total</span> 
</span></span><span class="line"><span class="cl">		    <span class="o">&amp;&amp;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">%</span><span class="n">10</span><span class="o">&lt;</span><span class="n">digit</span><span class="o">)</span> <span class="o">{</span>    
</span></span><span class="line"><span class="cl">		    <span class="k">return</span> <span class="n">sign</span><span class="o">==</span><span class="n">1</span> <span class="o">?</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">:</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">total</span><span class="o">=</span> <span class="n">10</span><span class="o">*</span> <span class="n">total</span><span class="o">+</span><span class="n">digit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">index</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">total</span><span class="o">*</span><span class="n">sign</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="palindromeNumber"></a></p>
<h1 id="9-palindrome-number">9-Palindrome Number</h1>
<p>Determines whether an interger is a palindrome. An integer is a palindrome when it reads the same 
backward as forward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 121
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: -121
</span></span><span class="line"><span class="cl">Output: false 
</span></span><span class="line"><span class="cl">Explanation: 	From left to right, it reads -121, meanwhile from right to left it becomes 121- . 
</span></span><span class="line"><span class="cl">		Therefore it is not a palindrome
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 10 
</span></span><span class="line"><span class="cl">Output: false 
</span></span><span class="line"><span class="cl">Explanation: 	Reads 01 from right to left. Therefore it is not a palindrome
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="palindromeNumberRevertHalf"></a></p>
<h2 id="revert-half-of-the-number">Revert Half of the Number</h2>
<p>A first idea which may come to mind is to convert the number into a string and check if the string is a
palindrome but this would require extra non-constant space for creating the string not allowed by the 
problem description</p>
<p>Second idea would be reverting the number itself and comparing the number with the original number, if
they are the same then the number is a palindrome, however if the reversed number is larger than 
int.MAX we will hit integer overflow problem.</p>
<p>To avoid the overflow issue of the reverted number, what if we only revert half of the int number? The
reverse of the last half of the palindrome should be the same as the first half of the number if the 
number is a palindrome.</p>
<p>If the input is 1221, if we can revert the last part of the number &ldquo;1221&rdquo; from &ldquo;21&rdquo; to &ldquo;12&rdquo; and compare
it with the first half of the number &ldquo;12&rdquo;, since 12 is the same as 12, we know that the number is a 
palindrome.</p>
<p><br><br>
<em>Algorithm</em></p>
<p>At the very beginning we can deal with some edge cases. All negative numbers are not palindrome and 
numbers ending in zero can only be a palindrome if the first digit is also 0 (only 0 satisfies this 
property)</p>
<p>Now let&rsquo;s think about how to revert the last half of the number. For the number 1221 if we do 1221%10 
we get the last digit 1. To get the second last digit we divide the number by 10 1221/10=122 and then
we can get the last digit again by doing a modulus by 10, 122%10=2. If we multiply the last digit by 
10 and add the second last digit 1*10+2=12 which gives us the reverted number we want. COntinuing this
process would give us the reverted number with more digits.</p>
<p>Next is how do we know that we&rsquo;ve reached the half of the number? 
Since we divided the number by 10 and multiplied the reversed number by 10 when the original number is
less than the reversed number, it means we&rsquo;ve gone through half of the number digits.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">&lt;</span><span class="n">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">==</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">!=</span><span class="n">0</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">revertedNumber</span><span class="o">=</span><span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">x</span><span class="o">&gt;</span><span class="n">revertedNumber</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">revertedNumber</span><span class="o">=</span><span class="n">x</span><span class="o">%</span><span class="n">10</span><span class="o">+</span><span class="n">revertedNumber</span><span class="o">*</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="o">/=</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//when the length is an odd number, we can get rid of the middle digit by 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//revertedNumber/10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="c1">//For example when the input is 12321, at the end of the while loop we get x=12, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//revertedNumber=123, since the middle digit doesn&#39;t matter in a palindrome we can
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//simply get rid of it 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">||</span><span class="n">x</span><span class="o">==</span><span class="n">revertedNumber</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="regularExpressionMatching"></a></p>
<h1 id="10-regular-expression-matching">10-Regular Expression Matching</h1>
<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for &lsquo;.&rsquo;
and &lsquo;*&rsquo;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	&#39;.&#39; Matches any single character
</span></span><span class="line"><span class="cl">	&#39;*&#39; Matches zero or more of the preceding element 
</span></span></code></pre></td></tr></table>
</div>
</div><p>The matching should cover the entire input string (not partial)</p>
<p>Note:</p>
<ul>
<li>s could be empty and contains only lower case letters a-z</li>
<li>p could be empty and contains only lower case letters a-z and characters like . or *</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input:
</span></span><span class="line"><span class="cl">	s=&#34;aa&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;a&#34; 
</span></span><span class="line"><span class="cl">	Output: false 
</span></span><span class="line"><span class="cl">	Explanation: 	&#34;a&#34; does not match the entire string &#34;aa&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;aa&#34;
</span></span><span class="line"><span class="cl">	p=&#34;a*&#34; 
</span></span><span class="line"><span class="cl">	Output: true 
</span></span><span class="line"><span class="cl">	Explanation: 	&#39;*&#39; means zero of more of the preceding element, &#39;a&#39;. Therefore, by repeating
</span></span><span class="line"><span class="cl">			&#39;a&#39; once it becomes &#34;aa&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;ab&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;.*&#34; 
</span></span><span class="line"><span class="cl">	Output: true 
</span></span><span class="line"><span class="cl">	Explanation: 	&#39;.*&#39; means &#34;zero or more (*) of any character (.)&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;aab&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;c*a*b&#34; 
</span></span><span class="line"><span class="cl">	Output: true
</span></span><span class="line"><span class="cl">	Explanation: 	c can be repeated 0 times, a can be repeated 1 time. Therefore it matches 
</span></span><span class="line"><span class="cl">			&#34;aab&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">	s=&#34;mississippi&#34; 
</span></span><span class="line"><span class="cl">	p=&#34;mis*is*p*.&#34;
</span></span><span class="line"><span class="cl">	Output: false 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="regularExpressionMatchingRecursion"></a></p>
<h2 id="recursion">Recursion</h2>
<p>If there were no Kleene stars (the * wildcard characters for regular expressions), the problem would 
be easier- we simply check from left to right if each character of the text matches the pattern. When
a star is present we may need to check for may different suffixes of the text and see if they match
the rest of the pattern. A recursive solution is a straightforward way to represent this relationship</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">first_match</span><span class="o">=(!</span><span class="n">text</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> 
</span></span><span class="line"><span class="cl">				    <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)==</span><span class="n">text</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)</span> <span class="o">||</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)==</span><span class="sc">&#39;.&#39;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()&gt;=</span><span class="n">2</span> <span class="o">&amp;&amp;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">1</span><span class="o">)</span> <span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">(</span><span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">2</span><span class="o">))||</span>
</span></span><span class="line"><span class="cl">			       <span class="o">(</span><span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">),</span><span class="n">pattern</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">//note: pattern.substring(2) returns all of the characters after index 2 of pattern
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">isMatch</span><span class="o">(</span><span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">),</span> <span class="n">pattern</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. In the worst
</span></span><span class="line"><span class="cl">			case, a call to match(text[i:],pattern[2j:]) will be made (i+j i) times, and 
</span></span><span class="line"><span class="cl">			strings of the order O(T-i) and O(P-2*j) will be made. Thus the complexity has
</span></span><span class="line"><span class="cl">			the order: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			summation from i=0 to T * summation from j=0 to P/2 * (i+j i) O(T+P-i-2j).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			We can show that this is bounded by O((T+P)2^(T+P/2))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity:	For every call to match, we will create those strings as described above 
</span></span><span class="line"><span class="cl">			possibly creating duplicates. If memory is not freed, this will also take a
</span></span><span class="line"><span class="cl">			total of O((T+P)2^(T+P/2)) space even though there are only order O(T^2+P^2) 
</span></span><span class="line"><span class="cl">			unique suffixes of P and T that are actually required 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="regularExpressionMatchingDynamicProgramming"></a></p>
<h2 id="dynamic-programming-1">Dynamic Programming</h2>
<p>As the problem has an optimal substructure, it is natural to cache intermediate results. We ask the 
question dp(i,j): does text[i:] and pattern[j:] match? We can describe our answer in terms of answers
to questions involving smaller strings</p>
<p><br><br>
<em>Algorithm</em></p>
<p>We proceed with the same recursion as in Approach 1, except because calls will only ever be made to 
match(text[i:], pattern[j:]), we use dp(i,j) to handle those calls instead, saving us expensive 
string-building operations and allowing us to cache the intermediate results</p>
<p><strong>Java Top-Down Variation</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="n">Result</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">TRUE</span><span class="o">,</span> <span class="n">FALSE</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Result</span><span class="o">[][]</span> <span class="n">memo</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		<span class="n">memo</span><span class="o">=</span><span class="k">new</span> <span class="n">Result</span><span class="o">[</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">dp</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">0</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">dp</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">,</span> <span class="n">String</span> <span class="n">text</span><span class="o">,</span> <span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="n">Result</span><span class="o">.</span><span class="na">TRUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="kt">boolean</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">==</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">=</span><span class="n">i</span><span class="o">==</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">boolean</span> <span class="n">first_match</span><span class="o">=(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">text</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">					     <span class="n">patter</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">&lt;</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">=(</span><span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">)||</span><span class="n">first_match</span><span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span><span class="n">j</span><span class="o">,</span><span class="n">text</span><span class="o">,</span><span class="n">pattern</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">=</span><span class="n">first_match</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">text</span><span class="o">,</span> <span class="n">pattern</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">memo</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]=</span><span class="n">ans</span><span class="o">?</span> <span class="n">Result</span><span class="o">.</span><span class="na">TRUE</span><span class="o">:</span> <span class="n">Result</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	Let T, P be the lengths of the text and the pattern respectively. The work 
</span></span><span class="line"><span class="cl">			for every call to dp(i,j) for i=0,...,T; j=0,...,P is done once and it is O(1) 				work. Hence the time complexity is O(TP)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity:	The only memory we use is the O(TP) boolean entries in our cache. Hence, the 
</span></span><span class="line"><span class="cl">			space complexity is O(TP) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="regularExpressionMatchingNonRecursive"></a></p>
<h2 id="non-recursive">Non-Recursive</h2>
<p>The recursive programming solutions are pretty confusing so this implementation uses 2D arrays and 
Dynamic Programming</p>
<p>The logic works as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1. If p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]; 
</span></span><span class="line"><span class="cl">2. If p.charAt(j) == &#39;.&#39; : dp[i][j] = dp[i-1][j-1]; 
</span></span><span class="line"><span class="cl">3. If p.charAt(j) == &#39;*&#39;: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	Subconditions
</span></span><span class="line"><span class="cl">	1. If p.charAt(j-1)!= s.charAt(i):dp[i][j]=dp[i][j-2]  	//in this case a* only counts as empty
</span></span><span class="line"><span class="cl">	2. If p.charAt(i-1)== s.charAt(i) or p.charAt(i-1) == &#39;.&#39;: 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		dp[i][j] = dp[i-1][j]	//in this case a* counts as multiple a 
</span></span><span class="line"><span class="cl">	     or dp[i][j] = dp[i][j-1]	//in this case a* counts as single a 
</span></span><span class="line"><span class="cl">	     or dp[i][j] = dp[i][j-2]	//in this case a* counts as empty 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isMatch</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">p</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="kt">boolean</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">=</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="n">1</span><span class="o">][</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">0</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">			<span class="n">dp</span><span class="o">[</span><span class="n">0</span><span class="o">][</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="sc">&#39;.&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">				<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)==</span><span class="sc">&#39;*&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)!=</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">!=</span><span class="sc">&#39;.&#39;</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]=(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="containerwiththeMostWater"></a></p>
<h1 id="11-container-with-the-most-water">11-Container with the Most Water</h1>
<p>Given n non negative integers a1,a2, &hellip; , an where each represents a point at coordinate (i, ai). n 
vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two 
lines, which together with x-axis forns a container such that the container contains the most water.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		      ^		    ^
</span></span><span class="line"><span class="cl">	 These two values form the container which could hold water at a max height of 7, these values
</span></span><span class="line"><span class="cl">	 are also 7 array indexes apart from each other so it could hold water at a max width of 7. The
</span></span><span class="line"><span class="cl">	 area of water which could be held is thus 7 x 7 = 49
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="containerwiththeMostWaterBruteForce"></a></p>
<h2 id="brute-force-3">Brute Force</h2>
<p>In this case we simply consider the area for every possible pair of the lines and find out the maximum
area out of those.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public class Solution {
</span></span><span class="line"><span class="cl">	public int maxArea(int[] height) {
</span></span><span class="line"><span class="cl">		int maxarea=0; 
</span></span><span class="line"><span class="cl">		for (int i=0; i&lt;height.length; i++){
</span></span><span class="line"><span class="cl">			for (int j=i+1;j&lt;height.length;j++){
</span></span><span class="line"><span class="cl">				maxarea=Math.max(maxarea, Math.min(height[i],height[j])*(j-i));
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">		return maxarea;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(n^2) 	Calculating the area for all n(n-1)/2 height pairs 
</span></span><span class="line"><span class="cl">Space complexity: 	O(1) 	Constant extra space is used 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="containerwiththeMostWaterTwoPointer"></a></p>
<h2 id="two-pointer-approach">Two Pointer Approach</h2>
<p>The intuition behind this approach is that the area formed between the lines will always be limited by 
the height of the shorter line. Further, the farther the lines, the more will be the area obtained.</p>
<p>We take two pointers, one at the beginning and one at the end of the array constituting the length of 
the lines. Further, we maintain a variable maxarea to store the maximum area obtained till now. At 
every step, we find out the area formed between them, update maxarea and move the pointer pointing to 
the shorter line towards the other end by one step.</p>
<p>Initially we consider the area constituting the exterior most lines. Now to maximize the area we need
to consider the area between the lines of larger lengths. If we try to move the pointer at the longer
line inwards, we won&rsquo;t gain any increase in area, since it is limited by the shorter line. But moving
the shorter line&rsquo;s pointer could turn out to be benefical, as per the same argument, despite the 
reduction in width. This is done since a relatively longer line obtained by moving the shorter line&rsquo;s 
pointer might overcome the reduction in area caused by the width reduction.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxArea</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">maxarea</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">l</span><span class="o">=</span><span class="n">0</span><span class="o">,</span> <span class="n">r</span><span class="o">=</span><span class="n">height</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="n">maxarea</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxarea</span><span class="o">,</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">],</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">])*(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">height</span><span class="o">[</span><span class="n">l</span><span class="o">]&lt;</span><span class="n">height</span><span class="o">[</span><span class="n">r</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">				<span class="n">l</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">r</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">maxarea</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(n) 	Single pass
</span></span><span class="line"><span class="cl">Space complexity: 	O(1) 	Constant space is used 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="integertoRoman"></a></p>
<h1 id="12-integer-to-roman">12-Integer To Roman</h1>
<p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Symbol		Value 
</span></span><span class="line"><span class="cl">I		1
</span></span><span class="line"><span class="cl">V		5
</span></span><span class="line"><span class="cl">X		10
</span></span><span class="line"><span class="cl">L		50
</span></span><span class="line"><span class="cl">C		100
</span></span><span class="line"><span class="cl">D		500
</span></span><span class="line"><span class="cl">M		1000
</span></span></code></pre></td></tr></table>
</div>
</div><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for 
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we 
subtract it making four. The same principle applies to the number nine which is written as IX. There 
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, input is guaranteed to be within the range from 
1 to 3999</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 3 
</span></span><span class="line"><span class="cl">Output: &#34;III&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 4
</span></span><span class="line"><span class="cl">Output: &#34;IV&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 9 
</span></span><span class="line"><span class="cl">Output: &#34;IX&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 58 
</span></span><span class="line"><span class="cl">Output: &#34;LVIII&#34; 
</span></span><span class="line"><span class="cl">Explanation: L=50, V=5, III=3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 1994
</span></span><span class="line"><span class="cl">Output: &#34;MCMXCIV&#34;
</span></span><span class="line"><span class="cl">Explanation: M=1000, CM=900, XC=90 and IV=4 
</span></span></code></pre></td></tr></table>
</div>
</div><p><a name="integertoRomanStringArray"></a></p>
<h2 id="string-array">String Array</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">intToRoman</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">M</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;M&#34;</span><span class="o">,</span> <span class="s">&#34;MM&#34;</span><span class="o">,</span> <span class="s">&#34;MMM&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 1000, 2000, and 3000 since we know the number is in the range 1 to 3999
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">C</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;C&#34;</span><span class="o">,</span> <span class="s">&#34;CC&#34;</span><span class="o">,</span> <span class="s">&#34;CCC&#34;</span><span class="o">,</span> <span class="s">&#34;CD&#34;</span><span class="o">,</span> <span class="s">&#34;D&#34;</span><span class="o">,</span> <span class="s">&#34;DC&#34;</span><span class="o">,</span> <span class="s">&#34;DCC&#34;</span><span class="o">,</span> <span class="s">&#34;DCCC&#34;</span><span class="o">,</span> <span class="s">&#34;CM&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0, 100,  200,   300,  400, 500,  600,   700,    800,  900
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">X</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;X&#34;</span><span class="o">,</span> <span class="s">&#34;XX&#34;</span><span class="o">,</span> <span class="s">&#34;XXX&#34;</span><span class="o">,</span> <span class="s">&#34;XL&#34;</span><span class="o">,</span> <span class="s">&#34;L&#34;</span><span class="o">,</span> <span class="s">&#34;LX&#34;</span><span class="o">,</span> <span class="s">&#34;LXX&#34;</span><span class="o">,</span> <span class="s">&#34;LXXX&#34;</span><span class="o">,</span> <span class="s">&#34;XC&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0,  10,   20,    30,   40,  50,   60,    70,     80,   90
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">I</span><span class="o">[]={</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="s">&#34;I&#34;</span><span class="o">,</span> <span class="s">&#34;II&#34;</span><span class="o">,</span> <span class="s">&#34;III&#34;</span><span class="o">,</span> <span class="s">&#34;IV&#34;</span><span class="o">,</span> <span class="s">&#34;V&#34;</span><span class="o">,</span> <span class="s">&#34;VI&#34;</span><span class="o">,</span> <span class="s">&#34;VII&#34;</span><span class="o">,</span> <span class="s">&#34;VIII&#34;</span><span class="o">,</span> <span class="s">&#34;IX&#34;</span><span class="o">};</span> 
</span></span><span class="line"><span class="cl">	<span class="c1">//represents 0,   1,    2,     3,    4,  5,    6,     7,      8,    9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">M</span><span class="o">[</span><span class="n">num</span><span class="o">/</span><span class="n">1000</span><span class="o">]</span> <span class="o">+</span> <span class="n">C</span><span class="o">[(</span><span class="n">num</span><span class="o">%</span><span class="n">1000</span><span class="o">)/</span><span class="n">100</span><span class="o">]</span> <span class="o">+</span> <span class="n">X</span><span class="o">[(</span><span class="n">num</span><span class="o">%</span><span class="n">100</span><span class="o">)/</span><span class="n">10</span><span class="o">]</span> <span class="o">+</span> <span class="n">I</span><span class="o">[</span><span class="n">num</span><span class="o">%</span><span class="n">10</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="romantoInteger"></a></p>
<h1 id="13-roman-to-integer">13-Roman to Integer</h1>
<p>Roman numerals are represented by seven different symbols I, V, X, L, C, D and M</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Symbol 		Value 
</span></span><span class="line"><span class="cl">I		1
</span></span><span class="line"><span class="cl">V		5
</span></span><span class="line"><span class="cl">X		10 
</span></span><span class="line"><span class="cl">L		50
</span></span><span class="line"><span class="cl">C		100
</span></span><span class="line"><span class="cl">D		500
</span></span><span class="line"><span class="cl">M		1000
</span></span></code></pre></td></tr></table>
</div>
</div><p>For example, two is written as II in Roman numeral, just two one&rsquo;s added together. Twelve is written as
XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for 
four is not IIII. Instead, the number four is written as IV. Because the one is before the five we 
subtract it making four. The same principle applies to the number nine which is written as IX. There 
are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9</li>
<li>X can be placed before L (50) and C(100) to make 40 and 90</li>
<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>
</ul>
<p>Given an integer, convert it to a roman numeral, Input is guaranteed to be within the range from 
1 to 3999</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">Input: &#34;III&#34; 
</span></span><span class="line"><span class="cl">Output: 3 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;IV&#34; 
</span></span><span class="line"><span class="cl">Output: 4
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;IX&#34; 
</span></span><span class="line"><span class="cl">Output: 9 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;LVIII&#34; 
</span></span><span class="line"><span class="cl">Output: 58 
</span></span><span class="line"><span class="cl">Explanation: L=50, V=5, III=3
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;MCMXCIV&#34; 
</span></span><span class="line"><span class="cl">Output: 1994
</span></span><span class="line"><span class="cl">Explanation: M=1000, CM=900, XC=90 and IV=4
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="romantoIntegerCharacterArray"></a></p>
<h2 id="character-array">Character Array</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">romanToInt</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;I&#39;</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;V&#39;</span><span class="o">,</span> <span class="n">5</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;X&#39;</span><span class="o">,</span> <span class="n">10</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;L&#39;</span><span class="o">,</span> <span class="n">50</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;C&#39;</span><span class="o">,</span> <span class="n">100</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;D&#39;</span><span class="o">,</span> <span class="n">500</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;M&#39;</span><span class="o">,</span> <span class="n">1000</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kt">char</span><span class="o">[]</span> <span class="n">sc</span><span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">total</span><span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">pre</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">sc</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kt">int</span> <span class="n">curr</span><span class="o">=</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sc</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> 
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">curr</span><span class="o">&lt;=</span><span class="n">pre</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">total</span><span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">curr</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">total</span><span class="o">=</span><span class="n">total</span><span class="o">+</span><span class="n">curr</span> <span class="o">-</span><span class="n">2</span><span class="o">*</span><span class="n">pre</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">pre</span><span class="o">=</span><span class="n">curr</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">total</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="longestCommonPrefix"></a></p>
<h1 id="14-longest-common-prefix">14-Longest Common Prefix</h1>
<p>Write a function to find the longest common prefix string amongst an array of strings. If there is no 
common prefix, return an empty string &quot;&quot;</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: [&#34;flower&#34;, &#34;flow&#34;, &#34;flight&#34;]
</span></span><span class="line"><span class="cl">Output: &#34;fl&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: [&#34;dog&#34;, &#34;racecar&#34;, &#34;car&#34;] 
</span></span><span class="line"><span class="cl">Output: &#34;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Explanation: There is no common prefix among the input strings 
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Note:</em> 
All given inputs are in lowercase letters a-z</p>
<p><br><br>
<a name="longestCommonPrefixHorizontalScanning"></a></p>
<h2 id="horizontal-scanning">Horizontal Scanning</h2>
<br>
*Intuition:* 
<p>For a start we will describe a simple way of find the longest prefix shared by a set of strings 
LCP(S1 &hellip; Sn).We will use the observation that:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<em>Algorithm:</em></p>
<p>To employ this idea, the algorithm iterates through the strings [S1 &hellip; Sn]. finding at each iteration
i the longest common prefix of strings LCP(S1 &hellip; Si). When LCP(S1 &hellip; Si) is an empty string, the 
algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 &hellip; Sn)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">{leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">   \       /      
</span></span><span class="line"><span class="cl">  LCP{1,2} = leets
</span></span><span class="line"><span class="cl">  	     leetcode
</span></span><span class="line"><span class="cl">	     leet 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 	\	{leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">		 \ 			   /
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		 LCP{1,3} = leet
</span></span><span class="line"><span class="cl">		 	    leet
</span></span><span class="line"><span class="cl">			    leet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			      \          {leets, leetcode, leet, leeds}
</span></span><span class="line"><span class="cl">			       \ 				  /
</span></span><span class="line"><span class="cl">			       LCP{1,4}   leet
</span></span><span class="line"><span class="cl">			       		  leeds
</span></span><span class="line"><span class="cl">					  lee
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				LCP{1,4} = &#34;lee&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="n">longestCommon</span> <span class="nf">Prefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">prefix</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">indexOf</span><span class="o">(</span><span class="n">prefix</span><span class="o">)</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">prefix</span><span class="o">=</span><span class="n">prefix</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">prefix</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">prefix</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">prefix</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(S)	Where S is the sum of all characters in all strings. In the worse case
</span></span><span class="line"><span class="cl">				all n strings are the same. The algorithm compares the string S1 with 
</span></span><span class="line"><span class="cl">				the other strings [S2 ... Sn]. There are S character comparisons where
</span></span><span class="line"><span class="cl">				S is the sum of all characters in the input array 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity: 	O(1) 	We only used constant extra space 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestCommonPrefixVerticalScanning"></a></p>
<h2 id="vertical-scanning">Vertical Scanning</h2>
<p>Imagine a very short string is at the end of the array. The above approach will still do S comparisons.
One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on
the same column (same character index of the strings) before moving on to the next column.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">		<span class="kt">char</span> <span class="n">c</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">==</span><span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">strs</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)!=</span><span class="n">c</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">];</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time complexity: 	O(S) 	Where S is the sum of all characters in all strings. In the worst case
</span></span><span class="line"><span class="cl">				there will be n equal strings with length m and the algorithm performs
</span></span><span class="line"><span class="cl">				S=n*m character comparisons. Even the worst case is still the same as 
</span></span><span class="line"><span class="cl">				Approach 1, in the best case there are at most n*minLen comparisons 
</span></span><span class="line"><span class="cl">				where minLen is the length of the shortest string in the array. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity: 	O(1)	We only used constant extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestCommonPrefixDivideandConquer"></a></p>
<h2 id="divide-and-conquer">Divide and Conquer</h2>
<p>The idea of the algorithm comes from the associative property of LCP operation. We notice that: 
LCP(S1 &hellip; Sn) = LCP(LCP(S1 &hellip; Sk), LCP(Sk+1 &hellip; Sn)), where LCP(S1 &hellip; Sn) is the longest common
prefix in a set of strings [S1 &hellip; Sn], 1&lt;k&lt;n</p>
<p><br><br>
<em>Algorithm</em></p>
<p>To apply the previous observation, we use the divide and conquer technique, where we split the 
LCP(Si &hellip; Sj) problem into two subproblems LCP(Si &hellip; Smid) and LCP(Smid+1 &hellip; Sj), where mid is 
(i+j)/2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem 
LCP(Si &hellip; Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till 
there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the 
LCP(Si &hellip; Sj)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">				{leetcode, leet, lee, le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				    /                \   
</span></span><span class="line"><span class="cl">Divide 			{leetcode, leet}            {lee, le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Conquer				|			 | 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     {leet} 		        {le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			         \                      /
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				 	   {le} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Searching for the longest common prefix (LCP) in dataset {leetcode, leet, lee, le} 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">==</span><span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">l</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">mid</span><span class="o">=(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">lcpLeft</span><span class="o">=</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span><span class="n">l</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">lcpRight</span><span class="o">=</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span><span class="n">r</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">commonPrefix</span><span class="o">(</span><span class="n">lcpLeft</span><span class="o">,</span><span class="n">lcpRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="nf">commonPrefix</span><span class="o">(</span><span class="n">String</span> <span class="n">left</span><span class="o">,</span> <span class="n">String</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">min</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">right</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">min</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span><span class="n">right</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">left</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">left</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">min</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<p>In the worst case we have n equal strings with length m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: O(S)		where S is the number of all characters in the array, S=m*n so time
</span></span><span class="line"><span class="cl">				complexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the
</span></span><span class="line"><span class="cl">				best case the algorithm performs O(minLen * n) comparisons, where
</span></span><span class="line"><span class="cl">				minLen is the shortest string of the array 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(m*log(n))	There is a memory overhead since we sotre recursive call in the 
</span></span><span class="line"><span class="cl">				execution stack. There are log(n) recursive calls, each store needs m
</span></span><span class="line"><span class="cl">				space to store the result so space complexity is O(m*log(n))
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestCommonPrefixBinarySearch"></a></p>
<h2 id="binary-search">Binary Search</h2>
<p>The idea is to apply binary search method to find the string with maximum value L, which is common 
prefix of all the strings. The algorithm searches the space in the interval (0 &hellip; minLen), where 
minLen is minimum string length and the maximum possible common prefix. Each time search space is 
divided in two equal parts, one of them is discarded because it is sure that it doesn&rsquo;t contain the 
solution. There are two possible cases:</p>
<ul>
<li>S[1&hellip;mid] is not a common string. This means that for each j&gt;i, S[1&hellip;j] is not a common string and we discard the second half of the search space</li>
<li>S [1&hellip;mid] is common string. This means that for each i&lt;j, S[1&hellip;i] is a common string and we discard the first half of the search space, because we try to find longer common prefix</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 				{leets, leetcode, leetc, leeds} 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						|
</span></span><span class="line"><span class="cl">					      
</span></span><span class="line"><span class="cl">					     &#34;leets&#34;
</span></span><span class="line"><span class="cl">					    /        \
</span></span><span class="line"><span class="cl">					 &#34;lee&#34;      &#34;ts&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					     midpoint 
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leetcode&#34; : yes
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leetc&#34; : yes
</span></span><span class="line"><span class="cl">				&#34;lee&#34; in &#34;leeds&#34; : yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						|
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					     &#34;leets&#34;
</span></span><span class="line"><span class="cl">					     /     \
</span></span><span class="line"><span class="cl">					  &#34;lee&#34;    &#34;ts&#34;
</span></span><span class="line"><span class="cl">					    |      /   \
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					  &#34;lee&#34;   &#34;t&#34;   &#34;s&#34;
</span></span><span class="line"><span class="cl">					        
</span></span><span class="line"><span class="cl">						   midpoint
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leetcode&#34; : yes
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leetc&#34; : yes 
</span></span><span class="line"><span class="cl">						   &#34;leet&#34; in &#34;leeds&#34; : no
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						   LCP= &#34;lee&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">strs</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">minLen</span><span class="o">=</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">:</span> <span class="n">strs</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">minLen</span><span class="o">=</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minLen</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">low</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">high</span><span class="o">=</span><span class="n">min</span> <span class="n">Len</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">low</span><span class="o">&lt;=</span><span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">middle</span><span class="o">=(</span><span class="n">low</span><span class="o">+</span><span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isCommonPrefix</span><span class="o">(</span><span class="n">strs</span><span class="o">,</span> <span class="n">middle</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">low</span><span class="o">=</span><span class="n">middle</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> 
</span></span><span class="line"><span class="cl">			<span class="n">high</span><span class="o">=</span><span class="n">middle</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isCommonPrefix</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">String</span> <span class="n">str1</span><span class="o">=</span><span class="n">strs</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">len</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(!</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">startsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>**Complexity Analysis</p>
<p>In the worst case we have n equal strings with length m</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Time complexity: 	O(S * log(n)), where S is the sum of all characters in all strings. The
</span></span><span class="line"><span class="cl">				algorithm makes log(n) iterations, for each of them there are S=m*n 
</span></span><span class="line"><span class="cl">				comparisons, which gives in total O(S * log(n)) time complexity
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	Space complexity: 	O(1). We only used constant extra space 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="longestCommonPrefixFurtherThoughts"></a></p>
<h2 id="further-thoughts">Further Thoughts</h2>
<p>Considering a slightly different problem:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S.
</span></span><span class="line"><span class="cl">	This LCP query will be called frequently
</span></span></code></pre></td></tr></table>
</div>
</div><p>We coule optimize LCP queries by storing the set of keys S in a Trie. See this for <a href="#trie" rel="">Trie 
implementation</a>. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to 
find the longest common prefix of a string q and all key strings. This means that we have to find the
deepest path from the root, which satisfies the following conditions</p>
<ul>
<li>it is a prefix of query string q</li>
<li>each node along the path must contain only one child element. Otherwise the found path will not be a
common prefix among all strings</li>
<li>the path doesn&rsquo;t comprise of nodes which are marked as end of key. Otherwise the path couldn&rsquo;t be a
prefix of a key which is shorter than itself</li>
</ul>
<p><br><br>
<em>Algorithm</em></p>
<p>The only question left is how to find the deepest path in the Trie, that fulfills the requirements 
above. The most effective way is to build a trie from {S1 &hellip; Sn] strings. Then find the prefix of 
query string q in the Trie. We traverse the Trie from the root, till it is impossible to continue the
path in the Trie because one of the conditions above is not satisfied.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Searching for the longest common prefix of string &#34;le&#34; in a Trie from dataset {lead, leet}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			Root
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	l   ===========&gt;  \  l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	e   ===============&gt;   \ e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LCP &#34;le&#34; FOUND	=============&gt;   3   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     a	/  \ e    End of Key &#34;lee&#34; 
</span></span><span class="line"><span class="cl">				     
</span></span><span class="line"><span class="cl">			      6      4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			 d  /	       \ t
</span></span><span class="line"><span class="cl">				        
</span></span><span class="line"><span class="cl">END OF KEY &#34;lead&#34;	  7		 5   End of key &#34;leet&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public String longestCommonPrefix(String q, String[] strs) {
</span></span><span class="line"><span class="cl">    if (strs == null || strs.length == 0)
</span></span><span class="line"><span class="cl">         return &#34;&#34;;  
</span></span><span class="line"><span class="cl">    if (strs.length == 1)
</span></span><span class="line"><span class="cl">         return strs[0];
</span></span><span class="line"><span class="cl">    Trie trie = new Trie();      
</span></span><span class="line"><span class="cl">    for (int i = 1; i &lt; strs.length ; i++) {
</span></span><span class="line"><span class="cl">        trie.insert(strs[i]);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    return trie.searchLongestPrefix(q);
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class TrieNode {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    // R links to node children
</span></span><span class="line"><span class="cl">    private TrieNode[] links;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private final int R = 26;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private boolean isEnd;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    // number of children non null links
</span></span><span class="line"><span class="cl">    private int size;    
</span></span><span class="line"><span class="cl">    public void put(char ch, TrieNode node) {
</span></span><span class="line"><span class="cl">        links[ch -&#39;a&#39;] = node;
</span></span><span class="line"><span class="cl">        size++;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    public int getLinks() {
</span></span><span class="line"><span class="cl">        return size;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    //assume methods containsKey, isEnd, get, put are implemented as it is described
</span></span><span class="line"><span class="cl">   //in  https://leetcode.com/articles/implement-trie-prefix-tree/)
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public class Trie {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    private TrieNode root;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    public Trie() {
</span></span><span class="line"><span class="cl">        root = new TrieNode();
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">//assume methods insert, search, searchPrefix are implemented
</span></span><span class="line"><span class="cl">    private String searchLongestPrefix(String word) {
</span></span><span class="line"><span class="cl">        TrieNode node = root;
</span></span><span class="line"><span class="cl">        StringBuilder prefix = new StringBuilder();
</span></span><span class="line"><span class="cl">        for (int i = 0; i &lt; word.length(); i++) {
</span></span><span class="line"><span class="cl">            char curLetter = word.charAt(i);
</span></span><span class="line"><span class="cl">            if (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == 1) &amp;&amp; (!node.isEnd())) {
</span></span><span class="line"><span class="cl">                prefix.append(curLetter);
</span></span><span class="line"><span class="cl">                node = node.get(curLetter);
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">            else
</span></span><span class="line"><span class="cl">                return prefix.toString();
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         }
</span></span><span class="line"><span class="cl">         return prefix.toString();
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In the worst case query q has length m and is equal to all n strings of the array 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity:   O(S)   where S is the number of all characters in the array, LCP query O(m) 
</span></span><span class="line"><span class="cl">  			  Trie build has O(S) time complexity. To find the common prefix of q 
</span></span><span class="line"><span class="cl">			  in the Trie takes in the worst O(m). 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space complexity:  O(S)   we only used additional S extra space for the Trie. 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="threeSum"></a></p>
<h1 id="15-3sum">15-3Sum</h1>
<p>Given an array &ldquo;nums&rdquo; of n integers, are there elements a, b, c in nums such that a+b+c=0? Find all 
unique triplets in the array which gives the sum of zero.</p>
<p>Note:</p>
<p>The solution set must not contain duplicate triplets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums = [-1, 0, 1, 2, -1, -4]. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A solution set is: 
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  [-1, 0, 1],
</span></span><span class="line"><span class="cl">  [-1, -1, 2]
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="threeSumSortedArray"></a></p>
<h2 id="sorted-array">Sorted Array</h2>
<p>The method is to sort an input array and then run through all indices of a possible first element of a
triplet. For each element we make another 2Sum sweep of the remaining part of the array. Also we want
to skip elements to avoid duplicates in the answer without expending extra memory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] num) {
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    //Arrays.sort re-arranges the array of integers in ascending order
</span></span><span class="line"><span class="cl">    //ex. [1, 2, 3, 4]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Arrays.sort(num);
</span></span><span class="line"><span class="cl">    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;(); 
</span></span><span class="line"><span class="cl">    for (int i = 0; i &lt; num.length-2; i++) {
</span></span><span class="line"><span class="cl">        if (i == 0 || (i &gt; 0 &amp;&amp; num[i] != num[i-1])) {
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">	    //This lets us skip some of the duplicate entries in the array
</span></span><span class="line"><span class="cl">	    
</span></span><span class="line"><span class="cl">	    int lo = i+1, hi = num.length-1, sum = 0 - num[i];
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	    //This is for the 2 Sum sweep 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            while (lo &lt; hi) {
</span></span><span class="line"><span class="cl">                if (num[lo] + num[hi] == sum) {
</span></span><span class="line"><span class="cl">                    res.add(Arrays.asList(num[i], num[lo], num[hi]));
</span></span><span class="line"><span class="cl">                    while (lo &lt; hi &amp;&amp; num[lo] == num[lo+1]) lo++;
</span></span><span class="line"><span class="cl">                    while (lo &lt; hi &amp;&amp; num[hi] == num[hi-1]) hi--;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		    //This lets us skip some of the duplicate entries in the array
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    lo++; hi--;
</span></span><span class="line"><span class="cl">                } else if (num[lo] + num[hi] &lt; sum) lo++;
</span></span><span class="line"><span class="cl">                else hi--;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		//This allows us to optimize slightly since we know that the array is sorted
</span></span><span class="line"><span class="cl">           }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    return res;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity:  O(n^2)   We go through a maximum of n elements for the first element of a triplet, 
</span></span><span class="line"><span class="cl">			   and then when making a bi-directional 2Sum sweep of the remaining part of 
</span></span><span class="line"><span class="cl">			   the array we also go through a maxiumum of n elements. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: O(1)	   If we assume the return linked list is not extra space, then we do not 
</span></span><span class="line"><span class="cl">			   allocate any significant extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="threeSumClosest"></a></p>
<h1 id="16-3sum-closest">16-3Sum Closest</h1>
<p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum
is closest to target. Return the sum of the three integers. You may assume that each input would have
exactly one solution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums=[-1, 2, 1, -4], and target=1.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The sum that is closest to the target is 2. (-1+2+1=2)
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="threeSumClosestThreePointers"></a></p>
<h2 id="3-pointers">3 Pointers</h2>
<p>Similar to the previous 3Sum problem, we use three pointers to point to the current element, next 
element and the last element. If the sum is less than the target, it means that we need to add a larger
element so next element move to the next. If the sum is greater, it means we have to add a smaller 
element so last element move to the second last element. Keep doing this until the end. Each time 
compare the difference between sum and target, if it is less than minimum difference so far, then 
replace result with it, otherwise continue iterating.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">public class Solution {
</span></span><span class="line"><span class="cl">		public int threeSumClosest(int[] num, int target) {
</span></span><span class="line"><span class="cl">		int result=num[0] + num[1] + num[num.length-1];
</span></span><span class="line"><span class="cl">		Arrays.sort(num);
</span></span><span class="line"><span class="cl">		for (int i=0; i&lt;num.length -2; i++) {
</span></span><span class="line"><span class="cl">			int start= i+1, end = num.length -1;
</span></span><span class="line"><span class="cl">			while (start &lt; end) {
</span></span><span class="line"><span class="cl">				int sum = num[i] + num[start] + num[end];
</span></span><span class="line"><span class="cl">				if (sum &gt; target) {
</span></span><span class="line"><span class="cl">					end--;
</span></span><span class="line"><span class="cl">				} else {
</span></span><span class="line"><span class="cl">					start++;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">				if (Math.abs(sum-target) &lt; Math.abs(result-target)) {
</span></span><span class="line"><span class="cl">					result=sum;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">		return result;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="letterCombinationsofaPhoneNumber"></a></p>
<h1 id="17-letter-combinations-of-a-phone-number">17-Letter Combinations of a Phone Number</h1>
<p>Given a string contianing digits from 2-9 inclusive, return all possible letter combinations that the 
number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not
map to any letters.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2 - abc 	3 - def 	4 - ghi		5 - jkl		6 - mno		7 - pqrs 	8 - tuv
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">						9 - wxyz
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;23&#34; 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output: [&#34;ad&#34;, &#34;ae&#34;, &#34;af&#34;, &#34;bd&#34;, &#34;be&#34;, &#34;bf&#34;, &#34;cd&#34;, &#34;ce&#34;, &#34;cf&#34;]. 
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Note: The above answer is in lexicographical order but the answer can be in any order</em></p>
<p><br><br>
<a name="letterCombinationsofaPhoneNumberBacktracking"></a></p>
<h2 id="backtracking">Backtracking</h2>
<p>Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the 
solution candidate turns to not be a solution (or at least not the last one), backtracking algorithm 
discards it by making some changes on the previous step, ie <em>backtracks</em> and then tries again.</p>
<p>Here is a backtrack function backtrack(combination, next_digits) which takes as arguments an ongoing 
letter combination and the next digits to check.</p>
<ul>
<li>If there are no more digits to check that means the current combination is done</li>
<li>If there are still digits to check:
<ul>
<li>Iterate over the letters mapping to the next available digit</li>
<li>Append the current letter to the current combination and proceed to check next digits:</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	  combination = combination + letter
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	  backtrack(combination + letter, next_digits[1:]).
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Visual Representation</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">						&#34;2 3&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						 
</span></span><span class="line"><span class="cl">						  2
</span></span><span class="line"><span class="cl">						
</span></span><span class="line"><span class="cl">					      /   |   \
</span></span><span class="line"><span class="cl">                                            
</span></span><span class="line"><span class="cl">					     a    b    c
</span></span><span class="line"><span class="cl">                                       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				         /        |        \
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                                       
</span></span><span class="line"><span class="cl">				      3           3            3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				    / | \       / | \        / | \
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				   d  e  f     d  e  f      d  e  f
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">			[&#34;ad&#34;, &#34;ae&#34;, &#34;af&#34;, &#34;bd&#34;, &#34;be&#34;, &#34;bf&#34;, &#34;cd&#34;, &#34;ce&#34;, &#34;cf&#34;]
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{{</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;2&#34;</span><span class="o">,</span> <span class="s">&#34;abc&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;3&#34;</span><span class="o">,</span> <span class="s">&#34;def&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;4&#34;</span><span class="o">,</span> <span class="s">&#34;ghi&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;5&#34;</span><span class="o">,</span> <span class="s">&#34;jkl&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;6&#34;</span><span class="o">,</span> <span class="s">&#34;mno&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;7&#34;</span><span class="o">,</span> <span class="s">&#34;pqrs&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;8&#34;</span><span class="o">,</span> <span class="s">&#34;tuv&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">put</span><span class="o">(</span><span class="s">&#34;9&#34;</span><span class="o">,</span> <span class="s">&#34;wxyz&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}};</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">backtrack</span><span class="o">(</span><span class="n">String</span> <span class="n">combination</span><span class="o">,</span> <span class="n">String</span> <span class="n">next_digits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">//if there are no more digits to check 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="o">(</span><span class="n">next_digits</span><span class="o">.</span><span class="na">length</span><span class="o">()==</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="c1">//the combination is done 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="n">output</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">combination</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">//if there are still digits to check 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">else</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">			<span class="c1">//iterate over all letters which map the next available digit 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="n">String</span> <span class="n">digit</span> <span class="o">=</span> <span class="n">next_digits</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">			<span class="n">String</span> <span class="n">letters</span> <span class="o">=</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">digit</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">letters</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">String</span> <span class="n">letter</span> <span class="o">=</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">digit</span><span class="o">).</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//append the current letter to the combination and proceed to next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="n">backtrack</span><span class="o">(</span><span class="n">combination</span> <span class="o">+</span> <span class="n">letter</span><span class="o">,</span> <span class="n">next_digits</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">letterCombinations</span><span class="o">(</span><span class="n">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">backtrack</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">digits</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">output</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
</span></span><span class="line"><span class="cl">					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
</span></span><span class="line"><span class="cl">					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
</span></span><span class="line"><span class="cl">					total number digits in the input 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="letterCombinationsofaPhoneNumberFIFOQueue"></a></p>
<h2 id="first-in-first-out-fifo-queue">First In First Out (FIFO) Queue</h2>
<p>This solution utilizes the Single Queue Breadth First Search (BFS) which is an algorithm for traversing
or searching tree or graph data structures. It starts at the tree root and explores all of the neighbor
nodes.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">letterCombinations</span><span class="o">(</span><span class="n">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">String</span><span class="o">[]</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&#34;0&#34;</span><span class="o">,</span> <span class="s">&#34;1&#34;</span><span class="o">,</span> <span class="s">&#34;abc&#34;</span><span class="o">,</span> <span class="s">&#34;def&#34;</span><span class="o">,</span> <span class="s">&#34;ghi&#34;</span><span class="o">,</span> <span class="s">&#34;jkl&#34;</span><span class="o">,</span> <span class="s">&#34;mno&#34;</span><span class="o">,</span> <span class="s">&#34;pqrs&#34;</span><span class="o">,</span> <span class="s">&#34;tuv&#34;</span><span class="o">,</span> <span class="o">{</span><span class="n">wxyz</span><span class="s">&#34;};
</span></span></span><span class="line"><span class="cl"><span class="s">	ans.add(&#34;</span><span class="err">&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Character</span><span class="o">.</span><span class="na">getNumericValue</span><span class="o">(</span><span class="n">digits</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">//we terminate the while loop when we encounter a new-formed string which is more than
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">//the current level i 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		
</span></span><span class="line"><span class="cl">		<span class="c1">//peek retrieves the first value of the linked list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">while</span> <span class="o">(</span><span class="n">ans</span><span class="o">.</span><span class="na">peek</span><span class="o">().</span><span class="na">length</span><span class="o">==</span><span class="n">i</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="c1">//removes the head or the first value in the linkedlist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="n">String</span> <span class="n">t</span> <span class="o">=</span> <span class="n">ans</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">s</span> <span class="o">:</span> <span class="n">mapping</span><span class="o">[</span><span class="n">x</span><span class="o">].</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">t</span><span class="o">+</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//this works because add appends to the end of the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Time Complexity: 	O(3^N * 4^M) 	where N is the number of digits in the input that maps to 3
</span></span><span class="line"><span class="cl">					letters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits 
</span></span><span class="line"><span class="cl">					in the input that maps to 4 letters (eg. 7, 9) and N+M is the 
</span></span><span class="line"><span class="cl">					total number digits in the input 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(3^N * 4^M)	since one has to keep 3^N * 4^M solutions 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="fourSum"></a></p>
<h1 id="18-4sum">18-4Sum</h1>
<p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such
that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target</p>
<p><em>Note:</em>
The solution set must not contain duplicate quadruplets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given array nums = [1, 0, -1, 0, -2, 2], and target = 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A solution set is: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  [-1,  0, 0, 1],
</span></span><span class="line"><span class="cl">  [-2, -1, 1, 2],
</span></span><span class="line"><span class="cl">  [-2,  0, 0, 2]
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="fourSumSortedArray"></a></p>
<h2 id="sorted-array-1">Sorted Array</h2>
<p>The idea is the same as the other numbered sum problems like 2sum and 3sum. We sort the array and then
proceed to interate through the values until we end up with a result that we are looking for.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">fourSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">&lt;</span><span class="n">4</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">num</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">//picking the first candidate must leave room
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						       <span class="c1">//for the other values 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">3</span><span class="o">]&gt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//first candidate too large, search finished
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">]&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//first candidate too small 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">i</span><span class="o">&gt;</span><span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="c1">//prevents duplicate in ans list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">//picking the second candidate must
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>								 <span class="c1">//leave room for other values 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="n">2</span><span class="o">]&gt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//second candidate too large
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">					<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//second candidate too small
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span><span class="o">(</span><span class="n">j</span><span class="o">&gt;</span><span class="n">i</span><span class="o">+</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">					<span class="c1">//prevents duplicate results in ans list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="kt">int</span> <span class="n">low</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">high</span><span class="o">=</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">//two pointer search
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]+</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sum</span><span class="o">==</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						
</span></span><span class="line"><span class="cl">						<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">],</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]));</span>
</span></span><span class="line"><span class="cl">						<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span><span class="o">&amp;&amp;</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">low</span><span class="o">+</span><span class="n">1</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">							<span class="n">low</span><span class="o">++;</span> <span class="c1">//skipping over duplicates
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="k">while</span><span class="o">(</span><span class="n">low</span><span class="o">&lt;</span><span class="n">high</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">]==</span><span class="n">num</span><span class="o">[</span><span class="n">high</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">							<span class="n">high</span><span class="o">--;</span> <span class="c1">//skipping over duplicates 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="o">}</span>
</span></span><span class="line"><span class="cl">						<span class="n">low</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">						<span class="n">high</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="c1">//moving window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">low</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">high</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="removeNthNodefromEndofList"></a></p>
<h1 id="19-remove-nth-node-from-end-of-list">19-Remove Nth Node From End of List</h1>
<p>Given a linked list, remove the n-th node from the end of the list and return its head</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, and n=2 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">After removing the second node from the end, the linked list becomes 
</span></span><span class="line"><span class="cl">		   
</span></span><span class="line"><span class="cl">		   1 -&gt; 2 -&gt; 3 -&gt; 5
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong>
Given n will always be valid</p>
<p><strong>Follow up:</strong>
Could you do this in one pass?</p>
<p><br><br>
<a name="removeNthNodefromEndofListTwoPassAlgorithm"></a></p>
<h2 id="two-pass-algorithm">Two Pass Algorithm</h2>
<p><strong>Intuition</strong></p>
<p>We notice that the problem could be simply reduced to another one: Remove the (L-n+1)th node from the
beginning of the list, where L is the list length. This problem is easy to solve once we found the 
list length L.</p>
<p><br><br>
<strong>Algorithm</strong></p>
<p>First we will add an auxiliary &ldquo;dummy&rdquo; node, which points to the list head. The &ldquo;dummy&rdquo; node is used to
simplify some corner cases such as a list with only one node or removing the head of the list. On the 
first pass, find the list length L. Then we set a pointer to the dummy node and start to move it 
through the list till it comes to the (L-n)th node. We relink next pointer of the (L-n)th node to the
(L-n+2)th node and we are done.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	D -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		    |
</span></span><span class="line"><span class="cl">		    v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D -&gt; 1 -&gt; 2 -&gt; 4 -&gt; NULL
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeNthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">	<span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">length</span> <span class="o">=</span><span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">length</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">length</span> <span class="o">-=</span> <span class="n">n</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">first</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">length</span><span class="o">&gt;</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">length</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(L) 	The algorithm makes two traversals of the list, first to calculate the 
</span></span><span class="line"><span class="cl">				list length L and second to find the (L-n)th node. There are 2L-n 
</span></span><span class="line"><span class="cl">				operations and time complexity is O(L)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(1) 	We only used constant extra space
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="removeNthNodefromEndofListOnePassAlgorithm"></a></p>
<h2 id="one-pass-algorithm">One Pass Algorithm</h2>
<p>The previous algorithm could be optimized to one pass. Instead of one pointer, we could use two 
pointers. The first pointer advances the list by n+1 steps from the beginning, while the second pointer
starts from the beginning of the list. Now, both pointers are separated by exactly n nodes. We maintain
this constant gap by advancing both pointers together until the first pointer arrives past the last 
node. The second pointer will be pointing at the nth node counting from the last. We relink the next
pointer of the node referenced by the second pointer to point to the node&rsquo;s next next node.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Maintaining N=2 nodes apart between the first and second pointer 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       first 	 Head 
</span></span><span class="line"><span class="cl">       second 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Move the first pointer N+1 steps 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     |
</span></span><span class="line"><span class="cl">			     v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      second     Head       First
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Move the first and second pointers together until the first pointer arrives past the last node 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			     |
</span></span><span class="line"><span class="cl">			     v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		 Head      Second           First
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Second pointer points to the nth node counting from last so link node to the node&#39;s next next node 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				  |
</span></span><span class="line"><span class="cl">				  v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	D	-&gt; 1 -&gt; 2 -&gt; 3 -&gt;   -&gt; 5 -&gt; NULL
</span></span><span class="line"><span class="cl">	         
</span></span><span class="line"><span class="cl">		 Head      Second           First
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeNthFromEnd</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">ListNode</span> <span class="n">second</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//Moves the first pointer so that the first and second nodes are separated by n nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Move first to the end, maintaining the gap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="o">(</span><span class="n">first</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">first</span><span class="o">=</span><span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">second</span><span class="o">=</span><span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">=</span><span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(L) 	The algorithm makes one traversal of the list of L nodes. Therefore
</span></span><span class="line"><span class="cl">				time complexity is O(L)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(1)	Only constant extra space was used 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="validParentheses"></a></p>
<h1 id="20-valid-parentheses">20-Valid Parentheses</h1>
<p>Given a string containing just the characters &lsquo;(&rsquo;, &lsquo;)&rsquo;, &lsquo;{&rsquo;, &lsquo;}&rsquo;, &lsquo;[&rsquo;, &lsquo;]&rsquo;, determine if the input 
string is valid</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets</li>
<li>Open brackets must be closed in the correct order</li>
</ol>
<p>Note that an empty string is also considered valid</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 1: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;()&#34;
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 2: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;()[]{}&#34;
</span></span><span class="line"><span class="cl">Output: true 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 3: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;(]&#34;
</span></span><span class="line"><span class="cl">Output: false
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 4: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;([)]&#34;
</span></span><span class="line"><span class="cl">Output: false
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example 5: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: &#34;{[]}&#34;
</span></span><span class="line"><span class="cl">Output: true
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="validParenthesesCounting"></a></p>
<h2 id="counting-method">Counting method</h2>
<p><strong>Intuition</strong></p>
<p>Imagine you are writing a small compiler for your college project and one of the tasks or sub-tasks for
the compiler would be to detect if the parenthesis are in place or not.</p>
<p>The algorithm we will look at in this article can be then used to process all the parenthesis in the 
program your compiler is compiling and checking if all the parenthesis are in place. This makes 
checking if a given string of parenthesis is valid or not, an important programming problem.</p>
<p>The expressions that we will deal with in this problem can consist of three different types of 
parenthesis:</p>
<ul>
<li>()</li>
<li>{}</li>
<li>[]</li>
</ul>
<p>Before looking at how we can check if a given expression consisting of thes parenthesis is valid or 
not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So,
the expressions we can encounter in this simplified version of the problem are:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(((((()))))) -- VALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">()()()()     -- VALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(((((((()    -- INVALID
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">((()(())))   -- VALID
</span></span></code></pre></td></tr></table>
</div>
</div><p>Let&rsquo;s look at a simple algorithm to deal with this problem</p>
<p><br><br></p>
<ol>
<li>
<p>We process the expression one bracket at a time starting from the left</p>
</li>
<li>
<p>Suppose we encounter an opening bracket ie. <code>(</code>, it may or may not be an invalid expression because
there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we 
simply increment the counter keeping track of the left parenthesis till now. <code>left += 1</code></p>
</li>
<li>
<p>If we encounter a closing bracket, this has two meanings:</p>
<ul>
<li>
<p>There was no matching opening bracket for this closing bracket and in that case we have an invalid
expression. This is the case when <code>left==0</code> ie. when there are no unmatched left brackets 
available</p>
</li>
<li>
<p>We had some unmatched opening bracket available to match this closing bracket. This is the case 
when <code>left&gt;0</code> ie. we have unmatched left brackets available</p>
</li>
</ul>
</li>
<li>
<p>If we encounter a closing bracket ie. <code>)</code> when left==0, then we have an invalid expression on our 
hands. Else, we decrement <code>left</code> thus reducing the number of unmatched left parenthesis available.</p>
</li>
<li>
<p>Continue processing the string until all parenthesis have been processed</p>
</li>
<li>
<p>If in the end we still have an unmatched left parenthesis available, this implies an invalid 
expression</p>
</li>
</ol>
<p><br><br></p>
<p>The reason we discussed this particular algorithm here is because the approach for the approach for 
the original problem derives its inspiration from this very solution.</p>
<p>If we try and follow the same approach for our original problem, then it simply won&rsquo;t work. The reason
a simple counter based approach works above is because all the parenthesis are of the same type. So 
when we encounter a closing bracket, we simply assume a corresponding opening matching bracket 
to be available ie. if <code>left&gt;0</code></p>
<p>But in our problem, if we encounter say <code>]</code>, we don&rsquo;t really know if there is a corresponding opening
<code>[</code> available or not. You could say:</p>
<blockquote>
<p>Why not maintain a separate counter for the different types of parenthesis?</p>
</blockquote>
<p>This doesn&rsquo;t work because the relative placement of the parenthesis also matters here eg: <code>[{]</code></p>
<p><br><br></p>
<p>If we simply keep counters here, then as soon as we encounter the closing square bracket, we would 
know there is an unmatched opening square bracket available as well. But, the **closest unmatched 
opening bracket available is a curly bracket and not a square bracket and hence the counting approach
breaks here.</p>
<p><br><br>
<a name="validParenthesesStack"></a></p>
<h2 id="stacks">Stacks</h2>
<p>An interesting property about a valid parenthesis expression is that a sub-expression. (Not every 
sub-expression) eg.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">	{ [ [ ] { } ] } ( ) ( ) 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	  ^         ^
</span></span><span class="line"><span class="cl">	  |         |
</span></span></code></pre></td></tr></table>
</div>
</div><p>The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort 
of a recursive structure to the problem. For example consider the expression enclosed within the 
marked parenthesis in the diagram above. The opening bracket is at index <code>1</code> and the corresponding 
closing bracket is at index <code>6</code>.</p>
<blockquote>
<p>What if whenever we encounter a matching pair of parenthesis in the expression we simply remove it
from the expression?</p>
</blockquote>
<p>Let&rsquo;s have a look at this idea below where we remove the smaller expressions one at a time from the 
overall expression and since this is a valid expression, we would be left with an empty string in the
end.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">The stack data structure can come in handy here in representing this recursive structure of the 
</span></span><span class="line"><span class="cl">problem. We can&#39;t really process this from the inside out because we don&#39;t have an idea about the 
</span></span><span class="line"><span class="cl">overall structure. But, the stack can help us process this recursively ie. from outside to inwards.
</span></span></code></pre></td></tr></table>
</div>
</div><p>Lets take a look at the algorithm for this problem using stacks as the intermediate data structure.</p>
<p><strong>Algorithm</strong></p>
<ol>
<li>Initialize a stack S.</li>
<li>Process each bracket of the expression one at a time</li>
<li>If we encounter an opening bracket, we simply push it onto the stack. This means we will process it
later, let us simply move onto the sub-expression ahead</li>
<li>If encounter a closing bracket, then we check the element on top of the stack. If the element at the
top of the stack is an opening bracket <code>of the same type</code>, then we pop it off the stack and continue
processing. Else, this implies an invalid expression</li>
<li>In the end, if we are left with a stack still having elements, then this implies an invalid 
expression</li>
</ol>
<p>Lets take a look at the implementation for this algorithm</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//Hash table that takes care of the mappings
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">private</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;</span> <span class="n">mappings</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Initialize the hash map with mappings. This simply makes the code easier to read 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">public</span> <span class="nf">Solution</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;();</span> 
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="sc">&#39;(&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;}&#39;</span><span class="o">,</span> <span class="sc">&#39;{&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;]&#39;</span><span class="o">,</span> <span class="sc">&#39;[&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="c1">// Initialize a stack to be used in the algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// If the current character is a closing bracket 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">// Get the top element of the stack. If the stack is empty, set a dummy value of &#39;#&#39; 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="kt">char</span> <span class="n">topElement</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">?</span> <span class="sc">&#39;#&#39;</span> <span class="o">:</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// If the mapping for this bracket doesn&#39;t match the stack&#39;s top element, return false. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="o">(</span><span class="n">topElement</span> <span class="o">!=</span> <span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				
</span></span><span class="line"><span class="cl">				<span class="c1">//If it was an opening bracket, push to the stack  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				
</span></span><span class="line"><span class="cl">				<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">//If the stack still contains elements, then it is an invalid expression. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(n)	We simply traverse the given string one character at a time and push 
</span></span><span class="line"><span class="cl">				and pop operations on a stack take O(1) time 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(n)	In the worst case, when we push all opening brackets onto the stack, we
</span></span><span class="line"><span class="cl">				will end up pushing all the brackets onto the stack eg (((((((((((
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="mergeTwoSortedLists"></a></p>
<h1 id="21-merge-two-sorted-lists">21-Merge Two Sorted Lists</h1>
<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing 
together the nodes of the first two lists.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4
</span></span><span class="line"><span class="cl">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="mergeTwoSortedListsRecursive"></a></p>
<h2 id="recursive">Recursive</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeTwoLists</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">l2</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="n">l1</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">,</span> <span class="n">l2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="n">l2</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">mergeTwoLists</span><span class="o">(</span><span class="n">l1</span><span class="o">,</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>	
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="mergeTwoSortedListsNonRecursive"></a></p>
<h2 id="non-recursive-1">Non-Recursive</h2>
<p>Similar approach and implemenation to the recursive solution above but a little more intuitive and 
does not require memory being held on the stack (as the recursive program runs it has to store 
variables on the stack so that when the program jumps back it is able to continue)</p>
<p>As with most other linked list solutions, a dummy node is utilized and two pointers are used to keep
track of where we are in the the two linked lists.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeTwoLists</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">ListNode</span> <span class="n">returnNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(-</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">ListNode</span> <span class="n">headNode</span> <span class="o">=</span> <span class="n">returnNode</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;=</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span> <span class="o">=</span> <span class="n">returnNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">returnNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">l1</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">headNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="generateParentheses"></a></p>
<h1 id="22-generate-parentheses">22-Generate Parentheses</h1>
<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">For example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Given n=3, a solution set is: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">  &#34;((()))&#34;,
</span></span><span class="line"><span class="cl">  &#34;(()())&#34;.
</span></span><span class="line"><span class="cl">  &#34;(())()&#34;,
</span></span><span class="line"><span class="cl">  &#34;()(())&#34;,
</span></span><span class="line"><span class="cl">  &#34;()()()&#34;
</span></span><span class="line"><span class="cl">]
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="generateParenthesesBruteForce"></a></p>
<h2 id="brute-force-4">Brute Force</h2>
<p><strong>Intuition</strong></p>
<p>We can generate all 2^(2n) sequences of <code>(</code> and <code>)</code> characters. Then we can check if each one is valid</p>
<br>
<p><strong>Algorithm</strong></p>
<p>To generate all sequences, we use recursion. All sequences of length <code>n</code> is just <code>(</code> plus all sequences
of length <code>n-1</code>, and then <code>)</code> plus all sequences of length <code>n-1</code>.</p>
<p>To check whether a sequence is valid, we keep track of <code>balance</code>, the net number of opening brackets 
minuts closing brackets. If it falls below zero at any time, or doesn&rsquo;t end in zero, the sequence is 
invalid - otherwise it is valid.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">combinations</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">generateAll</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">],</span> <span class="n">0</span><span class="o">,</span> <span class="n">combinations</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">combinations</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">generateAll</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">current</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">pos</span> <span class="o">==</span> <span class="n">current</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(</span><span class="n">valid</span><span class="o">(</span><span class="n">current</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">current</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;(&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">generateAll</span><span class="o">(</span><span class="n">current</span><span class="o">,</span> <span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">current</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">generateAll</span><span class="o">(</span><span class="n">current</span><span class="o">,</span> <span class="n">pos</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">valid</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">balance</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">balance</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span><span class="o">(</span><span class="n">balance</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">false</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">(</span><span class="n">balance</span> <span class="o">==</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O(2^2n * n)	For each of 2^2n sequences, we need to create an validate the 
</span></span><span class="line"><span class="cl">					sequence, which takes O(n) work in the worst case 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O(2^2n * n) 	Naively, every sequence could be valid, see Closure number for
</span></span><span class="line"><span class="cl">					a tighter asymptotic bound 
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="generateParenthesesBacktracking"></a></p>
<h2 id="backtracking-1">Backtracking</h2>
<p><strong>Intuition and Algorithm</strong></p>
<p>Instead of adding <code>(</code> or <code>)</code> every time as we do in the Brute Force algorithm, let&rsquo;s only add them 
when we know it will remain a valid sequence. We can do this by keeping track of the number of opening
and closing brackets we have placed so far.</p>
<p>We can start an opening bracket if we still have one (of <code>n</code>) left to place. And we can start a closing
bracket if it would not exceed the number of opening brackets</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">backtrack</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span><span class="o">,</span> <span class="n">String</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">open</span><span class="o">,</span> <span class="kt">int</span> <span class="n">close</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">max</span><span class="o">*</span><span class="n">2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">open</span> <span class="o">&lt;</span> <span class="n">max</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">open</span> <span class="o">+</span> <span class="n">1</span><span class="o">,</span> <span class="n">close</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> 
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">close</span> <span class="o">&lt;</span> <span class="n">open</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">backtrack</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">cur</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span><span class="o">,</span> <span class="n">open</span><span class="o">,</span> <span class="n">close</span> <span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<p>Our complexity analysis rests on understanding how many elements there are in <code>generateParenthesis(n)</code>.
This analysis is outside the scope of this article, but it turns out this is the nth Catalan number 
1/(n+1) (2n choose n), which is bounded asymptotically by 4^n/(n* sqrt(n)).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O((4^n)/sqrt(n))	Each valid sequence has at most n steps during the 
</span></span><span class="line"><span class="cl">						backtracking procedure
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O((4^n)/sqrt(n))	As described above and using O(n) space to store the
</span></span><span class="line"><span class="cl">						sequence
</span></span></code></pre></td></tr></table>
</div>
</div><p>Another way to think about the runtime of backtracking algorithms on interviewers is O(b^d), where b is
the branching factor and d is the maximum depth of recursion.</p>
<p>Backtracking is characterized by a number of decisions b that can be made at each level of recursion. 
If you visualize the recursion tree, this is the number of children each internal node has. You can
also think of b as standing for &ldquo;base&rdquo;, which helps us remember that b is the base of the exponential.</p>
<p>If we make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie. 
each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit 
each of these nodes, the runtime is O(b^d)</p>
<p><br><br>
<a name="generateParenthesesClosureNumber"></a></p>
<h2 id="closure-number">Closure Number</h2>
<p>To enumerate something, generally we would like to express it as a sum of disjoint subsets that are 
easier to count.</p>
<p>Consider the <em>closure number</em> of a valid parentheses sequence <code>s</code>: the least <code>index &gt;= 0</code> so that 
`S[0], S[1], &hellip; , S[2 * index + 1] is valid. Clearly, every parentheses sequence has a unique closure
number. We can try to enumerate them individually.</p>
<p><br><br></p>
<p><strong>Algorithm</strong></p>
<p>For each closure number c, we know the starting and ending brackets must be at index <code>0</code> and 
<code>2 * c + 1</code>. Then, the <code>2 * c</code> elements between must be a valid sequence, plus the rest of the elements
must be a valid sequence.</p>
<p>This is just some minor improvement to the backtracking solution using the fact that for all valid 
solutions the first char is always &lsquo;(&rsquo; and the lat char is always &lsquo;)&rsquo;. We initialize the starting 
string to &lsquo;(&rsquo; and set the recursion bottom condition to string reaching length of <code>2 * n - 1</code> - we know
that we need to append a bracket at the end. There will not be much of an improvement in the runtime
however.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">==</span><span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">c</span><span class="o">=</span><span class="n">0</span><span class="o">;</span> <span class="n">c</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">c</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">left</span><span class="o">:</span> <span class="n">generateParenthesis</span><span class="o">(</span><span class="n">c</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">right</span><span class="o">:</span> <span class="n">generateParenthesis</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">-</span><span class="n">c</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">						<span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;(&#34;</span> <span class="o">+</span> <span class="n">left</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span> <span class="o">+</span> <span class="n">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Complexity Analysis</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Time Complexity: 	O((4^n)/sqrt(n))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Space Complexity: 	O((4^n)/sqrt(n))
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br><br></p>
<hr>
<p><a name="mergeKSortedLists"></a></p>
<h1 id="23-merge-k-sorted-lists">23-Merge k Sorted Lists</h1>
<p>Merge k sorted linked lists and return it as one sorted list. Analyze and descibe its complexity:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Example: 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Input: 
</span></span><span class="line"><span class="cl">[
</span></span><span class="line"><span class="cl">	1 -&gt; 4 -&gt; 5,
</span></span><span class="line"><span class="cl">	1 -&gt; 3 -&gt; 4,
</span></span><span class="line"><span class="cl">	2 -&gt; 6
</span></span><span class="line"><span class="cl">]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6
</span></span></code></pre></td></tr></table>
</div>
</div><p><br><br>
<a name="mergeKSortedLists"></a></p>
<h2 id="brute-force-5">Brute Force</h2>
<p><strong>Intuition and Algorithm</strong></p>
<ul>
<li>Traverse all the linked lists and collect the values of the nodes into an array</li>
<li>Sort and iterate over this array to get the proper value of nodes</li>
<li>Create a new sorted linked list and extend it with the new nodes</li>
</ul>
<p>As for sorting you can refer to the Algorithms/Data Structures CheatSheet for more about sorting algorithms.</p>
<p><br><br><br></p>
<hr>
<p><a name="lruCache"></a></p>
<h1 id="146-lru-cache">146-LRU Cache</h1>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>put</code>.</p>
<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return <code>-1</code></p>
<p><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p><strong>Follow up:</strong>
Could both of these operations be done in <strong>O(1)</strong> time complexity?</p>
<p><strong>Example:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LRUCache cache = new LRUCache(2 /* capacity */);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cache.put(1, 1);
</span></span><span class="line"><span class="cl">cache.put(2, 2);
</span></span><span class="line"><span class="cl">cache.get(1); 			// returns 1 
</span></span><span class="line"><span class="cl">cache.put(3, 3); 		// evicts key 2
</span></span><span class="line"><span class="cl">cache.get(2);			// returns -1 (not found)
</span></span><span class="line"><span class="cl">	
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="index">Index</h1>
<ol>
<li><a href="#lowest-common-ancestor" rel="">Lowest Common Ancestor</a></li>
<li><a href="#count-and-say" rel="">Count And Say</a></li>
<li><a href="#maximum-subarray" rel="">Maximum SubArray</a></li>
<li><a href="#plus-one" rel="">Plus One</a></li>
<li><a href="#sqrt-of-x" rel="">Sqrt of X</a></li>
<li><a href="#climbing-stairs" rel="">Climbing Stairs</a></li>
<li><a href="#remove-duplicates-from-sorted-list" rel="">Remove Duplicates from sorted list</a></li>
<li><a href="#same-tree" rel="">Same Tree</a></li>
<li><a href="#symmetric-tree" rel="">Symmetric Tree</a></li>
<li><a href="#max-depth-of-binary-tree" rel="">Max Depth of Binary Tree</a></li>
<li><a href="#convert-sorted-array-to-binary-search-tree" rel="">Convert Sorted Array to Binary Search Tree</a></li>
<li><a href="#balanced-binary-tree" rel="">Balanced Binary Tree</a></li>
<li><a href="#minimum-depth-of-binary-tree" rel="">Minimum Depth of Binary Tree</a></li>
<li><a href="#path-sum" rel="">Path Sum</a></li>
<li><a href="#pascal%27s-triangle" rel="">Pascal&rsquo;s Triangle</a></li>
<li><a href="#valid-palindrome" rel="">Valid Palindrome</a></li>
<li><a href="#pascal%27s-triangle-ii" rel="">Pascal&rsquo;s Triangle II</a></li>
<li><a href="#best-time-to-buy-and-sell-stock" rel="">Best Time to Buy and Sell Stock</a></li>
<li><a href="#best-time-to-buy-and-sell-stock-ii" rel="">Best Time to Buy and Sell Stock II</a></li>
<li><a href="#single-number" rel="">Single Number</a></li>
<li><a href="#linked-list-cycle" rel="">Linked List Cycle</a></li>
<li><a href="#min-stack" rel="">Min Stack</a></li>
<li><a href="#intersection-of-two-linked-lists" rel="">Intersection of Two Linked Lists</a></li>
<li><a href="#two-sum-ii---input-array-is-sorted" rel="">Two Sum II - Input array is sorted</a></li>
<li><a href="#excel-sheet-column-title" rel="">Excel Sheet Column Title</a></li>
<li><a href="#majority-element" rel="">Majority Element</a></li>
<li><a href="#excel-sheet-column-number" rel="">Excel Sheet Column Number</a></li>
<li><a href="#factorial-trailing-zeroes" rel="">Factorial Trailing Zeroes</a></li>
<li><a href="#combine-two-tables" rel="">Combine Two Tables</a></li>
<li><a href="#second-highest-salary" rel="">Second Highest Salary</a></li>
<li><a href="#employees-earning-more-than-their-managers" rel="">Employees Earning More Than Their Managers</a></li>
<li><a href="#duplicate-emails" rel="">Duplicate Emails</a></li>
<li><a href="#customers-who-never-order" rel="">Customers Who Never Order</a></li>
<li><a href="#rotate-array" rel="">Rotate Array</a></li>
<li><a href="#delete-duplicate-emails" rel="">Delete Duplicate Emails</a></li>
<li><a href="#rising-temperature" rel="">Rising Temperature</a></li>
<li><a href="#x-of-a-kind-in-a-deck-of-cards" rel="">X of a Kind in a Deck of Cards</a></li>
<li><a href="#reverse-integer" rel="">Reverse Integer</a></li>
<li><a href="#add-two-numbers" rel="">Add Two Numbers</a></li>
<li><a href="#longest-substring-without-repeating-characters" rel="">Longest Substring Without Repeating Characters</a></li>
<li><a href="#house-robber" rel="">House Robber</a></li>
<li><a href="#happy-number" rel="">Happy Number</a></li>
<li><a href="#remove-linked-list-elements" rel="">Remove Linked List Elements</a></li>
<li><a href="#count-primes" rel="">Count Primes</a></li>
<li><a href="#isomorphic-strings" rel="">Isomorphic Strings</a></li>
<li><a href="#reverse-linkedlist" rel="">Reverse LinkedList</a></li>
<li><a href="#contains-duplicate" rel="">Contains Duplicate</a></li>
<li><a href="#contains-duplicate-ii" rel="">Contains Duplicate II</a></li>
<li><a href="#implement-stack-using-queues" rel="">Implement Stack Using Queues</a></li>
<li><a href="#invert-binary-tree" rel="">Invert Binary Tree</a></li>
<li><a href="#fibonacci-number" rel="">Fibonacci Number</a></li>
<li><a href="#kth-largest-element" rel="">kth Largest Element</a></li>
<li><a href="#power-of-two" rel="">Power Of Two</a></li>
<li><a href="#valid-sudoku" rel="">Valid Sudoku</a></li>
<li><a href="#implement-queue-using-stack" rel="">Implement Queue Using Stack</a></li>
<li><a href="#palindrome-linkedlist" rel="">Palindrome LinkedList</a></li>
<li><a href="#delete-node-in-a-linked-list" rel="">Delete Node in a Linked List</a></li>
<li><a href="#is-anagram" rel="">Is Anagram</a></li>
<li><a href="#binary-tree-paths" rel="">Binary Tree Paths</a></li>
<li><a href="#add-digits" rel="">Add Digits</a></li>
<li><a href="#largest-perimeter-triangle" rel="">Largest Perimeter Triangle</a></li>
<li><a href="#ugly-number" rel="">Ugly Number</a></li>
<li><a href="#missing-number" rel="">Missing Number</a></li>
<li><a href="#is-bad-version" rel="">Is Bad Version</a></li>
<li><a href="#move-zeroes" rel="">Move Zeroes</a></li>
<li><a href="#word-pattern" rel="">Word Pattern</a></li>
<li><a href="#can-win-nim" rel="">Can Win Nim</a></li>
<li><a href="#power-of-three" rel="">Power Of Three</a></li>
<li><a href="#power-of-four" rel="">Power of Four</a></li>
<li><a href="#reverse-string" rel="">Reverse String</a></li>
<li><a href="#implement-strstr%28%29" rel="">Implement strStr()</a></li>
<li><a href="#reverse-vowels-of-a-string" rel="">Reverse Vowels of a String</a></li>
<li><a href="#intersection-of-two-arrays" rel="">Intersection of two arrays</a></li>
<li><a href="#is-perfect-square" rel="">Is Perfect Square</a></li>
<li><a href="#sum-of-two-integers" rel="">Sum of Two Integers</a></li>
<li><a href="#guess-number-higher-or-lower" rel="">Guess Number Higher or Lower</a></li>
<li><a href="#ransom-note" rel="">Ransom Note</a></li>
<li><a href="#first-unique-character-in-a-string" rel="">First Unique Character in a String</a></li>
<li><a href="#find-the-difference" rel="">Find the Difference</a></li>
<li><a href="#nth-digit" rel="">Nth Digit</a></li>
<li><a href="#sum-of-left-leaves" rel="">Sum of Left Leaves</a></li>
<li><a href="#longest-palindrome" rel="">Longest Palindrome</a></li>
<li><a href="#fizz-buzz" rel="">Fizz Buzz</a></li>
<li><a href="#third-maximum-number" rel="">Third maximum Number</a></li>
<li><a href="#add-two-strings" rel="">Add Two Strings</a></li>
<li><a href="#construct-quad-tree" rel="">Construct Quad Tree</a></li>
<li><a href="#n-ary-tree-level-order-traversal" rel="">N-ary Tree Level Order Traversal</a></li>
<li><a href="#number-of-segments-in-a-string" rel="">Number of Segments in a String</a></li>
<li><a href="#binary-tree-level-order-traversal" rel="">Binary Tree Level Order Traversal</a></li>
<li><a href="#path-sum-iii" rel="">Path Sum III</a></li>
<li><a href="#find-all-anagrams-in-a-string" rel="">Find All Anagrams in a String</a></li>
<li><a href="#arranging-coins" rel="">Arranging Coins</a></li>
<li><a href="#hamming-distance" rel="">Hamming Distance</a></li>
<li><a href="#string-compression" rel="">String Compression</a></li>
<li><a href="#number-of-boomerangs" rel="">Number of Boomerangs</a></li>
<li><a href="#find-all-numbers-disappeared-in-an-array" rel="">Find All Numbers Disappeared in an Array</a></li>
<li><a href="#assign-cookies" rel="">Assign Cookies</a></li>
<li><a href="#poor-pigs" rel="">Poor Pigs</a></li>
<li><a href="#find-pivot-index" rel="">Find Pivot Index</a></li>
<li><a href="#squares-of-a-sorted-array" rel="">Squares of a Sorted Array</a></li>
<li><a href="#repeated-substring-pattern" rel="">Repeated Substring Pattern</a></li>
<li><a href="#island-perimeter" rel="">Island Perimeter</a></li>
<li><a href="#number-complement" rel="">Number Complement</a></li>
<li><a href="#binary-watch" rel="">Binary Watch</a></li>
<li><a href="#minimum-moves-to-equal-array-elements" rel="">Minimum Moves to Equal Array Elements</a></li>
<li><a href="#license-key-formatting" rel="">License Key Formatting</a></li>
<li><a href="#max-consecutive-ones" rel="">Max Consecutive Ones</a></li>
<li><a href="#permutations" rel="">Permutations</a></li>
<li><a href="#construct-the-rectangle" rel="">Construct the Rectangle</a></li>
<li><a href="#merge-intervals" rel="">Merge Intervals</a></li>
<li><a href="#merged-sorted-lists" rel="">Merged sorted lists</a></li>
<li><a href="#next-greater-element-i" rel="">Next Greater Element I</a></li>
<li><a href="#string-without-aaa-or-bbb" rel="">String Without AAA or BBB</a></li>
<li><a href="#keyboard-row" rel="">Keyboard Row</a></li>
<li><a href="#find-mode-in-binary-search-tree" rel="">Find Mode in Binary Search Tree</a></li>
<li><a href="#base-7" rel="">Base 7</a></li>
<li><a href="#relative-ranks" rel="">Relative Ranks</a></li>
<li><a href="#perfect-number" rel="">Perfect Number</a></li>
<li><a href="#detect-capital" rel="">Detect Capital</a></li>
<li><a href="#longest-uncommon-subsequence-i" rel="">Longest Uncommon Subsequence I</a></li>
<li><a href="#course-schedule-ii" rel="">Course Schedule II</a></li>
<li><a href="#letter-combinations-of-a-phone-number" rel="">Letter Combinations of a Phone Number</a></li>
<li><a href="#sudoku-solver" rel="">Sudoku Solver</a></li>
<li><a href="#bulls-and-cows" rel="">Bulls and Cows</a></li>
<li><a href="#n-queens-1" rel="">N-Queens 1</a></li>
<li><a href="#k-diff-pairs-in-an-array" rel="">K-diff pairs in an Array</a></li>
<li><a href="#is-subsequence" rel="">Is Subsequence</a></li>
<li><a href="#minimum-absolute-difference-in-bst" rel="">Minimum Absolute Difference in BST</a></li>
<li><a href="#bst-tree-to-greater-tree" rel="">BST Tree to Greater Tree</a></li>
<li><a href="#student-attendance-record-I" rel="">Student Attendance Record I</a></li>
<li><a href="#reverse-words-in-string-iii" rel="">Reverse Words in String III</a></li>
<li><a href="#quad-tree-intersection" rel="">Quad Tree Intersection</a></li>
<li><a href="#long-pressed-name" rel="">Long Pressed Name</a></li>
<li><a href="#binary-tree-zigzag-level-order-traversal" rel="">Binary Tree Zigag Level Order Traversal</a></li>
<li><a href="#array-partition-I" rel="">Array Partition I</a></li>
<li><a href="#reshape-the-matrix" rel="">Reshape the matrix</a></li>
<li><a href="#swap-nodes-in-pairs" rel="">Swap Nodes in Pairs</a></li>
<li><a href="#generate-parentheses" rel="">Generate Parentheses</a></li>
<li><a href="#distribute-candies" rel="">Distribute Candies</a></li>
<li><a href="#maximum-subproduct-subarray" rel="">Maximum Subproduct Subarray</a></li>
<li><a href="#binary-tree-right-side-view" rel="">Binary Tree Right Side View</a></li>
<li><a href="#find-minimum-in-rotated-sorted-array" rel="">Find Minimum in Rotated Sorted Array</a></li>
<li><a href="#binary-search-tree-iterator" rel="">Binary Search Tree Iterator</a></li>
<li><a href="#find-peak-element" rel="">Find Peak Element</a></li>
<li><a href="#next-permutation" rel="">Next Permutation</a></li>
<li><a href="#search-in-rotated-sorted-array" rel="">Search in Rotated Sorted Array</a></li>
<li><a href="#transpose-matrix" rel="">Transpose Matrix</a></li>
<li><a href="#merge-k-sorted-lists" rel="">Merge K sorted lists</a></li>
</ol>
<hr>
<hr>
<h3 id="lowest-common-ancestorhttpsleetcodecomproblemslowest-common-ancestor-of-a-binary-search-treea-namelowest-common-ancestora"><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener noreffer ">Lowest Common Ancestor</a><a name="lowest-common-ancestor"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">lowestCommonAncestor</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">TreeNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>		<span class="c1">// Both located in left side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>	<span class="c1">// Both located in right side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">current</span><span class="o">;</span>		<span class="c1">// Seperate branches, therefore current is lca.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="count-and-sayhttpsleetcodecomproblemscount-and-saya-namecount-and-saya"><a href="https://leetcode.com/problems/count-and-say/" target="_blank" rel="noopener noreffer ">Count And Say</a><a name="count-and-say"></a></h3>
<p>The updated version runs in 2ms and passes 96.85% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">countAndSay</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&#34;1&#34;</span><span class="o">;</span>		<span class="c1">// initial result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StringBuilder</span> <span class="n">temp</span><span class="o">;</span>			<span class="c1">// to create intermediate strings efficiently.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span><span class="o">;</span>					<span class="c1">// length of the result string.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// We need to iterate n-1 times, because 1st result is 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">startIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// we will look at each index of result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>	<span class="c1">// and store freq,char in the builder
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">len</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">startIndex</span><span class="o">++);</span>	<span class="c1">// get the char at startIndex, and increment it, because we also want to look at the next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>					<span class="c1">// intialize it&#39;s count to 1, we just saw it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="o">(</span><span class="n">startIndex</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">==</span> <span class="n">result</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">startIndex</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span><span class="o">++;</span>			<span class="c1">// If next also matches, increment count and startIndex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">startIndex</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>	<span class="c1">// No more match, Add the freq and the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">temp</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>	<span class="c1">// Update result to generate the next cound-and-say
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="maximum-subarrayhttpsleetcodecomproblemsmaximum-subarraya-namemaximum-subarraya"><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener noreffer ">Maximum SubArray</a><a name="maximum-subarray"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxSubArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">localMax</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>		<span class="c1">// keeps track of max sum between the previous and current
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">globalMax</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>	<span class="c1">// keeps track of global max sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    The idea is as follows:
</span></span></span><span class="line"><span class="cl"><span class="cm">    If the current element is greater than the previous local max, then we found an element that is a better option then before.
</span></span></span><span class="line"><span class="cl"><span class="cm">    Then, if that localmax changed and is greater than our global max, update our global max.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">localMax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">localMax</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">globalMax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">localMax</span><span class="o">,</span> <span class="n">globalMax</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">globalMax</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="plus-onehttpsleetcodecomproblemsplus-onea-nameplus-onea"><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="noopener noreffer ">Plus One</a><a name="plus-one"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">plusOne</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">digits</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>			<span class="c1">// Add one to the last place.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">)</span>	<span class="c1">// If it became 10,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>	<span class="c1">// Then add one to its previous place
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">){</span>	<span class="c1">// If that also results in 10, keep propogating that 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>		<span class="c1">// upstream
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">10</span><span class="o">){</span>	<span class="c1">// If the index 0 is 10, then the number is a multiple of 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// So increase length by 1 and set index 0 to 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">digits</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sqrt-of-xhttpsleetcodecomproblemssqrtxa-namesqrt-of-xa"><a href="https://leetcode.com/problems/sqrtx/" target="_blank" rel="noopener noreffer ">Sqrt of X</a><a name="sqrt-of-x"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">mySqrt</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">10</span> <span class="o">-</span> <span class="o">(</span><span class="n">100</span> <span class="o">-</span> <span class="n">x</span><span class="o">)/</span><span class="n">20</span><span class="o">;</span>		<span class="c1">// Using Newton&#39;s method of computing square roots.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">x1</span> <span class="o">-</span> <span class="o">(</span><span class="n">x1</span><span class="o">*</span><span class="n">x1</span> <span class="o">-</span> <span class="n">x</span><span class="o">)/(</span><span class="n">2</span><span class="o">*</span><span class="n">x1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x2</span> <span class="o">==</span> <span class="n">x1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">x1</span> <span class="o">=</span> <span class="n">x2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">x1</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="climbing-stairshttpsleetcodecomproblemsclimbing-stairsa-nameclimbing-stairsa"><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="noopener noreffer ">Climbing Stairs</a><a name="climbing-stairs"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">climbStairs</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>		<span class="c1">// I chose n &lt; 4 because climbStairs(0 &lt;= n &lt;= 3) = n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//return naiveDP(n, dp);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">efficientDP</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">naiveDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dp</span><span class="o">[]){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If already computed, return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ways</span> <span class="o">=</span>  <span class="n">naiveDP</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">dp</span><span class="o">)</span> <span class="o">+</span> <span class="n">naiveDP</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">2</span><span class="o">,</span> <span class="n">dp</span><span class="o">);</span>	<span class="c1">// Just like Fibonacci.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="n">ways</span><span class="o">;</span>		<span class="c1">// Save it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">ways</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">efficientDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// Initialize dp of length n+1 to store n&#39;th way.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>					<span class="c1">// climbStairs(0 &lt;= n &lt;= 3) = n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// climbStairs(n) = climbStairs(n-1) + climbstairs(n-2);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">];</span>  <span class="c1">// So fetch those values from the dp array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="remove-duplicates-from-sorted-listhttpsleetcodecomproblemsremove-duplicates-from-sorted-lista-nameremove-duplicates-from-sorted-lista"><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener noreffer ">Remove Duplicates from sorted list</a><a name="remove duplicates from sorted list"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">deleteDuplicates</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// while we haven&#39;t reached the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// if current&#39;s next is the same as current, skip and update its next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="same-treehttpsleetcodecomproblemssame-treea-namesame-treea"><a href="https://leetcode.com/problems/same-tree/" target="_blank" rel="noopener noreffer ">Same Tree</a><a name="same-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSameTree</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">p</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">q</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Two empty trees
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If one of the node is null, the two trees can&#39;t be equal.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">((</span><span class="n">p</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">q</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// If the values in the two nodes are same, compare its&#39;s left and right sub-tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">q</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">isSameTree</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">q</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isSameTree</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">q</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// If nothing worked out, they can&#39;t be same.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="symmetric-treehttpsleetcodecomproblemssymmetric-treea-namesymmetric-treea"><a href="https://leetcode.com/problems/symmetric-tree/" target="_blank" rel="noopener noreffer ">Symmetric Tree</a><a name="symmetric-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetric</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">isSymmetricIterative</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetricIterative</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">track</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>		<span class="c1">// Add the root twice so we can compare its left and right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">track</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">TreeNode</span> <span class="n">x</span> <span class="o">=</span> <span class="n">track</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>		<span class="c1">// Remove 2 nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">TreeNode</span> <span class="n">y</span> <span class="o">=</span> <span class="n">track</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// If they are both null, skip it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">x</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">y</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// If values don&#39;t match or one is null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>		<span class="c1">// Otherwise add them in this order -&gt; LRRL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// because we need to compare left most with the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// right most, then inner left with inner right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">track</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// Everything&#39;s all right, so they must be symmetric.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSymmetricRecursive</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">helperRecursive</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">x</span><span class="o">,</span> <span class="n">TreeNode</span> <span class="n">y</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">y</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Base Case: Both or one is null, so true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">y</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">y</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">helperRecursive</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">y</span><span class="o">.</span><span class="na">left</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Check if values match and 1.left matches with the 2.right and 1.right matches with 2.left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="max-depth-of-binary-treehttpsleetcodecomproblemsmaximum-depth-of-binary-treea-namemax-depth-of-binary-treea"><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener noreffer ">Max Depth of Binary Tree</a><a name="max depth of binary tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">If root is null, height is 0 else add 1 and find if the left or the right has a greater depth.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxDepth</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">maxDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="convert-sorted-array-to-binary-search-treehttpsleetcodecomproblemsconvert-sorted-array-to-binary-search-treea-nameconvert-sorted-array-to-binary-search-treea"><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener noreffer ">Convert Sorted Array to Binary Search Tree</a><a name="convert-sorted-array-to-binary-search-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">sortedArrayToBST</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">aux</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">TreeNode</span> <span class="nf">aux</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span>					<span class="c1">// Either empty, or return a null node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>			<span class="c1">// Create a node with the middle value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">TreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(</span><span class="n">n</span><span class="o">[</span><span class="n">mid</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">aux</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Compute the left (which is the mid in left side)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">aux</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>	<span class="c1">// Compute the right (which is the mid in right side)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="balanced-binary-treehttpsleetcodecomproblemsbalanced-binary-treea-namebalanced-binary-treea"><a href="https://leetcode.com/problems/balanced-binary-tree/" target="_blank" rel="noopener noreffer ">Balanced Binary Tree</a><a name="balanced-binary-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalanced</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">isBalancedBottomUp</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalancedTopDown</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// if difference between root&#39;s left and right is &gt; 1, they&#39;re not balanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="n">getHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">-</span> <span class="n">getHeight</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">)))</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// otherwise, we need to check if the left and right subtree are also balanced.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isBalanced</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getHeight</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Standard height of a binary tree calculator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">getHeight</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">getHeight</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBalancedBottomUp</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">root</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// -1 means not balanced.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">getHeight2</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lHeight</span> <span class="o">=</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>	<span class="c1">// Get the height of left and right tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">rHeight</span> <span class="o">=</span> <span class="n">getHeight2</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// If at any point there was a height difference of more than 1 or previous node&#39;s leftheight || rightheight returned -1, return -1 to let the next node know there was an imbalance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">((</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">lHeight</span><span class="o">-</span><span class="n">rHeight</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span> <span class="o">||</span> <span class="n">lHeight</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span> <span class="o">||</span> <span class="n">rHeight</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">lHeight</span><span class="o">,</span> <span class="n">rHeight</span><span class="o">);</span> <span class="c1">// Else carry on with the normal procedure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-depth-of-binary-treehttpsleetcodecomproblemsminimum-depth-of-binary-treea-nameminimum-depth-of-binary-treea"><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener noreffer ">Minimum Depth of Binary Tree</a><a name="minimum-depth-of-binary-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minDepth</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Base case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Left is null, find minheight from right side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Right is null, find minheight from left side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Else, both are not null, so compute min height from the two sides.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">),</span> <span class="n">minDepth</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="path-sumhttpsleetcodecomproblemspath-suma-namepath-suma"><a href="https://leetcode.com/problems/path-sum/" target="_blank" rel="noopener noreffer ">Path Sum</a><a name="path-sum"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasPathSum</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// No sum exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sum</span> <span class="o">-=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>	<span class="c1">// Sum decreases
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>	<span class="c1">// If we are at a leaf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">sum</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Check if the sum is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">sum</span><span class="o">)</span> <span class="o">||</span> <span class="n">hasPathSum</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Otherwise look if you can make sum = 0 by exploring the left or right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pascals-trianglehttpsleetcodecomproblemspascals-trianglea-namepascals-trianglea"><a href="https://leetcode.com/problems/pascals-triangle/" target="_blank" rel="noopener noreffer ">Pascal&rsquo;s Triangle</a><a name="pascal's-triangle"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">generate</span><span class="o">(</span><span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">pt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numRows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Need to add all n rows
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>		<span class="c1">// temp list to store values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span>		<span class="c1">// First and last values are always 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>	<span class="c1">// Else, get the previous row and surrounding two values and add them
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">pt</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">pt</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>		<span class="c1">// Add it to pt.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pt</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="valid-palindromehttpsleetcodecomproblemsvalid-palindromea-namevalid-palindromea"><a href="https://leetcode.com/problems/valid-palindrome/" target="_blank" rel="noopener noreffer ">Valid Palindrome</a><a name="valid-palindrome"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>		<span class="c1">// Only do this is s is not empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>	<span class="c1">// Convert it to lowercase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Initialize left and right pointers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span>	<span class="c1">// continue while we haven&#39;t hit the middle of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// If char at left is not a letter or a number, skip it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Same with char at right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">Character</span><span class="o">.</span><span class="na">isLetter</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//Char&#39;s are now alphanumeric.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span>	<span class="c1">// If they don&#39;t match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>	<span class="c1">// They matched, so try to match the inner string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>	<span class="c1">// No mismatch found, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iia-namepascals-triangle-iia"><a href="https://leetcode.com/problems/pascals-triangle-ii/" target="_blank" rel="noopener noreffer ">Pascal&rsquo;s Triangle II</a><a name="pascal's-triangle-ii"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">getRow</span><span class="o">(</span><span class="kt">int</span> <span class="n">rowIndex</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// First is always 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Using the nth row formula to compute the coeeficients. You can google &#34;nth row Pascal&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rowIndex</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="kt">int</span><span class="o">)(</span><span class="n">1</span><span class="o">.</span><span class="na">0</span><span class="o">*</span><span class="n">row</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)*(</span><span class="n">rowIndex</span><span class="o">-</span><span class="n">i</span><span class="o">)/(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">row</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stocka-namebest-time-to-buy-and-sell-stocka"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener noreffer ">Best Time to Buy and Sell Stock</a><a name="best-time-to-buy-and-sell-stock"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if the price you are looking at right now in the array minus the minimum observed so far is greater than the maximum profit you recorded, update the max.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProfit</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">min</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">max</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iia-namebest-time-to-buy-and-sell-stock-iia"><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/" target="_blank" rel="noopener noreffer ">Best Time to Buy and Sell Stock II</a><a name="best-time-to-buy-and-sell-stock-ii"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you observe a valley and consecutive peak, make the trade by buying the stock on the valley day and selling it on the peak day.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProfit</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span> <span class="o">+=</span> <span class="o">(</span><span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="single-numberhttpsleetcodecomproblemssingle-numbera-namesingle-numbera"><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="noopener noreffer ">Single Number</a><a name="single-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that XOR of two same numbers returns 0 and XOR with 0 returns the same number. So if there is only one element that doesn&#39;t have a pair, all the remaining will XOR with themselves at one point and give 0 but not the singleton element.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">singleNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">^=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="linked-list-cyclehttpsleetcodecomproblemslinked-list-cyclea-namelinked-list-cyclea"><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener noreffer ">Linked List Cycle</a><a name="linked-list-cycle"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Using the slow-fast runner technique.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasCycle</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">first</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>	<span class="c1">// Slow runner
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">second</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>		<span class="c1">// Fast Runner
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// while second is not at the end or it isn&#39;t the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">second</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">second</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">second</span> <span class="o">==</span> <span class="n">first</span><span class="o">)</span>	<span class="c1">// If fast made a full loop and met up with slow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// We got a cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>		<span class="c1">// Slow moves one step
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">second</span> <span class="o">=</span> <span class="n">second</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>	<span class="c1">// Second advances two.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// We don&#39;t have a cycle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="min-stackhttpsleetcodecomproblemsmin-stacka-namemin-stacka"><a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener noreffer ">Min Stack</a><a name="min-stack"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MinStack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MinStack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>		<span class="c1">// Push the value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>		<span class="c1">// If that value is minimum than we have, update min
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">min</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>	<span class="c1">// Push the minimum on top of the stack for constant time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>						<span class="c1">// minimum retrieval.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>		<span class="c1">// Pop the minimum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>		<span class="c1">// Pop the actual element meant to be popped
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>	<span class="c1">// If empty, min is Max int value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>	<span class="c1">// Otherwise, min would be the top most element since we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// always push the minimum on top of any element we push.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">top</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">elementAt</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">2</span><span class="o">);</span>	<span class="c1">// Top element is actually at second last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>				<span class="c1">// index since the last element is the minimum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMin</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="intersection-of-two-linked-listshttpsleetcodecomproblemsintersection-of-two-linked-listsa-nameintersection-of-two-linked-listsa"><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener noreffer ">Intersection of Two Linked Lists</a><a name="intersection-of-two-linked-lists"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that if you are done traversing any of the lists, make it&#39;s pointer point to the head of the other list and start iterating. The reasoning is that the second time they iterate, they will have traversed exactly the same distance (it&#39;s length plus the other list&#39;s head to the intersecting node) and will meet at the intersecting node.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">getIntersectionNode</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">headA</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">headB</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">pA</span> <span class="o">=</span> <span class="n">headA</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">pB</span> <span class="o">=</span> <span class="n">headB</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">pA</span> <span class="o">!=</span> <span class="n">pB</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">pA</span> <span class="o">=</span> <span class="n">pA</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">headB</span> <span class="o">:</span> <span class="n">pA</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pB</span> <span class="o">=</span> <span class="n">pB</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">headA</span> <span class="o">:</span> <span class="n">pB</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pA</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="two-sum-ii---input-array-is-sortedhttpsleetcodecomproblemstwo-sum-ii-input-array-is-sorteda-nametwo-sum-ii---input-array-is-sorteda"><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener noreffer ">Two Sum II - Input array is sorted</a><a name="two-sum-ii---input-array-is-sorted"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span>	<span class="c1">// Narrow down the window from both sides until they add up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span>	<span class="c1">// We overshot, so decrease the window from right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">right</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">)</span>	<span class="c1">// Undershot, increase windows from left so next sum is more
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="o">;</span>				<span class="c1">// Found the two numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">left</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">+</span><span class="n">1</span><span class="o">};</span>	<span class="c1">// +1 because LeetCode followed 1-n indexing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="excel-sheet-column-titlehttpsleetcodecomproblemsexcel-sheet-column-titlea-nameexcel-sheet-column-titlea"><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener noreffer ">Excel Sheet Column Title</a><a name="excel-sheet-column-title"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToTitle</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">res</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* 1 is A and 26 is Z, so n-1 to change it to 0-25 scheme. Then, % 26 to find how
</span></span></span><span class="line"><span class="cl"><span class="cm">        much it is off on a full alphabet cycle, add 65 (ASCII for A) and convert it to char
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">((</span><span class="kt">char</span><span class="o">)(</span><span class="n">65</span><span class="o">+((</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)%</span><span class="n">26</span><span class="o">)))</span> <span class="o">+</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">26</span><span class="o">;</span>	<span class="c1">// Subtract 1 and divide by 26 to get prepare for the next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="majority-elementhttpsleetcodecomproblemsmajority-elementa-namemajority-elementa"><a href="https://leetcode.com/problems/majority-element/" target="_blank" rel="noopener noreffer ">Majority Element</a><a name="majority-element"></a></h3>
<p>Uses <a href="https://www.geeksforgeeks.org/majority-element/" target="_blank" rel="noopener noreffer ">Moore&rsquo;s Algorithm</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// This is the implementation of Moore&#39;s Algorithm for O(n) complexity.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">majorityElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">major</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">major</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">major</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">major</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="excel-sheet-column-numberhttpsleetcodecomproblemsexcel-sheet-column-numbera-nameexcel-sheet-column-numbera"><a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener noreffer ">Excel Sheet Column Number</a><a name="excel-sheet-column-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Start from the end of String s, compute the ASCII for the char, +1 for 1-26 Alphabet-Scheme (hence -64 instead of -65) and multiply it to 26^{distance from the end of the string}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">titleToNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span></span><span class="line"><span class="cl">        <span class="n">total</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="n">64</span><span class="o">)</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">26</span><span class="o">,</span><span class="n">length</span><span class="o">-</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="factorial-trailing-zeroeshttpsleetcodecomproblemsfactorial-trailing-zeroesa-namefactorial-trailing-zeroesa"><a href="https://leetcode.com/problems/factorial-trailing-zeroes/" target="_blank" rel="noopener noreffer ">Factorial Trailing Zeroes</a><a name="factorial-trailing-zeroes"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that every factorial that has 5 as a multiple also has 2 to multiply to 10. So if we can count the number of times we can divide n by 5, should gives us the number of trailing zeroes. O(log(n) base 5) complexity.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">trailingZeroes</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">/</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">/=</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="combine-two-tableshttpsleetcodecomproblemscombine-two-tablesa-namecombine-two-tablesa"><a href="https://leetcode.com/problems/combine-two-tables/" target="_blank" rel="noopener noreffer ">Combine Two Tables</a><a name="combine-two-tables"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">FirstName</span><span class="p">,</span><span class="w"> </span><span class="n">LastName</span><span class="p">,</span><span class="w"> </span><span class="n">City</span><span class="p">,</span><span class="w"> </span><span class="n">State</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">Address</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">Address</span><span class="p">.</span><span class="n">personId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">person</span><span class="p">.</span><span class="n">personId</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="second-highest-salaryhttpsleetcodecomproblemssecond-highest-salarya-namesecond-highest-salarya"><a href="https://leetcode.com/problems/second-highest-salary/" target="_blank" rel="noopener noreffer ">Second Highest Salary</a><a name="second-highest-salary"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">SecondHighestSalary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">salary</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">max</span><span class="p">(</span><span class="n">salary</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">employee</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="employees-earning-more-than-their-managershttpsleetcodecomproblemsemployees-earning-more-than-their-managersa-nameemployees-earning-more-than-their-managersa"><a href="https://leetcode.com/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener noreffer ">Employees Earning More Than Their Managers</a><a name="employees-earning-more-than-their-managers"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">Name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Employee</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">emp</span><span class="p">,</span><span class="w"> </span><span class="n">Employee</span><span class="w"> </span><span class="n">man</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">managerId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">Id</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">emp</span><span class="p">.</span><span class="n">salary</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">man</span><span class="p">.</span><span class="n">salary</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="duplicate-emailshttpsleetcodecomproblemsduplicate-emailsa-nameduplicate-emailsa"><a href="https://leetcode.com/problems/duplicate-emails/" target="_blank" rel="noopener noreffer ">Duplicate Emails</a><a name="duplicate-emails"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">email</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">having</span><span class="w"> </span><span class="nf">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="customers-who-never-orderhttpsleetcodecomproblemscustomers-who-never-ordera-namecustomers-who-never-ordera"><a href="https://leetcode.com/problems/customers-who-never-order/" target="_blank" rel="noopener noreffer ">Customers Who Never Order</a><a name="customers-who-never-order"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">Customers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">customers</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">customerId</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">orders</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rotate-arrayhttpsleetcodecomproblemsrotate-arraya-namerotate-arraya"><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener noreffer ">Rotate Array</a><a name="rotate-array"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">rotate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">%=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>		<span class="c1">// k == nums.length ? Then it&#39;s a full rotation and no change
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span> <span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// First reverse the full array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">k</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// Then reverse element from index 0 to k-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">k</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Then reverse all elements from k to end of Array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Reverse function that reverses the array from specified indices.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="n">end</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="delete-duplicate-emailshttpsleetcodecomproblemsdelete-duplicate-emailsa-namedelete-duplicate-emailsa"><a href="https://leetcode.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener noreffer ">Delete Duplicate Emails</a><a name="delete-duplicate-emails"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">delete</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">Id</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="k">select</span><span class="w"> </span><span class="nf">min</span><span class="p">(</span><span class="n">Id</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">min_id</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">Email</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">a</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rising-temperaturehttpsleetcodecomproblemsrising-temperaturea-namerising-temperaturea"><a href="https://leetcode.com/problems/rising-temperature/" target="_blank" rel="noopener noreffer ">Rising Temperature</a><a name="rising-temperature"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w1</span><span class="p">,</span><span class="w"> </span><span class="n">weather</span><span class="w"> </span><span class="n">w2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="nf">Datediff</span><span class="p">(</span><span class="n">w2</span><span class="p">.</span><span class="n">recorddate</span><span class="p">,</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">recorddate</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">w2</span><span class="p">.</span><span class="n">temperature</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">w1</span><span class="p">.</span><span class="n">temperature</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="x-of-a-kind-in-a-deck-of-cardshttpsleetcodecomproblemsx-of-a-kind-in-a-deck-of-cardsa-namex-of-a-kind-in-a-deck-of-cardsa"><a href="https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/" target="_blank" rel="noopener noreffer ">X of a Kind in a Deck of Cards</a><a name="x-of-a-kind-in-a-deck-of-cards"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasGroupsSizeX</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">deck</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">deck</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>		<span class="c1">// Record the frequencies
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">freq</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">freq</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">deck</span><span class="o">[</span><span class="n">i</span><span class="o">],</span><span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">deck = [1,1,2,2,2,2,3,3,3,3,3,3]
</span></span></span><span class="line"><span class="cl"><span class="cm">number 1 has len of 2, number 2 has len of 4, number 3 has len of 6, they share a Greatest common divisor of 2, which means diving them into group of size X = 2, will be valid. Thus we just have to ensure each length (of a number) shares a Greatest Common Divisor that&#39;s &gt;= 2.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hcf</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">hcf</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">(</span><span class="n">hcf</span><span class="o">,</span> <span class="n">freq</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">hcf</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">y</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">%</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-integerhttpsleetcodecomproblemsreverse-integersolutiona-namereverse-integera"><a href="https://leetcode.com/problems/reverse-integer/solution/" target="_blank" rel="noopener noreffer ">Reverse Integer</a><a name="reverse-integer"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span> <span class="o">:</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">sign</span><span class="o">;</span>							<span class="c1">// Make x positive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">n</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>				<span class="c1">// Start adding from the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">x</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">n</span> <span class="o">==</span> <span class="n">n</span> <span class="o">?</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">n</span><span class="o">*</span><span class="n">sign</span> <span class="o">:</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Try converting to int from long, if no change,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// Return n * sign, else 0 cause overflow.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-two-numbershttpsleetcodecomproblemsadd-two-numberssubmissionsa-nameadd-two-numbersa"><a href="https://leetcode.com/problems/add-two-numbers/submissions/" target="_blank" rel="noopener noreffer ">Add Two Numbers</a><a name="add-two-numbers"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">addTwoNumbers</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">l1</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// To record the carry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// To record the total of two vals
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>		<span class="c1">// Dummy&#39;s next is the actual head
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">l1</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// If one of the node is null, we set it to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">l1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>			<span class="c1">// dummy value of 0 so we can adjust for
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">l2</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// different length of the two lists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">l2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="n">l2</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="n">carry</span><span class="o">;</span>		<span class="c1">// Add the two vals and the carry.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">carry</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// Record the carry for the next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">sum</span> <span class="o">%</span> <span class="n">10</span><span class="o">);</span>	<span class="c1">// next node&#39;s value is sum % 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>					<span class="c1">// advance current, l1 and l2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">l1</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">l2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>							<span class="c1">// In the end, if carry is 1, it was from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">carry</span><span class="o">);</span>	<span class="c1">// from adding last terms, so make next node 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Return the actual head.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-substring-without-repeating-charactershttpsleetcodecomproblemslongest-substring-without-repeating-charactersa-namelongest-substring-without-repeating-charactersa"><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener noreffer ">Longest Substring Without Repeating Characters</a><a name="longest-substring-without-repeating-characters"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">lengthOfLongestSubstring</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">hash</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>					<span class="c1">// To store the occurence of characters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)],</span> <span class="n">i</span><span class="o">);</span>		<span class="c1">// Check the most recent index of character.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">maxLength</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLength</span><span class="o">,</span> <span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// That minus current pointer gives length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hash</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)]</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// Record the index of the next character.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">maxLength</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="house-robberhttpsleetcodecomproblemshouse-robbera-namehouse-robbera"><a href="https://leetcode.com/problems/house-robber" target="_blank" rel="noopener noreffer ">House Robber</a><a name="house-robber"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea is that if you are robbing house i, the maximum loot may come from by robbing the i-2th house or by robbing the i-3th house. Therefore rob both and then find the path that gave the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Example: loot = [1,9,3,8,4,3,6,4,3,5,7,6]
</span></span></span><span class="line"><span class="cl"><span class="cm">Profit DP = [1,9,4,17,13,20,23,24,26,29,33,35]
</span></span></span><span class="line"><span class="cl"><span class="cm">Here,
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[2] = loot[2] + loot[1]
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[4] = loot[4] + max(dp[2], dp[1])
</span></span></span><span class="line"><span class="cl"><span class="cm">	dp[5] = loot[5] + max(dp[3], dp[2]) and so on.
</span></span></span><span class="line"><span class="cl"><span class="cm">In the end, just compare the last two elements to check which path gave us the maximum profit.
</span></span></span><span class="line"><span class="cl"><span class="cm">Some people might not prefer modifying the original nums array. In that case, you can initialize another dp array of same length, initialize the first two elements as dp[0] = nums[0] and dp[1] = nums[1] and dp[3] = nums[0] + nums[2] and then performing the same loop. In that case, you would be using O(n) space.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">rob</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// 3 Base Case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">2</span><span class="o">];</span>				<span class="c1">// House 3 profit is rob House 1 and 3.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">3</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">],</span> <span class="n">nums</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">2</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="happy-numberhttpsleetcodecomproblemshappy-numbersubmissionsa-namehappy-numbera"><a href="https://leetcode.com/problems/happy-number/submissions/" target="_blank" rel="noopener noreffer ">Happy Number</a><a name="happy-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isHappy</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">isHappyConstantSpace</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>		<span class="c1">// Much faster than set method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//return isHappySet(n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isHappyConstantSpace</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">numSeenLessThan10</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// If I see 10 single digits, then it means that I am
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">1</span><span class="o">){</span>					<span class="c1">// now starting to see repititions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>					<span class="c1">// Each time I see a num &lt; 10, increment the counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">numSeenLessThan10</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">numSeenLessThan10</span> <span class="o">&gt;</span> <span class="n">9</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">=</span> <span class="n">getSquare</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>			<span class="c1">// Get the total of square of its digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that the moment you see a repition, it can&#39;t be a happy number, so keep track of digit square obtained so far. If they hit 1, well and good, otherwise there will be some repition, so return false.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isHappySet</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>		<span class="c1">// Keep track of numbers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">=</span> <span class="n">getSquare</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>							<span class="c1">// Get the sum of digits square
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>									<span class="c1">// If it&#39;s 1, it&#39;s a happy number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>					<span class="c1">// If it&#39;s a repition of something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// seen before, it&#39;s not a happy no.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>							<span class="c1">// If not seen, add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">getSquare</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>		<span class="c1">// Add the squares of the digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">digit</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">total</span> <span class="o">+=</span> <span class="n">digit</span> <span class="o">*</span> <span class="n">digit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">n</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="remove-linked-list-elementshttpsleetcodecomproblemsremove-linked-list-elementsa-nameremove-linked-list-elementsa"><a href="https://leetcode.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreffer ">Remove Linked List Elements</a><a name="remove-linked-list-elements"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">removeElements</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>				<span class="c1">// While head contains the val, skip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>								<span class="c1">// the head
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>	<span class="c1">// While we have something to iterate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>					<span class="c1">// If current&#39;s val match, skip the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">current</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// next node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Else advance to the next node.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="count-primeshttpsleetcodecomproblemscount-primessubmissionsa-namecount-primesa"><a href="https://leetcode.com/problems/count-primes/submissions/" target="_blank" rel="noopener noreffer ">Count Primes</a><a name="count-primes"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">countPrimes</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// No prime numbers for numbers &lt; 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>		<span class="c1">// Using Sieve of Eratosthenes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>			<span class="c1">// Start from i = 2 to sqrt(n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>						<span class="c1">// If store[i] = false, then mark all its
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="o">)</span><span class="c1">// multiples in the store as true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">store</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>			<span class="c1">// True = not a prime, false = prime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>				<span class="c1">// Loop through the array, count
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">count</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="isomorphic-stringshttpsleetcodecomproblemsisomorphic-stringssubmissionsa-nameisomorphic-stringsa"><a href="https://leetcode.com/problems/isomorphic-strings/submissions/" target="_blank" rel="noopener noreffer ">Isomorphic Strings</a><a name="isomorphic-strings"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isIsomorphic</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>			<span class="c1">// Can&#39;t be isomorphic is string lengths do not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">hashS</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>			<span class="c1">// To store String s&#39; match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">hashT</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>			<span class="c1">// To store String t&#39;s match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">charS</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">charT</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span> <span class="o">!=</span> <span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">])</span>	<span class="c1">// If the values at respective characters index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// do not match, return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashS</span><span class="o">[</span><span class="n">charS</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>			<span class="c1">// Otherwise, mark those index with the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">hashT</span><span class="o">[</span><span class="n">charT</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>			<span class="c1">// arbitrary value. I chose a simple (i+1) to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>										<span class="c1">// to mark both the hash with the same value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// Everything worked out, return true;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-linkedlisthttpsleetcodecomproblemsreverse-linked-listsolutiona-namereverse-linkedlista"><a href="https://leetcode.com/problems/reverse-linked-list/solution/" target="_blank" rel="noopener noreffer ">Reverse LinkedList</a><a name="reverse-linkedlist"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverseList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// Very tricky. Refer to the demo below
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">reverseList</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Iterative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">reverseList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>						<span class="c1">// No point in reversing empty or 1-sized list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">,</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">nextNode</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>					<span class="c1">// While we haven&#39;t reached the tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">nextNode</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>				<span class="c1">// Store the next node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>					<span class="c1">// Current&#39;s next becomes it&#39;s previous
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>						<span class="c1">// Advance previous to current.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">nextNode</span><span class="o">;</span>					<span class="c1">// Make current the actual next node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">prev</span><span class="o">;</span>							<span class="c1">// Current is at null, so it&#39;s previous is the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// new head.
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>![reverse Linked list](/Users/devkapupara/Desktop/Notes/dependencies/reverse Linked list.jpg)</p>
<h3 id="contains-duplicatehttpsleetcodecomproblemscontains-duplicatesubmissionsa-namecontains-duplicatea"><a href="https://leetcode.com/problems/contains-duplicate/submissions/" target="_blank" rel="noopener noreffer ">Contains Duplicate</a><a name="contains-duplicate"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">containsDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// There can&#39;t be any duplicates.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Store unique values.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">store</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>						<span class="c1">// Add func returns true if n was&#39;nt present,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>						<span class="c1">// false if duplicate. Therefore if it was a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// duplicate, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>								<span class="c1">// No duplicates, so return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="contains-duplicate-iihttpsleetcodecomproblemscontains-duplicate-iia-namecontains-duplicate-iia"><a href="https://leetcode.com/problems/contains-duplicate-ii/" target="_blank" rel="noopener noreffer ">Contains Duplicate II</a><a name="contains-duplicate-ii"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">containsNearbyDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Use a rotating window of size k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>				<span class="c1">// While we haven&#39;t processed everything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span>		<span class="c1">// If our current window contains duplicate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">store</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>					<span class="c1">// No duplicates in the window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">right</span><span class="o">++;</span>								<span class="c1">// Increase right to visit the new element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">){</span>					<span class="c1">// If window becomes &gt; k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">store</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]);</span>			<span class="c1">// remove the number on the left side of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>								<span class="c1">// the window and increase the left counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>										<span class="c1">// for new window from the next index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>								<span class="c1">// No duplicates found in any window.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-stack-using-queueshttpsleetcodecomproblemsimplement-stack-using-queuesa-nameimplement-stack-using-queuesa"><a href="https://leetcode.com/problems/implement-stack-using-queues/" target="_blank" rel="noopener noreffer ">Implement Stack Using Queues</a><a name="implement-stack-using-queues"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">MyStack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Deque</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/** Initialize your data structure here. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyStack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Push element x onto stack. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Removes the element on top of the stack and returns that element. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Get the top element. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">top</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">peekLast</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/** Returns whether the stack is empty. */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">empty</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="invert-binary-treehttpsleetcodecomproblemsinvert-binary-treea-nameinvert-binary-treea"><a href="https://leetcode.com/problems/invert-binary-tree/" target="_blank" rel="noopener noreffer ">Invert Binary Tree</a><a name="invert-binary-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">invertTree</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">TreeNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>		<span class="c1">// Swap the left and right nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">invertTree</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>			<span class="c1">// Then swap the subsequent trees of those nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">invertTree</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>					<span class="c1">// Return the original root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fibonacci-numberhttpsleetcodecomproblemsfibonacci-numbera-namefibonacci-numbera"><a href="https://leetcode.com/problems/fibonacci-number/" target="_blank" rel="noopener noreffer ">Fibonacci Number</a><a name="fibonacci-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Iterative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">N</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>						<span class="c1">// fib(0) = 0; fib(1) = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">N</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">f0</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">f1</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="n">fn</span> <span class="o">=</span> <span class="n">f0</span> <span class="o">+</span> <span class="n">f1</span><span class="o">;</span>				<span class="c1">// fib(n) = fib(n-1) + fib(n-2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">f0</span> <span class="o">=</span> <span class="n">f1</span><span class="o">;</span>					<span class="c1">// f0 becomes f1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">f1</span> <span class="o">=</span> <span class="n">fn</span><span class="o">;</span>					<span class="c1">// f1 becomes fn
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">f1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Dynamic Programming
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="nf">fibDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">N</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">N</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">N</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">N</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// To store intermediate result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dp</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>						<span class="c1">// fib(0) = 0; fib(1) = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">2</span><span class="o">];</span>	<span class="c1">// fib(i) = fib(i-1) + fib(i-2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">N</span><span class="o">];</span>					<span class="c1">// Return the last number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kth-largest-elementhttpsleetcodecomproblemskth-largest-element-in-an-arraya-namekth-largest-elementa"><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener noreffer ">kth Largest Element</a><a name="kth-largest-element"></a></h3>
<ol>
<li>The minheap algorithm has $O(n lg n) $ complexity and $O(1)$ space. The idea here is that we use a minheap to keep only the k greatest elements. If size becomes more than k, we remove the smallest element at the top of the heap. Thereby, at the end, our kth largest element will be at the top.</li>
<li>QuickSelect Algorithm performs in $O(n)$ best case, $O(n^2)$ worst case when the pivot chosen is always the largest, so we use a random pivot.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// MinHeap Algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">kthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;((</span><span class="n">n1</span><span class="o">,</span><span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">);</span>	<span class="c1">// Initialize minheap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>				<span class="c1">// Add number one by one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">)</span>		<span class="c1">// If size is greater than k
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>			<span class="c1">// Remove the topmost element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>			<span class="c1">// The topmost element is our answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// QuickSelect Algorithm - Hoare&#39;s Partition Scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">kthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span> <span class="o">=</span> <span class="n">nums</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">k</span><span class="o">);</span><span class="c1">// kth largest is (n-k)th largest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">quickselect</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">==</span> <span class="n">right</span><span class="o">)</span>					<span class="c1">// Array contains only 1 element, that&#39;s the answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>				<span class="c1">// Choose a random pivot between left and right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">pivotIndex</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">right</span><span class="o">-</span><span class="n">left</span><span class="o">);</span>	<span class="c1">// but not left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">pivotIndex</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">pivotIndex</span><span class="o">);</span>	<span class="c1">// Partition, and find it&#39;s correct index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">pivotIndex</span><span class="o">)</span>					<span class="c1">// That index is equal to kth statistic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">pivotIndex</span><span class="o">)</span>			<span class="c1">// If it&#39;s less than the index, our ans lies in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  		<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">pivotIndex</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>	<span class="c1">// left side
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">else</span>
</span></span><span class="line"><span class="cl">  		<span class="k">return</span> <span class="n">quickselect</span><span class="o">(</span><span class="n">pivotIndex</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>	<span class="c1">// Otherwise, it&#39;s on the right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pivotIndex</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">pivotIndex</span><span class="o">];</span>			<span class="c1">// Partition element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">swap</span><span class="o">(</span><span class="n">pivotIndex</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>				<span class="c1">// Move that element to the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">wall</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>					<span class="c1">// wall is initially before everything
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">  		<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="o">)</span>				<span class="c1">// If the current element is &lt; than the pivot, then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    		<span class="n">swap</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="o">++</span><span class="n">wall</span><span class="o">);</span>			<span class="c1">// we need to swap it with the element next to wall.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">swap</span><span class="o">(</span><span class="n">right</span><span class="o">,</span> <span class="o">++</span><span class="n">wall</span><span class="o">);</span>					<span class="c1">// Lastly, swap the element at wall and the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="n">wall</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-twohttpsleetcodecomproblemspower-of-twoa-namepower-of-twoa"><a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="noopener noreffer ">Power Of Two</a><a name="power-of-two"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// n &lt; 0 cannot be powers of 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If n is odd, it can&#39;t be a power of 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="n">2</span><span class="o">;</span>			<span class="c1">// It is a multiple of 2, so divide it by 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>			<span class="c1">// n came out to be 1 which is a power of 2, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="valid-sudokuhttpsleetcodecomproblemsvalid-sudokua-namevalid-sudokua"><a href="https://leetcode.com/problems/valid-sudoku/" target="_blank" rel="noopener noreffer ">Valid Sudoku</a><a name="valid-sudoku"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValidSudoku</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">){</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="o">.</span><span class="na">board</span> <span class="o">=</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">rowCheck</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">colCheck</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">boxCheck</span><span class="o">();</span>	<span class="c1">// Check row first, then column and at
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// last, boxes because they are time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                                <span class="c1">// consuming.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">onePassCheck</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">rows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>		<span class="c1">// 1 HashSet for each row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">columns</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>	<span class="c1">// 1 HashSet for each column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>	<span class="c1">// 1 HashSet for each box.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">columns</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">boxes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>							<span class="c1">// -2 = &#39;.&#39;		
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="kt">int</span> <span class="n">boxIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span><span class="o">/</span><span class="n">3</span><span class="o">)</span> <span class="o">*</span> <span class="n">3</span> <span class="o">+</span> <span class="n">j</span><span class="o">/</span><span class="n">3</span><span class="o">;</span>	<span class="c1">// Calculate which box we are in.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(!</span><span class="n">rows</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">columns</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">boxes</span><span class="o">[</span><span class="n">boxIndex</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// If the row set or the column set or the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">}</span>										<span class="c1">// box set contains that val, return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">rowCheck</span><span class="o">(){</span>						<span class="c1">// Horizontal check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">row</span><span class="o">:</span> <span class="n">board</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">row</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>								<span class="c1">// val = -2 means &#39;.&#39; in the board
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>							<span class="c1">// If val already seen, invalid sudoku
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>						<span class="c1">// else, Mark that index as seen.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">colCheck</span><span class="o">(){</span>						<span class="c1">// Vertical Check.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">col</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">      <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">row</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">boxCheck</span><span class="o">(){</span>					<span class="c1">// For the 9 sub boxes, let the single
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="n">3</span><span class="o">){</span>				<span class="c1">// box checker check it&#39;s validity.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">3</span><span class="o">)</span>				<span class="c1">// If any of the subbox was invalid,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">singleBoxCheck</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">))</span>				<span class="c1">// we abort and return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">singleBoxCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">topRightRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">topRightCol</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">9</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>				<span class="c1">// Each sub box has 3 rows and 3 columns
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">board</span><span class="o">[</span><span class="n">topRightRow</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">topRightCol</span><span class="o">+</span><span class="n">j</span><span class="o">]-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>	<span class="c1">// This gives us the value at 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">!=</span> <span class="o">-</span><span class="n">2</span><span class="o">){</span>							<span class="c1">// each cell in the sub box and we fill the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>						<span class="c1">// arr with all values that are seen.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// If seen twice, return false;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">arr</span><span class="o">[</span><span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-queue-using-stackhttpsleetcodecomproblemsimplement-queue-using-stackssubmissionsa-nameimplement-queue-using-stacka"><a href="https://leetcode.com/problems/implement-queue-using-stacks/submissions/" target="_blank" rel="noopener noreffer ">Implement Queue Using Stack</a><a name="implement-queue-using-stack"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Since we reverse stack1 into stack2, stack2 is basically our queue, so if stack2 isn&#39;t empty, then the topmost element is what we need when we pop or peek. If it is empty, then again fill it with whatever&#39;s there is stack1, and it again becomes the correct queue.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="nf">MyQueue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack1</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>			<span class="c1">// Push onto stack1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">peek</span><span class="o">();</span>					<span class="c1">// First call the peek function, to make sure stack 2 isn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">stack2</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>	<span class="c1">// empty. Then, the topmost element of stack2 is what we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** Get the front element. */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">peek</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">stack2</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>			
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(!</span><span class="n">stack1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack2</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stack1</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">stack2</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>	<span class="c1">// stack2 is basically the queue, so return whatever&#39;s on the top
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** Returns whether the queue is empty. */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">empty</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">stack1</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stack2</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="palindrome-linkedlisthttpsleetcodecomproblemspalindrome-linked-listsubmissionsa-namepalindrome-linkedlista"><a href="https://leetcode.com/problems/palindrome-linked-list/submissions/" target="_blank" rel="noopener noreffer ">Palindrome LinkedList</a><a name="palindrome-linkedlist"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-JAVA" data-lang="JAVA"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Size 0 or 1 list, must be unique.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// Size 2 list, compare the head and tail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>		<span class="c1">// values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">middleNode</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>					<span class="c1">// Standard Rabbit-Tortoise pointers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>				<span class="c1">// Fast pointer jumps twice so by the time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// it reaches the end of the list, middlenode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>						<span class="c1">// is at the middle of the linkedlist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">nextNode</span><span class="o">;</span>							<span class="c1">// These three nodes are for reversing the 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// first half of the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// Advance middle once, fastpointer twice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">fastPointer</span> <span class="o">=</span> <span class="n">fastPointer</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">nextNode</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>					<span class="c1">// Reverse the curr node, but first store the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>						<span class="c1">// next newNode. By doing this, we would have
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>							<span class="c1">// reversed exactly half of the list because
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">curr</span> <span class="o">=</span> <span class="n">nextNode</span><span class="o">;</span>						<span class="c1">// fastpointer advacnes at double the speed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">fastPointer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// If faspointer isn&#39;t null, then we have an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// odd length list, so advance middle once,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// List looks like 1-&gt;2-&gt;3-&gt;2-&gt;1 instead of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">middleNode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>					<span class="c1">// 1-&gt;2-&gt;3-&gt;3-&gt;2-&gt;1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">middleNode</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">prev</span><span class="o">.</span><span class="na">val</span><span class="o">)</span>			<span class="c1">// While middle isn&#39;t null, check middlenode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// val and prev val. Prev is basically the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">middleNode</span> <span class="o">=</span> <span class="n">middleNode</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>			<span class="c1">// the point where the list reverses.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>						<span class="c1">// Advance middle and next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>								<span class="c1">// Values matched, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// Reversed list looks like this:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// 1&lt;-2&lt;-3&lt;-prev middle-&gt;3-&gt;2-&gt;1 in even len
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// 1&lt;-2&lt;-prev middle-&gt;2-&gt;1 in odd lengths.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="delete-node-in-a-linked-listhttpsleetcodecomproblemsdelete-node-in-a-linked-listsubmissionsa-namedelete-node-in-a-linked-lista"><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/submissions/" target="_blank" rel="noopener noreffer ">Delete Node in a Linked List</a><a name="delete-node-in-a-linked-list"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteNode</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>		<span class="c1">// Node&#39;s value becomes its next node&#39;s value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>  	<span class="c1">// Node&#39;s next is it&#39;s next&#39;s next.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-anagramhttpsleetcodecomproblemsvalid-anagramsubmissionsa-nameis-anagrama"><a href="https://leetcode.com/problems/valid-anagram/submissions/" target="_blank" rel="noopener noreffer ">Is Anagram</a><a name="is-anagram"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAnagram</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>			<span class="c1">// Can&#39;t be anagram if size aren&#39;t the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>				<span class="c1">// Acts like a hashmap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Increment the count by 1 in the store for the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">store</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>			<span class="c1">// index = position of char in the alphabet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Loop throught the second string, decrement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">store</span><span class="o">[</span><span class="n">t</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// count of each character in store by 1, but if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// it goes below 0, then it means that character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>										<span class="c1">// occurred more than it did in s. So false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// Everything matched, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-pathshttpsleetcodecomproblemsbinary-tree-pathsa-namebinary-tree-pathsa"><a href="https://leetcode.com/problems/binary-tree-paths/" target="_blank" rel="noopener noreffer ">Binary Tree Paths</a><a name="binary-tree-paths"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">paths</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">binaryTreePaths</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>					<span class="c1">// No paths
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">paths</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">rootval</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">val</span> <span class="o">+</span> <span class="s">&#34;&#34;</span><span class="o">;</span>		<span class="c1">// Converting int to string.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">rootval</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">paths</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// It&#39;s a leaf, and you found a path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">paths</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>									<span class="c1">// so add it to the list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// Left side is traversable, so
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#34;-&gt;&#34;</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>	<span class="c1">// visit it and record its value.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// Same as above, but for right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&#34;-&gt;&#34;</span> <span class="o">+</span> <span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-digitshttpsleetcodecomproblemsadd-digitsa-nameadd-digitsa"><a href="https://leetcode.com/problems/add-digits/" target="_blank" rel="noopener noreffer ">Add Digits</a><a name="add-digits"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">constantTime</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>			<span class="c1">// Already a single digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If perfectly divisible by 9, then sum will be 9.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>			<span class="c1">// Otherwise, the result is going to be n % 9.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">iterative</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">9</span><span class="o">){</span>				<span class="c1">// While number isn&#39;t between 2-9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">=</span> <span class="n">sumOfDigits</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>		<span class="c1">// make num = sum of it&#39;s digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">sumOfDigits</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>		<span class="c1">// Standard method to add the digits of a number.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>				<span class="c1">// Extract the last digit, add it to sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>					<span class="c1">// Divide the num by 10.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="largest-perimeter-trianglehttpsleetcodecomproblemslargest-perimeter-trianglea-namelargest-perimeter-trianglea"><a href="https://leetcode.com/problems/largest-perimeter-triangle/" target="_blank" rel="noopener noreffer ">Largest Perimeter Triangle</a><a name="largest-perimeter-triangle"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">largestPerimeter</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">A</span><span class="o">);</span>							<span class="c1">// Sort so the largest sides are at the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">)</span>	<span class="c1">// Triangle inequality Theorem : a + b &gt; c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">])</span>			<span class="c1">// If sum of last two is greater than the last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">2</span><span class="o">];</span>	<span class="c1">// we found out max perimeter, otherwise
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">0</span><span class="o">;</span>								<span class="c1">// decrease i by i, then check the next three
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// triplets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>											<span class="c1">// In the end if nothing works out, we return 0.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ugly-numberhttpsleetcodecomproblemsugly-numbersubmissionsa-nameugly-numbera"><a href="https://leetcode.com/problems/ugly-number/submissions/" target="_blank" rel="noopener noreffer ">Ugly Number</a><a name="ugly-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isUgly</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>		<span class="c1">// Negative numbers are automatically non ugly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Keep dividing number by 2 till it is divisible
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Keep dividing by 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">5</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// and 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span> <span class="o">==</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// If num isn&#39;t 1, that means that there are other prime factors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>							<span class="c1">// except 2,3 and 5.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="missing-numberhttpsleetcodecomproblemsmissing-numbera-namemissing-numbera"><a href="https://leetcode.com/problems/missing-number/" target="_blank" rel="noopener noreffer ">Missing Number</a><a name="missing-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">missingNumber</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>			<span class="c1">// Since it&#39;s given that the array contains
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">nsum</span> <span class="o">=</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">*(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">+</span><span class="n">1</span><span class="o">))/</span><span class="n">2</span><span class="o">;</span>	<span class="c1">// all numbers from 0-n, we use the formula
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">arraySum</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>						<span class="c1">// to compute sum of n numbers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>		<span class="c1">// Then we loop through the array to compute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">arraySum</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>					<span class="c1">// the sum of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">nsum</span> <span class="o">-</span> <span class="n">arraySum</span><span class="o">;</span>						<span class="c1">// Subtract the array sum from the required
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// sum, and that gives us the missing number
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-bad-versionhttpsleetcodecomproblemsfirst-bad-versionsubmissionsa-nameis-bad-versiona"><a href="https://leetcode.com/problems/first-bad-version/submissions/" target="_blank" rel="noopener noreffer ">Is Bad Version</a><a name="is-bad-version"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstBadVersion</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// Basic Binary Search Algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// high - low to prefent integer overflow.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">isBadVersion</span><span class="o">(</span><span class="n">mid</span><span class="o">))</span>			<span class="c1">// if the model at mid was bad version, then we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>					<span class="c1">// could possibly have a bad version before it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// If it wasn&#39;t, then our first bad version lies
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>									<span class="c1">// beyond the middle element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="move-zeroeshttpsleetcodecomproblemsmove-zeroessolutiona-namemove-zeroesa"><a href="https://leetcode.com/problems/move-zeroes/solution/" target="_blank" rel="noopener noreffer ">Move Zeroes</a><a name="move-zeroes"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea is that we know the end of the array is going to contain zeroes. So first, iterate over the array, if you find any non-zero value, copy it down to the front of the array. Then we you are done, length of the array minus the last index where you copied the non-zero element is the number of zeroes you need to fill in. So iterate from that last non-zero index to the end of the array and fill in zeroes.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveZeroes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lastNonZeroIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">[</span><span class="n">lastNonZeroIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lastNonZeroIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">This solution is an extension of the above, but a better one because we only swap elements when needed and do not do any unnecessary writes. Start from the beginning of the array, maintain the last position of non-zero value you saw, and the current element. If you see a non-zero value, swap the current value with the index just after the last non-zero index you have, and then increment the non-zero index by 1 because you just found a new non-zero value. This helps us prepare for the next non-zero value we find and copy it at this index+1. By doing so, we are basically partitioning the array into non-zeroes and zero values.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveZeroes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">lastNonZeroIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span> <span class="o">,</span> <span class="n">lastNonZeroIndex</span><span class="o">++);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="word-patternhttpsleetcodecomproblemsword-patterna-nameword-patterna"><a href="https://leetcode.com/problems/word-pattern/" target="_blank" rel="noopener noreffer ">Word Pattern</a><a name="word-pattern"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">wordPattern</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">,</span> <span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">words</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">);</span>		<span class="c1">// Split str into words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">!=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>	<span class="c1">// If length of pattern and words mismatch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// then pattern do not match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">patternStore</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Map pattern char to word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Character</span><span class="o">&gt;</span> <span class="n">wordMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>		<span class="c1">// Map word to pattern char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>					<span class="c1">// Get the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">patternStore</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>		<span class="c1">// Put it in patternStore if absent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">patternStore</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">).</span><span class="na">equals</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span>	<span class="c1">// If it was already there and it doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// map to words[i], we have a violation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">wordMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">c</span><span class="o">);</span>			<span class="c1">// Now check the other way around. If
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">!=</span> <span class="n">c</span><span class="o">)</span>				<span class="c1">// words is absent in the map, map it to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>							<span class="c1">// the char. If present, then fetch it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>												<span class="c1">// mapping and check if both match to c.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// No violation, so return true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="can-win-nimhttpsleetcodecomproblemsnim-gamea-namecan-win-nima"><a href="https://leetcode.com/problems/nim-game/" target="_blank" rel="noopener noreffer ">Can Win Nim</a><a name="can-win-nim"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canWinNim</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="n">4</span> <span class="o">!=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// You can always win the game if n is not divisible by 4.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-threehttpsleetcodecomproblemspower-of-threea-namepower-of-threea"><a href="https://leetcode.com/problems/power-of-three/" target="_blank" rel="noopener noreffer ">Power Of Three</a><a name="power-of-three"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfThree</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">1</span><span class="o">)</span>				<span class="c1">// If negative, it can&#39;t be a power of 3.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// While n is divisible by 3, keep dividing it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span> <span class="o">/=</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">n</span> <span class="o">==</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// In the end, if it was a power of 3, then n should be 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="power-of-fourhttpsleetcodecomproblemspower-of-foursubmissionsa-namepower-of-foura"><a href="https://leetcode.com/problems/power-of-four/submissions/" target="_blank" rel="noopener noreffer ">Power of Four</a><a name="power-of-four"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">You can also use the iterative method that I have used in Power of Two and Power of Three problems. I just wanted to try a different approach here. This is a constant time function.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPowerOfFour</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">pow</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">num</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">4</span><span class="o">);</span>	<span class="c1">// Calculate x in 4^x = num using logs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">pow</span> <span class="o">==</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">pow</span><span class="o">;</span>					<span class="c1">// Making sure that x is an integer and not a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// fractional exponent.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-stringhttpsleetcodecomproblemsreverse-stringa-namereverse-stringa"><a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="noopener noreffer ">Reverse String</a><a name="reverse-string"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">1 Liner solution. Basically, create a StringBuilder of the string, the builder already has a reverse method, so reverse it and then return it&#39;s toString.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Golfing aside, here is how one is expected to solve it in an interview.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">char</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>		<span class="c1">// Create a char array of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>				<span class="c1">// length of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// We only need to iterate over half the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>			<span class="c1">// Swap the 0th index element with (len-1)th,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>		<span class="c1">// 1st index element with (len-2)th, until you get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">array</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>			<span class="c1">// to the middle element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>			<span class="c1">// Return a new string with the reversed array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implement-strstrhttpsleetcodecomproblemsimplement-strstrsubmissionsa-nameimplement-strstra"><a href="https://leetcode.com/problems/implement-strstr/submissions/" target="_blank" rel="noopener noreffer ">Implement strStr()</a><a name="implement-strstr()"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is that you only need to iterate haystack length - needle length, and then check the substring of size = needle length in haystack from each index. If you are successfully able to match each character of the needle in the corresponding substring in haystack, return the index you start from. 
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="n">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="n">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>	<span class="c1">// Needle length can&#39;t be &gt; than haystack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hl</span> <span class="o">=</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">nl</span> <span class="o">=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nl</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>								<span class="c1">// Empty strings are always a match starting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>								<span class="c1">// from 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">hl</span><span class="o">-</span><span class="n">nl</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>			<span class="c1">// Iterate haystack length - needle length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nl</span> <span class="o">&amp;&amp;</span> <span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">)</span> <span class="o">==</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span> <span class="o">++</span><span class="n">j</span><span class="o">)}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">nl</span><span class="o">-</span><span class="n">1</span><span class="o">)</span>						<span class="c1">// We are checking how far from i can we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// match. If i matched with j, increment j
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>										<span class="c1">// and then match the character i+1 to j.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// If that matches, increment j and match i+2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>									<span class="c1">// j == n-1 checked wether or not if we were
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// able to match the full needle string, if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// yes, then i is our index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// in the end, nothing matched, so return -1
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-vowels-of-a-stringhttpsleetcodecomproblemsreverse-vowels-of-a-stringa-namereverse-vowels-of-a-stringa"><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/" target="_blank" rel="noopener noreffer ">Reverse Vowels of a String</a><a name="reverse-vowels-of-a-string"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseVowels</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>					<span class="c1">// No need to reverse a string of length 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>	<span class="c1">// Get the char array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVowel</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]))</span>		<span class="c1">// While left is pointing to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span><span class="o">++;</span>										<span class="c1">// consonant, increment it/
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isVowel</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]))</span>	<span class="c1">// While right is pointing to a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">right</span><span class="o">--;</span>									<span class="c1">// consonant, decrement it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>							<span class="c1">// Left and right are now pointing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">str</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">=</span> <span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>							<span class="c1">// to vowels, so swap it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">str</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>								<span class="c1">// And then increment left and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">left</span><span class="o">++;</span>											<span class="c1">// decrement right to process the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">right</span><span class="o">--;</span>										<span class="c1">// inner string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>			<span class="c1">// Return a string from the reveresed array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isVowel</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">){</span>	<span class="c1">// Function to check if a character is a vowel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">switch</span> <span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;a&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;e&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;i&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;o&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;u&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;A&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;E&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;I&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;O&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="sc">&#39;U&#39;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="intersection-of-two-arrayshttpsleetcodecomproblemsintersection-of-two-arraysa-nameintersection-of-two-arraysa"><a href="https://leetcode.com/problems/intersection-of-two-arrays/" target="_blank" rel="noopener noreffer ">Intersection of two arrays</a><a name="intersection-of-two-arrays"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">intersection</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>		<span class="c1">// Record all unique values in set 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">set1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">intersect</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>		<span class="c1">// We will use it to record intersection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums2</span><span class="o">)</span>								<span class="c1">// For each value in nums2 array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">set1</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>						<span class="c1">// If set1 contains it, we found an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">intersect</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>						<span class="c1">// intersecting element, so add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">intersect</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>			<span class="c1">// We will now convert the set to an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// array and then return the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">intersect</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-perfect-squarehttpsleetcodecomproblemsvalid-perfect-squarea-nameis-perfect-squarea"><a href="https://leetcode.com/problems/valid-perfect-square/" target="_blank" rel="noopener noreffer ">Is Perfect Square</a><a name="is-perfect-square"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The basic idea here is to close in on the square root using binary search algorithm. 
</span></span></span><span class="line"><span class="cl"><span class="cm">I handle 4 seperately because it&#39;s root is the only one where 4/3 &lt; it&#39;s square root. 
</span></span></span><span class="line"><span class="cl"><span class="cm">All other numbers square root is greater than its value/3.
</span></span></span><span class="line"><span class="cl"><span class="cm">So we create a lowerBound of 1 and an upperBound of num/3. Then if the middle value&#39;s square
</span></span></span><span class="line"><span class="cl"><span class="cm">overshoots, we make upperBound = mid-1, otherwise increment lowerBound to mid+1. This way, we
</span></span></span><span class="line"><span class="cl"><span class="cm">close on the square root from both sides, and if the middle values is the square root, it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">square will yield num.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isPerfectSquare</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">2</span> <span class="o">||</span> <span class="n">num</span> <span class="o">==</span> <span class="n">4</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">num</span><span class="o">/</span><span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">square</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">lowerBound</span> <span class="o">&lt;=</span> <span class="n">upperBound</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">lowerBound</span> <span class="o">+</span> <span class="o">(</span><span class="n">upperBound</span><span class="o">-</span><span class="n">lowerBound</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">square</span> <span class="o">=</span> <span class="n">mid</span><span class="o">*</span><span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">square</span> <span class="o">==</span> <span class="n">num</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">square</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">upperBound</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">lowerBound</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sum-of-two-integershttpsleetcodecomproblemssum-of-two-integersa-namesum-of-two-integersa"><a href="https://leetcode.com/problems/sum-of-two-integers/" target="_blank" rel="noopener noreffer ">Sum of Two Integers</a><a name="sum-of-two-integers"></a></h3>
<p>I cannot explain it better than this <a href="https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution" target="_blank" rel="noopener noreffer ">post</a>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">getSum</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">carry</span> <span class="o">&lt;&lt;</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="guess-number-higher-or-lowerhttpsleetcodecomproblemsguess-number-higher-or-lowera-nameguess-number-higher-or-lowera"><a href="https://leetcode.com/problems/guess-number-higher-or-lower/" target="_blank" rel="noopener noreffer ">Guess Number Higher or Lower</a><a name="guess-number-higher-or-lower"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">guessNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// Standard binary search algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="o">,</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// Arbitrary result, but not 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">(</span><span class="n">high</span><span class="o">-</span><span class="n">low</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>			<span class="c1">// Check the mid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span> <span class="o">=</span> <span class="n">guess</span><span class="o">(</span><span class="n">mid</span><span class="o">);</span>				<span class="c1">// Check if our guess is correct
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// If result == -1, then we overshot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>					<span class="c1">// So we can discard all values &gt; mid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>				<span class="c1">// If result == 1, we undershot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>					<span class="c1">// Need to discard all the values &lt; mid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>								<span class="c1">// Result == 0, so return the mid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ransom-notehttpsleetcodecomproblemsransom-notesubmissionsa-nameransom-notea"><a href="https://leetcode.com/problems/ransom-note/submissions/" target="_blank" rel="noopener noreffer ">Ransom Note</a><a name="ransom-note"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canConstruct</span><span class="o">(</span><span class="n">String</span> <span class="n">ransomNote</span><span class="o">,</span> <span class="n">String</span> <span class="n">magazine</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">magazine</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>		<span class="c1">// First, fill the store with available
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>							<span class="c1">// characters from the magazine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">ransomNote</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>		<span class="c1">// Then, scan through the note, decrement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">store</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// each char&#39;s index by 1 because we used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>						<span class="c1">// it. If it&#39;s frequency drops below 0,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>								<span class="c1">// then it means that we need more chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>												<span class="c1">// than available. In the end, return
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>												<span class="c1">// true if everything worked out.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="first-unique-character-in-a-stringhttpsleetcodecomproblemsfirst-unique-character-in-a-stringsubmissionsa-namefirst-unique-character-in-a-stringa"><a href="https://leetcode.com/problems/first-unique-character-in-a-string/submissions/" target="_blank" rel="noopener noreffer ">First Unique Character in a String</a><a name="first-unique-character-in-a-string"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">firstUniqChar</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>			<span class="c1">// Preprocess freq array to maintain freq of each
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>		<span class="c1">// character in the string s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">chars</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>	<span class="c1">// Make a second pass through the chars of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// string in order, and if any of the char&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// frequency is 1, that&#39;s our unique char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// Otherwise, no unique character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-the-differencehttpsleetcodecomproblemsfind-the-differencea-namefind-the-differencea"><a href="https://leetcode.com/problems/find-the-difference/" target="_blank" rel="noopener noreffer ">Find the Difference</a><a name="find-the-difference"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The general idea here is same as the problem where we are required to find a unique int
</span></span></span><span class="line"><span class="cl"><span class="cm">in an array containing duplicates except one. We use the xor operator between each character
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string s and t, and the ones that are duplicate will xor to give 0. XOR of any element
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 is the element itself, and XOR of two same elements gives 0. This way, since string s
</span></span></span><span class="line"><span class="cl"><span class="cm">and t basically has pairs of repeating characters except one, the unique element will XOR
</span></span></span><span class="line"><span class="cl"><span class="cm">with 0 and give us it&#39;s ASCII code. The only thing we need to take care of is to now shift it
</span></span></span><span class="line"><span class="cl"><span class="cm">up by 26, so we add &#39;a&#39; and convert it to char.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">char</span> <span class="nf">findTheDifference</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">xor</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">xor</span> <span class="o">^=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">t</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">xor</span> <span class="o">^=</span> <span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">xor</span><span class="o">+</span><span class="sc">&#39;a&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="nth-digithttpsleetcodecomproblemsnth-digita-namenth-digita"><a href="https://leetcode.com/problems/nth-digit/" target="_blank" rel="noopener noreffer ">Nth Digit</a><a name="nth-digit"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">Notice that # of digits between 0-9 is 1*9, 10-99 is 2*90, 100-999 is 3*900. If we generalize
</span></span></span><span class="line"><span class="cl"><span class="cm">it, it is exactly equal to 9 * (num of digits in the number) * 10^{# of digits - 1}.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findNthDigit</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pow</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// First we need to figure out how many digits there are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">upperBound</span> <span class="o">=</span> <span class="n">9</span><span class="o">;</span>		<span class="c1">// in the number.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">upperBound</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">-=</span> <span class="n">upperBound</span><span class="o">;</span>		<span class="c1">// If n is a two digit number, subtract the 9 single digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">pow</span><span class="o">;</span>					<span class="c1">// numbers, if 3 digit, subtract the first 189 digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">upperBound</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">10</span><span class="o">,</span> <span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">pow</span> <span class="o">*</span> <span class="n">9</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>							<span class="c1">// pow allows us to track how many digits there are in num.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">10</span><span class="o">,</span><span class="n">pow</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)/</span><span class="n">pow</span><span class="o">;</span>		<span class="c1">// Calculate which number we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">position</span> <span class="o">=</span> <span class="n">pow</span> <span class="o">-</span> <span class="n">1</span> <span class="o">-</span> <span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">pow</span><span class="o">;</span>				<span class="c1">// Calculate which index we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">position</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>					<span class="c1">// Divide num that many times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="n">10</span><span class="o">;</span>									<span class="c1">// num % 10 gives us that digit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sum-of-left-leaveshttpsleetcodecomproblemssum-of-left-leavesa-namesum-of-left-leavesa"><a href="https://leetcode.com/problems/sum-of-left-leaves/" target="_blank" rel="noopener noreffer ">Sum of Left Leaves</a><a name="sum-of-left-leaves"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">sumOfLeftLeaves</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>		<span class="c1">// Empty tree, therefore total is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Initialize sum.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Look ahead and check. If left is not null but left is a leaf, then sum is the value of the left leaf.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// But if left is null or left is an inner node, then we need to explore it, so sum is whatever the subtree from the left node returns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">=</span> <span class="n">sumOfLeftLeaves</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// We computed the sum of the left side. Now we need to traverse the right side and fetch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// the sum, so total sum is sum of the left side as computed above + sum returned by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// traversing the right side.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">sumOfLeftLeaves</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-palindromehttpsleetcodecomproblemslongest-palindromea-namelongest-palindromea"><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener noreffer ">Longest Palindrome</a><a name="longest-palindrome"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">128</span><span class="o">];</span>		<span class="c1">// To record the frequency of each char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">]++;</span>					<span class="c1">// Increment count by 1 for each character observed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// length of the longest palindrome
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">isOdd</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>			<span class="c1">// Check if our palindrome length is odd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">128</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Go through each character&#39;s index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// Only if it has been observed atleast once
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>		<span class="c1">// Store it&#39;s frequency
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">used</span><span class="o">;</span>				<span class="c1">// Record how many of it&#39;s occurrences we will use
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// If a perfect multiple of 2, we will use all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">used</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">used</span> <span class="o">=</span> <span class="n">val</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// If odd occurrences, then the max we can use to form a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">isOdd</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>		<span class="c1">// valid palindrome is val-1. It also tells us that the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>						<span class="c1">// palindrome is going to be of odd length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">len</span> <span class="o">+=</span> <span class="n">used</span><span class="o">;</span>			<span class="c1">// Finally, increment length by the number of chars used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">isOdd</span><span class="o">)</span>						<span class="c1">// If length is odd, we can always insert any single
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// character in the middle to keep the palindrome valid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">len</span><span class="o">;</span>						<span class="c1">// If the length is even, then we can&#39;t do anything.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fizz-buzzhttpsleetcodecomproblemsfizz-buzza-namefizz-buzza"><a href="https://leetcode.com/problems/fizz-buzz/" target="_blank" rel="noopener noreffer ">Fizz Buzz</a><a name="fizz-buzz"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">fizzBuzz</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>				<span class="c1">// Loop from 1 to n
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">15</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// If i divisible by 15, add &#34;FizzBuzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;FizzBuzz&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">5</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// i&#39;s not a multiple of 15, check if it&#39;s a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Buzz&#34;</span><span class="o">);</span>					<span class="c1">// multiple of 5. If so, add &#34;Buzz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">3</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// i&#39;s not a multiple of 5, check if it&#39;s a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;Fizz&#34;</span><span class="o">);</span>					<span class="c1">// multiple of 3, if so, add &#34;Fizz&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&#34;&#34;</span><span class="o">);</span>						<span class="c1">// Otherwise, just add the String type of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="third-maximum-numberhttpsleetcodecomproblemsthird-maximum-numbera-namethird-maximum-numbera"><a href="https://leetcode.com/problems/third-maximum-number/" target="_blank" rel="noopener noreffer ">Third maximum Number</a><a name="third-maximum-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">thirdMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// Size 1 array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>		<span class="c1">// Size 2 array, check between 0th element or 1st element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">?</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">:</span> <span class="n">nums</span><span class="o">[</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">firstMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>		<span class="c1">// Lowest values for all three
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">long</span> <span class="n">secondMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>					<span class="c1">// For each number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">firstMax</span><span class="o">){</span>				<span class="c1">// If num &gt; than the largest, then old largest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">secondMax</span><span class="o">;</span>		<span class="c1">// becomes second largest and second largest becomes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">secondMax</span> <span class="o">=</span> <span class="n">firstMax</span><span class="o">;</span>		<span class="c1">// first largest, then update the largest.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">firstMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">secondMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">firstMax</span><span class="o">){</span>	<span class="c1">// If num &gt; second and num is not is the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">thirdMax</span> <span class="o">=</span> <span class="n">secondMax</span><span class="o">;</span>					<span class="c1">// same as first, first largets becomes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">secondMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>							<span class="c1">// second largest and update the second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">thirdMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">secondMax</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">firstMax</span><span class="o">)</span> <span class="c1">// // If num &gt; third, we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            	<span class="n">thirdMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>						<span class="c1">// need to check that it is not the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>												<span class="c1">// as the first and second largest.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">thirdMax</span> <span class="o">==</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">)</span>					<span class="c1">// This check allows us to make sure that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">firstMax</span><span class="o">;</span>						<span class="c1">// we do indeed have a third max and is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">thirdMax</span><span class="o">;</span>							<span class="c1">// not what we initialized initially.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="add-two-stringshttpsleetcodecomproblemsadd-stringsa-nameadd-two-stringsa"><a href="https://leetcode.com/problems/add-strings/" target="_blank" rel="noopener noreffer ">Add Two Strings</a><a name="add-two-strings"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">addStrings</span><span class="o">(</span><span class="n">String</span> <span class="n">num1</span><span class="o">,</span> <span class="n">String</span> <span class="n">num2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;0&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">num2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;0&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">num1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** We use a char array to maintain the digit at each index. We want the array to be of
</span></span></span><span class="line"><span class="cl"><span class="cm">    the size of the largest string + 1 to handle carry bit if any at the end. We start
</span></span></span><span class="line"><span class="cl"><span class="cm">    adding each digit of the string from the end, and place it in it&#39;s correct index at the
</span></span></span><span class="line"><span class="cl"><span class="cm">    end of the sum array. This way, we avoid reversing it and return the answer in constant
</span></span></span><span class="line"><span class="cl"><span class="cm">    time. Take care to convert the digit you compute by adding &#39;0&#39;. Lastly, if the carry bit
</span></span></span><span class="line"><span class="cl"><span class="cm">    is 1, we need to make the 0th index as 1, and return the string by using the sum array.
</span></span></span><span class="line"><span class="cl"><span class="cm">    If it&#39;s not 1, then the sum array has a leading 0 which we don&#39;t want. So we use Java&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm">    String constructor that takes in the char array, startingIndex in that array and the
</span></span></span><span class="line"><span class="cl"><span class="cm">    number of elements of that array we want. So if the carry isn&#39;t 1, we technically want
</span></span></span><span class="line"><span class="cl"><span class="cm">    everything from index 1 and # of elements = sum.length - 1 because we discard 0 index.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">sum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">1</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">())];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">idx1</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">idx2</span> <span class="o">=</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">total</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">idx1</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">||</span> <span class="n">idx2</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">n1</span> <span class="o">=</span> <span class="n">idx1</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">num1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx1</span><span class="o">--)-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n2</span> <span class="o">=</span> <span class="n">idx2</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">num2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">idx2</span><span class="o">--)-</span><span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">total</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="n">carry</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">carry</span> <span class="o">=</span> <span class="n">total</span><span class="o">/</span><span class="n">10</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span><span class="o">[</span><span class="n">index</span><span class="o">--]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">total</span> <span class="o">%</span> <span class="n">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">carry</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;1&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">sum</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="construct-quad-treehttpsleetcodecomproblemsconstruct-quad-treea-nameconstruct-quad-treea"><a href="https://leetcode.com/problems/construct-quad-tree/" target="_blank" rel="noopener noreffer ">Construct Quad Tree</a><a name="construct-quad-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">grid</span><span class="o">;</span>					<span class="c1">// Store it once, instead of passing it over &amp; over.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="n">Node</span> <span class="nf">construct</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">_grid</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">grid</span> <span class="o">=</span> <span class="n">_grid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">helper</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">0</span><span class="o">,</span><span class="n">grid</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>		<span class="c1">// Ask helper to build the tree.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">Node</span> <span class="nf">helper</span><span class="o">(</span><span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// Base case: if empty grid or if we are done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>					<span class="c1">// checking the full grid, return null
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">][</span><span class="n">left</span><span class="o">];</span>			<span class="c1">// Get the topleft value, and start checking the box
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>		<span class="c1">// of len*len. If at any point, the value doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>	<span class="c1">// match the key, we have found a breakpoint from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">grid</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="n">key</span><span class="o">){</span>	<span class="c1">// where we need to break the grid into four
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">len</span><span class="o">/</span><span class="n">2</span><span class="o">;</span>		<span class="c1">// grids, each of len = len/2. The topleft grid has
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> 	<span class="c1">// the same top and left point, the topright
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">,</span><span class="n">left</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// grid has left point shifted to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// the right by offset.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">offset</span><span class="o">),</span>	<span class="c1">// The bottom left grid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                <span class="n">helper</span><span class="o">(</span><span class="n">top</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">left</span><span class="o">+</span><span class="n">offset</span><span class="o">,</span> <span class="n">offset</span><span class="o">));</span>	<span class="c1">// is shifted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>	<span class="c1">// downwards by offset with the same left point. The bottom right grid will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>		<span class="c1">// have an index where it&#39;s top is shifted down by len/2 and left by left/2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>			<span class="c1">// We know that the node will have a value = true if 1 else false and it won&#39;t be a leaf, so true, false, topleft, topright, bottomleft, bottomright.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">1</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>	<span class="c1">// Everything passed, so we return a new Node whose value is true if key is 1, else false and it will be a leaf, with
</span></span></span><span class="line"><span class="cl"><span class="c1">// no children, so 4 nulls.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="n-ary-tree-level-order-traversalhttpsleetcodecomproblemsn-ary-tree-level-order-traversala-namen-ary-tree-level-order-traversala"><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener noreffer ">N-ary Tree Level Order Traversal</a><a name="n-ary-tree-level-order-traversal"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">levelOrder</span><span class="o">(</span><span class="n">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Result list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>								<span class="c1">// If root is null, return empty list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>				<span class="c1">// BFS Queue. Add the root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>							<span class="c1">// While q isn&#39;t empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>						<span class="c1">// Check how many elements in that level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">level</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">size</span><span class="o">);</span><span class="c1">// level list to store elements.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>				<span class="c1">// Remove each node for whatever the size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>						<span class="c1">// Add that node&#39;s value and add all of
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">level</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>						<span class="c1">// its children to the queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">child</span><span class="o">:</span> <span class="n">n</span><span class="o">.</span><span class="na">children</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>								<span class="c1">// Add the level array to the result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>										<span class="c1">// Return the result list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-of-segments-in-a-stringhttpsleetcodecomproblemsnumber-of-segments-in-a-stringa-namenumber-of-segments-in-a-stringa"><a href="https://leetcode.com/problems/number-of-segments-in-a-string/" target="_blank" rel="noopener noreffer ">Number of Segments in a String</a><a name="number-of-segments-in-a-string"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">countSegments</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// Empty String
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">segments</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>						<span class="c1">// Record segments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>				<span class="c1">// We will compare adjacent characters.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Start looking at chars from index 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>			<span class="c1">// Get the current char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>		<span class="c1">// If previous char wasn&#39;t a space but the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">segments</span><span class="o">;</span>						<span class="c1">// current char is, we found a segment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>						<span class="c1">// Make previous = current for next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">This line is important. If prev was an empty space, that means that all we have been looking
</span></span></span><span class="line"><span class="cl"><span class="cm">at was empty spaces towards the end. So return whatever segments we found in the beginning
</span></span></span><span class="line"><span class="cl"><span class="cm">of the string. But if prev wasn&#39;t a space, that means the char next to prev might have been
</span></span></span><span class="line"><span class="cl"><span class="cm">an empty space or just a normal character. In any case, we would want to include that last
</span></span></span><span class="line"><span class="cl"><span class="cm">segment, so we return segment+1.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">prev</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span> <span class="o">?</span> <span class="n">segments</span> <span class="o">:</span> <span class="n">segments</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-level-order-traversalhttpsleetcodecomproblemsbinary-tree-level-order-traversala-namebinary-tree-level-order-traversala"><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener noreffer ">Binary Tree Level Order Traversal</a><a name="binary-tree-level-order-traversal"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">levelOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// Empty Tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// BFS Queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>					<span class="c1">// While we have something to process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">level</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>				<span class="c1">// Check how many elements at the current level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span></span><span class="line"><span class="cl">            <span class="n">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>		<span class="c1">// Remove one element each time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>				<span class="c1">// If not null, add it&#39;s val to the level list,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">level</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// and it&#39;s left and right children to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>			<span class="c1">// to process in order
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">level</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>				<span class="c1">// If level list wasn&#39;t empty,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>				<span class="c1">// add it to the result list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="path-sum-iiihttpsleetcodecomproblemspath-sum-iiisubmissionsa-namepath-sum-iiia"><a href="https://leetcode.com/problems/path-sum-iii/submissions/" target="_blank" rel="noopener noreffer ">Path Sum III</a><a name="path-sum-iii"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sumToWays</span><span class="o">;</span>			<span class="c1">// Record how many ways there are to form sum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">ways</span><span class="o">;</span>										<span class="c1">// Total number of ways.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pathSum</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">ways</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">1</span><span class="o">);</span>							<span class="c1">// 1 way to form a sum of 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">helper</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ways</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea here is as follows. Start with the root node, and keep a running total. We maintain
</span></span></span><span class="line"><span class="cl"><span class="cm">how many ways there to form a running sum. Then we check how many ways there are to form
</span></span></span><span class="line"><span class="cl"><span class="cm">(running sum) - (sum we are looking for). If there is a way to form it, then we increase the
</span></span></span><span class="line"><span class="cl"><span class="cm">number of ways to form sum. We then have to update the map to record how many ways can the
</span></span></span><span class="line"><span class="cl"><span class="cm">running sum be formed. If it&#39;s something we could form before, increment it, or else set it
</span></span></span><span class="line"><span class="cl"><span class="cm">to 1. Now, traverse the left side and then the right side. In the end, for each time we
</span></span></span><span class="line"><span class="cl"><span class="cm">incremented the count for a running sum, we need to decrement it because we are backtracking.
</span></span></span><span class="line"><span class="cl"><span class="cm">We are first going down, incrementing the count for runningSum, then we move up and decrement
</span></span></span><span class="line"><span class="cl"><span class="cm">it by 1 for each time we observed it. This is to maintain the Pre-Order traversal.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">runningSum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">runningSum</span> <span class="o">+=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ways</span> <span class="o">+=</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">runningSum</span><span class="o">-</span><span class="n">sum</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">runningSum</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">runningSum</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sumToWays</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">runningSum</span><span class="o">,</span> <span class="n">sumToWays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">runningSum</span><span class="o">)-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-all-anagrams-in-a-stringhttpsleetcodecomproblemsfind-all-anagrams-in-a-stringa-namefind-all-anagrams-in-a-stringa"><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener noreffer ">Find All Anagrams in a String</a><a name="find-all-anagrams-in-a-string"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">findAnagrams</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">slen</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">plen</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">slen</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">slen</span> <span class="o">&lt;</span> <span class="n">plen</span> <span class="o">||</span> <span class="n">plen</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">26</span><span class="o">];</span>				<span class="c1">// Store the freq of chars in p
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">p</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]++;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">sArr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>			<span class="c1">// Get the chars of the string s as an array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">slen</span><span class="o">){</span>						<span class="c1">// While everything is not processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(--</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">end</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// decrease the freq of the char at index end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">plen</span><span class="o">--;</span>							<span class="c1">// if it&#39;s &gt; 0, then we matched something in p
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>											<span class="c1">// so decrease plen by 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">plen</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>					<span class="c1">// If plen goes to 0, we were able to match all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">+</span><span class="n">1</span> <span class="o">==</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>	<span class="c1">// chars of p. If length of the matched chars is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>			<span class="c1">// equal to length p, we found a start point.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">]-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">)</span>	<span class="c1">// Check if the freq of char at start index is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">plen</span><span class="o">++;</span>						<span class="c1">// &gt;= 0. If it is, shift the window to the right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">freq</span><span class="o">[</span><span class="n">sArr</span><span class="o">[</span><span class="n">start</span><span class="o">++]-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>		<span class="c1">// but first restore the frequency of the char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// at the index start.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">end</span><span class="o">++;</span>								<span class="c1">// Get ready to inspect the new element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>							<span class="c1">// Return the answer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="arranging-coinshttpsleetcodecomproblemsarranging-coinsa-namearranging-coinsa"><a href="https://leetcode.com/problems/arranging-coins/" target="_blank" rel="noopener noreffer ">Arranging Coins</a><a name="arranging-coins"></a></h3>
<p>The idea is as follows. Sum of first n numbers is given by $\frac{n^2+n}{2}$. We need to find $n$ such that sum of $n$ numbers is closest to the number of coins we have. That is, $\frac{n^2+n}{2} = k$ where $k$ is the number of coins we have. So, everything boils down to solving the quadratic equation $n^2 + n - 2k = 0$. We use the quadratic formula where for any quadratic equation $ax^2 -bx + c$ is solved substituting for $a$, $b$ and $c$ in $x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2}$. Here, $a$ and $b$ are always going to be 1, while $c$ is always going to be $2k$. Substitute those, and solve the equation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">arrangeCoins</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// return solveQuadratic(n);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">iterative</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">solveQuadratic</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">1</span> <span class="o">+</span> <span class="n">8</span><span class="o">*(</span><span class="kt">long</span><span class="o">)</span><span class="n">n</span><span class="o">)-</span><span class="n">1</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">iterative</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">used</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">level</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// Coins used, and level completed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>					<span class="c1">// While coins left are greater than 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">n</span><span class="o">-=</span><span class="n">used</span><span class="o">;</span>					<span class="c1">// Calculcate remaining coins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// If there are still some coins left,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">level</span><span class="o">;</span>				<span class="c1">// we were able to fill the level.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">used</span><span class="o">;</span>						<span class="c1">// Prepare used for the next level, which is plus 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">level</span><span class="o">;</span>					<span class="c1">// Return level
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="hamming-distancehttpsleetcodecomproblemshamming-distancea-namehamming-distancea"><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener noreffer ">Hamming Distance</a><a name="hamming-distance"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hammingDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Track differences
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// While both of them aren&#39;t 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!=</span> <span class="n">y</span> <span class="o">%</span> <span class="n">2</span><span class="o">)</span>		<span class="c1">// Check the bit of x and y by mod 2. If they are unequal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">diff</span><span class="o">++;</span>				<span class="c1">// increment difference.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">x</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>					<span class="c1">// Divide x and y by 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">y</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">diff</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="string-compressionhttpsleetcodecomproblemsstring-compressiona-namestring-compressiona"><a href="https://leetcode.com/problems/string-compression/" target="_blank" rel="noopener noreffer ">String Compression</a><a name="string-compression"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">compress</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>			<span class="c1">// No need to reverse array of length 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">len</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arrayIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// To maintain the length of new array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// start index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// end index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">first</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>	<span class="c1">// Record the char we are looking at.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// count is 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="n">first</span><span class="o">){</span>	<span class="c1">// while the char is the same
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">end</span><span class="o">;</span>					<span class="c1">// increment end to check next char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">count</span><span class="o">;</span>				<span class="c1">// and increment the count.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">start</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>				<span class="c1">// shift start to end to check next sequence of chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>	<span class="c1">// our arrayIndex points to to the new array&#39;s 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">!=</span> <span class="n">1</span><span class="o">){</span>				<span class="c1">// indices. So copy the first char to arrayIndex.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">)</span>	<span class="c1">//Only if count isn&#39;t 1, if count is less than 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">count</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="o">);</span>	<span class="c1">// then we simply convert count to char and write it next to the char we just overwrote.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>						<span class="c1">// Otherwise, it has many digits. So convert it to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">toCharArray</span><span class="o">()){</span>	<span class="c1">// string and add all it&#39;s digit to the array one by one while increment arrayIndex.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">chars</span><span class="o">[</span><span class="n">arrayIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">arrayIndex</span><span class="o">;</span>			<span class="c1">// Wherever arrayIndex is, is the new length for the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-of-boomerangshttpsleetcodecomproblemsnumber-of-boomerangsa-namenumber-of-boomerangsa"><a href="https://leetcode.com/problems/number-of-boomerangs/" target="_blank" rel="noopener noreffer ">Number of Boomerangs</a><a name="number-of-boomerangs"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">numberOfBoomerangs</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">boomerangs</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// To record points with same dist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">i</span><span class="o">:</span> <span class="n">points</span><span class="o">){</span>		<span class="c1">// Compute distance between one point and every other.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">map</span><span class="o">.</span><span class="na">clear</span><span class="o">()</span>				<span class="c1">// clear map before each relative distance computation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">j</span><span class="o">:</span> <span class="n">points</span><span class="o">){</span>	<span class="c1">// Compute distance with other points
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span>			<span class="c1">// Don&#39;t compare the same two points.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">double</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">0</span><span class="o">],</span><span class="n">2</span><span class="o">)</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">i</span><span class="o">[</span><span class="n">1</span><span class="o">]-</span><span class="n">j</span><span class="o">[</span><span class="n">1</span><span class="o">],</span><span class="n">2</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">prevCount</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>	<span class="c1">// Check how many points are equidistant from point i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">boomerangs</span> <span class="o">+=</span> <span class="n">prevCount</span> <span class="o">*</span> <span class="n">2</span><span class="o">;</span>	<span class="c1">//  Number of boomerangs = whatever pairs there were before times 2, because you can form twice the number of different orders.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="n">prevCount</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// Increase the count of points observed for that distance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">boomerangs</span><span class="o">;</span>	<span class="c1">// return number of boomerangs
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-all-numbers-disappeared-in-an-arrayhttpsleetcodecomproblemsfind-all-numbers-disappeared-in-an-arraya-namefind-all-numbers-disappeared-in-an-arraya"><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener noreffer ">Find All Numbers Disappeared in an Array</a><a name="find-all-numbers-disappeared-in-an-array"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">The idea is simple. For each number in the array, since it&#39;s gauranteed that that the values
</span></span></span><span class="line"><span class="cl"><span class="cm">lie are inclusive [1,n], we can look at the index value-1. So check that index, and mark
</span></span></span><span class="line"><span class="cl"><span class="cm">that value as negative. That is why I take the absolute value. Check value at that index, if
</span></span></span><span class="line"><span class="cl"><span class="cm">negative, it means we have visited it via some other duplicate value. But if it&#39;s positive,
</span></span></span><span class="line"><span class="cl"><span class="cm">then we are seeing it for the first time, so make it&#39;s value negative. Make a second pass.
</span></span></span><span class="line"><span class="cl"><span class="cm">For values that are still positive, that means those indices were never visited, hence left
</span></span></span><span class="line"><span class="cl"><span class="cm">positive. So add 1 to them and add it to the set. Eg:
</span></span></span><span class="line"><span class="cl"><span class="cm">	Given array a = [4,3,2,7,8,2,3,1],
</span></span></span><span class="line"><span class="cl"><span class="cm">1.	val = 4 =&gt; idx = 3 &amp; a[3] &gt; 0, therefore, a[3] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">2.	val = 3 =&gt; idx = 2 &amp; a[2] &gt; 0, therefore a[2] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">3.	val = -2 =&gt; idx = abs(-2)-1 = 1 &amp; a[1] &gt; 0, therefore a[1] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">4.	val = -7 =&gt; idx = abs(-7)-1 = 6 &amp; a[6] &gt; 0, therfore a[6] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,1]
</span></span></span><span class="line"><span class="cl"><span class="cm">5.	val = 8 =&gt; idx = abs(8)-1 = 7 &amp; a[7] &gt; 0, therfore a[7] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">6.	val = 2 =&gt; idx = 1 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">7.	val = -3 =&gt; idx = abs(-3)-1 = 2 but a[2] &lt; 0. No change.
</span></span></span><span class="line"><span class="cl"><span class="cm">8.	val = -1 =&gt; idx = abs(-1)-1 = 0 &amp; a[0] &gt; 0, therefore a[0] *= -1
</span></span></span><span class="line"><span class="cl"><span class="cm">	a = [-4,-3,-2,-7,8,2,-3,-1]
</span></span></span><span class="line"><span class="cl"><span class="cm">Observation: Notice index 4 and 5 have positive values, since those values were never
</span></span></span><span class="line"><span class="cl"><span class="cm">encountered, so the values at those indexes never became negative. Hence missing values are
</span></span></span><span class="line"><span class="cl"><span class="cm">5 and 6.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">findDisappearedNumbers</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>				<span class="c1">// For each number in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">i</span><span class="o">)-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// Look at the index that the number corresponds to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// If val is -ve, then it means we have encountered it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">*=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>  		<span class="c1">// If not, make it -ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// Make another pass through the array, and the indices
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>		<span class="c1">// where value was positive, index+1 was missing from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>					<span class="c1">// the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="assign-cookieshttpsleetcodecomproblemsassign-cookiesa-nameassign-cookiesa"><a href="https://leetcode.com/problems/assign-cookies/" target="_blank" rel="noopener noreffer ">Assign Cookies</a><a name="assign-cookies"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">We will employ a greedy algorithm where we first try to content children whose requirements
</span></span></span><span class="line"><span class="cl"><span class="cm">are small. We do this by sorting both the arrays, so we can match the child with least
</span></span></span><span class="line"><span class="cl"><span class="cm">requirement with the smallest cookie available.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findContentChildren</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">satisfied</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>	<span class="c1">// While children are left and we have cookies,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">g</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>		<span class="c1">// Check if the cookie at index j &gt;= child i&#39;s requirement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">satisfied</span><span class="o">++;</span>		<span class="c1">// If so, increment the number of content child and we will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">i</span><span class="o">++;</span>				<span class="c1">// process the next child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>						<span class="c1">// If cookie j &lt; child i&#39;s demand, check the next cookie by
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">j</span><span class="o">++;</span>					<span class="c1">// incrementing j. If cookie j &gt; child i&#39;s demand, we will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// still need to increment j, hence outside the conditional.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">satisfied</span><span class="o">;</span>			<span class="c1">// Return number of satisfied children
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="poor-pigshttpsleetcodecomproblemspoor-pigsa-namepoor-pigsa"><a href="https://leetcode.com/problems/poor-pigs/" target="_blank" rel="noopener noreffer ">Poor Pigs</a><a name="poor-pigs"></a></h3>
<p><a href="https://leetcode.com/problems/poor-pigs/discuss/94305/1-line-solution-with-detailed-problem-clarification-and-math-proof-%28please-read-if-you-really-want-to-know-what-this-problem-means%29" target="_blank" rel="noopener noreffer ">Link</a> to the solution explanation. This problem is phrased poorly and I had to read the comments by other users to understand what it required from me. The link I marked here explains the logic pretty good. But the simple logic is this: The number of rounds $r = \frac{Total Test Time}{Minutes To Die} +1$. Each pig has chances of dying in each round or staying alive till the end, so we plus 1. Now given the number of rounds $r$ and the number of samples $s$, how many volunteers $v$ will you need? $r^v = s$. Each round has some volunteers which in total at the end should be able to test out all the samples. Therefore, $v =\log_rs$.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">poorPigs</span><span class="o">(</span><span class="kt">int</span> <span class="n">buckets</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minutesToDie</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minutesToTest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="n">minutesToTest</span><span class="o">/</span><span class="n">minutesToDie</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// How many rounds can you perform?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">buckets</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">base</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-pivot-indexhttpsleetcodecomproblemsfind-pivot-indexa-namefind-pivot-indexa"><a href="https://leetcode.com/problems/find-pivot-index/" target="_blank" rel="noopener noreffer ">Find Pivot Index</a><a name="find-pivot-index"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">pivotIndex</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">leftSum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>		<span class="c1">// We will test each index as a pivot by sliding it -&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>				<span class="c1">// Precalculate the sum of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Check if the sum of the leftSide of i is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">leftSum</span> <span class="o">==</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">leftSum</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>	<span class="c1">// equal to totalSum - leftSideSum - pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">i</span><span class="o">;</span>							<span class="c1">// which is i. If so, return i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">leftSum</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>						<span class="c1">// Otherwise add nums[i] to the leftSum and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>											<span class="c1">// slide pivot to the -&gt;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// No pivot found. Return -1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="squares-of-a-sorted-arrayhttpsleetcodecomproblemssquares-of-a-sorted-arraya-namesquares-of-a-sorted-arraya"><a href="https://leetcode.com/problems/squares-of-a-sorted-array/" target="_blank" rel="noopener noreffer ">Squares of a Sorted Array</a><a name="squares-of-a-sorted-array"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">sortedSquares</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>		<span class="c1">// Length of array A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Pivot is the index where values goes from -ve to +ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">pivot</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="o">[</span><span class="n">pivot</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="c1">// While values are -ve.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">pivot</span><span class="o">;</span>			<span class="c1">// increment pivot. We exit when we find a positive.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">squares</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>	<span class="c1">// Result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// Keeps track of where to where to put elements in result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">pivot</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>			<span class="c1">// pivot = 0 means pivot didn&#39;t shift, there are only +ve values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">A</span><span class="o">)</span>		<span class="c1">// So fill in the array with squares of numbers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>					<span class="c1">// Otherwise we have a negative somewhere.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">pivot</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// So we will compare values left and right of the pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">pivot</span><span class="o">;</span>	<span class="c1">// and whichever&#39;s smaller fills up the array first.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">lsquare</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">rsquare</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">lsquare</span> <span class="o">&lt;</span> <span class="n">rsquare</span><span class="o">){</span>		<span class="c1">// left &lt; right, so add left square. decrement left
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">lsquare</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">--</span><span class="n">left</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rsquare</span> <span class="o">&lt;</span> <span class="n">lsquare</span><span class="o">){</span>	<span class="c1">// right &lt; left, add right square and increment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">rsquare</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">right</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">lsquare</span><span class="o">;</span>	<span class="c1">// both are equal. add both square and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">rsquare</span><span class="o">;</span>	<span class="c1">// decrement left, increment right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">--</span><span class="n">left</span><span class="o">;</span>						<span class="c1">// Continue doing this until we hit either end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">right</span><span class="o">;</span>					<span class="c1">// of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>								<span class="c1">// In the end we need to check if elements on
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// either side are left to be filled in.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>					<span class="c1">// Left side elements remain, so fill their
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">left</span><span class="o">--];</span> <span class="c1">// squares one by one till none left.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">)</span>					<span class="c1">// Right side elements remain, so fill their
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">squares</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">*</span> <span class="n">A</span><span class="o">[</span><span class="n">right</span><span class="o">++];</span>	<span class="c1">// squares in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">squares</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="repeated-substring-patternhttpsleetcodecomproblemsrepeated-substring-patternsubmissionsa-namerepeated-substring-patterna"><a href="https://leetcode.com/problems/repeated-substring-pattern/submissions/" target="_blank" rel="noopener noreffer ">Repeated Substring Pattern</a><a name="repeated-substring-pattern"></a></h3>
<p>We use the <a href="https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/" target="_blank" rel="noopener noreffer ">KMP Algorithm</a> that allows us to match a string &rsquo;s&rsquo; with another string &lsquo;p&rsquo; to find the longest sequence of characters in &rsquo;s&rsquo; that match &lsquo;p&rsquo;. We can use a Naive Pattern match where we start from the beginning of the string and start comparing the characters of &rsquo;s&rsquo; with &lsquo;p&rsquo;. Initially, we keep the partition at index 0. If the character&rsquo;s match, we move partition to the right by 1 till we get to the end of the string. If something doesn&rsquo;t match, we don&rsquo;t move the partition but look at the next character to match. In the end, wherever the partition is, that&rsquo;s our longest length we could match with string &lsquo;p&rsquo;. The complexity of that is <i>O(len(p)(len(s)-len(p)+1))</i>.</p>
<p>KMP fixes it by skipping characters that we know already match. In this problem, we aren&rsquo;t matching with any other string but itself. So, we start from index 1 of the string and compare it from the beginning. If they match, we increase j by 1, note it down in lps array and then increase i by 1 to check the next character. j basically measures the longest chain of characters we were able to match. If we couldn&rsquo;t match character at index i and if streak was greater than 0, then our new streak becomes whatever it was in the previous round of matching characters. If the streak is 0, then we simply note down at index i in our lps array 0, meaning longest length measured upto index i was 0.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">repeatedSubstringPattern</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="n">lps</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">maxLength</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">maxLength</span><span class="o">)</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">lps</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">lps</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// To match the string with itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)){</span>	<span class="c1">// if the chars match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">j</span><span class="o">;</span>					<span class="c1">// we record that # of matches at index i was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">i</span><span class="o">;</span>							<span class="c1">// 1+j and increment i to check next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>								<span class="c1">// character did not match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span>						<span class="c1">// If our matching streak &gt; 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">j</span> <span class="o">=</span> <span class="n">lps</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>				<span class="c1">// our new streak becomes the previous round&#39;s streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">else</span>							<span class="c1">// Otherwise, streak is already 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">lps</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// So we record that # of matches made at i is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>									<span class="c1">// We increment i to check next index.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">lps</span><span class="o">[</span><span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>						<span class="c1">// Longest prefix length that was also a suffix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// is whatever was recorded at the end of array.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="island-perimeterhttpsleetcodecomproblemsisland-perimetera-nameisland-perimetera"><a href="https://leetcode.com/problems/island-perimeter/" target="_blank" rel="noopener noreffer ">Island Perimeter</a><a name="island-perimeter"></a></h3>
<p>The idea is simple. Count the number of cells with value 1 which denotes the land. Check towards the left and up to that cell and check if it shares any edge with another cell with value 1. If it does record that. In the end, the formula for perimeter is 4 * (the number of land cells) - 2 * (overlapping edges).</p>
<p><strong>Reasoning:</strong> Perimeter of a square is 4 times the length of it&rsquo;s side. Here all squares are of length 1. So total perimeter is 4*(number of cells with value = 1). But we also need to account the edges that are common between two adjacent land cells. If one square shares an edge with another, we just lost one side from both the square, resulting in a loss of two sides. Therefore, we need to subtract twice the number of overlapping edges from the total perimeter to get  the total perimeter.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">islandPerimeter</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">grid</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">land</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">overlap</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">grid</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">row</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">grid</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">col</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">land</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">row</span><span class="o">-</span><span class="n">1</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">-</span><span class="n">1</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>	<span class="c1">// Check above the current cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="o">++</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// If it&#39;s a land, we need to record one overlap.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">col</span><span class="o">-</span><span class="n">1</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">grid</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>	<span class="c1">// Similarly, check to the left.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="o">++</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// If it&#39;s a land, we need to increment overlap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">4</span><span class="o">*</span><span class="n">land</span> <span class="o">-</span> <span class="n">2</span><span class="o">*</span><span class="n">overlap</span><span class="o">;</span>		<span class="c1">// Check the reasoning above.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="number-complementhttpsleetcodecomproblemsnumber-complementa-namenumber-complementa"><a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener noreffer ">Number Complement</a><a name="number-complement"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findComplement</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pow2</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// Easily keep track of power of 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">comp</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Complement number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// Since num gets divided by 2, it will be 0 in the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">bit</span> <span class="o">=</span> <span class="n">num</span> <span class="o">%</span> <span class="n">2</span> <span class="o">==</span> <span class="n">0</span> <span class="o">?</span> <span class="n">1</span> <span class="o">:</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// If bit is 0 then complement is 1 &amp; vice versa.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">comp</span> <span class="o">+=</span> <span class="n">bit</span> <span class="o">*</span> <span class="n">pow2</span><span class="o">;</span>		<span class="c1">// Multiply it by the appropriate power of 2 and add to comp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">pow2</span> <span class="o">*=</span> <span class="n">2</span><span class="o">;</span>				<span class="c1">// Update power of 2 for next iteration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">/=</span> <span class="n">2</span><span class="o">;</span>				<span class="c1">// Divide num by 2 to get the next bit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">comp</span><span class="o">;</span>				<span class="c1">// Comp is now the complement.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-watchhttpsleetcodecomproblemsbinary-watcha-namebinary-watcha"><a href="https://leetcode.com/problems/binary-watch/" target="_blank" rel="noopener noreffer ">Binary Watch</a><a name="binary-watch"></a></h3>
<p>The idea is as follows. We have 10 lights. First 4 represent hours. Namely 1, 2, 4 and 8, which are the first four powers of 2. The next 6 lights, represent minutes. Those are 1, 2, 4, 8, 16 and 32. These are powers of 2 from 0-5. So if we iterate from 1 to 9, powers of numbers 1-3 gives us hours and powers of numbers 4-9 minus 4 gives us minutes. So, if we have, let&rsquo;s say 2 lights, we need to find every combination of 2 lights. So in our helper function, we iterate from 1-9 to check every hour and minute combination. We also need to keep a track of the lights that we used, so we don&rsquo;t use the same light again. If hours are &gt; 11 or minutes are &gt; 59, we have an invalid time and we can abort. If the number of lights are 0, that means we found a valid time and we should add it to the result. Now, if the lights are not 0, then we need to check every possible combination from the last light used to 9. If i &lt; 4, then we are looking at an hourly combination, otherwise it&rsquo;s a minute combination. So we recurse with updated lights used, decrease the numOfLights since we used one, update respective hours or minutes until we hit base case.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">readBinaryWatch</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">num</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="kt">int</span> <span class="n">lightsUsed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numOfLights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">min</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">hrs</span> <span class="o">&gt;</span> <span class="n">11</span> <span class="o">||</span> <span class="n">min</span> <span class="o">&gt;</span> <span class="n">59</span><span class="o">)</span>		<span class="c1">// Base case. Invalid time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">numOfLights</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// All lights used, so add time to the list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hrs</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">min</span> <span class="o">&lt;</span> <span class="n">10</span> <span class="o">?</span> <span class="s">&#34;0&#34;</span> <span class="o">+</span> <span class="n">min</span> <span class="o">:</span> <span class="n">min</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lightsUsed</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>	<span class="c1">// Otherwise start recursing from number of prev
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">4</span><span class="o">)</span>							<span class="c1">// light used. i &lt; 4 means hours
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">helper</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">hrs</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">2</span><span class="o">,</span> <span class="n">i</span><span class="o">),</span> <span class="n">min</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>								<span class="c1">// i = [4,9] means minute. So recurse.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">helper</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">numOfLights</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">hrs</span><span class="o">,</span> <span class="n">min</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="n">2</span><span class="o">,</span><span class="n">i</span><span class="o">-</span><span class="n">4</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-moves-to-equal-array-elementshttpsleetcodecomproblemsminimum-moves-to-equal-array-elementsa-nameminimum-moves-to-equal-array-elementsa"><a href="https://leetcode.com/problems/minimum-moves-to-equal-array-elements/" target="_blank" rel="noopener noreffer ">Minimum Moves to Equal Array Elements</a><a name="minimum-moves-to-equal-array-elements"></a></h3>
<p>This was an interesting problem. But after working out a few examples by hand, you can notice that it is always a question of bringing the minimum element in par with everyone. So if you know the minimum of the array, we can check how many steps it will take to bring the minimum in par with other element by calculating the distance between them. For example,</p>
<blockquote>
<p>Let the array be [1,2,3]</p>
<p>We can observe that the minimum here is 1. Let us list down all steps to make all elements equal.</p>
<ol>
<li>[2,2,4], Keeping the second element fixed. Notice that distance between the element where 1 was and where 3 was is till the same.</li>
<li>[3,3,4], Keeping the last element fixed.</li>
<li>[4,4,4], Keeping last element fixed.</li>
</ol>
<p>Here, we first tried to make 1 equal to it&rsquo;s neighbor, which required us 1 step. Now, once it becomes equal to 1, the problem is how to make the last element in the original array, which is 3 equal to 1. It requires 2 steps, resulting in a total of of 3. The reason is that the moment you decide to increment the minimum element to match the next element, you fix the neighboring element and have to increment everything else. This will make the minimum and its neighbor the same, but it will also keep the distance between the minimum and all other elements the same because we just incremented everything.</p>
<p>So, the total number of moves required is the distance between the elements of the array and the minimum.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minMoves</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">moves</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">moves</span> <span class="o">+=</span> <span class="n">i</span><span class="o">-</span><span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">moves</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Now the above solution required two passes of the array. Can we do even better? Notice that in the end, all we are doing is finding the min and subtracting min from all the elements in the array. That means we are subtracting min <em>n</em> times where n is the length of the array. Why <em>n</em> times? Because there are <em>n</em> elements in the array. Shouldn&rsquo;t it be <em>(n-1)</em> times? No, because the distance of the min from min is 0. So we need to subtract min from itself too, so <em>n</em> times. We can achieve this by first calculating the total of the array while simultaneously keeping track of the minimum. Once done, all we need to do is subtract min <em>n</em> times from the sum, which is equivalent to subtracting min from each element. This results in a much overall better algorithm, requiring only 1 pass of the array.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">minMoves</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span> <span class="o">-</span> <span class="n">min</span><span class="o">*</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="license-key-formattinghttpsleetcodecomproblemslicense-key-formattinga-namelicense-key-formattinga"><a href="https://leetcode.com/problems/license-key-formatting/" target="_blank" rel="noopener noreffer ">License Key Formatting</a><a name="license-key-formatting"></a></h3>
<p>The idea is simple.</p>
<ol>
<li>I maintain a temporary array <em>s</em> that contains only the characters in string <em>S</em> after converting them to uppercase.</li>
<li>I maintain a variable <em>length</em> that counts how many characters I found in the string <em>S</em>. If length is 0, that means it contains only dashes (-).</li>
<li>Then I record the <em>offset</em>. <em>Offset</em> basically measures how many characters of the String <em>S</em> will be grouped unevenly in the beginning part of the string. I can check that by using the modulus operator and finding out the remainder. That many characters (of <em>length &lt; K</em>) will be in the beginning part of the string.</li>
<li>Next step is to calculate how many dashes I will need. It&rsquo;s basically <em>length / K</em>.</li>
<li>Then I create the char array that will hold the characters of the formatted key. It&rsquo;s length will be number of characters + the dashes we will need. We need to take care of a special case here. If the <em>offset</em> is 0, meaning I was able to divide characters in equal group, I need to subtract 1. Eg, let&rsquo;s say we had 8 characters and <em>K</em> was 4.  dashes = 8 / 4 = 2. We can divide 8 characters equally into 2 groups using only 1 dash. But since dashes was 2, it is clearly off by 1. This is the case when <em>offset</em> is 0.</li>
<li><em>kIndex</em> tracks where character is to be inserted in the key array.</li>
<li><em>used</em> tracks how many characters of the array <em>s</em>, which indirectly holds the characters of String <em>S</em>, are used.</li>
<li>First I copy down the characters of length <em>offset</em>. Because those are the ones of uneven length. <em>kIndex</em> and <em>used</em> variables are updated.</li>
<li>Last thing to do is to use all the remaining characters in array <em>s</em>, but we take <em>K</em> characters at a time, because we know that the segments are going to be of equal length. We also need to insert &lsquo;-&rsquo; after each segment, but only if <em>kIndex</em> is not at the beginning or at the end of the key array, because inserting it at those points is invalid.</li>
<li>Create a new string and return it.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">licenseKeyFormatting</span><span class="o">(</span><span class="n">String</span> <span class="n">S</span><span class="o">,</span> <span class="kt">int</span> <span class="n">K</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">S</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">S</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">&#39;-&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="o">[</span><span class="n">length</span><span class="o">++]</span> <span class="o">=</span> <span class="n">Character</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">length</span> <span class="o">%</span> <span class="n">K</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">dashes</span> <span class="o">=</span> <span class="n">length</span> <span class="o">/</span> <span class="n">K</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">length</span> <span class="o">+</span> <span class="n">dashes</span> <span class="o">+</span> <span class="o">(</span><span class="n">offset</span> <span class="o">==</span> <span class="n">0</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span> <span class="o">:</span> <span class="n">0</span><span class="o">)];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">kIndex</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">used</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">used</span> <span class="o">&lt;</span> <span class="n">offset</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">used</span> <span class="o">&lt;</span> <span class="n">index</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">kIndex</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">kIndex</span> <span class="o">&lt;</span> <span class="n">key</span><span class="o">.</span><span class="na">length</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">K</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span><span class="o">[</span><span class="n">kIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">used</span><span class="o">++];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="max-consecutive-oneshttpsleetcodecomproblemsmax-consecutive-onesa-namemax-consecutive-onesa"><a href="https://leetcode.com/problems/max-consecutive-ones/" target="_blank" rel="noopener noreffer ">Max Consecutive Ones</a><a name="max-consecutive-ones"></a></h3>
<p>Solution 1: I came up with this solution initially. 4 ms runtime and passes 99.97% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaxConsecutiveOnes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// Keep track of start of a streak, if any
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>					<span class="c1">// max length of the streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>	<span class="c1">// While we are not at the end of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>		<span class="c1">// Check if we have a 1 at start, if so
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// initialize streak and check how long can we continue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>	<span class="c1">// that streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">streak</span><span class="o">;</span>			<span class="c1">// Increment streak and left for each consecutive 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">++</span><span class="n">start</span><span class="o">;</span>			<span class="c1">// make sure you don&#39;t forget that start &lt; nums.length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>						<span class="c1">// before checking nums[start] to prevent out-of-bounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">streak</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>		<span class="c1">// Check if the current streak is better than the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">max</span> <span class="o">=</span> <span class="n">streak</span><span class="o">;</span>		<span class="c1">// previous streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">start</span><span class="o">;</span>					<span class="c1">// Increment start in either case to check for new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>								<span class="c1">// streaks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Solution 2: After analyzing the problem further, I noticed that 0 denotes the end of a streak. If we observe 1, we increment streak by 1. But if I see a 0, I reset my streak to 0. This solution too had a 4 ms runtime and passed 99.97% submissions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMaxConsecutiveOnes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Global max streak
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// Local max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">){</span>			<span class="c1">// For each number in nums
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">1</span><span class="o">){</span>			<span class="c1">// If we see a 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">streak</span><span class="o">;</span>			<span class="c1">// increment our ongoing streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">streak</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>	<span class="c1">// If the local streak &gt; global max
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">max</span> <span class="o">=</span> <span class="n">streak</span><span class="o">;</span>	<span class="c1">// update global max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>					<span class="c1">// otherwise we just saw a 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">streak</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>			<span class="c1">// So our streak resets to 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>					<span class="c1">// return the global max streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="permutationshttpsleetcodecomproblemspermutationsa-namepermutationsa"><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener noreffer ">Permutations</a><a name="permutations"></a></h3>
<p>The idea is as follows. Given an array a = {1,2,3}, we want to generate all it&rsquo;s possible combinations. What we are trying to do here is that we first take the element at index 0, and find permutations of the remaining thing. When we do that, we insert the element at index 0 in front of the list to get 1 permutation. Similarly, we then take the element at index 1, and permute the remaining contents of the array and insert the element at index 1 in the beginning of the array to get another permutation and so on. In this problem, we are asked to return a list of list, so we first copy the numbers of the array into an ArrayList. Let&rsquo;s run this code for the above example.</p>
<blockquote>
<p>Given nums = {1,2,3}, our ArrayList will be the same, al = [1,2,3]. Our result list is empty, result = [] and index = 0.</p>
<p><strong>helper([1,2,3], 0)</strong></p>
<blockquote>
<p>swap (0, 0) → al = [1,2,3]</p>
<p><strong>helper(1,2,3, 1)</strong></p>
<blockquote>
<p>swap(1, 1) → al = [1,2,3]</p>
<p><strong>helper([1,2,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) → [1,2,3]</p>
<p><strong>helper([1,2,3], 3)</strong></p>
<blockquote>
<p>We update our result list now, because index == length. Therefore, result = [[1,2,3]]. Our recursive stack collapses and we move on to the next instruction, which is undo the step, al = [1,2,3].</p>
</blockquote>
</blockquote>
<p>swap(1, 2) → al = [1,3,2]</p>
<p><strong>helper([1,3,2], 3)</strong></p>
<blockquote>
<p>Again, index == length, add it to the list. result = [[1,2,3], [1,3,2]]. Recursion stack collapses, we undo the swap, al = [1,2,3]</p>
</blockquote>
</blockquote>
<p>swap(0, 1) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 1)</strong></p>
<blockquote>
<p>swap(1,1) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 2)</strong></p>
<blockquote>
<p>swap(2, 2) → al = [2,1,3]</p>
<p><strong>helper([2,1,3], 3)</strong></p>
<blockquote>
<p>index == length, add the current order to the list. result = [[1,2,3], [1,3,2], [2,1,3]]</p>
</blockquote>
</blockquote>
<p>swap(1, 2) → al = [2,3,1]</p>
<p><strong>helper([2,3,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1]]</p>
</blockquote>
</blockquote>
<p>swap(0, 2) → al = [3,2,1]</p>
<p><strong>helper([3,2,1], 2)</strong></p>
<blockquote>
<p>swap(2,2) → al = [3,2,1]</p>
<p><strong>helper([3,2,1], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1]]</p>
</blockquote>
</blockquote>
<p>swap(1,2) → al = [3,1,2]</p>
<p><strong>helper([3,1,2], 3)</strong></p>
<blockquote>
<p>index == length, add the order to the list. Result = [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]]</p>
</blockquote>
</blockquote>
<p>All branches have been explored now, since the iteration ends and we return the result list.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">len</span><span class="o">;</span>						<span class="c1">// To store the length of the input array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span>		<span class="c1">// Result list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>	<span class="c1">// Creating a copy of the nums array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>			<span class="c1">// because it&#39;s easier to create a list from a list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">numList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>			<span class="c1">// Add everything to the list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">len</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">numList</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>			<span class="c1">// Call the aux function.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">order</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">len</span><span class="o">)</span>			<span class="c1">// If we have checked all the numbers in the array, add a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">order</span><span class="o">));</span>	<span class="c1">// clone of the list to the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// Otherwise from index to the end of the array,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">swap</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// take one element, swap it with itself, then the next and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">helper</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">index</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>	<span class="c1">// so on. Recurse again, but on the next index we just swapped.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">swap</span><span class="o">(</span><span class="n">order</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// Undo the swap so that it helps us in generating the next
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>							<span class="c1">// permutation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">){</span>	<span class="c1">// Swap elements in a list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="construct-the-rectanglehttpsleetcodecomproblemsconstruct-the-rectanglea-nameconstruct-the-rectanglea"><a href="https://leetcode.com/problems/construct-the-rectangle/" target="_blank" rel="noopener noreffer ">Construct the Rectangle</a><a name="construct-the-rectangle"></a></h3>
<p>The idea is very simple. We just need to iterate from width = sqrt(area) to 1 and check if area is perfectly divisible by width. If at any point, width is divisible, then that must be our minimum difference length and width, because we are diverging from the center on both sides. Width decreases while length keeps increasing. Think of it like this, for area = 24, we have many factors of 24, namely 1, 2, 3,4, 6, 8, 12, 24. It&rsquo;s sqrt when rounded down is 4. So we check for width = 4, is 24 perfectly divisible by 4? Yes, so divide it and whatever you get is going to be the minimal difference values. Suppose 4 and 6 weren&rsquo;t the factors for 24. In that case we decrease width by 1, which is 3. Check again, is 24 divisible by 3. Yes? Then that must be our answer. We are diverging away from the center on both sides equally, width to the left towards 1 and length to the right towards area . Therefore the moment we find one value that divides area perfectly, that&rsquo;s our required values.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">constructRectangle</span><span class="o">(</span><span class="kt">int</span> <span class="n">area</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">dimensions</span> <span class="o">=</span> <span class="o">{</span><span class="n">area</span><span class="o">,</span> <span class="n">1</span><span class="o">};</span>		<span class="c1">// We know that if nothing works out, n*1 is always
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">done</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// going to be the answer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">area</span><span class="o">);</span>	<span class="c1">// We only need to check width from sqrt(area)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(!</span><span class="n">done</span><span class="o">){</span>						<span class="c1">// While not done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">area</span> <span class="o">%</span> <span class="n">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>		<span class="c1">// check if area is perfectly divisible by width
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dimensions</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">width</span><span class="o">;</span>		<span class="c1">// if so, we found our width and the length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">dimensions</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">area</span><span class="o">/</span><span class="n">width</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>				<span class="c1">// mark done as false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">--</span><span class="n">width</span><span class="o">;</span>						<span class="c1">// otherwise decrease the length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dimensions</span><span class="o">;</span>					<span class="c1">// return the dimensions found.
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merge-intervalshttpsleetcodecomproblemsmerge-intervalsa-namemerge-intervalsa"><a href="https://leetcode.com/problems/merge-intervals/" target="_blank" rel="noopener noreffer ">Merge Intervals</a><a name="merge-intervals"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="nf">merge</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="n">intervals</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">intervals</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">intervals</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">intervals</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">intervals</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">start</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">start</span><span class="o">);</span>	<span class="c1">// Sort the list so we can 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>													<span class="c1">// compare adjacent intervals.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Interval</span><span class="o">&gt;</span> <span class="n">merged</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">merged</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">intervals</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>					<span class="c1">// Add the initial interval.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">Interval</span> <span class="n">i</span><span class="o">:</span> <span class="n">intervals</span><span class="o">){</span>					<span class="c1">// For each interval
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Interval</span> <span class="n">last</span> <span class="o">=</span> <span class="n">merged</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">1</span><span class="o">);</span><span class="c1">// Get the last added time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">start</span> <span class="o">&gt;</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span><span class="o">)</span>						<span class="c1">// If it&#39;s time is greater than the last
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">merged</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>							<span class="c1">// interval&#39;s end, it doesn&#39;t overlap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span><span class="o">{</span>										<span class="c1">// otherwise it does.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">end</span> <span class="o">?</span> <span class="n">last</span><span class="o">.</span><span class="na">end</span> <span class="o">:</span> <span class="n">i</span><span class="o">.</span><span class="na">end</span><span class="o">;</span>	<span class="c1">// So check which has greater end time, and make the last added interval&#39;s time equals that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">merged</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">merged</span><span class="o">.</span><span class="na">size</span><span class="o">()-</span><span class="n">1</span><span class="o">,</span> <span class="n">last</span><span class="o">);</span>		<span class="c1">// And set it as the last added interval
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">merged</span><span class="o">;</span>									<span class="c1">// Return the merged list.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merged-sorted-listshttpsleetcodecomproblemsmerge-sorted-arraya-namemerged-sorted-listsa"><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="noopener noreffer ">Merged sorted lists</a><a name="merged-sorted-lists"></a></h3>
<ol>
<li>counterA keeps track of which element we are looking at in array &lsquo;a&rsquo;. Same with counterB</li>
<li>counterK keeps track of where to insert the element in array &lsquo;a&rsquo;, since a has enough space. The problem states that it might have more than enough space, so we use only the spaces we need, which is the total of both their sizes. Since indexing in an array is 0-based, we subtract 1.</li>
<li>We insert elements from the end, since the end part of &lsquo;a&rsquo; is empty. We can insert from the front, but then we would need to shift elements to the right after each insertion from &lsquo;b&rsquo;.</li>
<li>If array values are equal, add them to the end, and decrease both their counter to check new values in the next iteration</li>
<li>If not equal, then check which one is greater, since the last part of the array should contain larger values. Whichever&rsquo;s greater, put it in &lsquo;a&rsquo; at index &lsquo;counterA&rsquo; and decrement the respective counter.</li>
<li>In the end, we might have some leftover elements either from &lsquo;a&rsquo; or &lsquo;b&rsquo; because we only process elements that are equal to the <strong>min(size(a), size(b))</strong>, until we run out of elements in one of the array. So, whichever array has elements pending, add it to the front of the array and return a.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sizeA</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sizeB</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">counterA</span> <span class="o">=</span> <span class="n">sizeA</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">counterB</span> <span class="o">=</span> <span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="o">,</span> <span class="n">counterK</span> <span class="o">=</span> <span class="n">sizeA</span><span class="o">+</span><span class="n">sizeB</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterA</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">counterB</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span> <span class="o">==</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">]</span> <span class="o">?</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--]</span> <span class="o">:</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterA</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">counterA</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">counterB</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="o">[</span><span class="n">counterK</span><span class="o">--]</span> <span class="o">=</span> <span class="n">b</span><span class="o">[</span><span class="n">counterB</span><span class="o">--];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="next-greater-element-ihttpsleetcodecomproblemsnext-greater-element-ia-namenext-greater-element-ia"><a href="https://leetcode.com/problems/next-greater-element-i/" target="_blank" rel="noopener noreffer ">Next Greater Element I</a><a name="next-greater-element-i"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">nextGreaterElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>	<span class="c1">// We use the hashmap to keep a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>				<span class="c1">// track of the index of each value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">index</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>							<span class="c1">// in nums 2. That way, when we want
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>								<span class="c1">// to look for a value greater than a val in nums1, we know
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums1</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>	<span class="c1">// which index to start iterating from.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// So for each val in nums1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">val</span><span class="o">);</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">){</span>	<span class="c1">// Iterate from that value&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">val</span><span class="o">){</span>			<span class="c1">// index in nums2 to the end, and see if you can
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums2</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>		<span class="c1">// find any val &gt; nums1[i]. If you do, save it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="o">;</span>						<span class="c1">// in the result array and break the loop.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>		<span class="c1">// Now if we didn&#39;t find any value, then result[i] would be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>		<span class="c1">// 0, so we set that index to -1 in our result array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>				<span class="c1">// simply return the result array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="string-without-aaa-or-bbbhttpsleetcodecomproblemsstring-without-aaa-or-bbba-namestring-without-aaa-or-bbba"><a href="https://leetcode.com/problems/string-without-aaa-or-bbb/" target="_blank" rel="noopener noreffer ">String Without AAA or BBB</a><a name="string-without-aaa-or-bbb"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">strWithout3a3b</span><span class="o">(</span><span class="kt">int</span> <span class="n">A</span><span class="o">,</span> <span class="kt">int</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>				
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">ch</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">A</span><span class="o">+</span><span class="n">B</span><span class="o">];</span>		<span class="c1">// We create an char array to store string chars
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">max</span> <span class="o">=</span> <span class="n">A</span> <span class="o">&gt;</span> <span class="n">B</span> <span class="o">?</span> <span class="sc">&#39;a&#39;</span> <span class="o">:</span> <span class="sc">&#39;b&#39;</span><span class="o">;</span>	<span class="c1">// record the most frequent occurring element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">min</span> <span class="o">=</span> <span class="n">max</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span> <span class="o">?</span> <span class="sc">&#39;b&#39;</span> <span class="o">:</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>	<span class="c1">// and the least frequent occurring element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">A</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">||</span> <span class="n">B</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">){</span>			<span class="c1">// While we haven&#39;t added all of the elements
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// We check that if our current index &gt; 1 and our previoud two characters in the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// are the same, then we must have written the max occurring char, so it&#39;s time to write
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// the minimum occurring element. We write it, and then decrement the specific A or B.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">index</span> <span class="o">&gt;</span> <span class="n">1</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">==</span> <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">max</span> <span class="o">==</span> <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">-</span><span class="n">2</span><span class="o">]){</span>
</span></span><span class="line"><span class="cl">            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">min</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">min</span> <span class="o">==</span> <span class="sc">&#39;a&#39;</span><span class="o">)</span>		<span class="c1">// If the minimum freq element is &#39;a&#39;, decrement A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">A</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">B</span><span class="o">--;</span>			<span class="c1">// otherwise decrement B
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">B</span> <span class="o">&gt;</span> <span class="n">A</span><span class="o">){</span>		<span class="c1">// Otherwise, if B occurs more than A, then set char to B
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;b&#39;</span><span class="o">;</span>	<span class="c1">// decrement B and increment index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">B</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>					<span class="c1">// A occurs more, so add A to the char array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ch</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="o">;</span>	<span class="c1">// Increment index, decrement A count
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">A</span><span class="o">--;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>		<span class="c1">// Create a string from the char array and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="keyboard-rowhttpsleetcodecomproblemskeyboard-rowa-namekeyboard-rowa"><a href="https://leetcode.com/problems/keyboard-row/" target="_blank" rel="noopener noreffer ">Keyboard Row</a><a name="keyboard-row"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Maps each character to the row in the keyboard in which it occurs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">map</span> <span class="o">=</span> <span class="o">{</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">,</span><span class="n">1</span><span class="o">,</span><span class="n">3</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">findWords</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>	<span class="c1">// Store filtered words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>							<span class="c1">// Where to insert the filtered words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">:</span> <span class="n">words</span><span class="o">)</span>					<span class="c1">// for each word in words
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">checkWord</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">()))</span>		<span class="c1">// convert it to lowercase and check if all char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">w</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>					<span class="c1">// occurs in the same row, if it does, add it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">w</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>	<span class="c1">// Simply return a copy of the array from 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>											<span class="c1">// index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">checkWord</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">){</span>		<span class="c1">// Check if all chars in the word belong in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">word</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">)-</span><span class="sc">&#39;a&#39;</span><span class="o">];</span>		<span class="c1">// same row. Check first chars row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>		<span class="c1">// For all the chars in the word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;a&#39;</span><span class="o">]</span> <span class="o">!=</span> <span class="n">row</span><span class="o">)</span>				<span class="c1">// if that char belongs to a different row,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>							<span class="c1">// All chars in same row, return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-mode-in-binary-search-treehttpsleetcodecomproblemsfind-mode-in-binary-search-treea-namefind-mode-in-binary-search-treea"><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/" target="_blank" rel="noopener noreffer ">Find Mode in Binary Search Tree</a><a name="find-mode-in-binary-search-tree"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="n">TreeNode</span> <span class="n">parent</span><span class="o">;</span>		<span class="c1">// Keep track of parent at each node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">maxMode</span><span class="o">;</span>			<span class="c1">// maxMode we found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">currentMode</span><span class="o">;</span>		<span class="c1">// mode recorded at each node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">modes</span><span class="o">;</span>		<span class="c1">// keep distinct modes found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findMode</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// node is null, so return empty array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">maxMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>				<span class="c1">// we have just seen the root, so maxMode so far is 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">currentMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// so is the current mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">modes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// add the root to our modes set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>				<span class="c1">// start traversing it&#39;s left and right branches
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">modes</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>	<span class="c1">// We have found all the modes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>				<span class="c1">// keep track of where to insert elements in result array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">modes</span><span class="o">)</span>			<span class="c1">// add all the distinct modes one by one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>				<span class="c1">// and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>			<span class="c1">// if node is null, stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>					<span class="c1">// otherwise traverse the left branch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>		<span class="c1">// Once we hit the null, we start backtracking to the leaf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">updateMode</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>			<span class="c1">// then we call updateMode with the node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">parent</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>				<span class="c1">// once it&#39;s done, we update parent as the current node, so 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>		<span class="c1">// when we backtrack, we can easily check that node and it&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>								<span class="c1">// next node&#39;s value for similarity. Then traverse right.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateMode</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">parent</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">){</span>	<span class="c1">// If parent node isn&#39;t null and the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">++</span><span class="n">currentMode</span><span class="o">;</span>			<span class="c1">// node&#39;s value is the same as parent, we update currentMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">currentMode</span> <span class="o">&gt;=</span> <span class="n">maxMode</span><span class="o">){</span>	<span class="c1">// If the currentMode is greater or equal to maxMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">currentMode</span> <span class="o">&gt;</span> <span class="n">maxMode</span><span class="o">)</span>	<span class="c1">// just check if it&#39;s greater. If it is, remove all 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">modes</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>			<span class="c1">// previously recorded modes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>		<span class="c1">// Add the current node to the set and update the 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">maxMode</span> <span class="o">=</span> <span class="n">currentMode</span><span class="o">;</span>		<span class="c1">// maxMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="o">{</span>						<span class="c1">// otherwise, value&#39;s aren&#39;t the same. so our currentMode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">currentMode</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// becomes 1. If maxMode is also 1, then all we have been 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">maxMode</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// seeing are distinct values, so add that node&#39;s value to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">modes</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span><span class="c1">// to the mode&#39;s set.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="base-7httpsleetcodecomproblemsbase-7a-namebase-7a"><a href="https://leetcode.com/problems/base-7/" target="_blank" rel="noopener noreffer ">Base 7</a><a name="base-7"></a></h3>
<p>Solution 1 without StringBuilder (Beats 100%, 7ms)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToBase7</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;0&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">num</span><span class="o">))/</span><span class="n">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">7</span><span class="o">))+</span><span class="n">1</span><span class="o">;</span>	<span class="c1">// Calculate # of bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">idx</span><span class="o">;</span>		<span class="c1">// where to start inserting from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span><span class="o">[]</span> <span class="n">digits</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>	<span class="c1">// If num is negative
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="n">num</span><span class="o">;</span>	<span class="c1">// Make it positive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>	<span class="c1">// We need one more space for -ve sign in the front
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="o">;</span>			<span class="c1">// Put the -ve sign
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">idx</span> <span class="o">=</span> <span class="n">len</span><span class="o">;</span>					<span class="c1">// and index is now len
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">digits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>		<span class="c1">// otherwise we only need &#34;len&#34; spaces
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">idx</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>				<span class="c1">// index is len-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// While num != 0, calculate remainder and add it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">digits</span><span class="o">[</span><span class="n">idx</span><span class="o">--]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">num</span> <span class="o">%</span> <span class="n">7</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="o">);</span>	<span class="c1">// Divide number by 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">num</span> <span class="o">/=</span> <span class="n">7</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>     
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">digits</span><span class="o">);</span>		<span class="c1">// Just create a string and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Solution 2 with StringBuilder</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToBase7</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">boolean</span> <span class="n">isNegative</span> <span class="o">=</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">;</span>	<span class="c1">// Just so we can know if we need to add the &#34;-&#34; sign
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>					<span class="c1">// Take the absolute value of num
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">num</span> <span class="o">=</span> <span class="o">-</span><span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">6</span><span class="o">)</span> <span class="o">{</span>				<span class="c1">// Keep adding the remainder, and dividing num by 7.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">num</span> <span class="o">/=</span> <span class="n">7</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>					<span class="c1">// Add whatever is left at the end.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">isNegative</span><span class="o">)</span>					<span class="c1">// If num was negative, add the minus sign.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;-&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>	<span class="c1">// Reverse the builder and return the toString()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="relative-rankshttpsleetcodecomproblemsrelative-ranksa-namerelative-ranksa"><a href="https://leetcode.com/problems/relative-ranks/" target="_blank" rel="noopener noreffer ">Relative Ranks</a><a name="relative-ranks"></a></h3>
<p>The idea employed here is simple. We need to store the relative ranks in sorted order. We can sort the array for that, but that is O(n log n). We can do better than that by finding the relative rank in linear time. First we find the maximum score in the array and create another array of length = maxScore + 1. We add 1 so that when we see the maxScore in the nums, we can assign it to maxScore index. Once we have done that, now we iterate over the nums array. Variable i keeps track of what rank to assign. We check a value in the array and at that index in our reverse sorted array, we put i+1, which basically marks it&rsquo;s rank based on it&rsquo;s position in the rankings. Some of then indexes would be default, that is a score of 0. We then check each value in the descend array and if it&rsquo;s not 0, we assign it a rank, but not if the ranks are 1, 2 or 3. In that case, we assign it a special value of Gold, SIlver or Bronze.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">findRelativeRanks</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">maxScore</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">maxScore</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">maxScore</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">descend</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">maxScore</span><span class="o">+</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">descend</span><span class="o">[</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">rank</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">descend</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">descend</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">0</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Gold Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Silver Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span> <span class="o">==</span> <span class="n">3</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&#34;Bronze Medal&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">result</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">rank</span> <span class="o">+</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">rank</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="perfect-numberhttpsleetcodecomproblemsperfect-numbera-nameperfect-numbera"><a href="https://leetcode.com/problems/perfect-number/" target="_blank" rel="noopener noreffer ">Perfect Number</a><a name="perfect-number"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkPerfectNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>		<span class="c1">// 1 is a special case, where it&#39;s only factor is itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>		<span class="c1">// We know our total will atleast be 1, 1 is everyone&#39;s factor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">num</span><span class="o">);</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>	<span class="c1">// Only loop through num&#39;s sqrt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="n">0</span><span class="o">){</span>				<span class="c1">// If i divides num perfectly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">otherFactor</span> <span class="o">=</span> <span class="n">num</span><span class="o">/</span><span class="n">i</span><span class="o">;</span>	<span class="c1">// Calculate the other factor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">total</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="o">(</span><span class="n">otherFactor</span> <span class="o">==</span> <span class="n">i</span> <span class="o">?</span> <span class="n">0</span> <span class="o">:</span> <span class="n">otherFactor</span><span class="o">);</span>	<span class="c1">// If i and other factor are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>								<span class="c1">// different, add them both, otherwise just i.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">total</span> <span class="o">==</span> <span class="n">num</span><span class="o">;</span>				<span class="c1">// Check in the end if your total is the same as num
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="detect-capitalhttpsleetcodecomproblemsdetect-capitala-namedetect-capitala"><a href="https://leetcode.com/problems/detect-capital/" target="_blank" rel="noopener noreffer ">Detect Capital</a><a name="detect-capital"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">detectCapitalUse</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>			<span class="c1">// Empty or size 1 words are ok.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>	<span class="c1">// Get the char array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">boolean</span> <span class="n">isUpper</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>	<span class="c1">// by default we let isUpper to false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(</span><span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">)</span>		<span class="c1">// Check if first two letters are uppercase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">isUpper</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">;</span> <span class="c1">// If first was upper and second wasnt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">){</span>	<span class="c1">// isUpper = false, otherwise true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">boolean</span> <span class="n">isAlsoUpper</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="o">;</span> <span class="c1">// We check onwards 1 char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">isUpper</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isAlsoUpper</span><span class="o">)</span>	<span class="c1">// If that char is lower and previous part was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// not lower, invalid use.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">isUpper</span> <span class="o">&amp;&amp;</span> <span class="n">isAlsoUpper</span><span class="o">)</span>	<span class="c1">// Or if previous part was lower and current letter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>				<span class="c1">// is upper, we return false.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>				<span class="c1">// Everything proceeded smoothly. So return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="longest-uncommon-subsequence-ihttpsleetcodecomproblemslongest-uncommon-subsequence-ia-namelongest-uncommon-subsequence-ia"><a href="https://leetcode.com/problems/longest-uncommon-subsequence-i/" target="_blank" rel="noopener noreffer ">Longest Uncommon Subsequence I</a><a name="longest-uncommon-subsequence-i"></a></h3>
<p>This is those kind of problems that shouldn&rsquo;t be up there. The problem is stated rather poorly and the solution is even stupider. All you are checking for is if the two string&rsquo;s aren&rsquo;t the same, then whichever one has a larger length is essentially the longest uncommon subsequence because the other string cannot form the full string. I know, it&rsquo;s stupid.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findLUSlength</span><span class="o">(</span><span class="n">String</span> <span class="n">a</span><span class="o">,</span> <span class="n">String</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">b</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">:</span> <span class="n">b</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="course-schedule-iihttpsleetcodecomproblemscourse-schedule-iia-namecourse-schedule-iia"><a href="https://leetcode.com/problems/course-schedule-ii/" target="_blank" rel="noopener noreffer ">Course Schedule II</a><a name="course-schedule-ii"></a></h3>
<p>This is a graph problem where we require to sort the vertices topologically. There are two choices we have for sorting topologically - Depth First Search approach based on finshing times or the Kahn&rsquo;s Algorithm. I have used Kahn&rsquo;s algorithm in this solution. Runtime is 2ms [beats 100%] and uses 45.3 MB space [beats than 90.16%]. The idea for Kahn&rsquo;s is simple - Enqueue all the nodes which has 0 incoming edges because those are the ones that can be started first. Then while the queue isn&rsquo;t empty, remove one node at a time, process it&rsquo;s outgoing nodes and decrease their indegrees by one. The reasoning behind that is let&rsquo;s say Node 2 has two prerequisites, Node 0 and Node 1. Node 0 and Node 1 have 0 indegrees. So our first two nodes would be Node 1 and Node 0 and if they are finished, then their outgoing Nodes can be started, that is Node 2. Now when you decrease any node&rsquo;s indegree and they become zero, add them to the queue because they can now be started. Keep doing this until the queue is empty.</p>
<p>In my approach, I&rsquo;m avoiding any unnecessary data structure and using only the most basic ones like array&rsquo;s. So instead of using the queue, what I do is fill the array <code>order</code> which also stores the topological order. <code>idx</code> keeps track of the last index available to fill in the array. <code>start</code> mimics the <code>poll</code> behaviour of a queue. <code>while (start != idx)</code> makes sure that while we still have nodes to process, remove the one that can be started and decrease all the indegrees of outgoing edges.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findOrder</span><span class="o">(</span><span class="kt">int</span> <span class="n">numCourses</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">indegrees</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>				<span class="c1">// We maintain each node&#39;s indegree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>	<span class="c1">// Each node&#39;s outgoing edges
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">edge</span><span class="o">:</span> <span class="n">prerequisites</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// Process each edge
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">indegrees</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]]++;</span>							<span class="c1">// Update indegrees
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>						<span class="c1">// Also store the edge in graph
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">graph</span><span class="o">[</span><span class="n">edge</span><span class="o">[</span><span class="n">1</span><span class="o">]].</span><span class="na">add</span><span class="o">(</span><span class="n">edge</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">numCourses</span><span class="o">];</span>		    <span class="c1">// We don&#39;t technically need a queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numCourses</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>        <span class="c1">// Find all nodes who indegree is 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">indegrees</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>                  <span class="c1">// and put them in the order array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>                              <span class="c1">// start tracks node to be polled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">!=</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>                      <span class="c1">// while we can poll the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">order</span><span class="o">[</span><span class="n">start</span><span class="o">++];</span>                 <span class="c1">// poll the node u
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>                   <span class="c1">// If node u has outgoing edges 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">out</span><span class="o">:</span> <span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">])</span>             <span class="c1">// Then for each of those nodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(--</span><span class="n">indegrees</span><span class="o">[</span><span class="n">out</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>      <span class="c1">// decrease their indegrees and check if it&#39;s 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">order</span><span class="o">[</span><span class="n">idx</span><span class="o">++]</span> <span class="o">=</span> <span class="n">out</span><span class="o">;</span>         <span class="c1">// if it&#39;s 0, add it to our queue (order)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">!=</span> <span class="n">numCourses</span><span class="o">)</span>						<span class="c1">// Cycle check. If our idx != numCourses then
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{};</span>					<span class="c1">// not all nodes could be processed. So we have
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">order</span><span class="o">;</span>								<span class="c1">// a cycle. Otherwise return our order array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="letter-combinations-of-a-phone-numberhttpsleetcodecomproblemsletter-combinations-of-a-phone-numbera-nameletter-combinations-of-a-phone-numbera"><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener noreffer ">Letter Combinations of a Phone Number</a><a name="letter-combinations-of-a-phone-number"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Letter Combinations of a Phone Number.</p>
<p>Memory Usage: 35.9 MB, less than 98.63% of Java online submissions for Letter Combinations of a Phone Number.</p>
<hr>
<p>How do we count numbers? 16, 17, 18, 19 and then what? 20 right? We see that the last number is 19, we can&rsquo;t go past 9 so we set it to 0 and then increment the precedding digit to get 20. The idea is the same for this problem too. We keep a <code>levels</code> array to keep track of which character do we take from which number&rsquo;s allowed alphabet letters. For example, let&rsquo;s say the input string is <code>23</code>. Our <code>levels</code> array would <code>[0, 0]</code> in the beginning. This says pick characters at index 0 and 0 from alphabet characters corresponding to 2 and 3 which gives us <code>ad</code>. Then, we increase the last most counter in our levels array by 1 giving us <code>[0, 1]</code>. This allows us to get <code>ae</code> in the next iteration and levels array would be <code>[0, 2]</code>. We get <code>af</code> and levels array becomes <code>[0, 3]</code>. Now this is where it becomes interesting. We are only allowed three letters for the digit corresponding to 3 and since we already used all of them , we now need to shift to the next character for digit 2, which is <code>b</code>. Level array looks like <code>[1, 0]</code>. This will allow us to get <code>[b,e]</code>. So you get the rough idea now. Only thing now is we watch out when to stop. We stop when we have utilized all available characters from the 0th index&rsquo;s number&rsquo;s allowed alphabet letters. In this case, we stop when levels array look like <code>[3, 0]</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">map</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">{</span><span class="sc">&#39;a&#39;</span><span class="o">,</span> <span class="sc">&#39;b&#39;</span><span class="o">,</span> <span class="sc">&#39;c&#39;</span><span class="o">},</span>        <span class="c1">// 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;d&#39;</span><span class="o">,</span> <span class="sc">&#39;e&#39;</span><span class="o">,</span> <span class="sc">&#39;f&#39;</span><span class="o">},</span>        <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;g&#39;</span><span class="o">,</span> <span class="sc">&#39;h&#39;</span><span class="o">,</span> <span class="sc">&#39;i&#39;</span><span class="o">},</span>        <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;j&#39;</span><span class="o">,</span> <span class="sc">&#39;k&#39;</span><span class="o">,</span> <span class="sc">&#39;l&#39;</span><span class="o">},</span>        <span class="c1">// 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;m&#39;</span><span class="o">,</span> <span class="sc">&#39;n&#39;</span><span class="o">,</span> <span class="sc">&#39;o&#39;</span><span class="o">},</span>        <span class="c1">// 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;p&#39;</span><span class="o">,</span> <span class="sc">&#39;q&#39;</span><span class="o">,</span> <span class="sc">&#39;r&#39;</span><span class="o">,</span> <span class="sc">&#39;s&#39;</span><span class="o">},</span>   <span class="c1">// 7
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;t&#39;</span><span class="o">,</span> <span class="sc">&#39;u&#39;</span><span class="o">,</span> <span class="sc">&#39;v&#39;</span><span class="o">},</span>        <span class="c1">// 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">{</span><span class="sc">&#39;w&#39;</span><span class="o">,</span> <span class="sc">&#39;x&#39;</span><span class="o">,</span> <span class="sc">&#39;y&#39;</span><span class="o">,</span> <span class="sc">&#39;z&#39;</span><span class="o">}</span>    <span class="c1">// 9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>                <span class="c1">// Maintain the list of combinations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">;</span>                                          <span class="c1">// numbers parsed from input
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">levels</span><span class="o">;</span>                                           <span class="c1">// utility array to keep track of next character in string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>                                                  <span class="c1">// number of input digits.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">solution</span><span class="o">(</span><span class="n">String</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">digits</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>                 <span class="c1">// stop if null or empty string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">numbers</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">levels</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                 <span class="c1">// parse all the digits from the string as int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">((</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>          <span class="c1">// stop if any of them is 0 or 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">helper</span><span class="o">();</span>                                                   <span class="c1">// start recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">levels</span><span class="o">[</span><span class="n">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">0</span><span class="o">]-</span><span class="n">2</span><span class="o">].</span><span class="na">length</span><span class="o">)</span>                  <span class="c1">// if we are done iterating over all possible combinations,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="o">;</span>                                                 <span class="c1">// stop recursion.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>                                     <span class="c1">// stores all the characters of the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>                                 <span class="c1">// loop through levels array. The value at each index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">][</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]];</span>                    <span class="c1">// tells us which character to keep from which map index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">levels</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">]++;</span>                                              <span class="c1">// Increase the entry at the end of the levels array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">levels</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span> <span class="o">--</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                 <span class="c1">// Now loop through the levels array from the end
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">map</span><span class="o">[</span><span class="n">numbers</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">2</span><span class="o">].</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>            <span class="c1">// If the value = total number of characters allowed for that number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">levels</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>                                      <span class="c1">// then we set it to 0 and increment the previous level entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">levels</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">1</span><span class="o">]++;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>                                  <span class="c1">// Add the string and induce next recursive call.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">helper</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sudoku-solverhttpsleetcodecomproblemssudoku-solvera-namesudoku-solvera"><a href="https://leetcode.com/problems/sudoku-solver/" target="_blank" rel="noopener noreffer ">Sudoku Solver</a><a name="sudoku-solver"></a></h3>
<p>Runtime: 4 ms, faster than 90.01% of Java online submissions for Sudoku Solver.</p>
<p>Memory Usage: 35.1 MB, less than 71.93% of Java online submissions for Sudoku Solver.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">solveSudoku</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">board</span> <span class="o">=</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">solve</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">9</span><span class="o">)</span> <span class="o">{</span>                                 <span class="c1">// If col is 9, make it 0 and shift to the next row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">row</span> <span class="o">+=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">row</span> <span class="o">==</span> <span class="n">9</span><span class="o">)</span>                               <span class="c1">// If row is also 9 now, then it means we have successfully filled all cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>                            <span class="c1">// So return true and end backtracking.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>                  <span class="c1">// Otherwise, we start picking values from 1-9
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="o">)</span> <span class="o">{</span>               <span class="c1">// And try to plug it into empty cells
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">isValid</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span> <span class="n">i</span><span class="o">))</span> <span class="o">{</span>             <span class="c1">// If that value is valid in that cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span><span class="o">+</span><span class="sc">&#39;0&#39;</span><span class="o">);</span>    <span class="c1">// fill it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">))</span>          <span class="c1">// and move on to fill the next cell via recursive call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>                    <span class="c1">// If the recursion ended by returning true, then return true to signal success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">else</span>                                <span class="c1">// Otherwise, we were not able to put an value in that cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="sc">&#39;.&#39;</span><span class="o">;</span>          <span class="c1">// so change it back to 0 and the backtracking would try the next higher value in that cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">solve</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>           <span class="c1">// That cell wasn&#39;t empty, so move on to the next empty cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>                                   <span class="c1">// No solution found.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">,</span> <span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// row check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="o">++</span><span class="n">c</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">c</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// column check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">9</span><span class="o">;</span> <span class="o">++</span><span class="n">r</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// box check
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="n">row</span> <span class="o">/</span> <span class="n">3</span> <span class="o">*</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">col</span> <span class="o">/</span> <span class="n">3</span> <span class="o">*</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">3</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">top</span><span class="o">+</span><span class="n">i</span><span class="o">][</span><span class="n">left</span><span class="o">+</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">==</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bulls-and-cowshttpsleetcodecomproblemsbulls-and-cowsa-namebulls-and-cowsa"><a href="https://leetcode.com/problems/bulls-and-cows/" target="_blank" rel="noopener noreffer ">Bulls and Cows</a><a name="bulls-and-cows"></a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Bulls and Cows.</p>
<p>The idea is simple, first record the frequency of the digits of the secret number. Then we first find number of <code>bulls</code> by checking for exact indices match. After that we start to record the number of <code>cows</code>. The way we do is by again iterating over the <code>guess</code> string; only if there was a character mismatch and we still have the character available from <code>freq</code> table, we have a <code>cow</code>. Update it and decrement the frequency of the number we just used up.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">getHint</span><span class="o">(</span><span class="n">String</span> <span class="n">secret</span><span class="o">,</span> <span class="n">String</span> <span class="n">guess</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">bulls</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">cows</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">10</span><span class="o">];</span>							<span class="c1">// Freq of available digits from secret
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">guess</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">s</span> <span class="o">=</span> <span class="n">secret</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">[</span><span class="n">s</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">]++;</span>								<span class="c1">// Record the freq of the digit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">guess</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">{</span>						<span class="c1">// If it&#39;s a match, we have a bulls.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">bulls</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">            <span class="n">freq</span><span class="o">[</span><span class="n">s</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">]--;</span>							<span class="c1">// We just used the character, so decrement it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">guess</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">secret</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span>					<span class="c1">// Convert the chars into int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">guess</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="n">g</span> <span class="o">&amp;&amp;</span> <span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// Only if they are a mismtach and we have a number g available in freq table
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">cows</span><span class="o">++;</span>										<span class="c1">// then it&#39;s a cow.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">freq</span><span class="o">[</span><span class="n">g</span><span class="o">]--;</span>									<span class="c1">// We used up the number, so decrement it&#39;s freq.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">().</span><span class="na">append</span><span class="o">(</span><span class="n">bulls</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;A&#34;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">cows</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;B&#34;</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="n-queens-ihttpsleetcodecomproblemsn-queensa-namen-queens-1a"><a href="https://leetcode.com/problems/n-queens/" target="_blank" rel="noopener noreffer ">N-Queens I</a><a name="n-queens-1"></a></h3>
<p>Runtime: 3 ms, faster than 73.76% of Java online submissions for N-Queens.
Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for N-Queens.</p>
<p>The idea is same as sudoku, but insteading of scanning rows, we scan columns. Start with row 0, column 0 and see if we can place a queen there, if yes place it and try the next cell of row 0 by recursing. We can&rsquo;t put the queen in the same row again, so we keep changing rows with column 1 until we find somewhere to place it. Keep doing this until you were successfully able to place all the queens as checked by the condition <code>col == n</code>. If so, add that solution to our list of accepted solutions.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NQueens</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">board</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="nf">solveNQueens</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">solve</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">addToList</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">row</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">canPlaceQueen</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">solve</span><span class="o">(</span><span class="n">col</span><span class="o">+</span><span class="n">1</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    <span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addToList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">r</span><span class="o">:</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">r</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">1</span> <span class="o">?</span> <span class="sc">&#39;Q&#39;</span> <span class="o">:</span> <span class="sc">&#39;.&#39;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">canPlaceQueen</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Check all rows for the same column
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">col</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Check upper left diagonal of the cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">row</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--,</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// Check lower left diagonal of the cell.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">row</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">++,</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="k-diff-pairs-in-an-arrayhttpsleetcodecomproblemsk-diff-pairs-in-an-arraya-namek-diff-pairs-in-an-arraya"><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/" target="_blank" rel="noopener noreffer ">K-diff pairs in an Array</a><a name="k-diff-pairs-in-an-array"></a></h3>
<p>Pretty intuitive solution. Build a frequency HashMap for all the numbers in the array. In a special case where <code>diff</code> is 0, just count occurences in our <code>freq</code> map whose values are 2 or more. In other case, just loop through all the keys and make sure it&rsquo;s supplement exists to count the number of K-diff pairs.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findPairs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pairs</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">freq</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">freq</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">0</span><span class="o">)+</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">pairs</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pairs</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">freq</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">k</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">pairs</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pairs</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="is-subsequencehttpsleetcodecomproblemsis-subsequencesubmissionsa-nameis-subsequencea"><a href="https://leetcode.com/problems/is-subsequence/submissions/" target="_blank" rel="noopener noreffer ">Is Subsequence</a><a name="is-subsequence"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.
Memory Usage: 49.6 MB, less than 100.00% of Java online submissions for Is Subsequence.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSubsequence</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>								<span class="c1">// Set it to 0 to start check for 0th index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>				<span class="c1">// For all the characters in String s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">idx</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">idx</span><span class="o">+</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// Find it&#39;s index in String t from index one more than the last index matched
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span>							<span class="c1">// idx &lt; 0 means not found
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="minimum-absolute-difference-in-bsthttpsleetcodecomproblemsminimum-absolute-difference-in-bsta-nameminimum-absolute-difference-in-bsta"><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noopener noreffer ">Minimum Absolute Difference in BST</a><a name="minimum-absolute-difference-in-bst"></a></h3>
<p>The idea is to use the Inorder traversal of a BST. We repeatively iterate over the left branch to find the minimum diff and then do the same for the right branch, but this time we already know that the parent of the right branch has to be its minimum, so first set it and then traverse the right branch to find the minimum difference.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>								<span class="c1">// Hold the minimum difference.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>								<span class="c1">// Holds the minimum value observed for the right branch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMinimumDifference</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>											<span class="c1">// Start iterating from the root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>										<span class="c1">// Null node, so stop recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>									<span class="c1">// Keep traversing till the end of the tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">res</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">-</span><span class="n">prev</span><span class="o">),</span> <span class="n">res</span><span class="o">);</span>			<span class="c1">// Check if we have a minimum, if so set it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>										<span class="c1">// The smallest value for the right branch is it&#39;s parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>									<span class="c1">// Set it first and then traverse.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bst-tree-to-greater-treehttpsleetcodecomproblemsconvert-bst-to-greater-treea-namebst-tree-to-greater-treea"><a href="https://leetcode.com/problems/convert-bst-to-greater-tree/" target="_blank" rel="noopener noreffer ">BST Tree to Greater Tree</a><a name="bst-tree-to-greater-tree"></a></h3>
<p>The idea is simple. In a BST, we know everything on the right side of a node is greater than it and it&rsquo;s left side. So when we are at any node, it&rsquo;s value would be its value + sum of everything on its right side. So, we first compute the node&rsquo;s value and then notice that the value for the node on the left is nothing but its value + parents value. So the node&rsquo;s value is computed, do the same thing for the left side, but this time, the starting sum would be the parent&rsquo;s value.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TreeNode</span> <span class="nf">convertBST</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">,</span> <span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">+=</span> <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="student-attendance-record-ihttpsleetcodecomproblemsstudent-attendance-record-ia-namestudent-attendance-record-ia"><a href="https://leetcode.com/problems/student-attendance-record-i/" target="_blank" rel="noopener noreffer ">Student Attendance Record I</a><a name="student-attendance-record-I"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">checkRecord</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">A</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Count number of A&#39;s seen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Count number of consecutive L&#39;s seen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>		<span class="c1">// Loop through each character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;A&#39;</span><span class="o">)</span> <span class="o">{</span>								<span class="c1">// If c is A, increment A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">A</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">A</span> <span class="o">&gt;</span> <span class="n">1</span><span class="o">)</span>								<span class="c1">// If A is more than 1, return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">              <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// Always set L count to 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;L&#39;</span><span class="o">)</span> <span class="o">{</span>					<span class="c1">// If c is L,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">L</span><span class="o">++;</span>											<span class="c1">// We might have consecutive L&#39;s, so start counting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">L</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">)</span> <span class="o">{</span>							<span class="c1">// If we have more than 2 consecutive L&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>					<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="k">else</span>													<span class="c1">// Lastly, we might have a P, that will reset our
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">L</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>										<span class="c1">// consecutive L streak.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>											<span class="c1">// Everything passed, so return true.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reverse-words-in-string-iiihttpsleetcodecomproblemsreverse-words-in-a-string-iiia-namereverse-words-in-string-iiia"><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/" target="_blank" rel="noopener noreffer ">Reverse Words in String III</a><a name="reverse-words-in-string-iii"></a></h3>
<p>Runtime: 2 ms, faster than 99.34% of Java online submissions for Reverse Words in a String III.</p>
<p>Memory Usage: 37.9 MB, less than 100.00% of Java online submissions for Reverse Words in a String III.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseWords</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>											<span class="c1">// Check the whole string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">end</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>													<span class="c1">// find the index of the first whitespace
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span><span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="o">)</span>		<span class="c1">// denoting end of the word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">end</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="n">reverseWord</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>				<span class="c1">// reverse that specific word
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">start</span> <span class="o">=</span> <span class="n">end</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>												<span class="c1">// update start to the new word beginning
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>										<span class="c1">// create a new string out of the array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	Reverses a word in-place by iterating n/2 times where n = len of the word.
</span></span></span><span class="line"><span class="cl"><span class="cm">	Traverse upto the middle point of the word while swapping each word from start+offset to end-	 offset.
</span></span></span><span class="line"><span class="cl"><span class="cm">	**/</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">reverseWord</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stop</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="o">(</span><span class="n">stop</span><span class="o">-</span><span class="n">start</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="kt">char</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">start</span><span class="o">+</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">arr</span><span class="o">[</span><span class="n">stop</span><span class="o">-</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="quad-tree-intersectionhttpsleetcodecomproblemsquad-tree-intersectiona-namequad-tree-intersectiona"><a href="https://leetcode.com/problems/quad-tree-intersection/" target="_blank" rel="noopener noreffer ">Quad Tree Intersection</a><a name="quad-tree-intersection"></a></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Node</span> <span class="nf">intersect</span><span class="o">(</span><span class="n">Node</span> <span class="n">qt1</span><span class="o">,</span> <span class="n">Node</span> <span class="n">qt2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">isLeaf</span><span class="o">)</span>										<span class="c1">// If only a leaf, then return the one with true val
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">return</span> <span class="n">qt1</span><span class="o">.</span><span class="na">val</span> <span class="o">?</span> <span class="n">qt1</span> <span class="o">:</span> <span class="n">qt2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">qt2</span><span class="o">.</span><span class="na">isLeaf</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">qt2</span><span class="o">.</span><span class="na">val</span> <span class="o">?</span> <span class="n">qt2</span> <span class="o">:</span> <span class="n">qt1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>							<span class="c1">// Prepare for recursion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>											<span class="c1">// By default, each level node is not a leaf with 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>									<span class="c1">// value = true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">  		<span class="c1">// Keep traversing all the way to a terminal node and then store it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">n</span><span class="o">.</span><span class="na">topLeft</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">topLeft</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">topLeft</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">topRight</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">topRight</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">topRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span> <span class="o">=</span> <span class="n">intersect</span><span class="o">(</span><span class="n">qt1</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">,</span> <span class="n">qt2</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  		<span class="c1">// Check now if you&#39;re at the base case. If n&#39;s children are leaves and all their values are same, then make n a leaf and it&#39;s value the same as it&#39;s child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">topRight</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomLeft</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="na">bottomRight</span><span class="o">.</span><span class="na">val</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">n</span><span class="o">.</span><span class="na">isLeaf</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">n</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">topLeft</span><span class="o">.</span><span class="na">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="long-pressed-namehttpsleetcodecomproblemslong-pressed-namea-namelong-pressed-namea"><a href="https://leetcode.com/problems/long-pressed-name/" target="_blank" rel="noopener noreffer ">Long Pressed Name</a><a name="long-pressed-name"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Long Pressed Name.</p>
<p>Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Long Pressed Name.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isLongPressedName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">typed</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">char</span><span class="o">[]</span> <span class="n">n</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>						<span class="c1">// Arrays are much nicer to work with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">typed</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>						<span class="c1">// Record start and stop points for both
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">startN</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">endN</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">startT</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">endT</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="o">(</span><span class="n">startT</span> <span class="o">&lt;</span> <span class="n">endT</span><span class="o">)</span> <span class="o">{</span>										<span class="c1">// While we haven&#39;t looked at the whole string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">startN</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>									<span class="c1">// Let&#39;s first count same consecutive letters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="kt">int</span> <span class="n">countN</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>												<span class="c1">// in String name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span> <span class="o">(</span><span class="n">temp</span> <span class="o">&lt;</span> <span class="n">endN</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span> <span class="o">==</span> <span class="n">n</span><span class="o">[</span><span class="n">temp</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">temp</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="n">countN</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">countT</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>												<span class="c1">// Do the same for typed string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">while</span> <span class="o">(</span><span class="n">startT</span> <span class="o">&lt;</span> <span class="n">endT</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">[</span><span class="n">startN</span><span class="o">]</span> <span class="o">==</span> <span class="n">t</span><span class="o">[</span><span class="n">startT</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">startT</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">              <span class="n">countT</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>																			<span class="c1">// If consecutive letters in typed string are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="o">(</span><span class="n">countT</span> <span class="o">&lt;</span> <span class="n">countN</span><span class="o">)</span>									<span class="c1">// less than the ones in original name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>											<span class="c1">// return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">startN</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>												<span class="c1">// Otherwise, prepare for next character
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">startN</span> <span class="o">==</span> <span class="n">endN</span><span class="o">;</span>										<span class="c1">// Lastly, check if we were able to match
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>																							<span class="c1">// all character of the name string
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-zigzag-level-order-traversalhttpsleetcodecomproblemsbinary-tree-zigzag-level-order-traversala-namebinary-tree-zigzag-level-order-traversala"><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener noreffer ">Binary Tree Zigzag Level Order Traversal</a><a name="binary-tree-zigzag-level-order-traversal"></a></h3>
<p>The idea here is simple. We perform a BFS as usual using a Queue but I maintain a variable called <code>dir</code> to check which side do I add from. <code>dir=1</code> means add from Right-&gt;Left and <code>dir=-1</code> means add from usual Left-&gt;Right. I am also using LinkedList because of easy addition of elements in both direction. When I need to add from Right-&gt;Left, I use the <code>addFirst(E e)</code> method of LinkedList to add to the head, otherwise normal add to the tail. One important thing to take care of at each iteration is to know how many nodes to dequeue, hence the usage of the variable <code>children</code>. This allows me to keep track of how many children were added to the queue at each stage so I dequeue exactly that many children in the next stage. Apart from that, everything is straightforward.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">zigzagLevelOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">      <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>										<span class="c1">// Children = 1 because only root is added.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">children</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>			<span class="c1">// Added the root, so next time dir = 1 (Right-&gt;Left)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="kt">int</span> <span class="n">pushed</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">children</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// Poll only those nodes that were queued in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="n">TreeNode</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>							<span class="c1">// the previous stage.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                  <span class="n">l</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">              <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="n">l</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>							<span class="c1">// Left-&gt;Right add
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>								<span class="c1">// Add children, notice I am counting here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>									<span class="c1">// how many children I am pushing/queuing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="o">++</span><span class="n">pushed</span><span class="o">;</span>												<span class="c1">// to the queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>              <span class="o">}</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>							<span class="c1">// Same thing for right child.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                  <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                  <span class="o">++</span><span class="n">pushed</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>														<span class="c1">// Add this list to main list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">children</span> <span class="o">=</span> <span class="n">pushed</span><span class="o">;</span>											<span class="c1">// update # of children pushed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">dir</span> <span class="o">=</span> <span class="n">dir</span> <span class="o">==</span> <span class="n">1</span> <span class="o">?</span> <span class="o">-</span><span class="n">1</span><span class="o">:</span> <span class="n">1</span><span class="o">;</span>									<span class="c1">// update dir for next iteration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="array-partition-ihttpsleetcodecomproblemsarray-partition-ia-namearray-partition-ia"><a href="https://leetcode.com/problems/array-partition-i/" target="_blank" rel="noopener noreffer ">Array Partition I</a><a name="array-partition-I"></a></h3>
<p>Runtime: 3 ms, faster than 99.90% of Java online submissions for Array Partition I.</p>
<p>Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Array Partition I.</p>
<p>I originally came up with the sorting solution where you sort the array and look at two numbers at a time and keep the smaller number out of them and add to the sum. It was way slower, so I checked the fastest submission and this one is pretty smart. The idea is really good. We know there are going to be 20,001 numbers, so reserve an array for it. Now let&rsquo;s say we had duplicates in our array, ex [1,2,1,4,1,1], if we were to sort it, we would get [1,1,1,1,2,4]. Notice that those four 1&rsquo;s don&rsquo;t really matter because each of them pairs up with the other to give you a one 1. That is why we mark those particular indices as true and false. Notice that in our variable <code>sum</code> we would have counted them individually, making <code>sum = 4</code> when in fact it should be 2 since we only take one of them from two pairs. If we have even occurrence of any number, they would be false, meaning we don&rsquo;t need to account them in the <code>diff</code> calculation. Now coming to <code>diff</code> how do we compute it? First we have the <code>seen</code> array to know which elements we need to look at. If that particular index is true, then we check if it&rsquo;s the first element of the pair which we maintain via the boolean value <code>firstElemOfPair</code>. If its true, then <code>first</code> becomes that value. Otherwise, we know that we&rsquo;re looking at the second element so we update the <code>diff</code> which is basically that value subtract <code>first</code>. Notice that if we look at a pair in our example as (2,4), we would pick 2 and the <code>diff</code> would be 2. This needs to be subtracted from our <code>sum</code>, hence the reason to maintain both of them. At the end, we finally subtract sum and diff and divide the result by 2 because we were doubling our diff&rsquo;s too.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">arrayPairSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">boolean</span><span class="o">[]</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">20001</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">seen</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="n">10000</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">seen</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="n">10000</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">          <span class="n">sum</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="kt">boolean</span> <span class="n">firstElemOfPair</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">seen</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">if</span> <span class="o">(</span><span class="n">seen</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="k">if</span> <span class="o">(</span><span class="n">firstElemOfPair</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                  <span class="n">first</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="k">else</span>
</span></span><span class="line"><span class="cl">                  <span class="n">diff</span> <span class="o">+=</span> <span class="n">i</span><span class="o">-</span><span class="n">first</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">              <span class="n">firstElemOfPair</span> <span class="o">=</span> <span class="o">!</span><span class="n">firstElemOfPair</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">(</span><span class="n">sum</span><span class="o">-</span><span class="n">diff</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reshape-the-matrixhttpsleetcodecomproblemsreshape-the-matrixa-namereshape-the-matrixa"><a href="https://leetcode.com/problems/reshape-the-matrix/" target="_blank" rel="noopener noreffer ">Reshape the Matrix</a><a name="reshape-the-matrix"></a></h3>
<p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Reshape the Matrix.</p>
<p>Memory Usage: 38.4 MB, less than 100.00% of Java online submissions for Reshape the Matrix.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">matrixReshape</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">numsR</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>				                    <span class="c1">// Get rows and col of nums
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">numsC</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">numsR</span> <span class="o">*</span> <span class="n">numsC</span> <span class="o">!=</span> <span class="n">r</span><span class="o">*</span><span class="n">c</span> <span class="o">||</span> <span class="o">(</span><span class="n">numsR</span> <span class="o">==</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">numsC</span> <span class="o">==</span> <span class="n">c</span><span class="o">))</span>	<span class="c1">// If can&#39;t reshape or problems
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>									        <span class="c1">// asks to reshape in the same dimensions, return the same array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">];</span>			                    <span class="c1">// New matrix to be returned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">nR</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">nC</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> 	                <span class="c1">// To keep track of which element to consume and where to place it in the new matrix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">row</span> <span class="o">!=</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mat</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">nR</span><span class="o">][</span><span class="n">nC</span><span class="o">++];</span>	                    <span class="c1">// Increment only the column value for both
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">col</span> <span class="o">==</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>								        <span class="c1">// Check if we are at boundary, if so, increment row
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">col</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>									        <span class="c1">// and set col to 0 for both cases.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">++</span><span class="n">row</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nC</span> <span class="o">==</span> <span class="n">numsC</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">nC</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">++</span><span class="n">nR</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">mat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="swap-nodes-in-pairshttpsleetcodecomproblemsswap-nodes-in-pairsa-nameswap-nodes-in-pairsa"><a href="https://leetcode.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener noreffer ">Swap Nodes in Pairs</a><a name="swap-nodes-in-pairs"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>Memory Usage: 34.5 MB, less than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>
<p>The idea is simple. We add a dummy node in front for simplicity as it allows us to generalize the concept of getting two nodes at a time. We maintain a current pointer that points to the node in the actual LinkedList. Then, we get it&rsquo;s next and it&rsquo;s next.next and store it into n1 and n2. Now notice that before making n2&rsquo;s next = n1, we need to store n2&rsquo;s next into n1&rsquo;s next. After we do that, we need to make sure that current&rsquo;s next is n2 which is now working with the actual LinkedList. Then, we need to make sure that current.next.next is n1 which we just fixed and update current which is basically n1.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">swapPairs</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">ListNode</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">n1</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">n1</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n2</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">n1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="generate-parentheseshttpsleetcodecomproblemsgenerate-parenthesesa-namegenerate-parenthesesa"><a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="noopener noreffer ">Generate Parentheses</a><a name="generate-parentheses"></a></h3>
<p>Iterative Approach 1: This one is very slow.</p>
<p>Runtime: 4 ms, faster than 8.87% of Java online submissions for Generate Parentheses.</p>
<p>Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<p>The idea is simple. We basically do a BFS and keep track of the parentheses combination we have obtained so far. Poll the queue and check if it&rsquo;s length is 2*n (for a given n, we would have # of open brackets = # of closed brackets), add it to the list and check next combination. If not, then check if we can add an open bracket, add it and update number of open bracket count and add this combination to the queue. Then try to see if we can add a closed bracket, if you can add it, then update closed bracket count add that combination to the queue. Keep doing this until the queue becomes empty. This is the first approach I came up with which is naive as you can see since it&rsquo;s doing an exhaustive search for all valid combination.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">open</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">close</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Node</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">o</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">open</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">close</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span> <span class="n">n1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">close</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">Node</span> <span class="n">n2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">data</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">,</span> <span class="n">u</span><span class="o">.</span><span class="na">close</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">n1</span><span class="o">.</span><span class="na">open</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">n1</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="sc">&#39;(&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">n1</span><span class="o">.</span><span class="na">open</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">n2</span><span class="o">.</span><span class="na">close</span> <span class="o">&lt;</span> <span class="n">u</span><span class="o">.</span><span class="na">open</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">n2</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">u</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="sc">&#39;)&#39;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">n2</span><span class="o">.</span><span class="na">close</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Recursive Solution 2: This one is much more faster. I generalized the above idea into the fact that I am adding only valid combinations and any invalid combinations are automatically discarded. The logic is as follows: We know for a given n, the string length should be 2*n. So that forms our base case for recursion, if the length of String <code>s</code> is <code>2n</code>, we want to add it to the list. Otherwise, we check if the number of open brackets we have so far is less than <code>n</code>. If so, we can add an open bracket. Then check if number of close bracket is less than <code>open</code>, if so that sequence would be valid and add a close bracket and recurse.</p>
<p>Runtime: 1 ms, faster than 95.16% of Java online submissions for Generate Parentheses.
Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">generateParenthesis</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="s">&#34;(&#34;</span><span class="o">,</span> <span class="n">1</span><span class="o">,</span> <span class="n">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">helper</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">open</span><span class="o">,</span> <span class="kt">int</span> <span class="n">close</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="n">2</span><span class="o">*</span><span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">open</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">s</span><span class="o">+</span><span class="sc">&#39;(&#39;</span><span class="o">,</span> <span class="n">open</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">close</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">close</span> <span class="o">&lt;</span> <span class="n">open</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">helper</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">s</span><span class="o">+</span><span class="sc">&#39;)&#39;</span><span class="o">,</span> <span class="n">open</span><span class="o">,</span> <span class="n">close</span><span class="o">+</span><span class="n">1</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>###<a href="https://leetcode.com/problems/distribute-candies/" target="_blank" rel="noopener noreffer ">Distribute Candies</a><a name="distribute-candies"></a></p>
<p>Pretty simple solution. We want to give maximize the number of unique candies to give to the sister. So we maintain a hashset to collect all the unique candies first. Both of them get half the candies, so let <code>s = number of candies they get</code>. Now, if the size of the set is greater than or equal to <code>s</code>, then the sister only gets <code>s</code> candies out of it. Otherwise, the maximum amount of unique candies she can get is equal to the set size.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">distributeCandies</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">candies</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">candies</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">:</span> <span class="n">candies</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">share</span> <span class="o">=</span> <span class="n">candies</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">share</span> <span class="o">?</span> <span class="n">share</span><span class="o">:</span> <span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="maximum-subproduct-subarrayhttpsleetcodecomproblemsmaximum-product-subarraya-namemaximum-subproduct-subarraya"><a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener noreffer ">Maximum subproduct subarray</a><a name="maximum-subproduct-subarray"></a></h3>
<p>Credits for this simplistic solution to LeetCode user <a href="https://leetcode.com/problems/maximum-product-subarray/discuss/48230/Possibly-simplest-solution-with-O%28n%29-time-complexity" target="_blank" rel="noopener noreffer ">mzchen</a>. The approach is very clever. Notice that if this problem was about finding maximum sum subarray, then a negative number would break the contiguous array. Here, what it does is that it makes our maximum product minimum when we see a negative number and vice versa. We keep track of maximum and minimum we have so far and check if we have a negative number. If so swap our max and min. Then, find the local maximum and minimum between current number and multiplying that number with our current max or min. After that, update our global max value and keep doing this for all values in the array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">maxProduct</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">,</span> <span class="n">imax</span> <span class="o">=</span> <span class="n">max</span><span class="o">,</span> <span class="n">imin</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">imax</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">imax</span> <span class="o">=</span> <span class="n">imin</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">imin</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">imax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">imax</span> <span class="o">*</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">imin</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">imin</span> <span class="o">*</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">imax</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-tree-right-side-viewhttpsleetcodecomproblemsbinary-tree-right-side-viewa-namebinary-tree-right-side-viewa"><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener noreffer ">Binary Tree Right Side View</a><a name="binary-tree-right-side-view"></a></h3>
<p>Runtime: 1 ms, faster than 95.45% of Java online submissions for Binary Tree Right Side View.</p>
<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Binary Tree Right Side View.</p>
<p>This is an interesting problem cause initially, I thought we would always have a complete binary tree and I made my initial solution oriented towards it. But then I saw that it doesn&rsquo;t say that anywhere and it could be any kind of binary tree. So it got me thinking towards a more generalized approach. Notice that to get a right side view of the binary tree, we only need the last value at any given level and put it into the list. So we maintain a queue and also the number of elements we enqueue at each stage. Initially, we put the root node in our queue and our enqueue count is 1. We dequeue exactly that many elements and again enqueue each of those dequeued node&rsquo;s children. Notice that I am using the variable <code>newEnqueued</code> to keep track of newly enqueued elements. Lastly, we need to check if we dequeued the last element. If so, that must be a part of the solution since it has to be the rightmost element at that level, so I add it to the list. Update <code>enqueued</code> to the new value and repeat until our queue isn&rsquo;t empty.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">rightSideView</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">enqueued</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">newEnqueued</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">enqueued</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">TreeNode</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">enqueued</span><span class="o">-</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">u</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">enqueued</span> <span class="o">=</span> <span class="n">newEnqueued</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-minimum-in-rotated-sorted-arrayhttpsleetcodecomproblemsfind-minimum-in-rotated-sorted-arraysubmissionsa-namefind-minimum-in-rotated-sorted-arraya"><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/" target="_blank" rel="noopener noreffer ">Find Minimum in Rotated Sorted Array</a><a name="find-minimum-in-rotated-sorted-array"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<p>Memory Usage: 38.6 MB, less than 77.27% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMin</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>									<span class="c1">// Base case.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>		<span class="c1">// While we are in the ascending order half,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>						<span class="c1">// Find the middle element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span>			<span class="c1">// If mid element &gt;= left element, then our min
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>								<span class="c1">// must be in the right half.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>									<span class="c1">// otherwise min in the left half.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>										<span class="c1">// left points to minimum element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binary-search-tree-iteratorhttpsleetcodecomproblemsbinary-search-tree-iteratora-namebinary-search-tree-iteratora"><a href="https://leetcode.com/problems/binary-search-tree-iterator/" target="_blank" rel="noopener noreffer ">Binary Search Tree Iterator</a><a name="binary-search-tree-iterator"></a></h3>
<p>Runtime: 15 ms, faster than 99.74% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator.</p>
<p>Logic is same as your In-Order traversal of any Binary Tree, but store the node values you visit in any data structure. Here I am using an ArrayList for storing each of the visited node&rsquo;s value. Maintain <code>idx</code> value to keep track of which value to return. <code>hasNext()</code> method returns true as long as <code>idx &lt; list.size()</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">BSTIterator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BSTIterator</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">traverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">traverse</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** @return the next smallest number */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">idx</span><span class="o">++);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/** @return whether we have a next smallest number */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">idx</span> <span class="o">!=</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="find-peak-elementhttpsleetcodecomproblemsfind-peak-elementa-namefind-peak-elementa"><a href="https://leetcode.com/problems/find-peak-element/" target="_blank" rel="noopener noreffer ">Find Peak Element</a><a name="find-peak-element"></a></h3>
<p>This question was asked to me for my internship at Yahoo! The idea is simple, we want any one of the peak. So to achieve <code>O(log n)</code> time, we have to mimic binary search algorithm. We look at the middle element and check it&rsquo;s neighbor, if it&rsquo;s greater than the middle element, then we know we will have atleast one peak on the right side. Why? Think what could happen. We know that the element next to middle is greater than it, so there are two possibilities on the right side, either elements keep increasing to the right of the middle&rsquo;s next element or we might go up till a particular index and then go down. So in any case, we will have a peak on the right side. On the other case, if the element on the right side is smaller than the middle, then we know that the left half including the middle will have the peak cause middle is already greater than middle&rsquo;s right, so we might have middle as the peak itself.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">findPeakElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">0</span><span class="o">],</span> <span class="n">high</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">,</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">low</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="next-permutationhttpsleetcodecomproblemsnext-permutationa-namenext-permutationa"><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="noopener noreffer ">Next Permutation</a><a name="next-permutation"></a></h3>
<p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Next Permutation.</p>
<p>Memory Usage: 40.3 MB, less than 47.00% of Java online submissions for Next Permutation.</p>
<p>This one was quite interesting in the sense it seems difficult but is very simple once you try out a few example. If we want to find the next lexicographical greater number, then we need to find a particular index from the right side of the array such that the number after it is greater than itself, because by swapping them would give us a next larger number. So what I first do is find the index of the number such that <code>num[idx] &gt; num[idx-1]</code>. We know at this point that all the numbers after that index are reverse sorted, so we need to fix it and sort them in increasing order because lexicographical order demands all the numbers in increasing manner. Example, say <code>nums = [2,3,1,4,2,1,0]</code>. You can see that that the next number should be <code>[2,3,2,0,1,1,4]</code>. Notice that I replaced the number at index 2 with the first number which is greater than it if the array after index 2 was sorted. This gaurantees us a larger lexicographical number. So the first while loop finds us that index number and then I reverse the array after it. Once you reverse it, we should expect the <code>nums</code> array to look like <code>[2,3,1,0,1,2,4]</code>. Note that now we need to find the number larger than the number at index 2, which is 1 in this case. The first number greater than 1 is 2, so the second while loop finds it and then we simply swap them to give us the next larger lexicographically greater number =&gt; <code>[2,3,2,0,1,1,4].</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">nextPermutation</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">idx</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">        <span class="o">--</span><span class="n">idx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">idx</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">idx</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">idx</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">val</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">idx</span><span class="o">-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="o">[</span><span class="n">idx1</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">arr</span><span class="o">[</span><span class="n">idx2</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">start</span><span class="o">++,</span> <span class="n">end</span><span class="o">--);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="search-in-rotated-sorted-arrayhttpsleetcodecomproblemssearch-in-rotated-sorted-arraya-namesearch-in-rotated-sorted-arraya"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener noreffer ">Search in Rotated Sorted Array</a><a name="search-in-rotated-sorted-array"></a></h3>
<p>The idea is same as binary search except you need to keep track of which half to stay in. We compute the middle index and the value at that index. If the middle value is the target, then return that index. Otherwise, find the correct half. If the number on the left side is &lt; middle value then we know that between the left and middle index, values are increasing. We only need to now check if target is &lt; middle value, if so we need to adjust our right pointer otherwise adjust the left pointer. If left value is not &lt; middle value then we are at a shift where the array is pivoted. We again need to confirm now which half to take. There would be some index <code>i</code> such that <code>nums[left] &gt; nums[i] &lt; nums[mid]</code> and value are increasing upto <code>i</code> and shifts from index <code>i</code> onwards. In this case, we again need to adjust our index pointers and we repeat this loop until <code>left &lt;= right</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">search</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="o">)/</span><span class="n">2</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">midVal</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">midVal</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">midVal</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">midVal</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">midVal</span> <span class="o">&amp;&amp;</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="transpose-matrixhttpsleetcodecomproblemstranspose-matrixa-nametranspose-matrixa"><a href="https://leetcode.com/problems/transpose-matrix/" target="_blank" rel="noopener noreffer ">Transpose Matrix</a><a name="transpose-matrix"></a></h3>
<p>Pretty straightforward. Create matrix B of opposite dimensions to those of A. We maintain <code>br</code> and <code>bc</code> which tracks row and columns of B. We iterate over each element of A and put it in <code>B[br][bc]</code> and then ideally we would increment <code>bc</code> for an exact copy, but since we want transpose, we increment <code>br</code> and then reset it to 0 if we fill all the values in a row and increment column count, giving us the tranpose of the matrix.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">transpose</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">A</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">[][]</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">][</span><span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">br</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">A</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">B</span><span class="o">[</span><span class="n">br</span><span class="o">][</span><span class="n">bc</span><span class="o">]</span> <span class="o">=</span> <span class="n">A</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(++</span><span class="n">br</span> <span class="o">==</span> <span class="n">B</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">br</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">bc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">B</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="merge-k-sorted-listshttpsleetcodecomproblemsmerge-k-sorted-listssubmissionsa-namemerge-k-sorted-listsa"><a href="https://leetcode.com/problems/merge-k-sorted-lists/submissions/" target="_blank" rel="noopener noreffer ">Merge K Sorted Lists</a><a name="merge-k-sorted-lists"></a></h3>
<p>This was an onsite interview question at ThousandEyes. The idea is simple. Basically, we have multiple sorted lists so we have access to one value at a time, that is head of the lists initially and the consecutive nodes. So we need to fetch the minimum element out of all of them in constant time. The easiest way for us to do this is to use a PriorityQueue and define the logic of comparision of two ListNodes. Then, we add all the nodes inside the PQ and build our resulting List. Fetch the minimum valued ListNode and add it to our list. Then we also need to update that particular list&rsquo;s head, so we  add that list&rsquo;s next in the PQ so the next time it is fetched, we fetch the correct node of the list. Repeat this until the list is empty and return dummy&rsquo;s next node.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">mergeKLists</span><span class="o">(</span><span class="n">ListNode</span><span class="o">[]</span> <span class="n">lists</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">lists</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PriorityQueue</span><span class="o">&lt;</span><span class="n">ListNode</span><span class="o">&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PriorityQueue</span><span class="o">&lt;&gt;(</span><span class="n">lists</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="o">(</span><span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span><span class="o">.</span><span class="na">val</span> <span class="o">-</span> <span class="n">n2</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">ListNode</span> <span class="n">ln</span><span class="o">:</span> <span class="n">lists</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">ln</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ln</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(-</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNode</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ret</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Data Structures and Algorithms for Coding Interview</title>
    <link>https://samirpaul.netlify.app/data-structures-and-algorithms-for-coding-interview/</link>
    <pubDate>Thu, 13 Oct 2022 12:44:34 &#43;0000</pubDate>
    <author>Samir Paul</author>
    <guid>https://samirpaul.netlify.app/data-structures-and-algorithms-for-coding-interview/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/SamirPaulb/assets/main/dsa-in-python.jpg" referrerpolicy="no-referrer">
            </div><div align="center">
<h1>Data Structures & Algorithms for Coding Interview</h1>
<b><i>If you appreciate my work, please</i></b> 🌟 <b><i>this repository. It motivates me. 🚀🚀</i></b>
</div>
<div align="center">
<b>View this repository with improved user experience▶️https://samirpaul1.github.io/DSAlgo</b>🚀
</div>
<p>In this repository, I have stored solutions to various problems and concepts of <strong>Data Structures and Algorithms</strong> in Python3 in a structured manner.✨</p>
<p>✔️  <ins><em><strong>Topics Covered</strong></em></ins>:</p>
<ul>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming" target="_blank" rel="noopener noreffer "><strong>Dynamic Programming</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/03_Sorting-Algorithms" target="_blank" rel="noopener noreffer "><strong>Sorting Algorithms</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/04_LinkedList" target="_blank" rel="noopener noreffer "><strong>LinkedList</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/05_Object-Oriented-Programming" target="_blank" rel="noopener noreffer "><strong>Object-Oriented Programming</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/06_Binary-Trees" target="_blank" rel="noopener noreffer "><strong>Binary Trees</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/07_Graph" target="_blank" rel="noopener noreffer "><strong>Graph Algorithms</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/08_Heap" target="_blank" rel="noopener noreffer "><strong>Heap</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/09_Matrix" target="_blank" rel="noopener noreffer "><strong>Matrix</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/10_Trie" target="_blank" rel="noopener noreffer "><strong>Trie</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/11_Binary-Search" target="_blank" rel="noopener noreffer "><strong>Binary Search</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/12_Backtracking" target="_blank" rel="noopener noreffer "><strong>Backtracking</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/13_Stack" target="_blank" rel="noopener noreffer "><strong>Stack</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/14_Queue" target="_blank" rel="noopener noreffer "><strong>Queue</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/15_Greedy" target="_blank" rel="noopener noreffer "><strong>Greedy</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/16_String" target="_blank" rel="noopener noreffer "><strong>String</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/17_Bit-Manipulation" target="_blank" rel="noopener noreffer "><strong>Bit Manipulation</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/18_Array" target="_blank" rel="noopener noreffer "><strong>Array</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/19_HashMap" target="_blank" rel="noopener noreffer "><strong>HashMap</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/20_DFS-BFS" target="_blank" rel="noopener noreffer "><strong>DFS BFS</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/21_Two-Pointers" target="_blank" rel="noopener noreffer "><strong>Two Pointers</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/22_Math" target="_blank" rel="noopener noreffer "><strong>Math</strong></a></li>
<li><i class="far fa-check-square fa-fw" aria-hidden="true"></i> <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/23_Recursion" target="_blank" rel="noopener noreffer "><strong>Recursion</strong></a></li>
</ul>
<p>In various folders of the above topics, you can find questions and concepts related to that topic.</p>
<ul>
<li>
<p>In the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming" target="_blank" rel="noopener noreffer ">Dynamic Programming</a> section, you can find all the questions covered and not covered in <a href="https://www.youtube.com/c/AdityaVermaTheProgrammingLord" target="_blank" rel="noopener noreffer ">Aditya Verma&rsquo;s</a> <a href="https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go" target="_blank" rel="noopener noreffer ">dynamic programming playlist</a> folder-wise with my <a href="https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf" target="_blank" rel="noopener noreffer ">handwritten notes</a>.✍️</p>
</li>
<li>
<p>If you are preparing for an interview from <a href="https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/" target="_blank" rel="noopener noreffer ">Striver’s SDE Sheet</a> then the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice" target="_blank" rel="noopener noreffer "><strong>30-Days-SDE-Sheet-Practice</strong></a> will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.🎯</p>
</li>
<li>
<p>In the  <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet" target="_blank" rel="noopener noreffer "><strong>Questions-Sheet</strong></a> directory, you can find questions asked by top product-based companies.</p>
</li>
<li>
<p>There is a collection of books and pdfs on various important computer science fundamentals in the <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs" target="_blank" rel="noopener noreffer "><strong>BOOKS-and-PDFs</strong></a> directory.📚</p>
</li>
</ul>
<p>I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.💻</p>
<p><strong>Things you can contribute to:</strong></p>
<ul>
<li>Update the existing solution with a better one (better complexity).</li>
<li>Add new questions and solutions in <code>Python3</code> to the respective directory.</li>
<li>Add new resources to <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs" target="_blank" rel="noopener noreffer ">BOOKS-and-PDFs</a> &amp; <a href="https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet" target="_blank" rel="noopener noreffer ">Questions-Sheet</a>.</li>
<li>Solve issues raised by other people or yourself.</li>
<li>Provide well-documented source code with detailed explanations.</li>
</ul>
<hr>
<h3 id="list-of-important-questions">List of Important Questions:✨</h3>
<p>The following list of questions was recommended by <a href="https://www.youtube.com/c/LoveBabbar1" target="_blank" rel="noopener noreffer ">Love Babbar</a> on this <a href="https://youtu.be/4iFALQ1ACdA" target="_blank" rel="noopener noreffer ">video</a>. I have documented all those questions here.✌️</p>
<table>
<thead>
<tr>
<th>Topic</th>
<th>Important DSA Questions</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr>
<td>Topic:</td>
<td>Problem:</td>
<td>Related Link</td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Array</td>
<td>Reverse the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the maximum and minimum element in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the &ldquo;Kth&rdquo; max and min element of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Move all the negative elements to one side of the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the Union and Intersection of the two sorted arrays.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Write a program to cyclically rotate an array by one.</td>
<td><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/rotate-array/</a></td>
</tr>
<tr>
<td>Array</td>
<td>find Largest sum contiguous Subarray [V. IMP]</td>
<td><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/maximum-subarray/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Minimise the maximum difference between heights [V.IMP]</td>
<td><a href="https://leetcode.com/problems/smallest-range-ii/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/smallest-range-ii/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Minimum no. of Jumps to reach end of an array</td>
<td><a href="https://leetcode.com/problems/jump-game" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/jump-game</a></td>
</tr>
<tr>
<td>Array</td>
<td>find duplicate in an array of N+1 Integers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Merge 2 sorted arrays without using Extra space.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Kadane&rsquo;s Algorithm</td>
<td><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/maximum-subarray/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Merge Intervals</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Next Permutation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Count Inversion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Best time to buy and Sell stock</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find all pairs on integer array whose sum is equal to given number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find common elements In 3 sorted arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Rearrange the array in alternating positive and negative items with O(1) extra space</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find if there is any subarray with sum equal to 0</td>
<td><a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/subarray-sum-equals-k/</a></td>
</tr>
<tr>
<td>Array</td>
<td>Find factorial of a large number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>find maximum product subarray</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find longest coinsecutive subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Given an array of size n and a number k, fin all elements that appear more than &quot; n/k &quot; times.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Maximum profit by buying and selling a share atmost twice</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find whether an array is a subset of another array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Find the triplet that sum to a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Trapping Rain water problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Chocolate Distribution problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Smallest Subarray with sum greater than a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Three way partitioning of an array around a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Minimum swaps required bring elements less equal K together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Minimum no. of operations required to make an array palindrome</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Median of 2 sorted arrays of equal size</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Median of 2 sorted arrays of different size</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Array</td>
<td>Subarray Sums Divisible by K</td>
<td></td>
</tr>
<tr>
<td>Array</td>
<td>Continuous Subarray Sum</td>
<td></td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>&lt;-&gt;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Matrix</td>
<td>Spiral traversal on a Matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Search an element in a matriix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Find median in a row wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Find row with maximum no. of 1&rsquo;s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Print elements in sorted order using row-column wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Largest Rectangle in Histogram</td>
<td></td>
</tr>
<tr>
<td>Matrix</td>
<td>Maximum size rectangle</td>
<td><a href="https://practice.geeksforgeeks.org/problems/max-rectangle/1" target="_blank" rel="noopener noreffer ">https://practice.geeksforgeeks.org/problems/max-rectangle/1</a></td>
</tr>
<tr>
<td>Matrix</td>
<td>Find a specific pair in matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Rotate matrix by 90 degrees</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Kth smallest element in a row-cpumn wise sorted matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Matrix</td>
<td>Common elements in all rows of a given matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Reverse a String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Check whether a String is Palindrome or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find Duplicate characters in a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Why strings are immutable in Java?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a Code to check whether one string is a rotation of another</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a Program to check whether a string is a valid shuffle of two strings or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count and Say problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find Longest Recurring Subsequence in String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Print all Subsequences of a string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Print all the permutations of the given string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Split the Binary string into two substring with equal 0’s and 1’s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Word Wrap Problem [VERY IMP].</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>EDIT Distance [Very Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find next greater number with same set of digits. [Very Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Balanced Parenthesis problem.[Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Word break Problem[ Very Imp]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Rabin Karp Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>KMP Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Convert a Sentence into its equivalent mobile numeric keypad sequence.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum number of bracket reversals needed to make an expression balanced.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count All Palindromic Subsequence in a given String.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Count of number of given string in 2D character array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Search a Word in a 2D Grid of characters.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Boyer Moore Algorithm for Pattern Searching.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Converting Roman Numerals to Decimal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Longest Common Prefix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Number of flips to make binary string alternate</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the first repeated word in string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum number of swaps for bracket balancing.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the longest common subsequence between two strings.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Program to generate all possible valid IP addresses from given  string.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Write a program tofind the smallest window that contains all characters of string itself.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Rearrange characters in a string such that no two adjacent are same</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Minimum characters to be added at front to make string palindrome</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Given a sequence of words, print all anagrams together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Find the smallest window in a string containing all characters of another string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Recursively remove all adjacent duplicates</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>String matching where one string contains wildcard characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Function to find Number of customers who could not get a computer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Transform One String to Another using Minimum Number of Given Operation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Check if two given strings are isomorphic to each other</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>String</td>
<td>Recursively print all sentences that can be formed from list of word lists</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find first and last positions of an element in a sorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find a Fixed Point (Value equal to index) in a given array</td>
<td><a href="https://leetcode.com/problems/find-pivot-index/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/find-pivot-index/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Search in a rotated sorted array</td>
<td><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>square root of an integer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Maximum and minimum of an array using minimum number of comparisons</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Optimum location of point to minimize total distance</td>
<td><a href="https://leetcode.com/problems/best-meeting-point/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/best-meeting-point/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find the repeating and the missing</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find majority element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Searching in an array where adjacent differ by at most k</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find a pair with a given difference</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>find four elements that sum to a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>maximum sum such that no 2 elements are adjacent</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Count triplet with sum smaller than a given value</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>merge 2 sorted arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>print all subarrays with 0 sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Product array Puzzle</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Sort array according to count of set bits</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>minimum no. of swaps required to sort the array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Bishu and Soldiers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Rasta and Kheshtak</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Kth smallest number again</td>
<td>Using Min Heap</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Find pivot element in a sorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>K-th Element of Two Sorted Arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Aggressive cows</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Book Allocation Problem</td>
<td><a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>EKOSPOJ:</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Job Scheduling Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Missing Number in AP</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Smallest number with atleastn trailing zeroes infactorial</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Painters Partition Problem:</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>ROTI-Prata SPOJ</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>DoubleHelix SPOJ</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Subset Sums</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Findthe inversion count</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Implement Merge-sort in-place</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Searching &amp; Sorting</td>
<td>Partitioning and Sorting Arrays with Many Repeated Entries</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to reverse the Linked List. (Both Iterative and recursive)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Reverse a Linked List in group of Given Size. [Very Imp]</td>
<td><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a program to Detect loop in a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a program to Delete loop in a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the starting point of the loop.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates in a sorted Linked List.</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates from Sorted List II</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Remove Duplicates in a Un-sorted Linked List.</td>
<td></td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to Move the last element to Front in a Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Add “1” to a number represented as a Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Add two numbers represented by linked lists.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Intersection of two Sorted Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Intersection Point of two Linked Lists.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Merge Sort For Linked lists.[Very Important]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Quicksort for Linked Lists.[Very Important]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the middle Element of a linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Check if a linked list is a circular linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Split a Circular linked list into two halves.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Write a Program to check whether the Singly Linked list is a palindrome or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Deletion from a Circular Linked List.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Reverse a Doubly Linked list.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find pairs with a given sum in a DLL.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Count triplets in a sorted DLL whose sum is equal to given value “X”.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Sort a “k”sorted Doubly Linked list.[Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Rotate DoublyLinked list by N nodes.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Rotate a Doubly Linked list in group of Given Size.[Very IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Can we reverse a linked list in less than O(n) ?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Flatten a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Sort a LL of 0&rsquo;s, 1&rsquo;s and 2&rsquo;s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Clone a linked list with next and random pointer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Merge K sorted Linked list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Multiply 2 no. represented by LL</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Delete nodes which have a greater value on right side</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Segregate even and odd nodes in a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Program for n’th node from the end of a Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>Find the first non-repeating character from a stream of characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>level order traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Reverse Level Order traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Height of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Diameter of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Mirror of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Inorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Preorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Postorder Traversal of a tree both using recursion and Iteration</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Left View of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Right View of Tree</td>
<td><a href="https://leetcode.com/problems/binary-tree-right-side-view/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/binary-tree-right-side-view/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Top View of a tree</td>
<td><a href="https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Bottom View of a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Zig-Zag traversal of a binary tree</td>
<td><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if a tree is balanced or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Diagnol Traversal of a Binary tree</td>
<td><a href="https://www.youtube.com/watch?v=e9ZGxH1y_PE" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=e9ZGxH1y_PE</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Boundary traversal of a Binary tree</td>
<td><a href="https://www.youtube.com/watch?v=0ca1nvR0be4" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=0ca1nvR0be4</a></td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Construct Binary Tree from String with Bracket Representation</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Convert Binary tree into Doubly Linked List</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Convert Binary tree into Sum tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Construct Binary tree from Inorder and preorder traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find minimum swaps required to convert a Binary tree into BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if Binary tree is Sum tree or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if all leaf nodes are at same level or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if 2 trees are mirror or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Sum of Nodes on the Longest path from root to leaf node</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Check if given graph is tree or not.  [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find Largest subtree sum in a tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Maximum Sum of nodes in Binary tree such that no two are adjacent</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Print all &ldquo;K&rdquo; Sum paths in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find LCA in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find distance between 2 nodes in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Kth Ancestor of node in a Binary tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Find all Duplicate subtrees in a Binary tree [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Tree Isomorphism Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Trees</td>
<td>Copy List with Random Pointer</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Fina a value in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Deletion of a node in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find min and max value in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find inorder successor and inorder predecessor in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check if a tree is a BST or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Populate Inorder successor of all nodes</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find LCA  of 2 nodes in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Construct BST from preorder traversal</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Convert Binary tree into BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Convert a normal BST into a Balanced BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Merge two BST [ V.V.V&gt;IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find Kth largest element in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find Kth smallest element in a BST</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Count pairs from 2 BST whose sum is equal to given value &ldquo;X&rdquo;</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Find the median of BST in O(n) time and O(1) space</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Count BST ndoes that lie in a given range</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Replace every element with the least greater element on its right</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Given &ldquo;n&rdquo; appointments, find the conflicting appointments</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check preorder is valid or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check whether BST contains Dead end</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Largest BST in a Binary Tree [ V.V.V.V.V IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Flatten BST to sorted list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Check Completeness of a Binary Tree</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Non-overlapping Intervals</td>
<td></td>
</tr>
<tr>
<td>Binary Search Trees</td>
<td>Largest BST in Binary Tree</td>
<td><a href="https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/</a></td>
</tr>
<tr>
<td>Greedy</td>
<td>Activity Selection Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Job SequencingProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Huffman Coding</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Water Connection Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Fractional Knapsack Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Greedy Algorithm to find Minimum number of Coins</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum trains for which stoppage can be provided</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Platforms Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Buy Maximum Stocks if i stocks can be bought on i-th day</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find the minimum and maximum amount to buy all N candies</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimize Cash Flow among a given set of friends who have borrowed money from each other</td>
<td>Optimal Account Balancing</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Cost to cut a board into squares</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Number of Islands</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find maximum meetings in one room</td>
<td><a href="https://www.lintcode.com/problem/919" target="_blank" rel="noopener noreffer ">https://www.lintcode.com/problem/919</a></td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum product subset of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize array sum after K negations</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize the sum of arr[i]*i</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum sum of absolute difference of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximize sum of consecutive differences in a circular array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum sum of absolute difference of pairs of two arrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Program for Shortest Job First (or SJF) CPU Scheduling</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Program for Least Recently Used (LRU) Page Replacement algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Smallest subset with sum greater than all other elements</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Chocolate Distribution Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>DEFKIN -Defense of a Kingdom</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>DIEHARD -DIE HARD</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>GERGOVIA -Wine trading in Gergovia</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Picking Up Chicks</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>CHOCOLA –Chocolate</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>ARRANGE -Arranging Amplifiers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>K Centers Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Minimum Cost of ropes</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find smallest number with given number of digits and sum of digits</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Rearrange characters in a string such that no two adjacent are same</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Find maximum sum possible equal sum of three stacks</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Greedy</td>
<td>Maximum Sub-String after at most K changes</td>
<td><a href="https://leetcode.com/problems/maximize-the-confusion-of-an-exam/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/maximize-the-confusion-of-an-exam/</a></td>
</tr>
<tr>
<td>BackTracking</td>
<td>Rat in a maze Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Printing all solutions in N-Queen Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Word Break Problem using Backtracking</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Remove Invalid Parentheses</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Sudoku Solver</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>m Coloring Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all palindromic partitions of a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Subset Sum Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>The Knight’s tour problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Tug of War</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find shortest safe route in a path with landmines</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Combinational Sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find Maximum number possible by doing at-most K swaps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all permutations of a string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find if there is a path of more than k length from a source</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Longest Possible Route in a Matrix with Hurdles</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Print all possible paths from top left to bottom right of a mXn matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Partition of a set intoK subsets with equal sum</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>BackTracking</td>
<td>Find the K-th Permutation Sequence of first N natural numbers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack from Scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Queue from Scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement 2 stack in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>find the middle element of a stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement &ldquo;N&rdquo; stacks in an Array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Check the expression has valid or Balanced parenthesis or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a String using Stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Design a Stack that supports getMin() in O(1) time and O(1) extra space.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Find the next Greater element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>The celebrity Problem</td>
<td><a href="https://www.youtube.com/watch?v=CiiXBvrX-5A" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=CiiXBvrX-5A</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Arithmetic Expression evaluation</td>
<td><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener noreffer ">https://leetcode.com/problems/evaluate-reverse-polish-notation/</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Evaluation of Postfix expression</td>
<td><a href="https://www.youtube.com/watch?v=422Q_yx2yA8" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=422Q_yx2yA8</a></td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement a method to insert an element at its bottom without using any other data structure.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a stack using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Sort a Stack using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Merge Overlapping Intervals</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Largest rectangular Area in Histogram</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Length of the Longest Valid Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Expression contains redundant bracket or not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack using Queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Stack using Deque</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Stack Permutations (Check if an array is stack permutation of other)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement Queue using Stack</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement &ldquo;n&rdquo; queue in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Implement a Circular queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>LRU Cache Implementationa</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse a Queue using recursion</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Reverse the first “K” elements of a queue</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Interleave the first half of the queue with second half</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Find the first circular tour that visits all Petrol Pumps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Minimum time required to rot all oranges</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Distance of nearest cell having 1 in a binary matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>First negative integer in every window of size “k”</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Check if all levels of two trees are anagrams or not.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Sum of minimum and maximum elements of all subarrays of size “k”.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Minimum sum of squares of character counts in a given string after removing “k” characters.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Queue based approach or first non-repeating character in a stream.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Stacks &amp; Queues</td>
<td>Next Smaller Element</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Implement a Maxheap/MinHeap using arrays and recursion.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Sort an Array using heap. (HeapSort)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Maximum of all subarrays of size k.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>“k” largest element in an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Kth smallest and largest element in an unsorted array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge “K” sorted arrays. [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge 2 Binary Max Heaps</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Kth largest sum continuous subarrays</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Leetcode- reorganize strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Merge “K” Sorted Linked Lists [V.IMP]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Smallest range in “K” Lists</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Median in a stream of Integers</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Check if a Binary Tree is Heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Connect “n” ropes with minimum cost</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Convert BST to Min Heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Convert min heap to max heap</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Rearrange characters in a string such that no two adjacent are same.</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Heap</td>
<td>Minimum sum of two numbers formed from digits of an array</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Create a Graph, print it</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement BFS algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Cycle in Directed Graph using BFS/DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Cycle in UnDirected Graph using BFS/DFS Algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Search in a Maze</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum Step by Knight</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>flood fill algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Clone a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Making wired Connections</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>word Ladder</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Dijkstra algo</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Topological Sort</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum time taken by each job to be completed given by a Directed Acyclic Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find whether it is possible to finish all tasks or not from given dependencies</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find the no. of Isalnds</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Given a sorted Dictionary of an Alien Language, find order of characters</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Kruksal’sAlgorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Prim’s Algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Total no. of Spanning tree in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Bellman Ford Algorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Implement Floyd warshallAlgorithm</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Travelling Salesman Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Graph ColouringProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Snake and Ladders Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find bridge in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Count Strongly connected Components(Kosaraju Algo)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Check whether a graph is Bipartite or Not</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Detect Negative cycle in a graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Longest path in a Directed Acyclic Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Journey to the Moon</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Cheapest Flights Within K Stops</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Oliver and the Game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Water Jug problem using BFS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Water Jug problem using BFS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Find if there is a path of more thank length from a source</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>M-ColouringProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimum edges to reverse o make path from source to destination</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Paths to travel each nodes using each edge(Seven Bridges)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Vertex Cover Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Chinese Postman or Route Inspection</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Number of Triangles in a Directed and Undirected Graph</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Minimise the cashflow among a given set of friends who have borrowed money from each other</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Graph</td>
<td>Two Clique Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Construct a trie from scratch</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Find shortest unique prefix for every word in a given list</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Word Break Problem</td>
<td>(Trie solution)</td>
</tr>
<tr>
<td>Trie</td>
<td>Given a sequence of words, print all anagrams together</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Implement a Phone Directory</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Trie</td>
<td>Print unique rows in a given boolean matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Coin ChangeProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Knapsack Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Binomial CoefficientProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Permutation CoefficientProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Program for nth Catalan Number</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Matrix Chain Multiplication</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Edit Distance</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Subset Sum Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Friends Pairing Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Gold Mine Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Assembly Line SchedulingProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Painting the Fenceproblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximize The Cut Segments</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Common Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Repeated Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Increasing Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Space Optimized Solution of LCS</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>LCS (Longest Common Subsequence) of three strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Sum Increasing Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count all subsequences having product less than K</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest subsequence such that difference between adjacent is one</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum subsequence sum such that no three are consecutive</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Egg Dropping Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Length Chain of Pairs</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum size square sub-matrix with all 1s</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum sum of pairs with specific difference</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Min Cost PathProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum difference of zeros and ones in binary string</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum number of jumps to reach end</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum cost to fill given weight in a bag</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Minimum removals from array to make max –min &lt;= K</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Common Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count number of ways to reacha given score in a game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count Balanced Binary Trees of Height h</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>LargestSum Contiguous Subarray [V&gt;V&gt;V&gt;V IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Smallest sum contiguous subarray</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Unbounded Knapsack (Repetition of items allowed)</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Word Break Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest Independent Set Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Partition problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Palindromic Subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count All Palindromic Subsequence in a given String</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest Palindromic Substring</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Longest alternating subsequence</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Weighted Job Scheduling</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Coin game winner where every player has three choices</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum profit by buying and selling a share at most twice [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Optimal Strategy for a Game</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Optimal Binary Search Tree</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Palindrome PartitioningProblem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Word Wrap Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Mobile Numeric Keypad Problem [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Boolean Parenthesization Problem</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest rectangular sub-matrix whose sum is 0</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Largest area rectangular sub-matrix with equal number of 1’s and 0’s [ IMP ]</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum sum rectangle in a 2D matrix</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum profit by buying and selling a share at most k times</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Find if a string is interleaved of two other strings</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Maximum Length of Pair Chain</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Partition Equal Subset Sum</td>
<td><a href="https://leetcode.com/submissions/detail/561942165/" target="_blank" rel="noopener noreffer ">https://leetcode.com/submissions/detail/561942165/</a></td>
</tr>
<tr>
<td>Dynamic Programming</td>
<td>Target Sum</td>
<td></td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count set bits in an integer</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Find the two non-repeating elements in an array of repeating elements</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count number of bits to be flipped to convert A to B</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Count total set bits in all numbers from 1 to n</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Program to find whether a no is power of two</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Find position of the only set bit</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Copy set bits in a range</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Divide two integers without using multiplication, division and mod operator</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Calculate square of a number without using *, / and pow()</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Bit Manipulation</td>
<td>Power Set</td>
<td>&lt;-&gt;</td>
</tr>
<tr>
<td>Moore voting algorithm</td>
<td>Majority Element</td>
<td><a href="https://www.youtube.com/watch?v=n5QY3x_GNDg" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=n5QY3x_GNDg</a></td>
</tr>
<tr>
<td>Moore voting algorithm</td>
<td>Majority Element II</td>
<td><a href="https://www.youtube.com/watch?v=yDbkQd9t2ig" target="_blank" rel="noopener noreffer ">https://www.youtube.com/watch?v=yDbkQd9t2ig</a></td>
</tr>
</tbody>
</table>
<hr>
<h3 id="30-days-interview-preparation-planhttpsgithubcomsamirpaul1dsalgotreemain30-days-sde-sheet-practice"><a href="https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice" target="_blank" rel="noopener noreffer ">30 Days Interview Preparation Plan</a>🎯</h3>
<p><b></b>
Originally the below sheet was prepared by <a href="https://www.youtube.com/c/takeUforward" target="_blank" rel="noopener noreffer ">Raj Vikramaditya</a> A.K.A <a href="https://www.youtube.com/channel/UCvEKHATlVq84hm1jduTYm8g" target="_blank" rel="noopener noreffer ">Striver</a>. I have documented this sheet here in markdown.</p>
<p><b> </b></p>
<p>Day1: (Arrays)</p>
<ol>
<li>
<p>Sort an array of 0’s 1’s 2’s without using extra space or sorting algo</p>
</li>
<li>
<p>Repeat and Missing Number</p>
</li>
<li>
<p>Merge two sorted Arrays without extra space</p>
</li>
<li>
<p>Kadane’s Algorithm</p>
</li>
<li>
<p>Merge Overlapping Subintervals</p>
</li>
<li>
<p>Find the duplicate in an array of N+1 integers.</p>
</li>
</ol>
<p>Day2: (Arrays)</p>
<ol>
<li>
<p>Set Matrix Zeros</p>
</li>
<li>
<p>Pascal Triangle</p>
</li>
<li>
<p>Next Permutation</p>
</li>
<li>
<p>Inversion of Array (Using Merge Sort)</p>
</li>
<li>
<p>Stock Buy and Sell</p>
</li>
<li>
<p>Ro tate Matrix</p>
</li>
</ol>
<p>Day3: (Arrays/maths)</p>
<ol>
<li>
<p>Search in a 2D matrix</p>
</li>
<li>
<p>Pow(X,n)</p>
</li>
<li>
<p>Majority Element (&gt;N/2 times)</p>
</li>
<li>
<p>Majority Element (&gt;N/3 times)</p>
</li>
<li>
<p>Grid Unique Paths</p>
</li>
<li>
<p>Reverse Pairs (Leetcode)</p>
</li>
<li>
<p>Go through Puzzles from GFG** (Search on own)</p>
</li>
</ol>
<p>Day4: (Hashing)</p>
<ol>
<li>
<p>2 Sum problem</p>
</li>
<li>
<p>4 Sum problem</p>
</li>
<li>
<p>Longest Consecutive Sequence</p>
</li>
<li>
<p>Largest Subarray with 0 sum</p>
</li>
<li>
<p>Count number of subarrays with given XOR (this clearsa lot of problems)</p>
</li>
<li>
<p>Longest substring without repeat</p>
</li>
</ol>
<p>Day5: (LinkedList)</p>
<ol>
<li>
<p>Reverse a LinkedList</p>
</li>
<li>
<p>Find middle of LinkedList</p>
</li>
<li>
<p>Merge two sorted Linked List</p>
</li>
<li>
<p>Remove N-th node from back of LinkedList</p>
</li>
<li>
<p>Delete a given Node when a node is given. (0(1) solution)</p>
</li>
<li>
<p>Add two numbers as LinkedList</p>
</li>
</ol>
<p>Day6:</p>
<ol>
<li>
<p>Find intersection point of Y LinkedList</p>
</li>
<li>
<p>Detect a cycle in Linked List</p>
</li>
<li>
<p>Reverse a LinkedList in groups of size k</p>
</li>
<li>
<p>Check if a LinkedList is palindrome or not.</p>
</li>
<li>
<p>Find the starting point of the Loop of LinkedList</p>
</li>
<li>
<p>Flattening of a LinkedList**</p>
</li>
<li>
<p>Rotate a LinkedList</p>
</li>
</ol>
<p>Day7: (2-pointer)</p>
<ol>
<li>
<p>Clone a Linked List with random and next pointer</p>
</li>
<li>
<p>3 sum</p>
</li>
<li>
<p>Trapping rainwater</p>
</li>
<li>
<p>Remove Duplicate from Sorted array</p>
</li>
<li>
<p>Max consecutive ones</p>
</li>
</ol>
<p>Day8: (Greedy)</p>
<ol>
<li>
<p>N meeting in one room</p>
</li>
<li>
<p>Minimum number of platforms required for a railway</p>
</li>
<li>
<p>Job sequencing Problem</p>
</li>
<li>
<p>Fractional Knapsack Problem</p>
</li>
<li>
<p>Greedy algorithm to find minimum number of coins</p>
</li>
<li>
<p>Activity Selection (it i</p>
</li>
<li>
<p>s same as N meeting in one room)</p>
</li>
</ol>
<p>Day9 (Recursion):</p>
<ol>
<li>
<p>Subset Sums</p>
</li>
<li>
<p>Subset-II</p>
</li>
<li>
<p>Combination sum-</p>
</li>
<li>
<p>Combination sum</p>
</li>
<li>
<p>Palindrome Partitioning</p>
</li>
<li>
<p>K-th permutation Sequence</p>
</li>
</ol>
<p>Day10: (Recursion and Backtracking)</p>
<ol>
<li>
<p>Print all Permutations of a string/array</p>
</li>
<li>
<p>N queens Problem</p>
</li>
<li>
<p>SudokuSolver</p>
</li>
<li>
<p>M coloring Problem</p>
</li>
<li>
<p>Rat in a Maze</p>
</li>
</ol>
<p>6.Word Break -&gt; print all ways</p>
<p>Day11 : (Binary Search)</p>
<ol>
<li>
<p>N-th root of an integer (use binary search) (square root, cube root, ..)</p>
</li>
<li>
<p>Matrix Median</p>
</li>
<li>
<p>Find the element that appears once in sorted array, and rest element appears twice (Binary search)</p>
</li>
<li>
<p>Search element in a sorted and rotated array/ find pivot where it is rotated**</p>
</li>
<li>
<p>Median of 2 sorted arrays</p>
</li>
<li>
<p>K-th element of two sorted arrays</p>
</li>
<li>
<p>Allocate Minimum Number of Pages</p>
</li>
<li>
<p>Aggressive Cows</p>
</li>
</ol>
<p>Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might
ask)</p>
<ol>
<li>Check if a number if a power of 2 or not in O(1)</li>
<li>Count total set bits</li>
<li>Divide Integers without / operator</li>
<li>Power Set (this is very important)</li>
<li>Find MSB in o(1)</li>
<li>Find square of a number without using multiplication or division operators.</li>
</ol>
<p>Day13: (Stack and Queue)</p>
<ol>
<li>
<p>Implement Stack Using Arrays</p>
</li>
<li>
<p>Implement Queue Using Arrays</p>
</li>
<li>
<p>Implement Stack using Queue (using single queue)</p>
</li>
<li>
<p>Implement Queue using Stack (0(1) amortised method)</p>
</li>
<li>
<p>Check for balanced parentheses</p>
</li>
<li>
<p>Next Greater Element</p>
</li>
<li>
<p>Sort a Stack</p>
</li>
</ol>
<p>Day14:</p>
<ol>
<li>
<p>Next Smaller Element
Similar to previous question next greater element, just do pop the greater elements
out ..</p>
</li>
<li>
<p>LRU cache (vvvv. imp)</p>
</li>
<li>
<p>LFU Cache (Hard, can be ignored)</p>
</li>
</ol>
<p>4.Largest rectangle in histogram (Do the one pass solution)</p>
<p><a href="https://www.youtube.com/watch?v=X0X6G-eWgQ8&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=" target="_blank" rel="noopener noreffer ">Two pass</a></p>
<p><a href="https://www.youtube.com/watch?v=jC_cWLy7jSI&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=" target="_blank" rel="noopener noreffer ">One pass</a></p>
<ol start="5">
<li>Sliding Window maximum <a href="https://www.youtube.com/watch?v=CZQGRp93K4k&amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;index=" target="_blank" rel="noopener noreffer ">video</a></li>
<li>Implement Min Stack</li>
<li>Rotten Orange (Using BFS)</li>
<li>Stock Span Problem</li>
<li>Find maximum of minimums of every window size
10.The Celebrity Problem</li>
</ol>
<p>Day15: (String)</p>
<ol>
<li>Reverse Words in a String</li>
<li>Longest Palindrome in a string</li>
<li>Roman Number to Integer and vice versa</li>
<li>Implement ATOI/STRSTR</li>
<li>Longest Common Prefix</li>
<li>Rabin Karp</li>
</ol>
<p>Day16: (String)</p>
<ol>
<li>Prefix Function/Z-Function</li>
<li>KMP algo / LPS(pi) array</li>
<li>Minimum characters needed to be inserted in the beginning to make it palindromic.</li>
<li>Check for Anagrams</li>
<li>Count and Say</li>
<li>Compare version numbers</li>
</ol>
<p>Day17: (Binary Tree)</p>
<ol>
<li>Inorder Traversal (with recursion and without recursion)</li>
<li>Preorder Traversal (with recursion and without recursion)</li>
<li>Postorder Traversal (with recursion and without recursion)</li>
<li>LeftView Of Binary Tree</li>
<li>Bottom View of Binary Tree</li>
<li>Top View of Binary Tree**</li>
</ol>
<p>Day18: (Binary Tree)</p>
<ol>
<li>Level order Traversal / Level order traversal in spiral form</li>
<li>Height of a Binary Tree</li>
<li>Diameter of Binary Tree</li>
<li>Check if Binary tree is height balanced or not</li>
<li>LCA in Binary Tree</li>
<li>Check if two trees are identical or not**</li>
</ol>
<p>Day 19: (Binary Tree)</p>
<ol>
<li>Maximum path sum</li>
<li>Construct Binary Tree from inorder and preorder</li>
<li>Construct Binary Tree from Inorder and Postorder</li>
<li>Symmetric Binary Tree</li>
<li>Flatten Binary Tree to LinkedList</li>
<li>Check if Binary Tree is mirror of itself or not</li>
</ol>
<p>Day 20: (Binary Search Tree)</p>
<ol>
<li>Populate Next Right pointers of Tree</li>
<li>Search given Key in BST</li>
<li>Construct BST from given keys.</li>
<li>Check is a BT is BST or not</li>
<li>Find LCA of two nodes in BST</li>
<li>Find the inorder predecessor/successor of a given Key in BST.**</li>
</ol>
<p>Day21: (BinarySearchTree)</p>
<ol>
<li>Floor and Ceil in a BST</li>
<li>Find K-th smallest and K-th largest element in BST (2 different Questions)</li>
<li>Find a pair with a given sum in BST</li>
<li>BST iterator</li>
<li>Size of the largest BST in a Binary Tree</li>
<li>Serialize and deserialize Binary Tree</li>
</ol>
<p>Day22: (Mixed Questions)</p>
<ol>
<li>Binary Tree to Double Linked List</li>
<li>Find median in a stream of running integers.</li>
<li>K-th largest element in a stream.</li>
<li>Distinct numbers in Window.</li>
<li>K-th largest element in an unsorted array.</li>
<li>Flood-fill Algorithm</li>
</ol>
<p>Day23: (Graph) <a href="https://www.youtube.com/watch?v=LCrovIMurxY&amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;index=" target="_blank" rel="noopener noreffer ">Theory</a></p>
<ol>
<li>Clone a graph (Not that easy as it looks)</li>
<li>DFS</li>
<li>BFS</li>
<li>Detect A cycle in Undirected Graph/Directed Graph</li>
<li>Topo Sort</li>
<li>Number of islands (Do in Grid and Graph both)</li>
<li>Bipartite Check</li>
</ol>
<p>Day24: (Graph) <a href="https://www.youtube.com/watch?v=LCrovIMurxY&amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;index=" target="_blank" rel="noopener noreffer ">Theory</a></p>
<ol>
<li>SCC(using KosaRaju’s algo)</li>
<li>Djisktra’s Algorithm</li>
<li>Bellman Ford Algo</li>
<li>Floyd Warshall Algorithm</li>
<li>MST using Prim’s Algo</li>
<li>MST using Kruskal’s Algo</li>
</ol>
<p>Day25: (Dynamic Programming)</p>
<ol>
<li>Max Product Subarray</li>
<li>Longest Increasing Subsequence</li>
<li>Longest Common Subsequence</li>
<li>0-1 Knapsack</li>
<li>Edit Distance</li>
<li>Maximum sum increasing subsequence</li>
<li>Matrix Chain Multiplication</li>
</ol>
<p>Day26: (DP)</p>
<ol>
<li>Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find
the maximum path)</li>
<li>Coin change</li>
<li>Subset Sum</li>
<li>Rod Cutting</li>
<li>Egg Dropping</li>
<li>Word Break</li>
<li>Palindrome Partitioning (MCM Variation)</li>
<li>Maximum profit in Job scheduling
<a href="https://docs.google.com/document/d/1sQlRDw6--HwyxeFL7b4kBsOG-Tz7rXMbpWNnfvJErA4/edit" target="_blank" rel="noopener noreffer ">For core revision&lt;/&gt;</a></li>
</ol>
<p>Day27:</p>
<ol>
<li>Revise OS notes that you would have made during your sem</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day28:</p>
<ol>
<li>Revise DBMS notes that you would have made during your semesters.</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day29:</p>
<ol>
<li>Revise CN notes, that you would have made during your sem.</li>
<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>
</ol>
<p>Day30:</p>
<ol>
<li>Make a note of how will your represent your projects, and prepare all questions
related to tech which you have used in your projects. Prepare a note which you can
say for 3-10 minutes when he asks you that say something about the project.</li>
</ol>
<hr>
<h3 id="system-design--concepts">System Design – Concepts📚</h3>
<ol>
<li>
<p><a href="https://github.com/SamirPaul1/system-design-primer" target="_blank" rel="noopener noreffer ">https://github.com/SamirPaul1/system-design-primer</a></p>
</li>
<li>
<p><a href="https://www.freecodecamp.org/news/systems-design-for-interviews/" target="_blank" rel="noopener noreffer ">https://www.freecodecamp.org/news/systems-design-for-interviews/</a></p>
</li>
<li>
<p><a href="https://github.com/shashank88/system_design" target="_blank" rel="noopener noreffer ">https://github.com/shashank88/system_design</a></p>
</li>
</ol>
]]></description>
</item>
<item>
    <title>System Design Course</title>
    <link>https://samirpaul.netlify.app/system-design/</link>
    <pubDate>Tue, 04 Oct 2022 15:58:26 &#43;0800</pubDate>
    <author>Samir Paul</author>
    <guid>https://samirpaul.netlify.app/system-design/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://raw.githubusercontent.com/SamirPaulb/assets/main/Getting-Started-with-System-Design-samirpaulb-assets.png" referrerpolicy="no-referrer">
            </div><h1 id="system-design-course">System Design Course</h1>
<blockquote>
<p>Learn how to design systems at scale and prepare for system design interviews.</p>
</blockquote>
<h1 id="table-of-contents">Table of contents</h1>
<ul>
<li>
<p><strong>Getting Started</strong></p>
<ul>
<li><a href="#what-is-system-design" rel="">What is system design?</a></li>
</ul>
</li>
<li>
<p><strong>Chapter I</strong></p>
<ul>
<li><a href="#ip" rel="">IP</a></li>
<li><a href="#osi-model" rel="">OSI Model</a></li>
<li><a href="#tcp-and-udp" rel="">TCP and UDP</a></li>
<li><a href="#domain-name-system-dns" rel="">Domain Name System (DNS)</a></li>
<li><a href="#load-balancing" rel="">Load Balancing</a></li>
<li><a href="#clustering" rel="">Clustering</a></li>
<li><a href="#caching" rel="">Caching</a></li>
<li><a href="#content-delivery-network-cdn" rel="">Content Delivery Network (CDN)</a></li>
<li><a href="#proxy" rel="">Proxy</a></li>
<li><a href="#availability" rel="">Availability</a></li>
<li><a href="#scalability" rel="">Scalability</a></li>
<li><a href="#storage" rel="">Storage</a></li>
</ul>
</li>
<li>
<p><strong>Chapter II</strong></p>
<ul>
<li><a href="#databases-and-dbms" rel="">Databases and DBMS</a></li>
<li><a href="#sql-databases" rel="">SQL databases</a></li>
<li><a href="#nosql-databases" rel="">NoSQL databases</a></li>
<li><a href="#sql-vs-nosql-databases" rel="">SQL vs NoSQL databases</a></li>
<li><a href="#database-replication" rel="">Database Replication</a></li>
<li><a href="#indexes" rel="">Indexes</a></li>
<li><a href="#normalization-and-denormalization" rel="">Normalization and Denormalization</a></li>
<li><a href="#acid-and-base-consistency-models" rel="">ACID and BASE consistency models</a></li>
<li><a href="#cap-theorem" rel="">CAP theorem</a></li>
<li><a href="#pacelc-theorem" rel="">PACELC Theorem</a></li>
<li><a href="#transactions" rel="">Transactions</a></li>
<li><a href="#distributed-transactions" rel="">Distributed Transactions</a></li>
<li><a href="#sharding" rel="">Sharding</a></li>
<li><a href="#consistent-hashing" rel="">Consistent Hashing</a></li>
<li><a href="#database-federation" rel="">Database Federation</a></li>
</ul>
</li>
<li>
<p><strong>Chapter III</strong></p>
<ul>
<li><a href="#n-tier-architecture" rel="">N-tier architecture</a></li>
<li><a href="#message-brokers" rel="">Message Brokers</a></li>
<li><a href="#message-queues" rel="">Message Queues</a></li>
<li><a href="#publish-subscribe" rel="">Publish-Subscribe</a></li>
<li><a href="#enterprise-service-bus-esb" rel="">Enterprise Service Bus (ESB)</a></li>
<li><a href="#monoliths-and-microservices" rel="">Monoliths and Microservices</a></li>
<li><a href="#event-driven-architecture-eda" rel="">Event-Driven Architecture (EDA)</a></li>
<li><a href="#event-sourcing" rel="">Event Sourcing</a></li>
<li><a href="#command-and-query-responsibility-segregation-cqrs" rel="">Command and Query Responsibility Segregation (CQRS)</a></li>
<li><a href="#api-gateway" rel="">API Gateway</a></li>
<li><a href="#rest-graphql-grpc" rel="">REST, GraphQL, gRPC</a></li>
<li><a href="#long-polling-websockets-server-sent-events-sse" rel="">Long polling, WebSockets, Server-Sent Events (SSE)</a></li>
</ul>
</li>
<li>
<p><strong>Chapter IV</strong></p>
<ul>
<li><a href="#geohashing-and-quadtrees" rel="">Geohashing and Quadtrees</a></li>
<li><a href="#circuit-breaker" rel="">Circuit breaker</a></li>
<li><a href="#rate-limiting" rel="">Rate Limiting</a></li>
<li><a href="#service-discovery" rel="">Service Discovery</a></li>
<li><a href="#sla-slo-sli" rel="">SLA, SLO, SLI</a></li>
<li><a href="#disaster-recovery" rel="">Disaster recovery</a></li>
<li><a href="#virtual-machines-vms-and-containers" rel="">Virtual Machines (VMs) and Containers</a></li>
<li><a href="#oauth-20-and-openid-connect-oidc" rel="">OAuth 2.0 and OpenID Connect (OIDC)</a></li>
<li><a href="#single-sign-on-sso" rel="">Single Sign-On (SSO)</a></li>
<li><a href="#ssl-tls-mtls" rel="">SSL, TLS, mTLS</a></li>
</ul>
</li>
<li>
<p><strong>Chapter V</strong></p>
<ul>
<li><a href="#system-design-interviews" rel="">System Design Interviews</a></li>
<li><a href="#url-shortener" rel="">URL Shortener</a></li>
<li><a href="#whatsapp" rel="">Whatsapp</a></li>
<li><a href="#twitter" rel="">Twitter</a></li>
<li><a href="#netflix" rel="">Netflix</a></li>
<li><a href="#uber" rel="">Uber</a></li>
</ul>
</li>
<li>
<p><strong>Appendix</strong></p>
<ul>
<li><a href="#next-steps" rel="">Next Steps</a></li>
<li><a href="#references" rel="">References</a></li>
</ul>
</li>
</ul>
<h1 id="what-is-system-design">What is system design?</h1>
<p>Before we start this course, let&rsquo;s talk about what even is system design.</p>
<p>System design is the process of defining the architecture, interfaces, and data
for a system that satisfies specific requirements. System design meets the needs
of your business or organization through coherent and efficient systems. It requires
a systematic approach to building and engineering systems. A good system design requires
us to think about everything, from infrastructure all the way down to the data and how it&rsquo;s stored.</p>
<h2 id="why-is-system-design-so-important">Why is System Design so important?</h2>
<p>System design helps us define a solution that meets the business requirements. It is
one of the earliest decisions we can make when building a system. Often it is essential
to think from a high level as these decisions are very difficult to correct later. It
also makes it easier to reason about and manage architectural changes as the system evolves.</p>
<h1 id="ip">IP</h1>
<p>An IP address is a unique address that identifies a device on the internet or a local network. IP stands for <em>&ldquo;Internet Protocol&rdquo;</em>, which is the set of rules governing the format of data sent via the internet or local network.</p>
<p>In essence, IP addresses are the identifier that allows information to be sent between devices on a network. They contain location information and make devices accessible for communication. The internet needs a way to differentiate between different computers, routers, and websites. IP addresses provide a way of doing so and form an essential part of how the internet works.</p>
<h2 id="versions">Versions</h2>
<p>Now, let&rsquo;s learn about the different versions of IP addresses:</p>
<h3 id="ipv4">IPv4</h3>
<p>The original Internet Protocol is IPv4 which uses a 32-bit numeric dot-decimal notation that only allows for around 4 billion IP addresses. Initially, it was more than enough but as internet adoption grew we needed something better.</p>
<p><em>Example: <code>102.22.192.181</code></em></p>
<h3 id="ipv6">IPv6</h3>
<p>IPv6 is a new protocol that was introduced in 1998. Deployment commenced in the mid-2000s and since the internet users have grown exponentially, it is still ongoing.</p>
<p>This new protocol uses 128-bit alphanumeric hexadecimal notation. This means that IPv6 can provide about ~340e+36 IP addresses. That&rsquo;s more than enough to meet the growing demand for years to come.</p>
<p><em>Example: <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></em></p>
<h2 id="types">Types</h2>
<p>Let&rsquo;s discuss types of IP addresses:</p>
<h3 id="public">Public</h3>
<p>A public IP address is an address where one primary address is associated with your whole network. In this type of IP address, each of the connected devices has the same IP address.</p>
<p><em>Example: IP address provided to your router by the ISP.</em></p>
<h3 id="private">Private</h3>
<p>A private IP address is a unique IP number assigned to every device that connects to your internet network, which includes devices like computers, tablets, and smartphones, which are used in your household.</p>
<p><em>Example: IP addresses generated by your home router for your devices.</em></p>
<h3 id="static">Static</h3>
<p>A static IP address does not change and is one that was manually created, as opposed to having been assigned. These addresses are usually more expensive but are more reliable.</p>
<p><em>Example: They are usually used for important things like reliable geo-location services, remote access, server hosting, etc.</em></p>
<h3 id="dynamic">Dynamic</h3>
<p>A dynamic IP address changes from time to time and is not always the same. It has been assigned by a <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol" target="_blank" rel="noopener noreffer ">Dynamic Host Configuration Protocol (DHCP)</a> server. Dynamic IP addresses are the most common type of internet protocol addresses. They are cheaper to deploy and allow us to reuse IP addresses within a network as needed.</p>
<p><em>Example: They are more commonly used for consumer equipment and personal use.</em></p>
<h1 id="osi-model">OSI Model</h1>
<p>The OSI Model is a logical and conceptual model that defines network communication used by systems open to interconnection and communication with other systems. The Open System Interconnection (OSI Model) also defines a logical network and effectively describes computer packet transfer by using various layers of protocols.</p>
<p>The OSI Model can be seen as a universal language for computer networking. It&rsquo;s based on the concept of splitting up a communication system into seven abstract layers, each one stacked upon the last.</p>
<p></p>
<h2 id="why-does-the-osi-model-matter">Why does the OSI model matter?</h2>
<p>The Open System Interconnection (OSI) model has defined the common terminology used in networking discussions and documentation. This allows us to take a very complex communications process apart and evaluate its components.</p>
<p>While this model is not directly implemented in the TCP/IP networks that are most common today, it can still help us do so much more, such as:</p>
<ul>
<li>Make troubleshooting easier and help identify threats across the entire stack.</li>
<li>Encourage hardware manufacturers to create networking products that can communicate with each other over the network.</li>
<li>Essential for developing a security-first mindset.</li>
<li>Separate a complex function into simpler components.</li>
</ul>
<h2 id="layers">Layers</h2>
<p>The seven abstraction layers of the OSI model can be defined as follows, from top to bottom:</p>
<h3 id="application">Application</h3>
<p>This is the only layer that directly interacts with data from the user. Software applications like web browsers and email clients rely on the application layer to initiate communication. But it should be made clear that client software applications are not part of the application layer, rather the application layer is responsible for the protocols and data manipulation that the software relies on to present meaningful data to the user. Application layer protocols include HTTP as well as SMTP.</p>
<h3 id="presentation">Presentation</h3>
<p>The presentation layer is also called the Translation layer. The data from the application layer is extracted here and manipulated as per the required format to transmit over the network. The functions of the presentation layer are translation, encryption/decryption, and compression.</p>
<h3 id="session">Session</h3>
<p>This is the layer responsible for opening and closing communication between the two devices. The time between when the communication is opened and closed is known as the session. The session layer ensures that the session stays open long enough to transfer all the data being exchanged, and then promptly closes the session in order to avoid wasting resources. The session layer also synchronizes data transfer with checkpoints.</p>
<h3 id="transport">Transport</h3>
<p>The transport layer (also known as layer 4) is responsible for end-to-end communication between the two devices. This includes taking data from the session layer and breaking it up into chunks called segments before sending it to the Network layer (layer 3). It is also responsible for reassembling the segments on the receiving device into data the session layer can consume.</p>
<h3 id="network">Network</h3>
<p>The network layer is responsible for facilitating data transfer between two different networks. The network layer breaks up segments from the transport layer into smaller units, called packets, on the sender&rsquo;s device, and reassembles these packets on the receiving device. The network layer also finds the best physical path for the data to reach its destination this is known as routing. <strong>If the two devices communicating are on the same network, then the network layer is unnecessary.</strong></p>
<h3 id="data-link">Data Link</h3>
<p>The data link layer is very similar to the network layer, except the <strong>data link layer facilitates data transfer between two devices on the same network.</strong> The data link layer takes packets from the network layer and breaks them into smaller pieces called frames.</p>
<h3 id="physical">Physical</h3>
<p>This layer includes the physical equipment involved in the data transfer, such as the cables and switches. This is also the layer where the data gets converted into a bit stream, which is a string of 1s and 0s. The physical layer of both devices must also agree on a signal convention so that the 1s can be distinguished from the 0s on both devices.</p>
<h1 id="tcp-and-udp">TCP and UDP</h1>
<h2 id="tcp">TCP</h2>
<p>Transmission Control Protocol (TCP) is connection-oriented, meaning once a connection has been established, data can be transmitted in both directions. TCP has built-in systems to check for errors and to guarantee data will be delivered in the order it was sent, making it the perfect protocol for transferring information like still images, data files, and web pages.</p>
<p></p>
<p>But while TCP is instinctively reliable, its feedback mechanisms also result in a larger overhead, translating to greater use of the available bandwidth on the network.</p>
<h2 id="udp">UDP</h2>
<p>User Datagram Protocol (UDP) is a simpler, connectionless internet protocol in which error-checking and recovery services are not required. With UDP, there is no overhead for opening a connection, maintaining a connection, or terminating a connection. Data is continuously sent to the recipient, whether or not they receive it.</p>
<p></p>
<p>It is largely preferred for real-time communications like broadcast or multicast network transmission. We should use UDP over TCP when we need the lowest latency and late data is worse than the loss of data.</p>
<h2 id="tcp-vs-udp">TCP vs UDP</h2>
<p>TCP is a connection-oriented protocol, whereas UDP is a connectionless protocol. A key difference between TCP and UDP is speed, as TCP is comparatively slower than UDP. Overall, UDP is a much faster, simpler, and more efficient protocol, however, retransmission of lost data packets is only possible with TCP.</p>
<p>TCP provides ordered delivery of data from user to server (and vice versa), whereas UDP is not dedicated to end-to-end communications, nor does it check the readiness of the receiver.</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>Connection</td>
<td>Requires an established connection</td>
<td>Connectionless protocol</td>
</tr>
<tr>
<td>Guaranteed delivery</td>
<td>Can guarantee delivery of data</td>
<td>Cannot guarantee delivery of data</td>
</tr>
<tr>
<td>Re-transmission</td>
<td>Re-transmission of lost packets is possible</td>
<td>No re-transmission of lost packets</td>
</tr>
<tr>
<td>Speed</td>
<td>Slower than UDP</td>
<td>Faster than TCP</td>
</tr>
<tr>
<td>Broadcasting</td>
<td>Does not support broadcasting</td>
<td>Supports broadcasting</td>
</tr>
<tr>
<td>Use cases</td>
<td>HTTPS, HTTP, SMTP, POP, FTP, etc</td>
<td>Video streaming, DNS, VoIP, etc</td>
</tr>
</tbody>
</table>
<h1 id="domain-name-system-dns">Domain Name System (DNS)</h1>
<p>Earlier we learned about IP addresses that enable every machine to connect with other machines. But as we know humans are more comfortable with names than numbers. It&rsquo;s easier to remember a name like <code>google.com</code> than something like <code>122.250.192.232</code>.</p>
<p>This brings us to Domain Name System (DNS) which is a hierarchical and decentralized naming system used for translating human-readable domain names to IP addresses.</p>
<h2 id="how-dns-workshttpsyoutubevhfrart11jc"><a href="https://youtu.be/vhfRArT11jc" target="_blank" rel="noopener noreffer ">How DNS works</a></h2>
<p>Video: <strong><a href="https://youtu.be/vhfRArT11jc" target="_blank" rel="noopener noreffer ">https://youtu.be/vhfRArT11jc</a></strong></p>
<p></p>
<p>DNS lookup involves the following eight steps:</p>
<ol>
<li>A client types <a href="http://example.com" target="_blank" rel="noopener noreffer ">example.com</a> into a web browser, the query travels to the internet and is received by a DNS resolver.</li>
<li>The resolver then recursively queries a DNS root nameserver.</li>
<li>The root server responds to the resolver with the address of a Top Level Domain (TLD).</li>
<li>The resolver then makes a request to the <code>.com</code> TLD.</li>
<li>The TLD server then responds with the IP address of the domain&rsquo;s nameserver, <a href="http://example.com" target="_blank" rel="noopener noreffer ">example.com</a>.</li>
<li>Lastly, the recursive resolver sends a query to the domain&rsquo;s nameserver.</li>
<li>The IP address for <a href="http://example.com" target="_blank" rel="noopener noreffer ">example.com</a> is then returned to the resolver from the nameserver.</li>
<li>The DNS resolver then responds to the web browser with the IP address of the domain requested initially.</li>
</ol>
<p>Once the IP address has been resolved, the client should be able to request content from the resolved IP address. For example, the resolved IP may return a webpage to be rendered in the browser</p>
<h2 id="server-types">Server types</h2>
<p>Now, let&rsquo;s look at the four key groups of servers that make up the DNS infrastructure.</p>
<h3 id="dns-resolver">DNS Resolver</h3>
<p>A DNS resolver (also known as a DNS recursive resolver) is the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver. After receiving a DNS query from a web client, a recursive resolver will either respond with cached data, or send a request to a root nameserver, followed by another request to a TLD nameserver, and then one last request to an authoritative nameserver. After receiving a response from the authoritative nameserver containing the requested IP address, the recursive resolver then sends a response to the client.</p>
<h3 id="dns-root-server">DNS root server</h3>
<p>A root server accepts a recursive resolver&rsquo;s query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (<code>.com</code>, <code>.net</code>, <code>.org</code>, etc.). The root nameservers are overseen by a nonprofit called the <a href="https://www.icann.org" target="_blank" rel="noopener noreffer ">Internet Corporation for Assigned Names and Numbers (ICANN)</a>.</p>
<p>There are 13 DNS root nameservers known to every recursive resolver. Note that while there are 13 root nameservers, that doesn&rsquo;t mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world, which use <a href="https://en.wikipedia.org/wiki/Anycast" target="_blank" rel="noopener noreffer ">Anycast routing</a> to provide speedy responses.</p>
<h3 id="tld-nameserver">TLD nameserver</h3>
<p>A TLD nameserver maintains information for all the domain names that share a common domain extension, such as <code>.com</code>, <code>.net</code>, or whatever comes after the last dot in a URL.</p>
<p>Management of TLD nameservers is handled by the <a href="https://www.iana.org" target="_blank" rel="noopener noreffer ">Internet Assigned Numbers Authority (IANA)</a>, which is a branch of <a href="https://www.icann.org" target="_blank" rel="noopener noreffer ">ICANN</a>. The IANA breaks up the TLD servers into two main groups:</p>
<ul>
<li><strong>Generic top-level domains</strong>: These are domains like <code>.com</code>, <code>.org</code>, <code>.net</code>, <code>.edu</code>, and <code>.gov</code>.</li>
<li><strong>Country code top-level domains</strong>: These include any domains that are specific to a country or state. Examples include <code>.uk</code>, <code>.us</code>, <code>.ru</code>, and <code>.jp</code>.</li>
</ul>
<h3 id="authoritative-dns-server">Authoritative DNS server</h3>
<p>The authoritative nameserver is usually the resolver&rsquo;s last step in the journey for an IP address. The authoritative nameserver contains information specific to the domain name it serves (e.g. <a href="http://google.com" target="_blank" rel="noopener noreffer ">google.com</a>) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address). If it cannot find the domain, returns the NXDOMAIN message.</p>
<h2 id="query-typeshttpsyoutubebzisxpdl4lq"><a href="https://youtu.be/BZISxpdl4lQ" target="_blank" rel="noopener noreffer ">Query Types</a></h2>
<p><strong>Video:</strong>  <a href="https://youtu.be/BZISxpdl4lQ" target="_blank" rel="noopener noreffer ">https://youtu.be/BZISxpdl4lQ</a></p>
<p>There are three types of queries in a DNS system:</p>
<p></p>
<h3 id="recursive">Recursive</h3>
<p>In a recursive query, a DNS client requires that a DNS server (typically a DNS recursive resolver) will respond to the client with either the requested resource record or an error message if the resolver can&rsquo;t find the record.</p>
<h3 id="iterative">Iterative</h3>
<p>In an iterative query, a DNS client provides a hostname, and the DNS Resolver returns the best answer it can. If the DNS resolver has the relevant DNS records in its cache, it returns them. If not, it refers the DNS client to the Root Server or another Authoritative Name Server that is nearest to the required DNS zone. The DNS client must then repeat the query directly against the DNS server it was referred.</p>
<h3 id="non-recursive">Non-recursive</h3>
<p>A non-recursive query is a query in which the DNS Resolver already knows the answer. It either immediately returns a DNS record because it already stores it in a local cache, or queries a DNS Name Server which is authoritative for the record, meaning it definitely holds the correct IP for that hostname. In both cases, there is no need for additional rounds of queries (like in recursive or iterative queries). Rather, a response is immediately returned to the client.</p>
<h2 id="records-types">Records Types</h2>
<p>DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain.</p>
<p>These records consist of a series of text files written in what is known as <em>DNS syntax</em>. DNS syntax is just a string of characters used as commands that tell the DNS server what to do. All DNS records also have a <em>&ldquo;TTL&rdquo;</em>, which stands for time-to-live, and indicates how often a DNS server will refresh that record.</p>
<p>There are more record types but for now, let&rsquo;s look at some of the most commonly used ones:</p>
<ul>
<li><strong>A (Address record)</strong>: This is the record that holds the IP address of a domain.</li>
<li><strong>AAAA (IP Version 6 Address record)</strong>: The record that contains the IPv6 address for a domain (as opposed to A records, which stores the IPv4 address).</li>
<li><strong>CNAME (Canonical Name record)</strong>: Forwards one domain or subdomain to another domain, does NOT provide an IP address.</li>
<li><strong>MX (Mail exchanger record)</strong>: Directs mail to an email server.</li>
<li><strong>TXT (Text Record)</strong>: This record lets an admin store text notes in the record. These records are often used for email security.</li>
<li><strong>NS (Name Server records)</strong>: Stores the name server for a DNS entry.</li>
<li><strong>SOA (Start of Authority)</strong>: Stores admin information about a domain.</li>
<li><strong>SRV (Service Location record)</strong>: Specifies a port for specific services.</li>
<li><strong>PTR (Reverse-lookup Pointer records)</strong>: Provides a domain name in reverse lookups.</li>
<li><strong>CERT (Certificate record)</strong>: Stores public key certificates.</li>
</ul>
<h2 id="subdomains">Subdomains</h2>
<p>A subdomain is an additional part of our main domain name. It is commonly used to logically separate a website into sections. We can create multiple subdomains or child domains on the main domain.</p>
<p>For example, <code>blog.example.com</code> where <code>blog</code> is the subdomain, <code>example</code> is the primary domain and <code>.com</code> is the top-level domain (TLD). Similar examples can be <code>support.example.com</code> or <code>careers.example.com</code>.</p>
<h2 id="dns-zones">DNS Zones</h2>
<p>A DNS zone is a distinct part of the domain namespace which is delegated to a legal entity like a person, organization, or company, who is responsible for maintaining the DNS zone. A DNS zone is also an administrative function, allowing for granular control of DNS components, such as authoritative name servers.</p>
<h2 id="dns-caching">DNS Caching</h2>
<p>A DNS cache (sometimes called a DNS resolver cache) is a temporary database, maintained by a computer&rsquo;s operating system, that contains records of all the recent visits and attempted visits to websites and other internet domains. In other words, a DNS cache is just a memory of recent DNS lookups that our computer can quickly refer to when it&rsquo;s trying to figure out how to load a website.</p>
<p>The Domain Name System implements a time-to-live (TTL) on every DNS record. TTL specifies the number of seconds the record can be cached by a DNS client or server. When the record is stored in a cache, whatever TTL value came with it gets stored as well. The server continues to update the TTL of the record stored in the cache, counting down every second. When it hits zero, the record is deleted or purged from the cache. At that point, if a query for that record is received, the DNS server has to start the resolution process.</p>
<h2 id="reverse-dns">Reverse DNS</h2>
<p>A reverse DNS lookup is a DNS query for the domain name associated with a given IP address. This accomplishes the opposite of the more commonly used forward DNS lookup, in which the DNS system is queried to return an IP address. The process of reverse resolving an IP address uses PTR records. If the server does not have a PTR record, it cannot resolve a reverse lookup.</p>
<p>Reverse lookups are commonly used by email servers. Email servers check and see if an email message came from a valid server before bringing it onto their network. Many email servers will reject messages from any server that does not support reverse lookups or from a server that is highly unlikely to be legitimate.</p>
<p><em>Note: Reverse DNS lookups are not universally adopted as they are not critical to the normal function of the internet.</em></p>
<h2 id="examples">Examples</h2>
<p>These are some widely used managed DNS solutions:</p>
<ul>
<li><a href="https://aws.amazon.com/route53" target="_blank" rel="noopener noreffer ">Route53</a></li>
<li><a href="https://www.cloudflare.com/dns" target="_blank" rel="noopener noreffer ">Cloudflare DNS</a></li>
<li><a href="https://cloud.google.com/dns" target="_blank" rel="noopener noreffer ">Google Cloud DNS</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/dns" target="_blank" rel="noopener noreffer ">Azure DNS</a></li>
<li><a href="https://ns1.com/products/managed-dns" target="_blank" rel="noopener noreffer ">NS1</a></li>
</ul>
<h1 id="load-balancing">Load Balancing</h1>
<p>Load balancing lets us distribute incoming network traffic across multiple resources ensuring high availability and reliability by sending requests only to resources that are online. This provides the flexibility to add or subtract resources as demand dictates.</p>
<p></p>
<p>For additional scalability and redundancy, we can try to load balance at each layer of our system:</p>
<p></p>
<h2 id="but-why">But why?</h2>
<p>Modern high-traffic websites must serve hundreds of thousands, if not millions, of concurrent requests from users or clients. To cost-effectively scale to meet these high volumes, modern computing best practice generally requires adding more servers.</p>
<p>A load balancer can sit in front of the servers and route client requests across all servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization. This ensures that no single server is overworked, which could degrade performance. If a single server goes down, the load balancer redirects traffic to the remaining online servers. When a new server is added to the server group, the load balancer automatically starts sending requests to it.</p>
<h2 id="workload-distribution">Workload distribution</h2>
<p>This is the core functionality provided by a load balancer and has several common variations:</p>
<ul>
<li><strong>Host-based</strong>: Distributes requests based on the requested hostname.</li>
<li><strong>Path-based</strong>: Using the entire URL to distribute requests as opposed to just the hostname.</li>
<li><strong>Content-based</strong>: Inspects the message content of a request. This allows distribution based on content such as the value of a parameter.</li>
</ul>
<h2 id="layers-1">Layers</h2>
<p>Generally speaking, load balancers operate at one of the two levels:</p>
<h3 id="network-layer">Network layer</h3>
<p>This is the load balancer that works at the network&rsquo;s transport layer, also known as layer 4. This performs routing based on networking information such as IP addresses and is not able to perform content-based routing. These are often dedicated hardware devices that can operate at high speed.</p>
<h3 id="application-layer">Application layer</h3>
<p>This is the load balancer that operates at the application layer, also known as layer 7. Load balancers can read requests in their entirety and perform content-based routing. This allows the management of load based on a full understanding of traffic.</p>
<h2 id="types-1">Types</h2>
<p>Let&rsquo;s look at different types of load balancers:</p>
<h3 id="software">Software</h3>
<p>Software load balancers usually are easier to deploy than hardware versions. They also tend to be more cost-effective and flexible, and they are used in conjunction with software development environments. The software approach gives us the flexibility of configuring the load balancer to our environment&rsquo;s specific needs. The boost in flexibility may come at the cost of having to do more work to set up the load balancer. Compared to hardware versions, which offer more of a closed-box approach, software balancers give us more freedom to make changes and upgrades.</p>
<p>Software load balancers are widely used and are available either as installable solutions that require configuration and management or as a managed cloud service.</p>
<h3 id="hardware">Hardware</h3>
<p>As the name implies, a hardware load balancer relies on physical, on-premises hardware to distribute application and network traffic. These devices can handle a large volume of traffic but often carry a hefty price tag and are fairly limited in terms of flexibility.</p>
<p>Hardware load balancers include proprietary firmware that requires maintenance and updates as new versions and security patches are released.</p>
<h3 id="dns">DNS</h3>
<p>DNS load balancing is the practice of configuring a domain in the Domain Name System (DNS) such that client requests to the domain are distributed across a group of server machines.</p>
<p>Unfortunately, DNS load balancing has inherent problems limiting its reliability and efficiency. Most significantly, DNS does not check for server and network outages, or errors. It always returns the same set of IP addresses for a domain even if servers are down or inaccessible.</p>
<h2 id="routing-algorithms">Routing Algorithms</h2>
<p>Now, let&rsquo;s discuss commonly used routing algorithms:</p>
<ul>
<li><strong>Round-robin</strong>: Requests are distributed to application servers in rotation.</li>
<li><strong>Weighted Round-robin</strong>: Builds on the simple Round-robin technique to account for differing server characteristics such as compute and traffic handling capacity using weights that can be assigned via DNS records by the administrator.</li>
<li><strong>Least Connections</strong>: A new request is sent to the server with the fewest current connections to clients. The relative computing capacity of each server is factored into determining which one has the least connections.</li>
<li><strong>Least Response Time</strong>: Sends requests to the server selected by a formula that combines the fastest response time and fewest active connections.</li>
<li><strong>Least Bandwidth</strong>: This method measures traffic in megabits per second (Mbps), sending client requests to the server with the least Mbps of traffic.</li>
<li><strong>Hashing</strong>: Distributes requests based on a key we define, such as the client IP address or the request URL.</li>
</ul>
<h2 id="advantages">Advantages</h2>
<p>Load balancing also plays a key role in preventing downtime, other advantages of load balancing include the following:</p>
<ul>
<li>Scalability</li>
<li>Redundancy</li>
<li>Flexibility</li>
<li>Efficiency</li>
</ul>
<h2 id="redundant-load-balancers">Redundant load balancers</h2>
<p>As you must&rsquo;ve already guessed, the load balancer itself can be a single point of failure. To overcome this, a second or <code>N</code> number of load balancers can be used in a cluster mode.</p>
<p>And, if there&rsquo;s a failure detection and the <em>active</em> load balancer fails, another <em>passive</em> load balancer can take over which will make our system more fault-tolerant.</p>
<p></p>
<h2 id="features">Features</h2>
<p>Here are some commonly desired features of load balancers:</p>
<ul>
<li><strong>Autoscaling</strong>: Starting up and shutting down resources in response to demand conditions.</li>
<li><strong>Sticky sessions</strong>: The ability to assign the same user or device to the same resource in order to maintain the session state on the resource.</li>
<li><strong>Healthchecks</strong>: The ability to determine if a resource is down or performing poorly in order to remove the resource from the load balancing pool.</li>
<li><strong>Persistence connections</strong>: Allowing a server to open a persistent connection with a client such as a WebSocket.</li>
<li><strong>Encryption</strong>: Handling encrypted connections such as TLS and SSL.</li>
<li><strong>Certificates</strong>: Presenting certificates to a client and authentication of client certificates.</li>
<li><strong>Compression</strong>: Compression of responses.</li>
<li><strong>Caching</strong>: An application-layer load balancer may offer the ability to cache responses.</li>
<li><strong>Logging</strong>: Logging of request and response metadata can serve as an important audit trail or source for analytics data.</li>
<li><strong>Request tracing</strong>: Assigning each request a unique id for the purposes of logging, monitoring, and troubleshooting.</li>
<li><strong>Redirects</strong>: The ability to redirect an incoming request based on factors such as the requested path.</li>
<li><strong>Fixed response</strong>: Returning a static response for a request such as an error message.</li>
</ul>
<h2 id="examples-1">Examples</h2>
<p>Following are some of the load balancing solutions commonly used in the industry:</p>
<ul>
<li><a href="https://aws.amazon.com/elasticloadbalancing" target="_blank" rel="noopener noreffer ">Amazon Elastic Load Balancing</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/load-balancer" target="_blank" rel="noopener noreffer ">Azure Load Balancing</a></li>
<li><a href="https://cloud.google.com/load-balancing" target="_blank" rel="noopener noreffer ">GCP Load Balancing</a></li>
<li><a href="https://www.digitalocean.com/products/load-balancer" target="_blank" rel="noopener noreffer ">DigitalOcean Load Balancer</a></li>
<li><a href="https://www.nginx.com" target="_blank" rel="noopener noreffer ">Nginx</a></li>
<li><a href="http://www.haproxy.org" target="_blank" rel="noopener noreffer ">HAProxy</a></li>
</ul>
<h1 id="clustering">Clustering</h1>
<p>At a high level, a computer cluster is a group of two or more computers, or nodes, that run in parallel to achieve a common goal. This allows workloads consisting of a high number of individual, parallelizable tasks to be distributed among the nodes in the cluster. As a result, these tasks can leverage the combined memory and processing power of each computer to increase overall performance.</p>
<p>To build a computer cluster, the individual nodes should be connected to a network to enable internode communication. The software can then be used to join the nodes together and form a cluster. It may have a shared storage device and/or local storage on each node.</p>
<p></p>
<p>Typically, at least one node is designated as the leader node and acts as the entry point to the cluster. The leader node may be responsible for delegating incoming work to the other nodes and, if necessary, aggregating the results and returning a response to the user.</p>
<p>Ideally, a cluster functions as if it were a single system. A user accessing the cluster should not need to know whether the system is a cluster or an individual machine. Furthermore, a cluster should be designed to minimize latency and prevent bottlenecks in node-to-node communication.</p>
<h2 id="types-2">Types</h2>
<p>Computer clusters can generally be categorized into three types:</p>
<ul>
<li>Highly available or fail-over</li>
<li>Load balancing</li>
<li>High-performance computing</li>
</ul>
<h2 id="configurations">Configurations</h2>
<p>The two most commonly used high availability (HA) clustering configurations are active-active and active-passive.</p>
<h3 id="active-active">Active-Active</h3>
<p></p>
<p>An active-active cluster is typically made up of at least two nodes, both actively running the same kind of service simultaneously. The main purpose of an active-active cluster is to achieve load balancing. A load balancer distributes workloads across all nodes to prevent any single node from getting overloaded. Because there are more nodes available to serve, there will also be an improvement in throughput and response times.</p>
<h3 id="active-passive">Active-Passive</h3>
<p></p>
<p>Like the active-active cluster configuration, an active-passive cluster also consists of at least two nodes. However, as the name <em>active-passive</em> implies, not all nodes are going to be active. For example, in the case of two nodes, if the first node is already active, then the second node must be passive or on standby.</p>
<h2 id="advantages-1">Advantages</h2>
<p>Four key advantages of cluster computing are as follows:</p>
<ul>
<li>High availability</li>
<li>Scalability</li>
<li>Performance</li>
<li>Cost-effective</li>
</ul>
<h2 id="load-balancing-vs-clustering">Load balancing vs Clustering</h2>
<p>Load balancing shares some common traits with clustering, but they are different processes. Clustering provides redundancy and boosts capacity and availability. Servers in a cluster are aware of each other and work together toward a common purpose. But with load balancing, servers are not aware of each other. Instead, they react to the requests they receive from the load balancer.</p>
<p>We can employ load balancing in conjunction with clustering but it also is applicable in cases involving independent servers that share a common purpose such as to run a website, business application, web service, or some other IT resource.</p>
<h2 id="challenges">Challenges</h2>
<p>The most obvious challenge clustering presents is the increased complexity of installation and maintenance. An operating system, the application, and its dependencies must each be installed and updated on every node.</p>
<p>This becomes even more complicated if the nodes in the cluster are not homogeneous. Resource utilization for each node must also be closely monitored, and logs should be aggregated to ensure that the software is behaving correctly.</p>
<p>Additionally, storage becomes more difficult to manage, a shared storage device must prevent nodes from overwriting one another and distributed data stores have to be kept in sync.</p>
<h2 id="examples-2">Examples</h2>
<p>Clustering is commonly used in the industry, and often many technologies offer some sort of clustering mode. For example:</p>
<ul>
<li>Containers (eg. <a href="https://kubernetes.io" target="_blank" rel="noopener noreffer ">Kubernetes</a>, <a href="https://aws.amazon.com/ecs" target="_blank" rel="noopener noreffer ">Amazon ECS</a>)</li>
<li>Databases (eg. <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Cassandra</a>, <a href="https://www.mongodb.com" target="_blank" rel="noopener noreffer ">MongoDB</a>)</li>
<li>Cache (eg. <a href="https://redis.io/docs/manual/scaling" target="_blank" rel="noopener noreffer ">Redis</a>)</li>
</ul>
<h1 id="caching">Caching</h1>
<p><em>&ldquo;There are only two hard things in Computer Science: cache invalidation and naming things.&rdquo; - Phil Karlton</em></p>
<p></p>
<p>A cache&rsquo;s primary purpose is to increase data retrieval performance by reducing the need to access the underlying slower storage layer. Trading off capacity for speed, a cache typically stores a subset of data transiently, in contrast to databases whose data is usually complete and durable.</p>
<p>Caches take advantage of the locality of reference principle <em>&ldquo;recently requested data is likely to be requested again&rdquo;.</em></p>
<h2 id="caching-and-memory">Caching and Memory</h2>
<p>Similar to a computer&rsquo;s memory, a cache is a compact, fast-performing memory that stores data in a hierarchy of levels, starting at level one, and progressing from there sequentially. They are labeled as L1, L2, L3, and so on. A cache also gets written if requested, such as when there has been an update and new content needs to be saved to the cache, replacing the older content that was saved.</p>
<p>No matter whether the cache is read or written, it&rsquo;s done one block at a time. Each block also has a tag that includes the location where the data was stored in the cache. When data is requested from the cache, a search occurs through the tags to find the specific content that&rsquo;s needed in level one (L1) of the memory. If the correct data isn&rsquo;t found, more searches are conducted in L2.</p>
<p>If the data isn&rsquo;t found there, searches are continued in L3, then L4, and so on until it has been found, then, it&rsquo;s read and loaded. If the data isn&rsquo;t found in the cache at all, then it&rsquo;s written into it for quick retrieval the next time.</p>
<h2 id="cache-hit-and-cache-miss">Cache hit and Cache miss</h2>
<h3 id="cache-hit">Cache hit</h3>
<p>A cache hit describes the situation where content is successfully served from the cache. The tags are searched in the memory rapidly, and when the data is found and read, it&rsquo;s considered a cache hit.</p>
<p><strong>Cold, Warm, and Hot Caches</strong></p>
<p>A cache hit can also be described as cold, warm, or hot. In each of these, the speed at which the data is read is described.</p>
<p>A hot cache is an instance where data was read from the memory at the <em>fastest</em> possible rate. This happens when the data is retrieved from L1.</p>
<p>A cold cache is the <em>slowest</em> possible rate for data to be read, though, it&rsquo;s still successful so it&rsquo;s still considered a cache hit. The data is just found lower in the memory hierarchy such as in L3, or lower.</p>
<p>A warm cache is used to describe data that&rsquo;s found in L2 or L3. It&rsquo;s not as fast as a hot cache, but it&rsquo;s still faster than a cold cache. Generally, calling a cache warm is used to express that it&rsquo;s slower and closer to a cold cache than a hot one.</p>
<h3 id="cache-miss">Cache miss</h3>
<p>A cache miss refers to the instance when the memory is searched and the data isn&rsquo;t found. When this happens, the content is transferred and written into the cache.</p>
<h2 id="cache-invalidation">Cache Invalidation</h2>
<p>Cache invalidation is a process where the computer system declares the cache entries as invalid and removes or replaces them. If the data is modified, it should be invalidated in the cache, if not, this can cause inconsistent application behavior. There are three kinds of caching systems:</p>
<h3 id="write-through-cache">Write-through cache</h3>
<p></p>
<p>Data is written into the cache and the corresponding database simultaneously.</p>
<p><strong>Pro</strong>: Fast retrieval, complete data consistency between cache and storage.</p>
<p><strong>Con</strong>: Higher latency for write operations.</p>
<h3 id="write-around-cache">Write-around cache</h3>
<p></p>
<p>Where write directly goes to the database or permanent storage, bypassing the cache.</p>
<p><strong>Pro</strong>: This may reduce latency.</p>
<p><strong>Con</strong>: It increases cache misses because the cache system has to read the information from the database in case of a cache miss. As a result, this can lead to higher read latency in the case of applications that write and re-read the information quickly. Read happen from slower back-end storage and experiences higher latency.</p>
<h3 id="write-back-cache">Write-back cache</h3>
<p></p>
<p>Where the write is only done to the caching layer and the write is confirmed as soon as the write to the cache completes. The cache then asynchronously syncs this write to the database.</p>
<p><strong>Pro</strong>: This would lead to reduced latency and high throughput for write-intensive applications.</p>
<p><strong>Con</strong>: There is a risk of data loss in case the caching layer crashes. We can improve this by having more than one replica acknowledging the write in the cache.</p>
<h2 id="eviction-policies">Eviction policies</h2>
<p>Following are some of the most common cache eviction policies:</p>
<ul>
<li><strong>First In First Out (FIFO)</strong>: The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before.</li>
<li><strong>Last In First Out (LIFO)</strong>: The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before.</li>
<li><strong>Least Recently Used (LRU)</strong>: Discards the least recently used items first.</li>
<li><strong>Most Recently Used (MRU)</strong>: Discards, in contrast to LRU, the most recently used items first.</li>
<li><strong>Least Frequently Used (LFU)</strong>: Counts how often an item is needed. Those that are used least often are discarded first.</li>
<li><strong>Random Replacement (RR)</strong>: Randomly selects a candidate item and discards it to make space when necessary.</li>
</ul>
<h2 id="distributed-cache">Distributed Cache</h2>
<p></p>
<p>A distributed cache is a system that pools together the random-access memory (RAM) of multiple networked computers into a single in-memory data store used as a data cache to provide fast access to data. While most caches are traditionally in one physical server or hardware component, a distributed cache can grow beyond the memory limits of a single computer by linking together multiple computers.</p>
<h2 id="global-cache">Global Cache</h2>
<p></p>
<p>As the name suggests, we will have a single shared cache that all the application nodes will use. When the requested data is not found in the global cache, it&rsquo;s the responsibility of the cache to find out the missing piece of data from the underlying data store.</p>
<h2 id="use-cases">Use cases</h2>
<p>Caching can have many real-world use cases such as:</p>
<ul>
<li>Database Caching</li>
<li>Content Delivery Network (CDN)</li>
<li>Domain Name System (DNS) Caching</li>
<li>API Caching</li>
</ul>
<p><strong>When not to use caching?</strong></p>
<p>Let&rsquo;s also look at some scenarios where we should not use cache:</p>
<ul>
<li>Caching isn&rsquo;t helpful when it takes just as long to access the cache as it does to access the primary data store.</li>
<li>Caching doesn&rsquo;t work as well when requests have low repetition (higher randomness), because caching performance comes from repeated memory access patterns.</li>
<li>Caching isn&rsquo;t helpful when the data changes frequently, as the cached version gets out of sync, and the primary data store must be accessed every time.</li>
</ul>
<p><em>It&rsquo;s important to note that a cache should not be used as permanent data storage. They are almost always implemented in volatile memory because it is faster, and thus should be considered transient.</em></p>
<h2 id="advantages-2">Advantages</h2>
<p>Below are some advantages of caching:</p>
<ul>
<li>Improves performance</li>
<li>Reduce latency</li>
<li>Reduce load on the database</li>
<li>Reduce network cost</li>
<li>Increase Read Throughput</li>
</ul>
<h2 id="examples-3">Examples</h2>
<p>Here are some commonly used technologies for caching:</p>
<ul>
<li><a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a></li>
<li><a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a></li>
<li><a href="https://aws.amazon.com/elasticache" target="_blank" rel="noopener noreffer ">Amazon Elasticache</a></li>
<li><a href="https://aerospike.com" target="_blank" rel="noopener noreffer ">Aerospike</a></li>
</ul>
<h1 id="content-delivery-network-cdn">Content Delivery Network (CDN)</h1>
<p>A content delivery network (CDN) is a geographically distributed group of servers that work together to provide fast delivery of internet content. Generally, static files such as HTML/CSS/JS, photos, and videos are served from CDN.</p>
<p></p>
<h2 id="why-use-a-cdn">Why use a CDN?</h2>
<p>Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs and improving security. Serving content from CDNs can significantly improve performance as users receive content from data centers close to them and our servers do not have to serve requests that the CDN fulfills.</p>
<h2 id="how-does-a-cdn-work">How does a CDN work?</h2>
<p></p>
<p>In a CDN, the origin server contains the original versions of the content while the edge servers are numerous and distributed across various locations around the world.</p>
<p>To minimize the distance between the visitors and the website&rsquo;s server, a CDN stores a cached version of its content in multiple geographical locations known as edge locations. Each edge location contains a number of caching servers responsible for content delivery to visitors within its proximity.</p>
<p>Once the static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin, thus reducing origin load and improving scalability.</p>
<p>For example, when someone in the UK requests our website which might be hosted in the USA, they will be served from the closest edge location such as the London edge location. This is much quicker than having the visitor make a complete request to the origin server which will increase the latency.</p>
<h2 id="types-3">Types</h2>
<p>CDNs are generally divided into two types:</p>
<h3 id="push-cdns">Push CDNs</h3>
<p>Push CDNs receive new content whenever changes occur on the server. We take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. We can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.</p>
<p>Sites with a small amount of traffic or sites with content that isn&rsquo;t often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals.</p>
<h3 id="pull-cdns">Pull CDNs</h3>
<p>In a Pull CDN situation, the cache is updated based on request. When the client sends a request that requires static assets to be fetched from the CDN if the CDN doesn&rsquo;t have it, then it will fetch the newly updated assets from the origin server and populate its cache with this new asset, and then send this new cached asset to the user.</p>
<p>Contrary to the Push CDN, this requires less maintenance because cache updates on CDN nodes are performed based on requests from the client to the origin server. Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.</p>
<h2 id="disadvantages">Disadvantages</h2>
<p>As we all know good things come with extra costs, so let&rsquo;s discuss some disadvantages of CDNs:</p>
<ul>
<li><strong>Extra charges</strong>: It can be expensive to use a CDN, especially for high-traffic services.</li>
<li><strong>Restrictions</strong>: Some organizations and countries have blocked the domains or IP addresses of popular CDNs.</li>
<li><strong>Location</strong>: If most of our audience is located in a country where the CDN has no servers, the data on our website may have to travel further than without using any CDN.</li>
</ul>
<h2 id="examples-4">Examples</h2>
<p>Here are some widely used CDNs:</p>
<ul>
<li><a href="https://aws.amazon.com/cloudfront" target="_blank" rel="noopener noreffer ">Amazon CloudFront</a></li>
<li><a href="https://cloud.google.com/cdn" target="_blank" rel="noopener noreffer ">Google Cloud CDN</a></li>
<li><a href="https://www.cloudflare.com/cdn" target="_blank" rel="noopener noreffer ">Cloudflare CDN</a></li>
<li><a href="https://www.fastly.com/products/cdn" target="_blank" rel="noopener noreffer ">Fastly</a></li>
</ul>
<h1 id="proxy">Proxy</h1>
<p>A proxy server is an intermediary piece of hardware/software sitting between the client and the backend server. It receives requests from clients and relays them to the origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compression).</p>
<h2 id="types-4">Types</h2>
<p>There are two types of proxies:</p>
<h3 id="forward-proxy">Forward Proxy</h3>
<p>A forward proxy, often called a proxy, proxy server, or web proxy is a server that sits in front of a group of client machines. When those computers make requests to sites and services on the internet, the proxy server intercepts those requests and then communicates with web servers on behalf of those clients, like a middleman.</p>
<p></p>
<p><strong>Advantages</strong></p>
<p>Here are some advantages of a forward proxy:</p>
<ul>
<li>Block access to certain content</li>
<li>Allows access to <a href="https://en.wikipedia.org/wiki/Geo-blocking" target="_blank" rel="noopener noreffer ">geo-restricted</a> content</li>
<li>Provides anonymity</li>
<li>Avoid other browsing restrictions</li>
</ul>
<p>Although proxies provide the benefits of anonymity, they can still track our personal information. Setup and maintenance of a proxy server can be costly and requires configurations.</p>
<h3 id="reverse-proxy">Reverse Proxy</h3>
<p>A reverse proxy is a server that sits in front of one or more web servers, intercepting requests from clients. When clients send requests to the origin server of a website, those requests are intercepted by the reverse proxy server.</p>
<p>The difference between a forward and reverse proxy is subtle but important. A simplified way to sum it up would be to say that a forward proxy sits in front of a client and ensures that no origin server ever communicates directly with that specific client. On the other hand, a reverse proxy sits in front of an origin server and ensures that no client ever communicates directly with that origin server.</p>
<p></p>
<p>Introducing reverse proxy results in increased complexity. A single reverse proxy is a single point of failure, configuring multiple reverse proxies (i.e. a failover) further increases complexity.</p>
<p><strong>Advantages</strong></p>
<p>Here are some advantages of using a reverse proxy:</p>
<ul>
<li>Improved security</li>
<li>Caching</li>
<li>SSL encryption</li>
<li>Load balancing</li>
<li>Scalability and flexibility</li>
</ul>
<h2 id="load-balancer-vs-reverse-proxy">Load balancer vs Reverse Proxy</h2>
<p>Wait, isn&rsquo;t reverse proxy similar to a load balancer? Well, no as a load balancer is useful when we have multiple servers. Often, load balancers route traffic to a set of servers serving the same function, while, reverse proxies can be useful even with just one web server or application server. A reverse proxy can also act as a load balancer but not the other way around.</p>
<h2 id="examples-5">Examples</h2>
<p>Below are some commonly used proxy technologies:</p>
<ul>
<li><a href="https://www.nginx.com" target="_blank" rel="noopener noreffer ">Nginx</a></li>
<li><a href="http://www.haproxy.org" target="_blank" rel="noopener noreffer ">HAProxy</a></li>
<li><a href="https://doc.traefik.io/traefik" target="_blank" rel="noopener noreffer ">Traefik</a></li>
<li><a href="https://www.envoyproxy.io" target="_blank" rel="noopener noreffer ">Envoy</a></li>
</ul>
<h1 id="availability">Availability</h1>
<p>Availability is the time a system remains operational to perform its required function in a specific period. It is a simple measure of the percentage of time that a system, service, or machine remains operational under normal conditions.</p>
<h2 id="the-nines-of-availability">The Nine&rsquo;s of availability</h2>
<p>Availability is often quantified by uptime (or downtime) as a percentage of time the service is available. It is generally measured in the number of 9s.</p>
<p>$$
Availability = \frac{Uptime}{(Uptime + Downtime)}
$$</p>
<p>If availability is 99.00% available, it is said to have &ldquo;2 nines&rdquo; of availability, and if it is 99.9%, it is called &ldquo;3 nines&rdquo;, and so on.</p>
<table>
<thead>
<tr>
<th>Availability (Percent)</th>
<th>Downtime (Year)</th>
<th>Downtime (Month)</th>
<th>Downtime (Week)</th>
</tr>
</thead>
<tbody>
<tr>
<td>90% (one nine)</td>
<td>36.53 days</td>
<td>72 hours</td>
<td>16.8 hours</td>
</tr>
<tr>
<td>99% (two nines)</td>
<td>3.65 days</td>
<td>7.20 hours</td>
<td>1.68 hours</td>
</tr>
<tr>
<td>99.9% (three nines)</td>
<td>8.77 hours</td>
<td>43.8 minutes</td>
<td>10.1 minutes</td>
</tr>
<tr>
<td>99.99% (four nines)</td>
<td>52.6 minutes</td>
<td>4.32 minutes</td>
<td>1.01 minutes</td>
</tr>
<tr>
<td>99.999% (five nines)</td>
<td>5.25 minutes</td>
<td>25.9 seconds</td>
<td>6.05 seconds</td>
</tr>
<tr>
<td>99.9999% (six nines)</td>
<td>31.56 seconds</td>
<td>2.59 seconds</td>
<td>604.8 milliseconds</td>
</tr>
<tr>
<td>99.99999% (seven nines)</td>
<td>3.15 seconds</td>
<td>263 milliseconds</td>
<td>60.5 milliseconds</td>
</tr>
<tr>
<td>99.999999% (eight nines)</td>
<td>315.6 milliseconds</td>
<td>26.3 milliseconds</td>
<td>6 milliseconds</td>
</tr>
<tr>
<td>99.9999999% (nine nines)</td>
<td>31.6 milliseconds</td>
<td>2.6 milliseconds</td>
<td>0.6 milliseconds</td>
</tr>
</tbody>
</table>
<h2 id="availability-in-sequence-vs-parallel">Availability in Sequence vs Parallel</h2>
<p>If a service consists of multiple components prone to failure, the service&rsquo;s overall availability depends on whether the components are in sequence or in parallel.</p>
<h3 id="sequence">Sequence</h3>
<p>Overall availability decreases when two components are in sequence.</p>
<p>$$
Availability \space (Total) = Availability \space (Foo) * Availability \space (Bar)
$$</p>
<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in sequence would be 99.8%.</p>
<h3 id="parallel">Parallel</h3>
<p>Overall availability increases when two components are in parallel.</p>
<p>$$
Availability \space (Total) = 1 - (1 - Availability \space (Foo)) * (1 - Availability \space (Bar))
$$</p>
<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in parallel would be 99.9999%.</p>
<h2 id="availability-vs-reliability">Availability vs Reliability</h2>
<p>If a system is reliable, it is available. However, if it is available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve high availability even with an unreliable system.</p>
<h2 id="high-availability-vs-fault-tolerance">High availability vs Fault Tolerance</h2>
<p>Both high availability and fault tolerance apply to methods for providing high uptime levels. However, they accomplish the objective differently.</p>
<p>A fault-tolerant system has no service interruption but a significantly higher cost, while a highly available system has minimal service interruption. Fault-tolerance requires full hardware redundancy as if the main system fails, with no loss in uptime, another system should take over.</p>
<h1 id="scalability">Scalability</h1>
<p>Scalability is the measure of how well a system responds to changes by adding or removing resources to meet demands.</p>
<p></p>
<p>Let&rsquo;s discuss different types of scaling:</p>
<h2 id="vertical-scaling">Vertical scaling</h2>
<p>Vertical scaling (also known as scaling up) expands a system&rsquo;s scalability by adding more power to an existing machine. In other words, vertical scaling refers to improving an application&rsquo;s capability via increasing hardware capacity.</p>
<h3 id="advantages-3">Advantages</h3>
<ul>
<li>Simple to implement</li>
<li>Easier to manage</li>
<li>Data consistent</li>
</ul>
<h3 id="disadvantages-1">Disadvantages</h3>
<ul>
<li>Risk of high downtime</li>
<li>Harder to upgrade</li>
<li>Can be a single point of failure</li>
</ul>
<h2 id="horizontal-scaling">Horizontal scaling</h2>
<p>Horizontal scaling (also known as scaling out) expands a system&rsquo;s scale by adding more machines. It improves the performance of the server by adding more instances to the existing pool of servers, allowing the load to be distributed more evenly.</p>
<h3 id="advantages-4">Advantages</h3>
<ul>
<li>Increased redundancy</li>
<li>Better fault tolerance</li>
<li>Flexible and efficient</li>
<li>Easier to upgrade</li>
</ul>
<h3 id="disadvantages-2">Disadvantages</h3>
<ul>
<li>Increased complexity</li>
<li>Data inconsistency</li>
<li>Increased load on downstream services</li>
</ul>
<h1 id="storage">Storage</h1>
<p>Storage is a mechanism that enables a system to retain data, either temporarily or permanently. This topic is mostly skipped over in the context of system design, however, it is important to have a basic understanding of some common types of storage techniques that can help us fine-tune our storage components. Let&rsquo;s discuss some important storage concepts:</p>
<h2 id="raid">RAID</h2>
<p>RAID (Redundant Array of Independent Disks) is a way of storing the same data on multiple hard disks or solid-state drives (SSDs) to protect data in the case of a drive failure.</p>
<p>There are different RAID levels, however, and not all have the goal of providing redundancy. Let&rsquo;s discuss some commonly used RAID levels:</p>
<ul>
<li><strong>RAID 0</strong>: Also known as striping, data is split evenly across all the drives in the array.</li>
<li><strong>RAID 1</strong>: Also known as mirroring, at least two drives contains the exact copy of a set of data. If a drive fails, others will still work.</li>
<li><strong>RAID 5</strong>: Striping with parity. Requires the use of at least 3 drives, striping the data across multiple drives like RAID 0, but also has a parity distributed across the drives.</li>
<li><strong>RAID 6</strong>: Striping with double parity. RAID 6 is like RAID 5, but the parity data are written to two drives.</li>
<li><strong>RAID 10</strong>: Combines striping plus mirroring from RAID 0 and RAID 1. It provides security by mirroring all data on secondary drives while using striping across each set of drives to speed up data transfers.</li>
</ul>
<h3 id="comparison">Comparison</h3>
<p>Let&rsquo;s compare all the features of different RAID levels:</p>
<table>
<thead>
<tr>
<th>Features</th>
<th>RAID 0</th>
<th>RAID 1</th>
<th>RAID 5</th>
<th>RAID 6</th>
<th>RAID 10</th>
</tr>
</thead>
<tbody>
<tr>
<td>Description</td>
<td>Striping</td>
<td>Mirroring</td>
<td>Striping with Parity</td>
<td>Striping with double parity</td>
<td>Striping and Mirroring</td>
</tr>
<tr>
<td>Minimum Disks</td>
<td>2</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>Read Performance</td>
<td>High</td>
<td>High</td>
<td>High</td>
<td>High</td>
<td>High</td>
</tr>
<tr>
<td>Write Performance</td>
<td>High</td>
<td>Medium</td>
<td>High</td>
<td>High</td>
<td>Medium</td>
</tr>
<tr>
<td>Cost</td>
<td>Low</td>
<td>High</td>
<td>Low</td>
<td>Low</td>
<td>High</td>
</tr>
<tr>
<td>Fault Tolerance</td>
<td>None</td>
<td>Single-drive failure</td>
<td>Single-drive failure</td>
<td>Two-drive failure</td>
<td>Up to one disk failure in each sub-array</td>
</tr>
<tr>
<td>Capacity Utilization</td>
<td>100%</td>
<td>50%</td>
<td>67%-94%</td>
<td>50%-80%</td>
<td>50%</td>
</tr>
</tbody>
</table>
<h2 id="volumes">Volumes</h2>
<p>Volume is a fixed amount of storage on a disk or tape. The term volume is often used as a synonym for the storage itself, but it is possible for a single disk to contain more than one volume or a volume to span more than one disk.</p>
<h2 id="file-storage">File storage</h2>
<p>File storage is a solution to store data as files and present it to its final users as a hierarchical directories structure. The main advantage is to provide a user-friendly solution to store and retrieve files. To locate a file in file storage, the complete path of the file is required. It is economical and easily structured and is usually found on hard drives, which means that they appear exactly the same for the user and on the hard drive.</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/efs" target="_blank" rel="noopener noreffer ">Amazon EFS</a>, <a href="https://azure.microsoft.com/en-in/services/storage/files" target="_blank" rel="noopener noreffer ">Azure files</a>, <a href="https://cloud.google.com/filestore" target="_blank" rel="noopener noreffer ">Google Cloud Filestore</a>, etc.</p>
<h2 id="block-storage">Block storage</h2>
<p>Block storage divides data into blocks (chunks) and stores them as separate pieces. Each block of data is given a unique identifier, which allows a storage system to place the smaller pieces of data wherever it is most convenient.</p>
<p>Block storage also decouples data from user environments, allowing that data to be spread across multiple environments. This creates multiple paths to the data and allows the user to retrieve it quickly. When a user or application requests data from a block storage system, the underlying storage system reassembles the data blocks and presents the data to the user or application</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/ebs" target="_blank" rel="noopener noreffer ">Amazon EBS</a>.</p>
<h2 id="object-storage">Object Storage</h2>
<p>Object storage, which is also known as object-based storage, breaks data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems.</p>
<p><strong>Example</strong>: <a href="https://aws.amazon.com/s3" target="_blank" rel="noopener noreffer ">Amazon S3</a>, <a href="https://azure.microsoft.com/en-in/services/storage/blobs" target="_blank" rel="noopener noreffer ">Azure Blob Storage</a>, <a href="https://cloud.google.com/storage" target="_blank" rel="noopener noreffer ">Google Cloud Storage</a>, etc.</p>
<h2 id="nas">NAS</h2>
<p>A NAS (Network Attached Storage) is a storage device connected to a network that allows storage and retrieval of data from a central location for authorized network users. NAS devices are flexible, meaning that as we need additional storage, we can add to what we have. It&rsquo;s faster, less expensive, and provides all the benefits of a public cloud on-site, giving us complete control.</p>
<h2 id="hdfs">HDFS</h2>
<p>The Hadoop Distributed File System (HDFS) is a distributed file system designed to run on commodity hardware. HDFS is highly fault-tolerant and is designed to be deployed on low-cost hardware. HDFS provides high throughput access to application data and is suitable for applications that have large data sets. It has many similarities with existing distributed file systems.</p>
<p>HDFS is designed to reliably store very large files across machines in a large cluster. It stores each file as a sequence of blocks, all blocks in a file except the last block are the same size. The blocks of a file are replicated for fault tolerance.</p>
<h1 id="databases-and-dbms">Databases and DBMS</h1>
<h2 id="what-is-a-database">What is a Database?</h2>
<p>A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a Database Management System (DBMS). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.</p>
<h2 id="what-is-dbms">What is DBMS?</h2>
<p>A database typically requires a comprehensive database software program known as a Database Management System (DBMS). A DBMS serves as an interface between the database and its end-users or programs, allowing users to retrieve, update, and manage how the information is organized and optimized. A DBMS also facilitates oversight and control of databases, enabling a variety of administrative operations such as performance monitoring, tuning, and backup and recovery.</p>
<h2 id="components">Components</h2>
<p>Here are some common components found across different databases:</p>
<h3 id="schema">Schema</h3>
<p>The role of a schema is to define the shape of a data structure, and specify what kinds of data can go where. Schemas can be strictly enforced across the entire database, loosely enforced on part of the database, or they might not exist at all.</p>
<h3 id="table">Table</h3>
<p>Each table contains various columns just like in a spreadsheet. A table can have as meager as two columns and upwards of a hundred or more columns, depending upon the kind of information being put in the table.</p>
<h3 id="column">Column</h3>
<p>A column contains a set of data values of a particular type, one value for each row of the database. A column may contain text values, numbers, enums, timestamps, etc.</p>
<h3 id="row">Row</h3>
<p>Data in a table is recorded in rows. There can be thousands or millions of rows in a table having any particular information.</p>
<h2 id="types-5">Types</h2>
<p></p>
<p>Below are different types of databases:</p>
<ul>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/sql-databases" target="_blank" rel="noopener noreffer ">SQL</a></strong></li>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/nosql-databases" target="_blank" rel="noopener noreffer ">NoSQL</a></strong>
<ul>
<li>Document</li>
<li>Key-value</li>
<li>Graph</li>
<li>Timeseries</li>
<li>Wide column</li>
<li>Multi-model</li>
</ul>
</li>
</ul>
<p>SQL and NoSQL databases are broad topics and will be discussed separately in <a href="https://karanpratapsingh.com/courses/system-design/sql-databases" target="_blank" rel="noopener noreffer ">SQL databases</a> and <a href="https://karanpratapsingh.com/courses/system-design/nosql-databases" target="_blank" rel="noopener noreffer ">NoSQL databases</a>. Learn how they compare to each other in <a href="https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases" target="_blank" rel="noopener noreffer ">SQL vs NoSQL databases</a>.</p>
<h2 id="challenges-1">Challenges</h2>
<p>Some common challenges faced while running databases at scale:</p>
<ul>
<li><strong>Absorbing significant increases in data volume</strong>: The explosion of data coming in from sensors, connected machines, and dozens of other sources.</li>
<li><strong>Ensuring data security</strong>: Data breaches are happening everywhere these days, it&rsquo;s more important than ever to ensure that data is secure but also easily accessible to users.</li>
<li><strong>Keeping up with demand</strong>: Companies need real-time access to their data to support timely decision-making and to take advantage of new opportunities.</li>
<li><strong>Managing and maintaining the database and infrastructure</strong>: As databases become more complex and data volumes grow, companies are faced with the expense of hiring additional talent to manage their databases.</li>
<li><strong>Removing limits on scalability</strong>: A business needs to grow if it&rsquo;s going to survive, and its data management must grow along with it. But it&rsquo;s very difficult to predict how much capacity the company will need, particularly with on-premises databases.</li>
<li><strong>Ensuring data residency, data sovereignty, or latency requirements</strong>: Some organizations have use cases that are better suited to run on-premises. In those cases, engineered systems that are pre-configured and pre-optimized for running the database are ideal.</li>
</ul>
<h1 id="sql-databases">SQL databases</h1>
<p>A SQL (or relational) database is a collection of data items with pre-defined relationships between them. These items are organized as a set of tables with columns and rows. Tables are used to hold information about the objects to be represented in the database. Each column in a table holds a certain kind of data and a field stores the actual value of an attribute. The rows in the table represent a collection of related values of one object or entity.</p>
<p>Each row in a table could be marked with a unique identifier called a primary key, and rows among multiple tables can be made related using foreign keys. This data can be accessed in many different ways without re-organizing the database tables themselves. SQL databases usually follow the <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#acid" target="_blank" rel="noopener noreffer ">ACID consistency model</a>.</p>
<h2 id="materialized-views">Materialized views</h2>
<p>A materialized view is a pre-computed data set derived from a query specification and stored for later use. Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view. This performance difference can be significant when a query is run frequently or is sufficiently complex.</p>
<p>It also enables data subsetting and improves the performance of complex queries that run on large data sets which reduces network loads. There are other uses of materialized views, but they are mostly used for performance and replication.</p>
<h2 id="n1-query-problem">N+1 query problem</h2>
<p>The N+1 query problem happens when the data access layer executes N additional SQL statements to fetch the same data that could have been retrieved when executing the primary SQL query. The larger the value of N, the more queries will be executed, the larger the performance impact.</p>
<p>This is commonly seen in GraphQL and ORM (Object-Relational Mapping) tools and can be addressed by optimizing the SQL query or using a dataloader that batches consecutive requests and makes a single data request under the hood.</p>
<h2 id="advantages-5">Advantages</h2>
<p>Let&rsquo;s look at some advantages of using relational databases:</p>
<ul>
<li>Simple and accurate</li>
<li>Accessibility</li>
<li>Data consistency</li>
<li>Flexibility</li>
</ul>
<h2 id="disadvantages-3">Disadvantages</h2>
<p>Below are the disadvantages of relational databases:</p>
<ul>
<li>Expensive to maintain</li>
<li>Difficult schema evolution</li>
<li>Performance hits (join, denormalization, etc.)</li>
<li>Difficult to scale due to poor horizontal scalability</li>
</ul>
<h2 id="examples-6">Examples</h2>
<p>Here are some commonly used relational databases:</p>
<ul>
<li><a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a></li>
<li><a href="https://www.mysql.com" target="_blank" rel="noopener noreffer ">MySQL</a></li>
<li><a href="https://mariadb.org" target="_blank" rel="noopener noreffer ">MariaDB</a></li>
<li><a href="https://aws.amazon.com/rds/aurora" target="_blank" rel="noopener noreffer ">Amazon Aurora</a></li>
</ul>
<h1 id="nosql-databases">NoSQL databases</h1>
<p>NoSQL is a broad category that includes any database that doesn&rsquo;t use SQL as its primary data access language. These types of databases are also sometimes referred to as non-relational databases. Unlike in relational databases, data in a NoSQL database doesn&rsquo;t have to conform to a pre-defined schema. NoSQL databases follow <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#base" target="_blank" rel="noopener noreffer ">BASE consistency model</a>.</p>
<p>Below are different types of NoSQL databases:</p>
<h3 id="document">Document</h3>
<p>A document database (also known as a document-oriented database or a document store) is a database that stores information in documents. They are general-purpose databases that serve a variety of use cases for both transactional and analytical applications.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Intuitive and flexible</li>
<li>Easy horizontal scaling</li>
<li>Schemaless</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Schemaless</li>
<li>Non-relational</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.mongodb.com" target="_blank" rel="noopener noreffer ">MongoDB</a></li>
<li><a href="https://aws.amazon.com/documentdb" target="_blank" rel="noopener noreffer ">Amazon DocumentDB</a></li>
<li><a href="https://couchdb.apache.org" target="_blank" rel="noopener noreffer ">CouchDB</a></li>
</ul>
<h3 id="key-value">Key-value</h3>
<p>One of the simplest types of NoSQL databases, key-value databases save data as a group of key-value pairs made up of two data items each. They&rsquo;re also sometimes referred to as a key-value store.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Simple and performant</li>
<li>Highly scalable for high volumes of traffic</li>
<li>Session management</li>
<li>Optimized lookups</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Basic CRUD</li>
<li>Values can&rsquo;t be filtered</li>
<li>Lacks indexing and scanning capabilities</li>
<li>Not optimized for complex queries</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a></li>
<li><a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a></li>
<li><a href="https://aws.amazon.com/dynamodb" target="_blank" rel="noopener noreffer ">Amazon DynamoDB</a></li>
<li><a href="https://aerospike.com" target="_blank" rel="noopener noreffer ">Aerospike</a></li>
</ul>
<h3 id="graph">Graph</h3>
<p>A graph database is a NoSQL database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data instead of tables or documents.</p>
<p>The graph relates the data items in the store to a collection of nodes and edges, the edges representing the relationships between the nodes. The relationships allow data in the store to be linked together directly and, in many cases, retrieved with one operation.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Query speed</li>
<li>Agile and flexible</li>
<li>Explicit data representation</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Complex</li>
<li>No standardized query language</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>Fraud detection</li>
<li>Recommendation engines</li>
<li>Social networks</li>
<li>Network mapping</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://neo4j.com" target="_blank" rel="noopener noreffer ">Neo4j</a></li>
<li><a href="https://www.arangodb.com" target="_blank" rel="noopener noreffer ">ArangoDB</a></li>
<li><a href="https://aws.amazon.com/neptune" target="_blank" rel="noopener noreffer ">Amazon Neptune</a></li>
<li><a href="https://janusgraph.org" target="_blank" rel="noopener noreffer ">JanusGraph</a></li>
</ul>
<h3 id="time-series">Time series</h3>
<p>A time-series database is a database optimized for time-stamped, or time series, data.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Fast insertion and retrieval</li>
<li>Efficient data storage</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>IoT data</li>
<li>Metrics analysis</li>
<li>Application monitoring</li>
<li>Understand financial trends</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.influxdata.com" target="_blank" rel="noopener noreffer ">InfluxDB</a></li>
<li><a href="https://druid.apache.org" target="_blank" rel="noopener noreffer ">Apache Druid</a></li>
</ul>
<h3 id="wide-column">Wide column</h3>
<p>Wide column databases, also known as wide column stores, are schema-agnostic. Data is stored in column families, rather than in rows and columns.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Highly scalable, can handle petabytes of data</li>
<li>Ideal for real-time big data applications</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Expensive</li>
<li>Increased write time</li>
</ul>
<p><strong>Use cases</strong></p>
<ul>
<li>Business analytics</li>
<li>Attribute-based data storage</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://cloud.google.com/bigtable" target="_blank" rel="noopener noreffer ">BigTable</a></li>
<li><a href="https://cassandra.apache.org" target="_blank" rel="noopener noreffer ">Apache Cassandra</a></li>
<li><a href="https://www.scylladb.com" target="_blank" rel="noopener noreffer ">ScyllaDB</a></li>
</ul>
<h3 id="multi-model">Multi-model</h3>
<p>Multi-model databases combine different database models (i.e. relational, graph, key-value, document, etc.) into a single, integrated backend. This means they can accommodate various data types, indexes, queries, and store data in more than one model.</p>
<p><strong>Advantages</strong></p>
<ul>
<li>Flexibility</li>
<li>Suitable for complex projects</li>
<li>Data consistent</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Complex</li>
<li>Less mature</li>
</ul>
<p><strong>Examples</strong></p>
<ul>
<li><a href="https://www.arangodb.com" target="_blank" rel="noopener noreffer ">ArangoDB</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/cosmos-db" target="_blank" rel="noopener noreffer ">Azure Cosmos DB</a></li>
<li><a href="https://www.couchbase.com" target="_blank" rel="noopener noreffer ">Couchbase</a></li>
</ul>
<h1 id="sql-vs-nosql-databases">SQL vs NoSQL databases</h1>
<p>In the world of databases, there are two main types of solutions, SQL (relational) and NoSQL (non-relational) databases. Both of them differ in the way they were built, the kind of information they store, and how they store it. Relational databases are structured and have predefined schemas while non-relational databases are unstructured, distributed, and have a dynamic schema.</p>
<h2 id="high-level-differences">High-level differences</h2>
<p>Here are some high-level differences between SQL and NoSQL:</p>
<h3 id="storage-1">Storage</h3>
<p>SQL stores data in tables, where each row represents an entity and each column represents a data point about that entity.</p>
<p>NoSQL databases have different data storage models such as key-value, graph, document, etc.</p>
<h3 id="schema-1">Schema</h3>
<p>In SQL, each record conforms to a fixed schema, meaning the columns must be decided and chosen before data entry and each row must have data for each column. The schema can be altered later, but it involves modifying the database using migrations.</p>
<p>Whereas in NoSQL, schemas are dynamic. Fields can be added on the fly, and each <em>record</em> (or equivalent) doesn&rsquo;t have to contain data for each <em>field</em>.</p>
<h3 id="querying">Querying</h3>
<p>SQL databases use SQL (structured query language) for defining and manipulating the data, which is very powerful.</p>
<p>In a NoSQL database, queries are focused on a collection of documents. Different databases have different syntax for querying.</p>
<h3 id="scalability-1">Scalability</h3>
<p>In most common situations, SQL databases are vertically scalable, which can get very expensive. It is possible to scale a relational database across multiple servers, but this is a challenging and time-consuming process.</p>
<p>On the other hand, NoSQL databases are horizontally scalable, meaning we can add more servers easily to our NoSQL database infrastructure to handle large traffic. Any cheap commodity hardware or cloud instances can host NoSQL databases, thus making it a lot more cost-effective than vertical scaling. A lot of NoSQL technologies also distribute data across servers automatically.</p>
<h3 id="reliability">Reliability</h3>
<p>The vast majority of relational databases are ACID compliant. So, when it comes to data reliability and a safe guarantee of performing transactions, SQL databases are still the better bet.</p>
<p>Most of the NoSQL solutions sacrifice ACID compliance for performance and scalability.</p>
<h2 id="reasons">Reasons</h2>
<p>As always we should always pick the technology that fits the requirements better. So, let&rsquo;s look at some reasons for picking SQL or NoSQL based database:</p>
<p><strong>For SQL</strong></p>
<ul>
<li>Structured data with strict schema</li>
<li>Relational data</li>
<li>Need for complex joins</li>
<li>Transactions</li>
<li>Lookups by index are very fast</li>
</ul>
<p><strong>For NoSQL</strong></p>
<ul>
<li>Dynamic or flexible schema</li>
<li>Non-relational data</li>
<li>No need for complex joins</li>
<li>Very data-intensive workload</li>
<li>Very high throughput for IOPS</li>
</ul>
<h1 id="database-replication">Database Replication</h1>
<p>Replication is a process that involves sharing information to ensure consistency between redundant resources such as multiple databases, to improve reliability, fault-tolerance, or accessibility.</p>
<h2 id="master-slave-replication">Master-Slave Replication</h2>
<p>The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.</p>
<p></p>
<h3 id="advantages-6">Advantages</h3>
<ul>
<li>Backups of the entire database of relatively no impact on the master.</li>
<li>Applications can read from the slave(s) without impacting the master.</li>
<li>Slaves can be taken offline and synced back to the master without any downtime.</li>
</ul>
<h3 id="disadvantages-4">Disadvantages</h3>
<ul>
<li>Replication adds more hardware and additional complexity.</li>
<li>Downtime and possibly loss of data when a master fails.</li>
<li>All writes also have to be made to the master in a master-slave architecture.</li>
<li>The more read slaves, the more we have to replicate, which will increase replication lag.</li>
</ul>
<h2 id="master-master-replication">Master-Master Replication</h2>
<p>Both masters serve reads/writes and coordinate with each other. If either master goes down, the system can continue to operate with both reads and writes.</p>
<p></p>
<h3 id="advantages-7">Advantages</h3>
<ul>
<li>Applications can read from both masters.</li>
<li>Distributes write load across both master nodes.</li>
<li>Simple, automatic, and quick failover.</li>
</ul>
<h3 id="disadvantages-5">Disadvantages</h3>
<ul>
<li>Not as simple as master-slave to configure and deploy.</li>
<li>Either loosely consistent or have increased write latency due to synchronization.</li>
<li>Conflict resolution comes into play as more write nodes are added and as latency increases.</li>
</ul>
<h2 id="synchronous-vs-asynchronous-replication">Synchronous vs Asynchronous replication</h2>
<p>The primary difference between synchronous and asynchronous replication is how the data is written to the replica. In synchronous replication, data is written to primary storage and the replica simultaneously. As such, the primary copy and the replica should always remain synchronized.</p>
<p>In contrast, asynchronous replication copies the data to the replica after the data is already written to the primary storage. Although the replication process may occur in near-real-time, it is more common for replication to occur on a scheduled basis and it is more cost-effective.</p>
<h1 id="indexes">Indexes</h1>
<p>Indexes are well known when it comes to databases, they are used to improve the speed of data retrieval operations on the data store. An index makes the trade-offs of increased storage overhead, and slower writes (since we not only have to write the data but also have to update the index) for the benefit of faster reads. Indexes are used to quickly locate data without having to examine every row in a database table. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access to ordered records.</p>
<p></p>
<p>An index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives. So when we create an index on a column of a table, we store that column and a pointer to the whole row in the index. Indexes are also used to create different views of the same data. For large data sets, this is an excellent way to specify different filters or sorting schemes without resorting to creating multiple additional copies of the data.</p>
<p>One quality that database indexes can have is that they can be <strong>dense</strong> or <strong>sparse</strong>. Each of these index qualities comes with its own trade-offs. Let&rsquo;s look at how each index type would work:</p>
<h2 id="dense-index">Dense Index</h2>
<p>In a dense index, an index record is created for every row of the table. Records can be located directly as each record of the index holds the search key value and the pointer to the actual record.</p>
<p></p>
<p>Dense indexes require more maintenance than sparse indexes at write-time. Since every row must have an entry, the database must maintain the index on inserts, updates, and deletes. Having an entry for every row also means that dense indexes will require more memory. The benefit of a dense index is that values can be quickly found with just a binary search. Dense indexes also do not impose any ordering requirements on the data.</p>
<h2 id="sparse-index">Sparse Index</h2>
<p>In a sparse index, records are created only for some of the records.</p>
<p></p>
<p>Sparse indexes require less maintenance than dense indexes at write-time since they only contain a subset of the values. This lighter maintenance burden means that inserts, updates, and deletes will be faster. Having fewer entries also means that the index will use less memory. Finding data is slower since a scan across the page typically follows the binary search. Sparse indexes are also optional when working with ordered data.</p>
<h1 id="normalization-and-denormalization">Normalization and Denormalization</h1>
<h2 id="terms">Terms</h2>
<p>Before we go any further, let&rsquo;s look at some commonly used terms in normalization and denormalization.</p>
<h3 id="keys">Keys</h3>
<p><strong>Primary key</strong>: Column or group of columns that can be used to uniquely identify every row of the table.</p>
<p><strong>Composite key</strong>: A primary key made up of multiple columns.</p>
<p><strong>Super key</strong>: Set of all keys that can uniquely identify all the rows present in a table.</p>
<p><strong>Candidate key</strong>: Attributes that identify rows uniquely in a table.</p>
<p><strong>Foreign key</strong>: It is a reference to a primary key of another table.</p>
<p><strong>Alternate key</strong>: Keys that are not primary keys are known as alternate keys.</p>
<p><strong>Surrogate key</strong>: A system-generated value that uniquely identifies each entry in a table when no other column was able to hold properties of a primary key.</p>
<h3 id="dependencies">Dependencies</h3>
<p><strong>Partial dependency</strong>: Occurs when the primary key determines some other attributes.</p>
<p><strong>Functional dependency</strong>: It is a relationship that exists between two attributes, typically between the primary key and non-key attribute within a table.</p>
<p><strong>Transitive functional dependency</strong>: Occurs when some non-key attribute determines some other attribute.</p>
<h3 id="anomalies">Anomalies</h3>
<p>Database anomaly happens when there is a flaw in the database due to incorrect planning or storing everything in a flat database. This is generally addressed by the process of normalization.</p>
<p>There are three types of database anomalies:</p>
<p><strong>Insertion anomaly</strong>: Occurs when we are not able to insert certain attributes in the database without the presence of other attributes.</p>
<p><strong>Update anomaly</strong>: Occurs in case of data redundancy and partial update. In other words, a correct update of the database needs other actions such as addition, deletion, or both.</p>
<p><strong>Deletion anomaly</strong>: Occurs where deletion of some data requires deletion of other data.</p>
<p><strong>Example</strong></p>
<p>Let&rsquo;s consider the following table which is not normalized:</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Name</th>
<th>Role</th>
<th>Team</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Peter</td>
<td>Software Engineer</td>
<td>A</td>
</tr>
<tr>
<td>2</td>
<td>Brian</td>
<td>DevOps Engineer</td>
<td>B</td>
</tr>
<tr>
<td>3</td>
<td>Hailey</td>
<td>Product Manager</td>
<td>C</td>
</tr>
<tr>
<td>4</td>
<td>Hailey</td>
<td>Product Manager</td>
<td>C</td>
</tr>
<tr>
<td>5</td>
<td>Steve</td>
<td>Frontend Engineer</td>
<td>D</td>
</tr>
</tbody>
</table>
<p>Let&rsquo;s imagine, we hired a new person &ldquo;John&rdquo; but they might not be assigned a team immediately. This will cause an <em>insertion anomaly</em> as the team attribute is not yet present.</p>
<p>Next, let&rsquo;s say Hailey from Team C got promoted, to reflect that change in the database, we will need to update 2 rows to maintain consistency which can cause an <em>update anomaly</em>.</p>
<p>Finally, we would like to remove Team B but to do that we will also need to remove additional information such as name and role, this is an example of a <em>deletion anomaly</em>.</p>
<h2 id="normalization">Normalization</h2>
<p>Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.</p>
<h3 id="why-do-we-need-normalization">Why do we need normalization?</h3>
<p>The goal of normalization is to eliminate redundant data and ensure data is consistent. A fully normalized database allows its structure to be extended to accommodate new types of data without changing the existing structure too much. As a result, applications interacting with the database are minimally affected.</p>
<h3 id="normal-forms">Normal forms</h3>
<p>Normal forms are a series of guidelines to ensure that the database is normalized. Let&rsquo;s discuss some essential normal forms:</p>
<p><strong>1NF</strong></p>
<p>For a table to be in the first normal form (1NF), it should follow the following rules:</p>
<ul>
<li>Repeating groups are not permitted.</li>
<li>Identify each set of related data with a primary key.</li>
<li>Set of related data should have a separate table.</li>
<li>Mixing data types in the same column is not permitted.</li>
</ul>
<p><strong>2NF</strong></p>
<p>For a table to be in the second normal form (2NF), it should follow the following rules:</p>
<ul>
<li>Satisfies the first normal form (1NF).</li>
<li>Should not have any partial dependency.</li>
</ul>
<p><strong>3NF</strong></p>
<p>For a table to be in the third normal form (3NF), it should follow the following rules:</p>
<ul>
<li>Satisfies the second normal form (2NF).</li>
<li>Transitive functional dependencies are not permitted.</li>
</ul>
<p><strong>BCNF</strong></p>
<p>Boyce-Codd normal form (or BCNF) is a slightly stronger version of the third normal form (3NF) used to address certain types of anomalies not dealt with by 3NF as originally defined. Sometimes it is also known as the 3.5 normal form (3.5NF).</p>
<p>For a table to be in the Boyce-Codd normal form (BCNF), it should follow the following rules:</p>
<ul>
<li>Satisfied the third normal form (3NF).</li>
<li>For every functional dependency X → Y, X should be the super key.</li>
</ul>
<p><em>There are more normal forms such as 4NF, 5NF, and 6NF but we won&rsquo;t discuss them here. Check out this <a href="https://www.youtube.com/watch?v=GFQaEYEc8_8" target="_blank" rel="noopener noreffer ">amazing video</a> that goes into detail.</em></p>
<p>In a relational database, a relation is often described as <em>&ldquo;normalized&rdquo;</em> if it meets the third normal form. Most 3NF relations are free of insertion, update, and deletion anomalies.</p>
<p>As with many formal rules and specifications, real-world scenarios do not always allow for perfect compliance. If you decide to violate one of the first three rules of normalization, make sure that your application anticipates any problems that could occur, such as redundant data and inconsistent dependencies.</p>
<h3 id="advantages-8">Advantages</h3>
<p>Here are some advantages of normalization:</p>
<ul>
<li>Reduces data redundancy.</li>
<li>Better data design.</li>
<li>Increases data consistency.</li>
<li>Enforces referential integrity.</li>
</ul>
<h3 id="disadvantages-6">Disadvantages</h3>
<p>Let&rsquo;s look at some disadvantages of normalization:</p>
<ul>
<li>Data design is complex.</li>
<li>Slower performance.</li>
<li>Maintenance overhead.</li>
<li>Require more joins.</li>
</ul>
<h2 id="denormalization">Denormalization</h2>
<p>Denormalization is a database optimization technique in which we add redundant data to one or more tables. This can help us avoid costly joins in a relational database. It attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins.</p>
<p>Once data becomes distributed with techniques such as federation and sharding, managing joins across the network further increases complexity. Denormalization might circumvent the need for such complex joins.</p>
<p><em>Note: Denormalization does not mean reversing normalization.</em></p>
<h3 id="advantages-9">Advantages</h3>
<p>Let&rsquo;s look at some advantages of denormalization:</p>
<ul>
<li>Retrieving data is faster.</li>
<li>Writing queries is easier.</li>
<li>Reduction in number of tables.</li>
<li>Convenient to manage.</li>
</ul>
<h3 id="disadvantages-7">Disadvantages</h3>
<p>Below are some disadvantages of denormalization:</p>
<ul>
<li>Expensive inserts and updates.</li>
<li>Increases complexity of database design.</li>
<li>Increases data redundancy.</li>
<li>More chances of data inconsistency.</li>
</ul>
<h1 id="acid-and-base-consistency-models">ACID and BASE consistency models</h1>
<p>Let&rsquo;s discuss the ACID and BASE consistency models.</p>
<h2 id="acid">ACID</h2>
<p>The term ACID stands for Atomicity, Consistency, Isolation, and Durability. ACID properties are used for maintaining data integrity during transaction processing.</p>
<p>In order to maintain consistency before and after a transaction relational databases follow ACID properties. Let us understand these terms:</p>
<h3 id="atomic">Atomic</h3>
<p>All operations in a transaction succeed or every operation is rolled back.</p>
<h3 id="consistent">Consistent</h3>
<p>On the completion of a transaction, the database is structurally sound.</p>
<h3 id="isolated">Isolated</h3>
<p>Transactions do not contend with one another. Contentious access to data is moderated by the database so that transactions appear to run sequentially.</p>
<h3 id="durable">Durable</h3>
<p>Once the transaction has been completed and the writes and updates have been written to the disk, it will remain in the system even if a system failure occurs.</p>
<h2 id="base">BASE</h2>
<p>With the increasing amount of data and high availability requirements, the approach to database design has also changed dramatically. To increase the ability to scale and at the same time be highly available, we move the logic from the database to separate servers. In this way, the database becomes more independent and focused on the actual process of storing data.</p>
<p>In the NoSQL database world, ACID transactions are less common as some databases have loosened the requirements for immediate consistency, data freshness, and accuracy in order to gain other benefits, like scale and resilience.</p>
<p>BASE properties are much looser than ACID guarantees, but there isn&rsquo;t a direct one-for-one mapping between the two consistency models. Let us understand these terms:</p>
<h3 id="basic-availability">Basic Availability</h3>
<p>The database appears to work most of the time.</p>
<h3 id="soft-state">Soft-state</h3>
<p>Stores don&rsquo;t have to be write-consistent, nor do different replicas have to be mutually consistent all the time.</p>
<h3 id="eventual-consistency">Eventual consistency</h3>
<p>The data might not be consistent immediately but eventually, it becomes consistent. Reads in the system are still possible even though they may not give the correct response due to inconsistency.</p>
<h2 id="acid-vs-base-trade-offs">ACID vs BASE Trade-offs</h2>
<p>There&rsquo;s no right answer to whether our application needs an ACID or a BASE consistency model. Both the models have been designed to satisfy different requirements. While choosing a database we need to keep the properties of both the models and the requirements of our application in mind.</p>
<p>Given BASE&rsquo;s loose consistency, developers need to be more knowledgeable and rigorous about consistent data if they choose a BASE store for their application. It&rsquo;s essential to be familiar with the BASE behavior of the chosen database and work within those constraints.</p>
<p>On the other hand, planning around BASE limitations can sometimes be a major disadvantage when compared to the simplicity of ACID transactions. A fully ACID database is the perfect fit for use cases where data reliability and consistency are essential.</p>
<h1 id="cap-theorem">CAP Theorem</h1>
<p><em>Video</em>: <a href="https://youtu.be/8UryASGBiR4" target="_blank" rel="noopener noreffer ">https://youtu.be/8UryASGBiR4</a></p>
<p>CAP theorem states that a distributed system can deliver only two of the three desired characteristics Consistency, Availability, and Partition tolerance (CAP).</p>
 <p align="center">
    
 </p>
<h3 id="consistency">Consistency</h3>
<p>In a consistent system, <strong>all nodes see the same data</strong> simultaneously. If we perform a read operation on a consistent system, it should return the value of the most recent write operation. The read should cause all nodes to return the same data. All users see the same data at the same time, regardless of the node they connect to. When data is written to a single node, it is then replicated across the other nodes in the system. For this to happen, whenever data is written to one node, it must be instantly forwarded or replicated across all the nodes in the system before the write is deemed &ldquo;successful&rdquo;.</p>
<p>Financial data is a good example. When a user logs in to their banking institution, they do not want to see an error that no data is returned, or that the value is higher or lower than it actually is. Banking apps should return the exact value of a user’s account information. In this case, banks would rely on consistent databases.</p>
<p>Examples of a consistent database include:</p>
<ul>
<li>Bank account balances</li>
<li>Text messages</li>
</ul>
<p>Database options for consistency:</p>
<ul>
<li>MongoDB</li>
<li>Redis</li>
<li>HBase</li>
</ul>
<h3 id="availability-1">Availability</h3>
<p>When availability is present in a distributed system, it means that the <strong>system remains operational all of the time</strong>. Every request will get a response regardless of the individual state of the nodes. This means that the system will operate even if there are multiple nodes down. Unlike a consistent system, there’s <strong>no guarantee that the response will be the most recent write operation</strong>.</p>
<p>Example of a highly available database:</p>
<ul>
<li>On <strong>YouTube</strong> and <strong>social media</strong> like Facebook and Instagram, we can ignore consistency in views or likes count but the <strong>availability of videos and posts is essential</strong>.</li>
<li>In <strong>e-commerce businesses</strong>. Online stores want to make their store and the functions of the shopping cart available 24/7 so shoppers can make purchases exactly when they need.</li>
</ul>
<p>Database options for availability:</p>
<ul>
<li>Cassandra</li>
<li>DynamoDB</li>
<li>Cosmos DB</li>
</ul>
<h3 id="partition-tolerance">Partition tolerance</h3>
<p>When a distributed system encounters a partition, it means that there’s a <strong>break in communication between nodes</strong>. If a system is partition-tolerant, the system does not fail, regardless of whether messages are dropped or delayed between nodes within the system. To have partition tolerance, the system must replicate records across combinations of nodes and networks.</p>
<h3 id="cap-theorem-nosql-databases">CAP theorem NoSQL databases</h3>
<p>NoSQL databases can be classified based on whether they support high availability or high consistency.
NoSQL databases are great for distributed networks. They allow for <strong>horizontal scaling</strong>, and they can quickly scale across multiple nodes. When deciding which NoSQL database to use, it’s important to keep the CAP theorem in mind. NoSQL databases can be classified based on the two CAP features they support.</p>
 <p align="center">
    
 </p>
<h2 id="consistency-availability-tradeoff">Consistency-Availability Tradeoff</h2>
<p>We live in a physical world and can&rsquo;t guarantee the stability of a network, so distributed databases must choose Partition Tolerance (P). This implies a tradeoff between Consistency (C) and Availability (A).</p>
<h3 id="ca-database">CA database</h3>
<p><strong>Relational databases</strong>, such as PostgreSQL, allow for consistency and availability if the systems are <strong>vertically scale</strong> on a <strong>single machine</strong>, we can avoid fault tolerance.
A CA database delivers consistency and availability across all nodes. It can&rsquo;t do this if there is a partition between any two nodes in the system, and therefore can&rsquo;t deliver fault tolerance.</p>
<p><strong>Example</strong>: <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a>, <a href="https://mariadb.org" target="_blank" rel="noopener noreffer ">MariaDB</a>.</p>
<h3 id="cp-database">CP database</h3>
<p>CP databases enable consistency and partition tolerance, but not availability. When a partition occurs, the system has to <strong>turn off inconsistent nodes until the partition can be fixed</strong>. That&rsquo;s why they are not 100% available. 
MongoDB is an example of a CP database. It’s a NoSQL database management system (DBMS) that uses documents for data storage. It’s considered schema-less, which means that it doesn’t require a defined database schema. It’s commonly used in big data and applications running in different locations. The CP system is structured so that there’s only one primary node that receives all of the write requests in a given replica set. Secondary nodes replicate the data in the primary nodes, so if the primary node fails, a secondary node can stand-in.
<strong>Example</strong>: <a href="https://www.mongodb.com" target="_blank" rel="noopener noreffer ">MongoDB</a>, <a href="https://hbase.apache.org" target="_blank" rel="noopener noreffer ">Apache HBase</a>.</p>
<h3 id="ap-database">AP database</h3>
<p>AP databases enable availability and partition tolerance, but not consistency. In the event of a partition, all nodes are available, but they’re not all updated. For example, if a user tries to access data from a bad node, they <strong>won’t receive the most up-to-date version of the data</strong>. When the partition is eventually resolved, most AP databases will sync the nodes to ensure consistency across them. Apache Cassandra is an example of an AP database. It’s a NoSQL database with no primary node, meaning that all of the nodes remain available. Cassandra allows for eventual consistency because users can resync their data right after a partition is resolved.</p>
<p><strong>Example</strong>: <a href="https://cassandra.apache.org" target="_blank" rel="noopener noreffer ">Apache Cassandra</a>, <a href="https://couchdb.apache.org" target="_blank" rel="noopener noreffer ">CouchDB</a>.</p>
<h3 id="cap-theorem-and-microservices">CAP theorem and microservices</h3>
<p>Microservices are defined as loosely coupled services that can be independently developed, deployed, and maintained. They include their own stack, database, and database model, and communicate with each other through a network. Microservices have become especially popular in <strong>hybrid cloud and <a href="https://www.educative.io/blog/what-is-multi-cloud" target="_blank" rel="noopener noreffer ">multi-cloud</a> environments</strong>, and they are also widely used in on-premises data centers. If you want to create a microservices application, you can use the CAP theorem to help you determine a database that will best fit your needs.</p>
<h1 id="pacelc-theorem">PACELC Theorem</h1>
<p>The PACELC theorem is an extension of the CAP theorem. The CAP theorem states that in the case of network partitioning (P) in a distributed system, one has to choose between Availability (A) and Consistency (C).</p>
<p>PACELC extends the CAP theorem by introducing latency (L) as an additional attribute of a distributed system. The theorem states that else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and consistency (C).</p>
<p><em>The PACELC theorem was first described by <a href="https://scholar.google.com/citations?user=zxeEF2gAAAAJ" target="_blank" rel="noopener noreffer ">Daniel J. Abadi</a>.</em></p>
<p></p>
<p>PACELC theorem was developed to address a key limitation of the CAP theorem as it makes no provision for performance or latency.</p>
<p>For example, according to the CAP theorem, a database can be considered Available if a query returns a response after 30 days. Obviously, such latency would be unacceptable for any real-world application.</p>
<h1 id="transactions">Transactions</h1>
<p>A transaction is a series of database operations that are considered to be a <em>&ldquo;single unit of work&rdquo;</em>. The operations in a transaction either all succeed, or they all fail. In this way, the notion of a transaction supports data integrity when part of a system fails. Not all databases choose to support ACID transactions, usually because they are prioritizing other optimizations that are hard or theoretically impossible to implement together.</p>
<p><em>Usually, relational databases support ACID transactions, and non-relational databases don&rsquo;t (there are exceptions).</em></p>
<h2 id="states">States</h2>
<p>A transaction in a database can be in one of the following states:</p>
<p></p>
<h3 id="active">Active</h3>
<p>In this state, the transaction is being executed. This is the initial state of every transaction.</p>
<h3 id="partially-committed">Partially Committed</h3>
<p>When a transaction executes its final operation, it is said to be in a partially committed state.</p>
<h3 id="committed">Committed</h3>
<p>If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the database system.</p>
<h3 id="failed">Failed</h3>
<p>The transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer proceed further.</p>
<h3 id="aborted">Aborted</h3>
<p>If any of the checks fail and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state are aborted.</p>
<p>The database recovery module can select one of the two operations after a transaction aborts:</p>
<ul>
<li>Restart the transaction</li>
<li>Kill the transaction</li>
</ul>
<h3 id="terminated">Terminated</h3>
<p>If there isn&rsquo;t any roll-back or the transaction comes from the <em>committed state</em>, then the system is consistent and ready for a new transaction and the old transaction is terminated.</p>
<h1 id="distributed-transactions">Distributed Transactions</h1>
<p>A distributed transaction is a set of operations on data that is performed across two or more databases. It is typically coordinated across separate nodes connected by a network, but may also span multiple databases on a single server.</p>
<h2 id="why-do-we-need-distributed-transactions">Why do we need distributed transactions?</h2>
<p>Unlike an ACID transaction on a single database, a distributed transaction involves altering data on multiple databases. Consequently, distributed transaction processing is more complicated, because the database must coordinate the committing or rollback of the changes in a transaction as a self-contained unit.</p>
<p>In other words, all the nodes must commit, or all must abort and the entire transaction rolls back. This is why we need distributed transactions.</p>
<p>Now, let&rsquo;s look at some popular solutions for distributed transactions:</p>
<h2 id="two-phase-commit">Two-Phase commit</h2>
<p></p>
<p>The two-phase commit (2PC) protocol is a distributed algorithm that coordinates all the processes that participate in a distributed transaction on whether to commit or abort (roll back) the transaction.</p>
<p>This protocol achieves its goal even in many cases of temporary system failure and is thus widely used. However, it is not resilient to all possible failure configurations, and in rare cases, manual intervention is needed to remedy an outcome.</p>
<p>This protocol requires a coordinator node, which basically coordinates and oversees the transaction across different nodes. The coordinator tries to establish the consensus among a set of processes in two phases, hence the name.</p>
<h3 id="phases">Phases</h3>
<p>Two-phase commit consists of the following phases:</p>
<p><strong>Prepare phase</strong></p>
<p>The prepare phase involves the coordinator node collecting consensus from each of the participant nodes. The transaction will be aborted unless each of the nodes responds that they&rsquo;re <em>prepared</em>.</p>
<p><strong>Commit phase</strong></p>
<p>If all participants respond to the coordinator that they are <em>prepared</em>, then the coordinator asks all the nodes to commit the transaction. If a failure occurs, the transaction will be rolled back.</p>
<h3 id="problems">Problems</h3>
<p>Following problems may arise in the two-phase commit protocol:</p>
<ul>
<li>What if one of the nodes crashes?</li>
<li>What if the coordinator itself crashes?</li>
<li>It is a blocking protocol.</li>
</ul>
<h2 id="three-phase-commit">Three-phase commit</h2>
<p></p>
<p>Three-phase commit (3PC) is an extension of the two-phase commit where the commit phase is split into two phases. This helps with the blocking problem that occurs in the two-phase commit protocol.</p>
<h3 id="phases-1">Phases</h3>
<p>Three-phase commit consists of the following phases:</p>
<p><strong>Prepare phase</strong></p>
<p>This phase is the same as the two-phase commit.</p>
<p><strong>Pre-commit phase</strong></p>
<p>Coordinator issues the pre-commit message and all the participating nodes must acknowledge it. If a participant fails to receive this message in time, then the transaction is aborted.</p>
<p><strong>Commit phase</strong></p>
<p>This step is also similar to the two-phase commit protocol.</p>
<h3 id="why-is-the-pre-commit-phase-helpful">Why is the Pre-commit phase helpful?</h3>
<p>The pre-commit phase accomplishes the following:</p>
<ul>
<li>If the participant nodes are found in this phase, that means that <em>every</em> participant has completed the first phase. The completion of prepare phase is guaranteed.</li>
<li>Every phase can now time out and avoid indefinite waits.</li>
</ul>
<h2 id="sagas">Sagas</h2>
<p></p>
<p>A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.</p>
<h3 id="coordination">Coordination</h3>
<p>There are two common implementation approaches:</p>
<ul>
<li><strong>Choreography</strong>: Each local transaction publishes domain events that trigger local transactions in other services.</li>
<li><strong>Orchestration</strong>: An orchestrator tells the participants what local transactions to execute.</li>
</ul>
<h3 id="problems-1">Problems</h3>
<ul>
<li>The Saga pattern is particularly hard to debug.</li>
<li>There&rsquo;s a risk of cyclic dependency between saga participants.</li>
<li>Lack of participant data isolation imposes durability challenges.</li>
<li>Testing is difficult because all services must be running to simulate a transaction.</li>
</ul>
<h1 id="sharding">Sharding</h1>
<p>Before we discuss sharding, let&rsquo;s talk about data partitioning:</p>
<h2 id="data-partitioning">Data Partitioning</h2>
<p>Data partitioning is a technique to break up a database into many smaller parts. It is the process of splitting up a database or a table across multiple machines to improve the manageability, performance, and availability of a database.</p>
<h3 id="methods">Methods</h3>
<p>There are many different ways one could use to decide how to break up an application database into multiple smaller DBs. Below are three of the most popular methods used by various large-scale applications:</p>
<p><strong>Horizontal Partitioning (or Sharding)</strong></p>
<p>In this strategy, we split the table data horizontally based on the range of values defined by the <em>partition key</em>. It is also referred to as <strong><em>database sharding</em></strong>.</p>
<p><strong>Vertical Partitioning</strong></p>
<p>In vertical partitioning, we partition the data vertically based on columns. We divide tables into relatively smaller tables with few elements, and each part is present in a separate partition.</p>
<p>In this tutorial, we will specifically focus on sharding.</p>
<h2 id="what-is-sharding">What is sharding?</h2>
<p>Sharding is a database architecture pattern related to <em>horizontal partitioning</em>, which is the practice of separating one table&rsquo;s rows into multiple different tables, known as <em>partitions</em> or <em>shards</em>. Each partition has the same schema and columns, but also a subset of the shared data. Likewise, the data held in each is unique and independent of the data held in other partitions.</p>
<p></p>
<p>The justification for data sharding is that, after a certain point, it is cheaper and more feasible to scale horizontally by adding more machines than to scale it vertically by adding powerful servers. Sharding can be implemented at both application or the database level.</p>
<h2 id="partitioning-criteria">Partitioning criteria</h2>
<p>There are a large number of criteria available for data partitioning. Some most commonly used criteria are:</p>
<h3 id="hash-based">Hash-Based</h3>
<p>This strategy divides the rows into different partitions based on a hashing algorithm rather than grouping database rows based on continuous indexes.</p>
<p>The disadvantage of this method is that dynamically adding/removing database servers becomes expensive.</p>
<h3 id="list-based">List-Based</h3>
<p>In list-based partitioning, each partition is defined and selected based on the list of values on a column rather than a set of contiguous ranges of values.</p>
<h3 id="range-based">Range Based</h3>
<p>Range partitioning maps data to various partitions based on ranges of values of the partitioning key. In other words, we partition the table in such a way that each partition contains rows within a given range defined by the partition key.</p>
<p>Ranges should be contiguous but not overlapping, where each range specifies a non-inclusive lower and upper bound for a partition. Any partitioning key values equal to or higher than the upper bound of the range are added to the next partition.</p>
<h3 id="composite">Composite</h3>
<p>As the name suggests, composite partitioning partitions the data based on two or more partitioning techniques. Here we first partition the data using one technique, and then each partition is further subdivided into sub-partitions using the same or some other method.</p>
<h2 id="advantages-10">Advantages</h2>
<p>But why do we need sharding? Here are some advantages:</p>
<ul>
<li><strong>Availability</strong>: Provides logical independence to the partitioned database, ensuring the high availability of our application. Here individual partitions can be managed independently.</li>
<li><strong>Scalability</strong>: Proves to increase scalability by distributing the data across multiple partitions.</li>
<li><strong>Security</strong>: Helps improve the system&rsquo;s security by storing sensitive and non-sensitive data in different partitions. This could provide better manageability and security to sensitive data.</li>
<li><strong>Query Performance</strong>: Improves the performance of the system. Instead of querying the whole database, now the system has to query only a smaller partition.</li>
<li><strong>Data Manageability</strong>: Divides tables and indexes into smaller and more manageable units.</li>
</ul>
<h2 id="disadvantages-8">Disadvantages</h2>
<ul>
<li><strong>Complexity</strong>: Sharding increases the complexity of the system in general.</li>
<li><strong>Joins across shards</strong>: Once a database is partitioned and spread across multiple machines it is often not feasible to perform joins that span multiple database shards. Such joins will not be performance efficient since data has to be retrieved from multiple servers.</li>
<li><strong>Rebalancing</strong>: If the data distribution is not uniform or there is a lot of load on a single shard, in such cases we have to rebalance our shards so that the requests are as equally distributed among the shards as possible.</li>
</ul>
<h2 id="when-to-use-sharding">When to use sharding?</h2>
<p>Here are some reasons where sharding might be the right choice:</p>
<ul>
<li>Leveraging existing hardware instead of high-end machines.</li>
<li>Maintain data in distinct geographic regions.</li>
<li>Quickly scale by adding more shards.</li>
<li>Better performance as each machine is under less load.</li>
<li>When more concurrent connections are required.</li>
</ul>
<h1 id="consistent-hashing">Consistent Hashing</h1>
<p>Let&rsquo;s first understand the problem we&rsquo;re trying to solve.</p>
<h2 id="why-do-we-need-this">Why do we need this?</h2>
<p>In traditional hashing-based distribution methods, we use a hash function to hash our partition keys (i.e. request ID or IP). Then if we use the modulo against the total number of nodes (server or databases). This will give us the node where we want to route our request.</p>
<p></p>
<p>$$
\begin{align*}
&amp; Hash(key_1) \to H_1 \bmod N = Node_0 \
&amp; Hash(key_2) \to H_2 \bmod N = Node_1 \
&amp; Hash(key_3) \to H_3 \bmod N = Node_2 \
&amp; &hellip; \
&amp; Hash(key_n) \to H_n \bmod N = Node_{n-1}
\end{align*}
$$</p>
<p>Where,</p>
<p><code>key</code>: Request ID or IP.</p>
<p><code>H</code>: Hash function result.</p>
<p><code>N</code>: Total number of nodes.</p>
<p><code>Node</code>: The node where the request will be routed.</p>
<p>The problem with this is if we add or remove a node, it will cause <code>N</code> to change, meaning our mapping strategy will break as the same requests will now map to a different server. As a consequence, the majority of requests will need to be redistributed which is very inefficient.</p>
<p>We want to uniformly distribute requests among different nodes such that we should be able to add or remove nodes with minimal effort. Hence, we need a distribution scheme that does not depend directly on the number of nodes (or servers), so that, when adding or removing nodes, the number of keys that need to be relocated is minimized.</p>
<p>Consistent hashing solves this horizontal scalability problem by ensuring that every time we scale up or down, we do not have to re-arrange all the keys or touch all the servers.</p>
<p>Now that we understand the problem, let&rsquo;s discuss consistent hashing in detail.</p>
<h2 id="how-does-it-work">How does it work</h2>
<p>Consistent Hashing is a distributed hashing scheme that operates independently of the number of nodes in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system.</p>
<p></p>
<p>Using consistent hashing, only <code>K/N</code> data would require re-distributing.</p>
<p>$$
R = K/N
$$</p>
<p>Where,</p>
<p><code>R</code>: Data that would require re-distribution.</p>
<p><code>K</code>: Number of partition keys.</p>
<p><code>N</code>: Number of nodes.</p>
<p>The output of the hash function is a range let&rsquo;s say <code>0...m-1</code> which we can represent on our hash ring. We hash the requests and distribute them on the ring depending on what the output was. Similarly, we also hash the node and distribute them on the same ring as well.</p>
<p>$$
\begin{align*}
&amp; Hash(key_1) = P_1 \
&amp; Hash(key_2) = P_2 \
&amp; Hash(key_3) = P_3 \
&amp; &hellip; \
&amp; Hash(key_n) = P_{m-1}
\end{align*}
$$</p>
<p>Where,</p>
<p><code>key</code>: Request/Node ID or IP.</p>
<p><code>P</code>: Position on the hash ring.</p>
<p><code>m</code>: Total range of the hash ring.</p>
<p>Now, when the request comes in we can simply route it to the closest node in a clockwise (can be counterclockwise as well) manner. This means that if a new node is added or removed, we can use the nearest node and only a <em>fraction</em> of the requests need to be re-routed.</p>
<p>In theory, consistent hashing should distribute the load evenly however it doesn&rsquo;t happen in practice. Usually, the load distribution is uneven and one server may end up handling the majority of the request becoming a <em>hotspot</em>, essentially a bottleneck for the system. We can fix this by adding extra nodes but that can be expensive.</p>
<p>Let&rsquo;s see how we can address these issues.</p>
<h2 id="virtual-nodes">Virtual Nodes</h2>
<p>In order to ensure a more evenly distributed load, we can introduce the idea of a virtual node, sometimes also referred to as a VNode.</p>
<p>Instead of assigning a single position to a node, the hash range is divided into multiple smaller ranges, and each physical node is assigned several of these smaller ranges. Each of these subranges is considered a VNode. Hence, virtual nodes are basically existing physical nodes mapped multiple times across the hash ring to minimize changes to a node&rsquo;s assigned range.</p>
<p></p>
<p>For this, we can use <code>k</code> number of hash functions.</p>
<p>$$
\begin{align*}
&amp; Hash_1(key_1) = P_1 \
&amp; Hash_2(key_2) = P_2 \
&amp; Hash_3(key_3) = P_3 \
&amp; . . . \
&amp; Hash_k(key_n) = P_{m-1}
\end{align*}
$$</p>
<p>Where,</p>
<p><code>key</code>: Request/Node ID or IP.</p>
<p><code>k</code>: Number of hash functions.</p>
<p><code>P</code>: Position on the hash ring.</p>
<p><code>m</code>: Total range of the hash ring.</p>
<p>As VNodes help spread the load more evenly across the physical nodes on the cluster by diving the hash ranges into smaller subranges, this speeds up the re-balancing process after adding or removing nodes. This also helps us reduce the probability of hotspots.</p>
<h2 id="data-replication">Data replication</h2>
<p>To ensure high availability and durability, consistent hashing replicates each data item on multiple <code>N</code> nodes in the system where the value <code>N</code> is equivalent to the <em>replication factor</em>.</p>
<p>The replication factor is the number of nodes that will receive the copy of the same data. In eventually consistent systems, this is done asynchronously.</p>
<h2 id="advantages-11">Advantages</h2>
<p>Let&rsquo;s look at some advantages of consistent hashing:</p>
<ul>
<li>Makes rapid scaling up and down more predictable.</li>
<li>Facilitates partitioning and replication across nodes.</li>
<li>Enables scalability and availability.</li>
<li>Reduces hotspots.</li>
</ul>
<h2 id="disadvantages-9">Disadvantages</h2>
<p>Below are some disadvantages of consistent hashing:</p>
<ul>
<li>Increases complexity.</li>
<li>Cascading failures.</li>
<li>Load distribution can still be uneven.</li>
<li>Key management can be expensive when nodes transiently fail.</li>
</ul>
<h2 id="examples-7">Examples</h2>
<p>Let&rsquo;s look at some examples where consistent hashing is used:</p>
<ul>
<li>Data partitioning in <a href="https://cassandra.apache.org" target="_blank" rel="noopener noreffer ">Apache Cassandra</a>.</li>
<li>Load distribution across multiple storage hosts in <a href="https://aws.amazon.com/dynamodb" target="_blank" rel="noopener noreffer ">Amazon DynamoDB</a>.</li>
</ul>
<h1 id="database-federation">Database Federation</h1>
<p>Federation (or functional partitioning) splits up databases by function. The federation architecture makes several distinct physical databases appear as one logical database to end-users.</p>
<p>All of the components in a federation are tied together by one or more federal schemas that express the commonality of data throughout the federation. These federated schemas are used to specify the information that can be shared by the federation components and to provide a common basis for communication among them.</p>
<p></p>
<p>Federation also provides a cohesive, unified view of data derived from multiple sources. The data sources for federated systems can include databases and various other forms of structured and unstructured data.</p>
<h2 id="characteristics">Characteristics</h2>
<p>Let&rsquo;s look at some key characteristics of a federated database:</p>
<ul>
<li><strong>Transparency</strong>: Federated database masks user differences and implementations of underlying data sources. Therefore, the users do not need to be aware of where the data is stored.</li>
<li><strong>Heterogeneity</strong>: Data sources can differ in many ways. A federated database system can handle different hardware, network protocols, data models, etc.</li>
<li><strong>Extensibility</strong>: New sources may be needed to meet the changing needs of the business. A good federated database system needs to make it easy to add new sources.</li>
<li><strong>Autonomy</strong>: A Federated database does not change existing data sources, interfaces should remain the same.</li>
<li><strong>Data integration</strong>: A federated database can integrate data from different protocols, database management systems, etc.</li>
</ul>
<h2 id="advantages-12">Advantages</h2>
<p>Here are some advantages of federated databases:</p>
<ul>
<li>Flexible data sharing.</li>
<li>Autonomy among the database components.</li>
<li>Access heterogeneous data in a unified way.</li>
<li>No tight coupling of applications with legacy databases.</li>
</ul>
<h2 id="disadvantages-10">Disadvantages</h2>
<p>Below are some disadvantages of federated databases:</p>
<ul>
<li>Adds more hardware and additional complexity.</li>
<li>Joining data from two databases is complex.</li>
<li>Dependence on autonomous data sources.</li>
<li>Query performance and scalability.</li>
</ul>
<h1 id="n-tier-architecture">N-tier architecture</h1>
<p>N-tier architecture divides an application into logical layers and physical tiers. Layers are a way to separate responsibilities and manage dependencies. Each layer has a specific responsibility. A higher layer can use services in a lower layer, but not the other way around.</p>
<p></p>
<p>Tiers are physically separated, running on separate machines. A tier can call to another tier directly, or use asynchronous messaging. Although each layer might be hosted in its own tier, that&rsquo;s not required. Several layers might be hosted on the same tier. Physically separating the tiers improves scalability and resiliency and adds latency from the additional network communication.</p>
<p>An N-tier architecture can be of two types:</p>
<ul>
<li>In a closed layer architecture, a layer can only call the next layer immediately down.</li>
<li>In an open layer architecture, a layer can call any of the layers below it.</li>
</ul>
<p>A closed-layer architecture limits the dependencies between layers. However, it might create unnecessary network traffic, if one layer simply passes requests along to the next layer.</p>
<h2 id="types-of-n-tier-architectures">Types of N-Tier architectures</h2>
<p>Let&rsquo;s look at some examples of N-Tier architecture:</p>
<h3 id="3-tier-architecture">3-Tier architecture</h3>
<p>3-Tier is widely used and consists of the following different layers:</p>
<ul>
<li><strong>Presentation layer</strong>: Handles user interactions with the application.</li>
<li><strong>Business Logic layer</strong>: Accepts the data from the application layer, validates it as per business logic and passes it to the data layer.</li>
<li><strong>Data Access layer</strong>: Receives the data from the business layer and performs the necessary operation on the database.</li>
</ul>
<h3 id="2-tier-architecture">2-Tier architecture</h3>
<p>In this architecture, the presentation layer runs on the client and communicates with a data store. There is no business logic layer or immediate layer between client and server.</p>
<h3 id="single-tier-or-1-tier-architecture">Single Tier or 1-Tier architecture</h3>
<p>It is the simplest one as it is equivalent to running the application on a personal computer. All of the required components for an application to run are on a single application or server.</p>
<h2 id="advantages-13">Advantages</h2>
<p>Here are some advantages of using N-tier architecture:</p>
<ul>
<li>Can improve availability.</li>
<li>Better security as layers can behave like a firewall.</li>
<li>Separate tiers allow us to scale them as needed.</li>
<li>Improve maintenance as different people can manage different tiers.</li>
</ul>
<h2 id="disadvantages-11">Disadvantages</h2>
<p>Below are some disadvantages of N-tier architecture:</p>
<ul>
<li>Increased complexity of the system as a whole.</li>
<li>Increased network latency as the number of tiers increases.</li>
<li>Expensive as every tier will have its own hardware cost.</li>
<li>Difficult to manage network security.</li>
</ul>
<h1 id="message-brokers">Message Brokers</h1>
<p>A message broker is a software that enables applications, systems, and services to communicate with each other and exchange information. The message broker does this by translating messages between formal messaging protocols. This allows interdependent services to <em>&ldquo;talk&rdquo;</em> with one another directly, even if they were written in different languages or implemented on different platforms.</p>
<p></p>
<p>Message brokers can validate, store, route, and deliver messages to the appropriate destinations. They serve as intermediaries between other applications, allowing senders to issue messages without knowing where the receivers are, whether or not they are active, or how many of them there are. This facilitates the decoupling of processes and services within systems.</p>
<h2 id="models">Models</h2>
<p>Message brokers offer two basic message distribution patterns or messaging styles:</p>
<ul>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/message-queues" target="_blank" rel="noopener noreffer ">Point-to-Point messaging</a></strong>: This is the distribution pattern utilized in message queues with a one-to-one relationship between the message&rsquo;s sender and receiver.</li>
<li><strong><a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe" target="_blank" rel="noopener noreffer ">Publish-subscribe messaging</a></strong>: In this message distribution pattern, often referred to as <em>&ldquo;pub/sub&rdquo;</em>, the producer of each message publishes it to a topic, and multiple message consumers subscribe to topics from which they want to receive messages.</li>
</ul>
<p><em>We will discuss these messaging patterns in detail in the later tutorials.</em></p>
<h2 id="message-brokers-vs-event-streaming">Message brokers vs Event streaming</h2>
<p>Message brokers can support two or more messaging patterns, including message queues and pub/sub, while event streaming platforms only offer pub/sub-style distribution patterns. Designed for use with high volumes of messages, event streaming platforms are readily scalable. They&rsquo;re capable of ordering streams of records into categories called <em>topics</em> and storing them for a predetermined amount of time. Unlike message brokers, however, event streaming platforms cannot guarantee message delivery or track which consumers have received the messages.</p>
<p>Event streaming platforms offer more scalability than message brokers but fewer features that ensure fault tolerance like message resending, as well as more limited message routing and queueing capabilities.</p>
<h2 id="message-brokers-vs-enterprise-service-bus-esb">Message brokers vs Enterprise Service Bus (ESB)</h2>
<p><a href="https://karanpratapsingh.com/courses/system-design/enterprise-service-bus" target="_blank" rel="noopener noreffer ">Enterprise Service Bus (ESB)</a> infrastructure is complex and can be challenging to integrate and expensive to maintain. It&rsquo;s difficult to troubleshoot them when problems occur in production environments, they&rsquo;re not easy to scale, and updating is tedious.</p>
<p>Whereas message brokers are a <em>&ldquo;lightweight&rdquo;</em> alternative to ESBs that provide similar functionality, a mechanism for inter-service communication, at a lower cost. They&rsquo;re well-suited for use in the <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices" target="_blank" rel="noopener noreffer ">microservices architectures</a> that have become more prevalent as ESBs have fallen out of favor.</p>
<h2 id="examples-8">Examples</h2>
<p>Here are some commonly used message brokers:</p>
<ul>
<li><a href="https://nats.io" target="_blank" rel="noopener noreffer ">NATS</a></li>
<li><a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a></li>
<li><a href="https://www.rabbitmq.com" target="_blank" rel="noopener noreffer ">RabbitMQ</a></li>
<li><a href="https://activemq.apache.org" target="_blank" rel="noopener noreffer ">ActiveMQ</a></li>
</ul>
<h1 id="message-queues">Message Queues</h1>
<p>A message queue is a form of service-to-service communication that facilitates asynchronous communication. It asynchronously receives messages from producers and sends them to consumers.</p>
<p>Queues are used to effectively manage requests in large-scale distributed systems. In small systems with minimal processing loads and small databases, writes can be predictably fast. However, in more complex and large systems writes can take an almost non-deterministic amount of time.</p>
<p></p>
<h2 id="working">Working</h2>
<p>Messages are stored in the queue until they are processed and deleted. Each message is processed only once by a single consumer. Here&rsquo;s how it works:</p>
<ul>
<li>A producer publishes a job to the queue, then notifies the user of the job status.</li>
<li>A consumer picks up the job from the queue, processes it, then signals that the job is complete.</li>
</ul>
<h2 id="advantages-14">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using a message queue:</p>
<ul>
<li><strong>Scalability</strong>: Message queues make it possible to scale precisely where we need to. When workloads peak, multiple instances of our application can all add requests to the queue without the risk of collision</li>
<li><strong>Decoupling</strong>: Message queues remove dependencies between components and significantly simplify the implementation of decoupled applications.</li>
<li><strong>Performance</strong>: Message queues enable asynchronous communication, which means that the endpoints that are producing and consuming messages interact with the queue, not each other. Producers can add requests to the queue without waiting for them to be processed.</li>
<li><strong>Reliability</strong>: Queues make our data persistent, and reduce the errors that happen when different parts of our system go offline.</li>
</ul>
<h2 id="features-1">Features</h2>
<p>Now, let&rsquo;s discuss some desired features of message queues:</p>
<h3 id="push-or-pull-delivery">Push or Pull Delivery</h3>
<p>Most message queues provide both push and pull options for retrieving messages. Pull means continuously querying the queue for new messages. Push means that a consumer is notified when a message is available. We can also use long-polling to allow pulls to wait a specified amount of time for new messages to arrive.</p>
<h3 id="fifo-first-in-first-out-queues">FIFO (First-In-First-Out) Queues</h3>
<p>In these queues, the oldest (or first) entry, sometimes called the <em>&ldquo;head&rdquo;</em> of the queue, is processed first.</p>
<h3 id="schedule-or-delay-delivery">Schedule or Delay Delivery</h3>
<p>Many message queues support setting a specific delivery time for a message. If we need to have a common delay for all messages, we can set up a delay queue.</p>
<h3 id="at-least-once-delivery">At-Least-Once Delivery</h3>
<p>Message queues may store multiple copies of messages for redundancy and high availability, and resend messages in the event of communication failures or errors to ensure they are delivered at least once.</p>
<h3 id="exactly-once-delivery">Exactly-Once Delivery</h3>
<p>When duplicates can&rsquo;t be tolerated, FIFO (first-in-first-out) message queues will make sure that each message is delivered exactly once (and only once) by filtering out duplicates automatically.</p>
<h3 id="dead-letter-queues">Dead-letter Queues</h3>
<p>A dead-letter queue is a queue to which other queues can send messages that can&rsquo;t be processed successfully. This makes it easy to set them aside for further inspection without blocking the queue processing or spending CPU cycles on a message that might never be consumed successfully.</p>
<h3 id="ordering">Ordering</h3>
<p>Most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they&rsquo;re sent and that a message is delivered at least once.</p>
<h3 id="poison-pill-messages">Poison-pill Messages</h3>
<p>Poison pills are special messages that can be received, but not processed. They are a mechanism used in order to signal a consumer to end its work so it is no longer waiting for new inputs, and are similar to closing a socket in a client/server model.</p>
<h3 id="security">Security</h3>
<p>Message queues will authenticate applications that try to access the queue, this allows us to encrypt messages over the network as well as in the queue itself.</p>
<h3 id="task-queues">Task Queues</h3>
<p>Tasks queues receive tasks and their related data, run them, then deliver their results. They can support scheduling and can be used to run computationally-intensive jobs in the background.</p>
<h2 id="backpressure">Backpressure</h2>
<p>If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance. Backpressure can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue. Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later. Clients can retry the request at a later time, perhaps with <a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank" rel="noopener noreffer ">exponential backoff</a> strategy.</p>
<h2 id="examples-9">Examples</h2>
<p>Following are some widely used message queues:</p>
<ul>
<li><a href="https://aws.amazon.com/sqs" target="_blank" rel="noopener noreffer ">Amazon SQS</a></li>
<li><a href="https://www.rabbitmq.com" target="_blank" rel="noopener noreffer ">RabbitMQ</a></li>
<li><a href="https://activemq.apache.org" target="_blank" rel="noopener noreffer ">ActiveMQ</a></li>
<li><a href="https://zeromq.org" target="_blank" rel="noopener noreffer ">ZeroMQ</a></li>
</ul>
<h1 id="publish-subscribe">Publish-Subscribe</h1>
<p>Similar to a message queue, publish-subscribe is also a form of service-to-service communication that facilitates asynchronous communication. In a pub/sub model, any message published to a topic is pushed immediately to all the subscribers of the topic.</p>
<p></p>
<p>The subscribers to the message topic often perform different functions, and can each do something different with the message in parallel. The publisher doesn&rsquo;t need to know who is using the information that it is broadcasting, and the subscribers don&rsquo;t need to know where the message comes from. This style of messaging is a bit different than message queues, where the component that sends the message often knows the destination it is sending to.</p>
<h2 id="working-1">Working</h2>
<p>Unlike message queues, which batch messages until they are retrieved, message topics transfer messages with little or no queuing and push them out immediately to all subscribers. Here&rsquo;s how it works:</p>
<ul>
<li>A message topic provides a lightweight mechanism to broadcast asynchronous event notifications and endpoints that allow software components to connect to the topic in order to send and receive those messages.</li>
<li>To broadcast a message, a component called a <em>publisher</em> simply pushes a message to the topic.</li>
<li>All components that subscribe to the topic (known as <em>subscribers</em>) will receive every message that was broadcasted.</li>
</ul>
<h2 id="advantages-15">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using publish-subscribe:</p>
<ul>
<li><strong>Eliminate Polling</strong>: Message topics allow instantaneous, push-based delivery, eliminating the need for message consumers to periodically check or <em>&ldquo;poll&rdquo;</em> for new information and updates. This promotes faster response time and reduces the delivery latency which can be particularly problematic in systems where delays cannot be tolerated.</li>
<li><strong>Dynamic Targeting</strong>: Pub/Sub makes the discovery of services easier, more natural, and less error-prone. Instead of maintaining a roster of peers where an application can send messages, a publisher will simply post messages to a topic. Then, any interested party will subscribe its endpoint to the topic, and start receiving these messages. Subscribers can change, upgrade, multiply or disappear and the system dynamically adjusts.</li>
<li><strong>Decoupled and Independent Scaling</strong>: Publishers and subscribers are decoupled and work independently from each other, which allows us to develop and scale them independently.</li>
<li><strong>Simplify Communication</strong>: The Publish-Subscribe model reduces complexity by removing all the point-to-point connections with a single connection to a message topic, which will manage subscriptions and decide what messages should be delivered to which endpoints.</li>
</ul>
<h2 id="features-2">Features</h2>
<p>Now, let&rsquo;s discuss some desired features of publish-subscribe:</p>
<h3 id="push-delivery">Push Delivery</h3>
<p>Pub/Sub messaging instantly pushes asynchronous event notifications when messages are published to the message topic. Subscribers are notified when a message is available.</p>
<h3 id="multiple-delivery-protocols">Multiple Delivery Protocols</h3>
<p>In the Publish-Subscribe model, topics can typically connect to multiple types of endpoints, such as message queues, serverless functions, HTTP servers, etc.</p>
<h3 id="fanout">Fanout</h3>
<p>This scenario happens when a message is sent to a topic and then replicated and pushed to multiple endpoints. Fanout provides asynchronous event notifications which in turn allows for parallel processing.</p>
<h3 id="filtering">Filtering</h3>
<p>This feature empowers the subscriber to create a message filtering policy so that it will only get the notifications it is interested in, as opposed to receiving every single message posted to the topic.</p>
<h3 id="durability">Durability</h3>
<p>Pub/Sub messaging services often provide very high durability, and at least once delivery, by storing copies of the same message on multiple servers.</p>
<h3 id="security-1">Security</h3>
<p>Message topics authenticate applications that try to publish content, this allows us to use encrypted endpoints and encrypt messages in transit over the network.</p>
<h2 id="examples-10">Examples</h2>
<p>Here are some technologies commonly used for publish-subscribe:</p>
<ul>
<li><a href="https://aws.amazon.com/sns" target="_blank" rel="noopener noreffer ">Amazon SNS</a></li>
<li><a href="https://cloud.google.com/pubsub" target="_blank" rel="noopener noreffer ">Google Pub/Sub</a></li>
</ul>
<h1 id="enterprise-service-bus-esb">Enterprise Service Bus (ESB)</h1>
<p>An Enterprise Service Bus (ESB) is an architectural pattern whereby a centralized software component performs integrations between applications. It performs transformations of data models, handles connectivity, performs message routing, converts communication protocols, and potentially manages the composition of multiple requests. The ESB can make these integrations and transformations available as a service interface for reuse by new applications.</p>
<p></p>
<h2 id="advantages-16">Advantages</h2>
<p>In theory, a centralized ESB offers the potential to standardize and dramatically simplify communication, messaging, and integration between services across the enterprise. Here are some advantages of using an ESB:</p>
<ul>
<li><strong>Improved developer productivity</strong>: Enables developers to incorporate new technologies into one part of an application without touching the rest of the application.</li>
<li><strong>Simpler, more cost-effective scalability</strong>: Components can be scaled independently of others.</li>
<li><strong>Greater resilience</strong>: Failure of one component does not impact the others, and each microservice can adhere to its own availability requirements without risking the availability of other components in the system.</li>
</ul>
<h2 id="disadvantages-12">Disadvantages</h2>
<p>While ESBs were deployed successfully in many organizations, in many other organizations the ESB came to be seen as a bottleneck. Here are some disadvantages of using an ESB:</p>
<ul>
<li>Making changes or enhancements to one integration could destabilize others who use that same integration.</li>
<li>A single point of failure can bring down all communications.</li>
<li>Updates to the ESB often impact existing integrations, so there is significant testing required to perform any update.</li>
<li>ESB is centrally managed which makes cross-team collaboration challenging.</li>
<li>High configuration and maintenance complexity.</li>
</ul>
<h2 id="examples-11">Examples</h2>
<p>Below are some widely used Enterprise Service Bus (ESB) technologies:</p>
<ul>
<li><a href="https://azure.microsoft.com/en-in/services/service-bus" target="_blank" rel="noopener noreffer ">Azure Service Bus</a></li>
<li><a href="https://www.ibm.com/in-en/cloud/app-connect" target="_blank" rel="noopener noreffer ">IBM App Connect</a></li>
<li><a href="https://camel.apache.org" target="_blank" rel="noopener noreffer ">Apache Camel</a></li>
<li><a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse" target="_blank" rel="noopener noreffer ">Fuse ESB</a></li>
</ul>
<h1 id="monoliths-and-microservices">Monoliths and Microservices</h1>
<h2 id="monoliths">Monoliths</h2>
<p>A monolith is a self-contained and independent application. It is built as a single unit and is responsible for not just a particular task, but can perform every step needed to satisfy a business need.</p>
<p></p>
<h3 id="advantages-17">Advantages</h3>
<p>Following are some advantages of monoliths:</p>
<ul>
<li>Simple to develop or debug.</li>
<li>Fast and reliable communication.</li>
<li>Easy monitoring and testing.</li>
<li>Supports ACID transactions.</li>
</ul>
<h3 id="disadvantages-13">Disadvantages</h3>
<p>Some common disadvantages of monoliths are:</p>
<ul>
<li>Maintenance becomes hard as the codebase grows.</li>
<li>Tightly coupled application, hard to extend.</li>
<li>Requires commitment to a particular technology stack.</li>
<li>On each update, the entire application is redeployed.</li>
<li>Reduced reliability as a single bug can bring down the entire system.</li>
<li>Difficult to scale or adopt technologies new technologies.</li>
</ul>
<h2 id="modular-monoliths">Modular monoliths</h2>
<p>A Modular Monolith is an approach where we build and deploy a single application (that&rsquo;s the <em>Monolith</em> part), but we build it in a way that breaks up the code into independent modules for each of the features needed in our application.</p>
<p>This approach reduces the dependencies of a module in such as way that we can enhance or change a module without affecting other modules. When done right, this can be really beneficial in the long term as it reduces the complexity that comes with maintaining a monolith as the system grows.</p>
<h2 id="microservices">Microservices</h2>
<p>A microservices architecture consists of a collection of small, autonomous services where each service is self-contained and should implement a single business capability within a bounded context. A bounded context is a natural division of business logic that provides an explicit boundary within which a domain model exists.</p>
<p></p>
<p>Each service has a separate codebase, which can be managed by a small development team. Services can be deployed independently and a team can update an existing service without rebuilding and redeploying the entire application.</p>
<p>Services are responsible for persisting their own data or external state (database per service). This differs from the traditional model, where a separate data layer handles data persistence.</p>
<h3 id="characteristics-1">Characteristics</h3>
<p>The microservices architecture style has the following characteristics:</p>
<ul>
<li><strong>Loosely coupled</strong>: Services should be loosely coupled so that they can be independently deployed and scaled. This will lead to the decentralization of development teams and thus, enabling them to develop and deploy faster with minimal constraints and operational dependencies.</li>
<li><strong>Small but focused</strong>: It&rsquo;s about scope and responsibilities and not size, a service should be focused on a specific problem. Basically, <em>&ldquo;It does one thing and does it well&rdquo;</em>. Ideally, they can be independent of the underlying architecture.</li>
<li><strong>Built for businesses</strong>: The microservices architecture is usually organized around business capabilities and priorities.</li>
<li><strong>Resilience &amp; Fault tolerance</strong>: Services should be designed in such a way that they still function in case of failure or errors. In environments with independently deployable services, failure tolerance is of the highest importance.</li>
<li><strong>Highly maintainable</strong>: Service should be easy to maintainable and test because services that cannot be maintained will be re-written.</li>
</ul>
<h3 id="advantages-18">Advantages</h3>
<p>Here are some advantages of microservices architecture:</p>
<ul>
<li>Loosely coupled services.</li>
<li>Services can be deployed independently.</li>
<li>Highly agile for multiple development teams.</li>
<li>Improves fault tolerance and data isolation.</li>
<li>Better scalability as each service can be scaled independently.</li>
<li>Eliminates any long-term commitment to a particular technology stack.</li>
</ul>
<h3 id="disadvantages-14">Disadvantages</h3>
<p>Microservices architecture brings its own set of challenges:</p>
<ul>
<li>Complexity of a distributed system.</li>
<li>Testing is more difficult.</li>
<li>Expensive to maintain (individual servers, databases, etc.).</li>
<li>Inter-service communication has its own challenges.</li>
<li>Data integrity and consistency.</li>
<li>Network congestion and latency.</li>
</ul>
<h3 id="best-practices">Best practices</h3>
<p>Let&rsquo;s discuss some microservices best practices:</p>
<ul>
<li>Model services around the business domain.</li>
<li>Services should have loose coupling and high functional cohesion.</li>
<li>Isolate failures and use resiliency strategies to prevent failures within a service from cascading.</li>
<li>Services should only communicate through well-designed APIs. Avoid leaking implementation details.</li>
<li>Data storage should be private to the service that owns the data</li>
<li>Avoid coupling between services. Causes of coupling include shared database schemas and rigid communication protocols.</li>
<li>Decentralize everything. Individual teams are responsible for designing and building services. Avoid sharing code or data schemas.</li>
<li>Fail fast by using a <a href="https://karanpratapsingh.com/courses/system-design/circuit-breaker" target="_blank" rel="noopener noreffer ">circuit breaker</a> to achieve fault tolerance.</li>
<li>Ensure that the API changes are backward compatible.</li>
</ul>
<h3 id="pitfalls">Pitfalls</h3>
<p>Below are some common pitfalls of microservices architecture:</p>
<ul>
<li>Service boundaries are not based on the business domain.</li>
<li>Underestimating how hard is to build a distributed system.</li>
<li>Shared database or common dependencies between services.</li>
<li>Lack of Business Alignment.</li>
<li>Lack of clear ownership.</li>
<li>Lack of idempotency.</li>
<li>Trying to do everything <a href="https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models" target="_blank" rel="noopener noreffer ">ACID instead of BASE</a>.</li>
<li>Lack of design for fault tolerance may result in cascading failures.</li>
</ul>
<h2 id="beware-of-the-distributed-monolith">Beware of the distributed monolith</h2>
<p>Distributed Monolith is a system that resembles the microservices architecture but is tightly coupled within itself like a monolithic application. Adopting microservices architecture comes with a lot of advantages. But while making one, there are good chances that we might end up with a distributed monolith.</p>
<p>Our microservices are just a distributed monolith if any of these apply to it:</p>
<ul>
<li>Requires low latency communication.</li>
<li>Services don&rsquo;t scale easily.</li>
<li>Dependency between services.</li>
<li>Sharing the same resources such as databases.</li>
<li>Tightly coupled systems.</li>
</ul>
<p>One of the primary reasons to build an application using microservices architecture is to have scalability. Therefore, microservices should have loosely coupled services which enable every service to be independent. The distributed monolith architecture takes this away and causes most components to depend on one another, increasing design complexity.</p>
<h2 id="microservices-vs-service-oriented-architecture-soa">Microservices vs Service-oriented architecture (SOA)</h2>
<p>You might have seen <em>Service-oriented architecture (SOA)</em> mentioned around the internet, sometimes even interchangeably with microservices, but they are different from each other and the main distinction between the two approaches comes down to <em>scope</em>.</p>
<p>Service-oriented architecture (SOA) defines a way to make software components reusable via service interfaces. These interfaces utilize common communication standards and focus on maximizing application service reusability whereas microservices are built as a collection of various smallest independent service units focused on team autonomy and decoupling.</p>
<h2 id="why-you-dont-need-microservices">Why you don&rsquo;t need microservices</h2>
<p></p>
<p>So, you might be wondering, monoliths seem like a bad idea to begin with, why would anyone use that?</p>
<p>Well, it depends. While each approach has its own advantages and disadvantages, it is advised to start with a monolith when building a new system. It is important to understand, that microservices are not a silver bullet instead they solve an organizational problem. Microservices architecture is about your organizational priorities and team as much as it&rsquo;s about technology.</p>
<p>Before making the decision to move to microservices architecture, you need to ask yourself questions like:</p>
<ul>
<li><em>&ldquo;Is the team too large to work effectively on a shared codebase?&rdquo;</em></li>
<li><em>&ldquo;Are teams blocked on other teams?&rdquo;</em></li>
<li><em>&ldquo;Does microservices deliver clear business value for us?&rdquo;</em></li>
<li><em>&ldquo;Is my business mature enough to use microservices?&rdquo;</em></li>
<li><em>&ldquo;Is our current architecture limiting us with communication overhead?&rdquo;</em></li>
</ul>
<p>If your application does not require to be broken down into microservices, you don&rsquo;t need this. There is no absolute necessity that all applications should be broken down into microservices.</p>
<p>We frequently draw inspiration from companies such as Netflix and their use of microservices, but we overlook the fact that we are not Netflix. They went through a lot of iterations and models before they had a market-ready solution, and this architecture became acceptable for them when they identified and solved the problem they were trying to tackle.</p>
<p>That&rsquo;s why it&rsquo;s essential to understand in-depth if your business <em>actually</em> needs microservices. What I&rsquo;m trying to say is microservices are solutions to complex concerns and if your business doesn&rsquo;t have complex issues, you don&rsquo;t need them.</p>
<h1 id="event-driven-architecture-eda">Event-Driven Architecture (EDA)</h1>
<p>Event-Driven Architecture (EDA) is about using events as a way to communicate within a system. Generally, leveraging a message broker to publish and consume events asynchronously. The publisher is unaware of who is consuming an event and the consumers are unaware of each other. Event-Driven Architecture is simply a way of achieving loose coupling between services within a system.</p>
<h2 id="what-is-an-event">What is an event?</h2>
<p>An event is a data point that represents state changes in a system. It doesn&rsquo;t specify what should happen and how the change should modify the system, it only notifies the system of a particular state change. When a user makes an action, they trigger an event.</p>
<h2 id="components-1">Components</h2>
<p>Event-driven architectures have three key components:</p>
<ul>
<li><strong>Event producers</strong>: Publishes an event to the router.</li>
<li><strong>Event routers</strong>: Filters and pushes the events to consumers.</li>
<li><strong>Event consumers</strong>: Uses events to reflect changes in the system.</li>
</ul>
<p></p>
<p><em>Note: Dots in the diagram represents different events in the system.</em></p>
<h2 id="patterns">Patterns</h2>
<p>There are several ways to implement the event-driven architecture, and which method we use depends on the use case but here are some common examples:</p>
<ul>
<li><a href="https://karanpratapsingh.com/courses/system-design/distributed-transactions#sagas" target="_blank" rel="noopener noreffer ">Sagas</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe" target="_blank" rel="noopener noreffer ">Publish-Subscribe</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/event-sourcing" target="_blank" rel="noopener noreffer ">Event Sourcing</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/command-and-query-responsibility-segregation" target="_blank" rel="noopener noreffer ">Command and Query Responsibility Segregation (CQRS)</a></li>
</ul>
<p><em>Note: Each of these methods is discussed separately.</em></p>
<h2 id="advantages-19">Advantages</h2>
<p>Let&rsquo;s discuss some advantages:</p>
<ul>
<li>Decoupled producers and consumers.</li>
<li>Highly scalable and distributed.</li>
<li>Easy to add new consumers.</li>
<li>Improves agility.</li>
</ul>
<h2 id="challenges-2">Challenges</h2>
<p>Here are some challenges of event-drive architecture:</p>
<ul>
<li>Guaranteed delivery.</li>
<li>Error handling is difficult.</li>
<li>Event-driven systems are complex in general.</li>
<li>Exactly once, in-order processing of events.</li>
</ul>
<h2 id="use-cases-1">Use cases</h2>
<p>Below are some common use cases where event-driven architectures are beneficial:</p>
<ul>
<li>Metadata and metrics.</li>
<li>Server and security logs.</li>
<li>Integrating heterogeneous systems.</li>
<li>Fanout and parallel processing.</li>
</ul>
<h2 id="examples-12">Examples</h2>
<p>Here are some widely used technologies for implementing event-driven architectures:</p>
<ul>
<li><a href="https://nats.io" target="_blank" rel="noopener noreffer ">NATS</a></li>
<li><a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a></li>
<li><a href="https://aws.amazon.com/eventbridge" target="_blank" rel="noopener noreffer ">Amazon EventBridge</a></li>
<li><a href="https://aws.amazon.com/sns" target="_blank" rel="noopener noreffer ">Amazon SNS</a></li>
<li><a href="https://cloud.google.com/pubsub" target="_blank" rel="noopener noreffer ">Google PubSub</a></li>
</ul>
<h1 id="event-sourcing">Event Sourcing</h1>
<p>Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.</p>
<p></p>
<p>This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and responsiveness. It can also provide consistency for transactional data, and maintain full audit trails and history that can enable compensating actions.</p>
<h2 id="event-sourcing-vs-event-driven-architecture-eda">Event sourcing vs Event-Driven Architecture (EDA)</h2>
<p>Event sourcing is seemingly constantly being confused with <a href="https://karanpratapsingh.com/courses/system-design/event-driven-architecture" target="_blank" rel="noopener noreffer ">Event-driven Architecture (EDA)</a>. Event-driven architecture is about using events to communicate between service boundaries. Generally, leveraging a message broker to publish and consume events asynchronously within other boundaries.</p>
<p>Whereas, event sourcing is about using events as a state, which is a different approach to storing data. Rather than storing the current state, we&rsquo;re instead going to be storing events. Also, event sourcing is one of the several patterns to implement an event-driven architecture.</p>
<h2 id="advantages-20">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of using event sourcing:</p>
<ul>
<li>Excellent for real-time data reporting.</li>
<li>Great for fail-safety, data can be reconstituted from the event store.</li>
<li>Extremely flexible, any type of message can be stored.</li>
<li>Preferred way of achieving audit logs functionality for high compliance systems.</li>
</ul>
<h2 id="disadvantages-15">Disadvantages</h2>
<p>Following are the disadvantages of event sourcing:</p>
<ul>
<li>Requires an extremely efficient network infrastructure.</li>
<li>Requires a reliable way to control message formats, such as a schema registry.</li>
<li>Different events will contain different payloads.</li>
</ul>
<h1 id="command-and-query-responsibility-segregation-cqrs">Command and Query Responsibility Segregation (CQRS)</h1>
<p>Command Query Responsibility Segregation (CQRS) is an architectural pattern that divides a system&rsquo;s actions into commands and queries. It was first described by <a href="https://twitter.com/gregyoung" target="_blank" rel="noopener noreffer ">Greg Young</a>.</p>
<p>In CQRS, a <em>command</em> is an instruction, a directive to perform a specific task. It is an intention to change something and doesn&rsquo;t return a value, only an indication of success or failure. And, a <em>query</em> is a request for information that doesn&rsquo;t change the system&rsquo;s state or cause any side effects.</p>
<p></p>
<p>The core principle of CQRS is the separation of commands and queries. They perform fundamentally different roles within a system, and separating them means that each can be optimized as needed, which distributed systems can really benefit from.</p>
<h2 id="cqrs-with-event-sourcing">CQRS with Event Sourcing</h2>
<p>The CQRS pattern is often used along with the Event Sourcing pattern. CQRS-based systems use separate read and write data models, each tailored to relevant tasks and often located in physically separate stores.</p>
<p>When used with the Event Sourcing pattern, the store of events is the write model and is the official source of information. The read model of a CQRS-based system provides materialized views of the data, typically as highly denormalized views.</p>
<h2 id="advantages-21">Advantages</h2>
<p>Let&rsquo;s discuss some advantages of CQRS:</p>
<ul>
<li>Allows independent scaling of read and write workloads.</li>
<li>Easier scaling, optimizations, and architectural changes.</li>
<li>Closer to business logic with loose coupling.</li>
<li>The application can avoid complex joins when querying.</li>
<li>Clear boundaries between the system behavior.</li>
</ul>
<h2 id="disadvantages-16">Disadvantages</h2>
<p>Below are some disadvantages of CQRS:</p>
<ul>
<li>More complex application design.</li>
<li>Message failures or duplicate messages can occur.</li>
<li>Dealing with eventual consistency is a challenge.</li>
<li>Increased system maintenance efforts.</li>
</ul>
<h2 id="use-cases-2">Use cases</h2>
<p>Here are some scenarios where CQRS will be helpful:</p>
<ul>
<li>The performance of data reads must be fine-tuned separately from the performance of data writes.</li>
<li>The system is expected to evolve over time and might contain multiple versions of the model, or where business rules change regularly.</li>
<li>Integration with other systems, especially in combination with event sourcing, where the temporal failure of one subsystem shouldn&rsquo;t affect the availability of the others.</li>
<li>Better security to ensure that only the right domain entities are performing writes on the data.</li>
</ul>
<h1 id="api-gateway">API Gateway</h1>
<p>The API Gateway is an API management tool that sits between a client and a collection of backend services. It is a single entry point into a system that encapsulates the internal system architecture and provides an API that is tailored to each client. It also has other responsibilities such as authentication, monitoring, load balancing, caching, throttling, logging, etc.</p>
<p></p>
<h2 id="why-do-we-need-an-api-gateway">Why do we need an API Gateway?</h2>
<p>The granularity of APIs provided by microservices is often different than what a client needs. Microservices typically provide fine-grained APIs, which means that clients need to interact with multiple services. Hence, an API gateway can provide a single entry point for all clients with some additional features and better management.</p>
<h2 id="features-3">Features</h2>
<p>Below are some desired features of an API Gateway:</p>
<ul>
<li>Authentication and Authorization</li>
<li><a href="https://karanpratapsingh.com/courses/system-design/service-discovery" target="_blank" rel="noopener noreffer ">Service discovery</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/proxy#reverse-proxy" target="_blank" rel="noopener noreffer ">Reverse Proxy</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">Caching</a></li>
<li>Security</li>
<li>Retry and <a href="https://karanpratapsingh.com/courses/system-design/circuit-breaker" target="_blank" rel="noopener noreffer ">Circuit breaking</a></li>
<li><a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">Load balancing</a></li>
<li>Logging, Tracing</li>
<li>API composition</li>
<li><a href="https://karanpratapsingh.com/courses/system-design/rate-limiting" target="_blank" rel="noopener noreffer ">Rate limiting</a> and throttling</li>
<li>Versioning</li>
<li>Routing</li>
<li>IP whitelisting or blacklisting</li>
</ul>
<h2 id="advantages-22">Advantages</h2>
<p>Let&rsquo;s look at some advantages of using an API Gateway:</p>
<ul>
<li>Encapsulates the internal structure of an API.</li>
<li>Provides a centralized view of the API.</li>
<li>Simplifies the client code.</li>
<li>Monitoring, analytics, tracing, and other such features.</li>
</ul>
<h2 id="disadvantages-17">Disadvantages</h2>
<p>Here are some possible disadvantages of an API Gateway:</p>
<ul>
<li>Possible single point of failure.</li>
<li>Might impact performance.</li>
<li>Can become a bottleneck if not scaled properly.</li>
<li>Configuration can be challenging.</li>
</ul>
<h2 id="backend-for-frontend-bff-pattern">Backend For Frontend (BFF) pattern</h2>
<p>In the Backend For Frontend (BFF) pattern, we create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when we want to avoid customizing a single backend for multiple interfaces. This pattern was first described by <a href="https://samnewman.io" target="_blank" rel="noopener noreffer ">Sam Newman</a>.</p>
<p>Also, sometimes the output of data returned by the microservices to the front end is not in the exact format or filtered as needed by the front end. To solve this issue, the frontend should have some logic to reformat the data, and therefore, we can use BFF to shift some of this logic to the intermediate layer.</p>
<p></p>
<p>The primary function of the backend for the frontend pattern is to get the required data from the appropriate service, format the data, and sent it to the frontend.</p>
<p><em><a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#graphql" target="_blank" rel="noopener noreffer ">GraphQL</a> performs really well as a backend for frontend (BFF).</em></p>
<h3 id="when-to-use-this-pattern">When to use this pattern?</h3>
<p>We should consider using a Backend For Frontend (BFF) pattern when:</p>
<ul>
<li>A shared or general purpose backend service must be maintained with significant development overhead.</li>
<li>We want to optimize the backend for the requirements of a specific client.</li>
<li>Customizations are made to a general-purpose backend to accommodate multiple interfaces.</li>
</ul>
<h2 id="examples-13">Examples</h2>
<p>Following are some widely used gateways technologies:</p>
<ul>
<li><a href="https://aws.amazon.com/api-gateway" target="_blank" rel="noopener noreffer ">Amazon API Gateway</a></li>
<li><a href="https://cloud.google.com/apigee" target="_blank" rel="noopener noreffer ">Apigee API Gateway</a></li>
<li><a href="https://azure.microsoft.com/en-in/services/api-management" target="_blank" rel="noopener noreffer ">Azure API Gateway</a></li>
<li><a href="https://konghq.com/kong" target="_blank" rel="noopener noreffer ">Kong API Gateway</a></li>
</ul>
<h1 id="rest-graphql-grpc">REST, GraphQL, gRPC</h1>
<p>A good API design is always a crucial part of any system. But it is also important to pick the right API technology. So, in this tutorial, we will briefly discuss different API technologies such as REST, GraphQL, and gRPC.</p>
<h2 id="whats-an-api">What&rsquo;s an API?</h2>
<p>Before we even get into API technologies, let&rsquo;s first understand what is an API.</p>
<p>An API is a set of definitions and protocols for building and integrating application software. It&rsquo;s sometimes referred to as a contract between an information provider and an information user establishing the content required from the producer and the content required by the consumer.</p>
<p>In other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and complete the request.</p>
<h2 id="rest">REST</h2>
<p>A <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm" target="_blank" rel="noopener noreffer ">REST API</a> (also known as RESTful API) is an application programming interface that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for Representational State Transfer and it was first introduced by <a href="https://roy.gbiv.com" target="_blank" rel="noopener noreffer ">Roy Fielding</a> in the year 2000.</p>
<p><em>In REST API, the fundamental unit is a resource.</em></p>
<h3 id="concepts">Concepts</h3>
<p>Let&rsquo;s discuss some concepts of a RESTful API.</p>
<p><strong>Constraints</strong></p>
<p>In order for an API to be considered <em>RESTful</em>, it has to conform to these architectural constraints:</p>
<ul>
<li><strong>Uniform Interface</strong>: There should be a uniform way of interacting with a given server.</li>
<li><strong>Client-Server</strong>: A client-server architecture managed through HTTP.</li>
<li><strong>Stateless</strong>: No client context shall be stored on the server between requests.</li>
<li><strong>Cacheable</strong>: Every response should include whether the response is cacheable or not and for how much duration responses can be cached at the client-side.</li>
<li><strong>Layered system</strong>: An application architecture needs to be composed of multiple layers.</li>
<li><strong>Code on demand</strong>: Return executable code to support a part of your application. <em>(optional)</em></li>
</ul>
<p><strong>HTTP Verbs</strong></p>
<p>HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. Although they can also be nouns, these request methods are sometimes referred to as <em>HTTP verbs</em>. Each of them implements a different semantic, but some common features are shared by a group of them.</p>
<p>Below are some commonly used HTTP verbs:</p>
<ul>
<li><strong>GET</strong>: Request a representation of the specified resource.</li>
<li><strong>HEAD</strong>: Response is identical to a <code>GET</code> request, but without the response body.</li>
<li><strong>POST</strong>: Submits an entity to the specified resource, often causing a change in state or side effects on the server.</li>
<li><strong>PUT</strong>: Replaces all current representations of the target resource with the request payload.</li>
<li><strong>DELETE</strong>: Deletes the specified resource.</li>
<li><strong>PATCH</strong>: Applies partial modifications to a resource.</li>
</ul>
<p><strong>HTTP response codes</strong></p>
<p><a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank" rel="noopener noreffer ">HTTP response status codes</a> indicate whether a specific HTTP request has been successfully completed.</p>
<p>There are five classes defined by the standard:</p>
<ul>
<li>1xx - Informational responses.</li>
<li>2xx - Successful responses.</li>
<li>3xx - Redirection responses.</li>
<li>4xx - Client error responses.</li>
<li>5xx - Server error responses.</li>
</ul>
<p>For example, HTTP 200 means that the request was successful.</p>
<h3 id="advantages-23">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of REST API:</p>
<ul>
<li>Simple and easy to understand.</li>
<li>Flexible and portable.</li>
<li>Good caching support.</li>
<li>Client and server are decoupled.</li>
</ul>
<h3 id="disadvantages-18">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of REST API:</p>
<ul>
<li>Over-fetching of data.</li>
<li>Sometimes multiple round trips to the server are required.</li>
</ul>
<h3 id="use-cases-3">Use cases</h3>
<p>REST APIs are pretty much used universally and are the default standard for designing APIs. Overall REST APIs are quite flexible and can fit almost all scenarios.</p>
<h3 id="example">Example</h3>
<p>Here&rsquo;s an example usage of a REST API that operates on a <strong>users</strong> resource.</p>
<table>
<thead>
<tr>
<th>URI</th>
<th>HTTP verb</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>/users</td>
<td>GET</td>
<td>Get all users</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>GET</td>
<td>Get a user by id</td>
</tr>
<tr>
<td>/users</td>
<td>POST</td>
<td>Add a new user</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>PATCH</td>
<td>Update a user by id</td>
</tr>
<tr>
<td>/users/{id}</td>
<td>DELETE</td>
<td>Delete a user by id</td>
</tr>
</tbody>
</table>
<p><em>There is so much more to learn when it comes to REST APIs, I will highly recommend looking into <a href="https://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener noreffer ">Hypermedia as the Engine of Application State (HATEOAS)</a>.</em></p>
<h2 id="graphql">GraphQL</h2>
<p><a href="https://graphql.org" target="_blank" rel="noopener noreffer ">GraphQL</a> is a query language and server-side runtime for APIs that prioritizes giving clients exactly the data they request and no more. It was developed by <a href="https://engineering.fb.com" target="_blank" rel="noopener noreffer ">Facebook</a> and later open-sourced in 2015.</p>
<p>GraphQL is designed to make APIs fast, flexible, and developer-friendly. Additionally, GraphQL gives API maintainers the flexibility to add or deprecate fields without impacting existing queries. Developers can build APIs with whatever methods they prefer, and the GraphQL specification will ensure they function in predictable ways to clients.</p>
<p><em>In GraphQL, the fundamental unit is a query.</em></p>
<h3 id="concepts-1">Concepts</h3>
<p>Let&rsquo;s briefly discuss some key concepts in GraphQL:</p>
<p><strong>Schema</strong></p>
<p>A GraphQL schema describes the functionality clients can utilize once they connect to the GraphQL server.</p>
<p><strong>Queries</strong></p>
<p>A query is a request made by the client. It can consist of fields and arguments for the query. The operation type of a query can also be a <a href="https://graphql.org/learn/queries/#mutations" target="_blank" rel="noopener noreffer ">mutation</a> which provides a way to modify server-side data.</p>
<p><strong>Resolvers</strong></p>
<p>Resolver is a collection of functions that generate responses for a GraphQL query. In simple terms, a resolver acts as a GraphQL query handler.</p>
<h3 id="advantages-24">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of GraphQL:</p>
<ul>
<li>Eliminates over-fetching of data.</li>
<li>Strongly defined schema.</li>
<li>Code generation support.</li>
<li>Payload optimization.</li>
</ul>
<h3 id="disadvantages-19">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of GraphQL:</p>
<ul>
<li>Shifts complexity to server-side.</li>
<li>Caching becomes hard.</li>
<li>Versioning is ambiguous.</li>
<li>N+1 problem.</li>
</ul>
<h3 id="use-cases-4">Use cases</h3>
<p>GraphQL proves to be essential in the following scenarios:</p>
<ul>
<li>Reducing app bandwidth usage as we can query multiple resources in a single query.</li>
<li>Rapid prototyping for complex systems.</li>
<li>When we are working with a graph-like data model.</li>
</ul>
<h3 id="example-1">Example</h3>
<p>Here&rsquo;s a GraphQL schema that defines a <code>User</code> type and a <code>Query</code> type.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="kd">type</span><span class="w"> </span><span class="nc">Query</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">getUser</span><span class="p">:</span><span class="w"> </span><span class="nc">User</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">type</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">id</span><span class="p">:</span><span class="w"> </span><span class="nc">ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">name</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">city</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">state</span><span class="p">:</span><span class="w"> </span><span class="nc">String</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Using the above schema, the client can request the required fields easily without having to fetch the entire resource or guess what the API might return.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-graphql" data-lang="graphql"><span class="line"><span class="cl"><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="py">getUser</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="py">city</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This will give the following response to the client.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;getUser&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Karan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;San Francisco&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em>Learn more about GraphQL at <a href="https://graphql.org" target="_blank" rel="noopener noreffer ">graphql.org</a>.</em></p>
<h2 id="grpc">gRPC</h2>
<p><a href="https://grpc.io" target="_blank" rel="noopener noreffer ">gRPC</a> is a modern open-source high-performance <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank" rel="noopener noreffer ">Remote Procedure Call (RPC)</a> framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking, authentication and much more.</p>
<h3 id="concepts-2">Concepts</h3>
<p>Let&rsquo;s discuss some key concepts of gRPC.</p>
<p><strong>Protocol buffers</strong></p>
<p>Protocol buffers provide a language and platform-neutral extensible mechanism for serializing structured data in a forward and backward-compatible way. It&rsquo;s like JSON, except it&rsquo;s smaller and faster, and it generates native language bindings.</p>
<p><strong>Service definition</strong></p>
<p>Like many RPC systems, gRPC is based on the idea of defining a service and specifying the methods that can be called remotely with their parameters and return types. gRPC uses protocol buffers as the <a href="https://en.wikipedia.org/wiki/Interface_description_language" target="_blank" rel="noopener noreffer ">Interface Definition Language (IDL)</a> for describing both the service interface and the structure of the payload messages.</p>
<h3 id="advantages-25">Advantages</h3>
<p>Let&rsquo;s discuss some advantages of gRPC:</p>
<ul>
<li>Lightweight and efficient.</li>
<li>High performance.</li>
<li>Built-in code generation support.</li>
<li>Bi-directional streaming.</li>
</ul>
<h3 id="disadvantages-20">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of gRPC:</p>
<ul>
<li>Relatively new compared to REST and GraphQL.</li>
<li>Limited browser support.</li>
<li>Steeper learning curve.</li>
<li>Not human readable.</li>
</ul>
<h3 id="use-cases-5">Use cases</h3>
<p>Below are some good use cases for gRPC:</p>
<ul>
<li>Real-time communication via bi-directional streaming.</li>
<li>Efficient inter-service communication in microservices.</li>
<li>Low latency and high throughput communication.</li>
<li>Polyglot environments.</li>
</ul>
<h3 id="example-2">Example</h3>
<p>Here&rsquo;s a basic example of a gRPC service defined in a <code>*.proto</code> file. Using this definition, we can easily code generate the <code>HelloService</code> service in the programming language of our choice.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="line"><span class="cl"><span class="kd">service</span> <span class="n">HelloService</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloResponse</span><span class="p">);</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="kd">message</span> <span class="nc">HelloRequest</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="kt">string</span> <span class="n">greeting</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="kd">message</span> <span class="nc">HelloResponse</span> <span class="p">{</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span>  <span class="kt">string</span> <span class="n">reply</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="p">}</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rest-vs-graphql-vs-grpc">REST vs GraphQL vs gRPC</h2>
<p>Now that we know how these API designing techniques work, let&rsquo;s compare them based on the following parameters:</p>
<ul>
<li>Will it cause tight coupling?</li>
<li>How <em>chatty</em> (distinct API calls to get needed information) are the APIs?</li>
<li>What&rsquo;s the performance like?</li>
<li>How complex is it to integrate?</li>
<li>How well does the caching work?</li>
<li>Built-in tooling and code generation?</li>
<li>What&rsquo;s API discoverability like?</li>
<li>How easy is it to version APIs?</li>
</ul>
<table>
<thead>
<tr>
<th>Type</th>
<th>Coupling</th>
<th>Chattiness</th>
<th>Performance</th>
<th>Complexity</th>
<th>Caching</th>
<th>Codegen</th>
<th>Discoverability</th>
<th>Versioning</th>
</tr>
</thead>
<tbody>
<tr>
<td>REST</td>
<td>Low</td>
<td>High</td>
<td>Good</td>
<td>Medium</td>
<td>Great</td>
<td>Bad</td>
<td>Good</td>
<td>Easy</td>
</tr>
<tr>
<td>GraphQL</td>
<td>Medium</td>
<td>Low</td>
<td>Good</td>
<td>High</td>
<td>Custom</td>
<td>Good</td>
<td>Good</td>
<td>Custom</td>
</tr>
<tr>
<td>gRPC</td>
<td>High</td>
<td>Medium</td>
<td>Great</td>
<td>Low</td>
<td>Custom</td>
<td>Great</td>
<td>Bad</td>
<td>Hard</td>
</tr>
</tbody>
</table>
<h3 id="which-api-technology-is-better">Which API technology is better?</h3>
<p>Well, the answer is none of them. There is no silver bullet as each of these technologies has its own advantages and disadvantages. Users only care about using our APIs in a consistent way, so make sure to focus on your domain and requirements when designing your API.</p>
<h1 id="long-polling-websockets-server-sent-events-sse">Long polling, WebSockets, Server-Sent Events (SSE)</h1>
<p>Web applications were initially developed around a client-server model, where the web client is always the initiator of transactions like requesting data from the server. Thus, there was no mechanism for the server to independently send, or push, data to the client without the client first making a request. Let&rsquo;s discuss some approaches to overcome this problem.</p>
<h2 id="long-polling">Long polling</h2>
<p>HTTP Long polling is a technique used to push information to a client as soon as possible from the server. As a result, the server does not have to wait for the client to send a request.</p>
<p>In Long polling, the server does not close the connection once it receives a request from the client. Instead, the server responds only if any new message is available or a timeout threshold is reached.</p>
<p></p>
<p>Once the client receives a response, it immediately sends a new request to the server to have a new pending connection to send data to the client, and the operation is repeated. With this approach, the server emulates a real-time server push feature.</p>
<h3 id="working-2">Working</h3>
<p>Let&rsquo;s understand how long polling works:</p>
<ol>
<li>The client makes an initial request and waits for a response.</li>
<li>The server receives the request and delays sending anything until an update is available.</li>
<li>Once an update is available, the response is sent to the client.</li>
<li>The client receives the response and makes a new request immediately or after some defined interval to establish a connection again.</li>
</ol>
<h3 id="advantages-26">Advantages</h3>
<p>Here are some advantages of long polling:</p>
<ul>
<li>Easy to implement, good for small-scale projects.</li>
<li>Nearly universally supported.</li>
</ul>
<h3 id="disadvantages-21">Disadvantages</h3>
<p>A major downside of long polling is that it is usually not scalable. Below are some of the other reasons:</p>
<ul>
<li>Creates a new connection each time, which can be intensive on the server.</li>
<li>Reliable message ordering can be an issue for multiple requests.</li>
<li>Increased latency as the server needs to wait for a new request.</li>
</ul>
<h2 id="websockets">WebSockets</h2>
<p>WebSocket provides full-duplex communication channels over a single TCP connection. It is a persistent connection between a client and a server that both parties can use to start sending data at any time.</p>
<p>The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables the communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server.</p>
<p></p>
<p>This is made possible by providing a standardized way for the server to send content to the client without being asked and allowing for messages to be passed back and forth while keeping the connection open.</p>
<h3 id="working-3">Working</h3>
<p>Let&rsquo;s understand how WebSockets work:</p>
<ol>
<li>The client initiates a WebSocket handshake process by sending a request.</li>
<li>The request also contains an <a href="https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header" target="_blank" rel="noopener noreffer ">HTTP Upgrade</a> header that allows the request to switch to the WebSocket protocol (<code>ws://</code>).</li>
<li>The server sends a response to the client, acknowledging the WebSocket handshake request.</li>
<li>A WebSocket connection will be opened once the client receives a successful handshake response.</li>
<li>Now the client and server can start sending data in both directions allowing real-time communication.</li>
<li>The connection is closed once the server or the client decides to close the connection.</li>
</ol>
<h3 id="advantages-27">Advantages</h3>
<p>Below are some advantages of WebSockets:</p>
<ul>
<li>Full-duplex asynchronous messaging.</li>
<li>Better origin-based security model.</li>
<li>Lightweight for both client and server.</li>
</ul>
<h3 id="disadvantages-22">Disadvantages</h3>
<p>Let&rsquo;s discuss some disadvantages of WebSockets:</p>
<ul>
<li>Terminated connections aren&rsquo;t automatically recovered.</li>
<li>Older browsers don&rsquo;t support WebSockets (becoming less relevant).</li>
</ul>
<h2 id="server-sent-events-sse">Server-Sent Events (SSE)</h2>
<p>Server-Sent Events (SSE) is a way of establishing long-term communication between client and server that enables the server to proactively push data to the client.</p>
<p></p>
<p>It is unidirectional, meaning once the client sends the request it can only receive the responses without the ability to send new requests over the same connection.</p>
<h3 id="working-4">Working</h3>
<p>Let&rsquo;s understand how server-sent events work:</p>
<ol>
<li>The client makes a request to the server.</li>
<li>The connection between client and server is established and it remains open.</li>
<li>The server sends responses or events to the client when new data is available.</li>
</ol>
<h3 id="advantages-28">Advantages</h3>
<ul>
<li>Simple to implement and use for both client and server.</li>
<li>Supported by most browsers.</li>
<li>No trouble with firewalls.</li>
</ul>
<h3 id="disadvantages-23">Disadvantages</h3>
<ul>
<li>Unidirectional nature can be limiting.</li>
<li>Limitation for the maximum number of open connections.</li>
<li>Does not support binary data.</li>
</ul>
<h1 id="geohashing-and-quadtrees">Geohashing and Quadtrees</h1>
<h2 id="geohashing">Geohashing</h2>
<p>Geohashing is a <a href="https://en.wikipedia.org/wiki/Address_geocoding" target="_blank" rel="noopener noreffer ">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href="https://twitter.com/gniemeyer" target="_blank" rel="noopener noreffer ">Gustavo Niemeyer</a> in 2008.</p>
<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>
<h3 id="how-does-geohashing-work">How does Geohashing work?</h3>
<p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>
<p></p>
<p>Geohashing guarantees that points are spatially closer if their Geohashes share a longer prefix which means the more characters in the string, the more precise the location. For example, geohashes <code>9q8yy9mf</code> and <code>9q8yy9vx</code> are spatially closer as they share the prefix <code>9q8yy9</code>.</p>
<p>Geohashing can also be used to provide a degree of anonymity as we don&rsquo;t need to expose the exact location of the user because depending on the length of the geohash we just know they are somewhere within an area.</p>
<p>The cell sizes of the geohashes of different lengths are as follows:</p>
<table>
<thead>
<tr>
<th>Geohash length</th>
<th>Cell width</th>
<th>Cell height</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>5000 km</td>
<td>5000 km</td>
</tr>
<tr>
<td>2</td>
<td>1250 km</td>
<td>1250 km</td>
</tr>
<tr>
<td>3</td>
<td>156 km</td>
<td>156 km</td>
</tr>
<tr>
<td>4</td>
<td>39.1 km</td>
<td>19.5 km</td>
</tr>
<tr>
<td>5</td>
<td>4.89 km</td>
<td>4.89 km</td>
</tr>
<tr>
<td>6</td>
<td>1.22 km</td>
<td>0.61 km</td>
</tr>
<tr>
<td>7</td>
<td>153 m</td>
<td>153 m</td>
</tr>
<tr>
<td>8</td>
<td>38.2 m</td>
<td>19.1 m</td>
</tr>
<tr>
<td>9</td>
<td>4.77 m</td>
<td>4.77 m</td>
</tr>
<tr>
<td>10</td>
<td>1.19 m</td>
<td>0.596 m</td>
</tr>
<tr>
<td>11</td>
<td>149 mm</td>
<td>149 mm</td>
</tr>
<tr>
<td>12</td>
<td>37.2 mm</td>
<td>18.6 mm</td>
</tr>
</tbody>
</table>
<h3 id="use-cases-6">Use cases</h3>
<p>Here are some common use cases for Geohashing:</p>
<ul>
<li>It is a simple way to represent and store a location in a database.</li>
<li>It can also be shared on social media as URLs since it is easier to share, and remember than latitudes and longitudes.</li>
<li>We can efficiently find the nearest neighbors of a point through very simple string comparisons and efficient searching of indexes.</li>
</ul>
<h3 id="examples-14">Examples</h3>
<p>Geohashing is widely used and it is supported by popular databases.</p>
<ul>
<li><a href="https://www.mysql.com" target="_blank" rel="noopener noreffer ">MySQL</a></li>
<li><a href="http://redis.io" target="_blank" rel="noopener noreffer ">Redis</a></li>
<li><a href="https://aws.amazon.com/dynamodb" target="_blank" rel="noopener noreffer ">Amazon DynamoDB</a></li>
<li><a href="https://cloud.google.com/firestore" target="_blank" rel="noopener noreffer ">Google Cloud Firestore</a></li>
</ul>
<h2 id="quadtrees">Quadtrees</h2>
<p>A quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href="https://en.wikipedia.org/wiki/Octree" target="_blank" rel="noopener noreffer ">Octrees</a> which are used to partition three-dimensional space.</p>
<p></p>
<h3 id="types-of-quadtrees">Types of Quadtrees</h3>
<p>Quadtrees may be classified according to the type of data they represent, including areas, points, lines, and curves. The following are common types of quadtrees:</p>
<ul>
<li>Point quadtrees</li>
<li>Point-region (PR) quadtrees</li>
<li>Polygonal map (PM) quadtrees</li>
<li>Compressed quadtrees</li>
<li>Edge quadtrees</li>
</ul>
<h3 id="why-do-we-need-quadtrees">Why do we need Quadtrees?</h3>
<p>Aren&rsquo;t latitude and longitude enough? Why do we need quadtrees? While in theory using latitude and longitude we can determine things such as how close points are to each other using <a href="https://en.wikipedia.org/wiki/Euclidean_distance" target="_blank" rel="noopener noreffer ">euclidean distance</a>, for practical use cases it is simply not scalable because of its CPU-intensive nature with large data sets.</p>
<p></p>
<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates. Additionally, we can save further computation by only subdividing a node after a certain threshold. And with the application of mapping algorithms such as the <a href="https://en.wikipedia.org/wiki/Hilbert_curve" target="_blank" rel="noopener noreffer ">Hilbert curve</a>, we can easily improve range query performance.</p>
<h3 id="use-cases-7">Use cases</h3>
<p>Below are some common uses of quadtrees:</p>
<ul>
<li>Image representation, processing, and compression.</li>
<li>Spacial indexing and range queries.</li>
<li>Location-based services like Google Maps, Uber, etc.</li>
<li>Mesh generation and computer graphics.</li>
<li>Sparse data storage.</li>
</ul>
<h1 id="circuit-breaker">Circuit breaker</h1>
<p>The circuit breaker is a design pattern used to detect failures and encapsulates the logic of preventing a failure from constantly recurring during maintenance, temporary external system failure, or unexpected system difficulties.</p>
<p></p>
<p>The basic idea behind the circuit breaker is very simple. We wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually, we&rsquo;ll also want some kind of monitor alert if the circuit breaker trips.</p>
<h2 id="why-do-we-need-circuit-breaking">Why do we need circuit breaking?</h2>
<p>It&rsquo;s common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What&rsquo;s worse if we have many callers on an unresponsive supplier, then we can run out of critical resources leading to cascading failures across multiple systems.</p>
<h2 id="states-1">States</h2>
<p>Let&rsquo;s discuss circuit breaker states:</p>
<h3 id="closed">Closed</h3>
<p>When everything is normal, the circuit breakers remain closed, and all the request passes through to the services as normal. If the number of failures increases beyond the threshold, the circuit breaker trips and goes into an open state.</p>
<h3 id="open">Open</h3>
<p>In this state circuit breaker returns an error immediately without even invoking the services. The Circuit breakers move into the half-open state after a certain timeout period elapses. Usually, it will have a monitoring system where the timeout will be specified.</p>
<h3 id="half-open">Half-open</h3>
<p>In this state, the circuit breaker allows a limited number of requests from the service to pass through and invoke the operation. If the requests are successful, then the circuit breaker will go to the closed state. However, if the requests continue to fail, then it goes back to the open state.</p>
<h1 id="rate-limiting">Rate Limiting</h1>
<p>Rate limiting refers to preventing the frequency of an operation from exceeding a defined limit. In large-scale systems, rate limiting is commonly used to protect underlying services and resources. Rate limiting is generally used as a defensive mechanism in distributed systems, so that shared resources can maintain availability. It also protects our APIs from unintended or malicious overuse by limiting the number of requests that can reach our API in a given period of time.</p>
<p></p>
<h2 id="why-do-we-need-rate-limiting">Why do we need Rate Limiting?</h2>
<p>Rate limiting is a very important part of any large-scale system and it can be used to accomplish the following:</p>
<ul>
<li>Avoid resource starvation as a result of Denial of Service (DoS) attacks.</li>
<li>Rate Limiting helps in controlling operational costs by putting a virtual cap on the auto-scaling of resources which if not monitored might lead to exponential bills.</li>
<li>Rate limiting can be used as defense or mitigation against some common attacks.</li>
<li>For APIs that process massive amounts of data, rate limiting can be used to control the flow of that data.</li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<p>There are various algorithms for API rate limiting, each with its advantages and disadvantages. Let&rsquo;s briefly discuss some of these algorithms:</p>
<h3 id="leaky-bucket">Leaky Bucket</h3>
<p>Leaky Bucket is an algorithm that provides a simple, intuitive approach to rate limiting via a queue. When registering a request, the system appends it to the end of the queue. Processing for the first item on the queue occurs at a regular interval or first-in, first-out (FIFO). If the queue is full, then additional requests are discarded (or leaked).</p>
<h3 id="token-bucket">Token Bucket</h3>
<p>Here we use a concept of a <em>bucket</em>. When a request comes in, a token from the bucket must be taken and processed. The request will be refused if no token is available in the bucket, and the requester will have to try again later. As a result, the token bucket gets refreshed after a certain time period.</p>
<h3 id="fixed-window">Fixed Window</h3>
<p>The system uses a window size of <code>n</code> seconds to track the fixed window algorithm rate. Each incoming request increments the counter for the window. It discards the request if the counter exceeds a threshold.</p>
<h3 id="sliding-log">Sliding Log</h3>
<p>Sliding Log rate-limiting involves tracking a time-stamped log for each request. The system stores these logs in a time-sorted hash set or table. It also discards logs with timestamps beyond a threshold. When a new request comes in, we calculate the sum of logs to determine the request rate. If the request would exceed the threshold rate, then it is held.</p>
<h3 id="sliding-window">Sliding Window</h3>
<p>Sliding Window is a hybrid approach that combines the fixed window algorithm&rsquo;s low processing cost and the sliding log&rsquo;s improved boundary conditions. Like the fixed window algorithm, we track a counter for each fixed window. Next, we account for a weighted value of the previous window&rsquo;s request rate based on the current timestamp to smooth out bursts of traffic.</p>
<h2 id="rate-limiting-in-distributed-systems">Rate Limiting in Distributed Systems</h2>
<p>Rate Limiting becomes complicated when distributed systems are involved. The two broad problems that come with rate limiting in distributed systems are:</p>
<h3 id="inconsistencies">Inconsistencies</h3>
<p>When using a cluster of multiple nodes, we might need to enforce a global rate limit policy. Because if each node were to track its rate limit, a consumer could exceed a global rate limit when sending requests to different nodes. The greater the number of nodes, the more likely the user will exceed the global limit.</p>
<p>The simplest way to solve this problem is to use sticky sessions in our load balancers so that each consumer gets sent to exactly one node but this causes a lack of fault tolerance and scaling problems. Another approach might be to use a centralized data store like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> but this will increase latency and cause race conditions.</p>
<h3 id="race-conditions">Race Conditions</h3>
<p>This issue happens when we use a naive <em>&ldquo;get-then-set&rdquo;</em> approach, in which we retrieve the current rate limit counter, increment it, and then push it back to the datastore. This model&rsquo;s problem is that additional requests can come through in the time it takes to perform a full cycle of read-increment-store, each attempting to store the increment counter with an invalid (lower) counter value. This allows a consumer to send a very large number of requests to bypass the rate limiting controls.</p>
<p>One way to avoid this problem is to use some sort of distributed locking mechanism around the key, preventing any other processes from accessing or writing to the counter. Though the lock will become a significant bottleneck and will not scale well. A better approach might be to use a <em>&ldquo;set-then-get&rdquo;</em> approach, allowing us to quickly increment and check counter values without letting the atomic operations get in the way.</p>
<h1 id="service-discovery">Service Discovery</h1>
<p>Service discovery is the detection of services within a computer network. Service Discovery Protocol (SDP) is a networking standard that accomplishes the detection of networks by identifying resources.</p>
<h2 id="why-do-we-need-service-discovery">Why do we need Service Discovery?</h2>
<p>In a monolithic application, services invoke one another through language-level methods or procedure calls. However, modern microservices-based applications typically run in virtualized or containerized environments where the number of instances of a service and their locations change dynamically. Consequently, we need a mechanism that enables the clients of service to make requests to a dynamically changing set of ephemeral service instances.</p>
<h2 id="implementations">Implementations</h2>
<p>There are two main service discovery patterns:</p>
<h3 id="client-side-discovery">Client-side discovery</h3>
<p></p>
<p>In this approach, the client obtains the location of another service by querying a service registry which is responsible for managing and storing the network locations of all the services.</p>
<h3 id="server-side-discovery">Server-side discovery</h3>
<p></p>
<p>In this approach, we use an intermediate component such as a load balancer. The client makes a request to the service via a load balancer which then forwards the request to an available service instance.</p>
<h2 id="service-registry">Service Registry</h2>
<p>A service registry is basically a database containing the network locations of service instances to which the clients can reach out. A Service Registry must be highly available and up-to-date.</p>
<h2 id="service-registration">Service Registration</h2>
<p>We also need a way to obtain service information, often known as service registration. Let&rsquo;s look at two possible service registration approaches:</p>
<h3 id="self-registration">Self-Registration</h3>
<p>When using the self-registration model, a service instance is responsible for registering and de-registering itself in the Service Registry. In addition, if necessary, a service instance sends heartbeat requests to keep its registration alive.</p>
<h3 id="third-party-registration">Third-party Registration</h3>
<p>The registry keeps track of changes to running instances by polling the deployment environment or subscribing to events. When it detects a newly available service instance, it records it in its database. The Service Registry also de-registers terminated service instances.</p>
<h2 id="service-mesh">Service mesh</h2>
<p>Service-to-service communication is essential in a distributed application but routing this communication, both within and across application clusters, becomes increasingly complex as the number of services grows. Service mesh enables managed, observable, and secure communication between individual services. It works with a service discovery protocol to detect services. <a href="https://istio.io/latest/about/service-mesh" target="_blank" rel="noopener noreffer ">Istio</a> and <a href="https://www.envoyproxy.io" target="_blank" rel="noopener noreffer ">envoy</a> are some of the most commonly used service mesh technologies.</p>
<h2 id="examples-15">Examples</h2>
<p>Here are some commonly used service discovery infrastructure tools:</p>
<ul>
<li><a href="https://etcd.io" target="_blank" rel="noopener noreffer ">etcd</a></li>
<li><a href="https://www.consul.io" target="_blank" rel="noopener noreffer ">Consul</a></li>
<li><a href="https://thrift.apache.org" target="_blank" rel="noopener noreffer ">Apache Thrift</a></li>
<li><a href="https://zookeeper.apache.org" target="_blank" rel="noopener noreffer ">Apache Zookeeper</a></li>
</ul>
<h1 id="sla-slo-sli">SLA, SLO, SLI</h1>
<p>Let&rsquo;s briefly discuss SLA, SLO, and SLI. These are mostly related to the business and site reliability side of things but good to know nonetheless.</p>
<h2 id="why-are-they-important">Why are they important?</h2>
<p>SLAs, SLOs, and SLIs allow companies to define, track and monitor the promises made for a service to its users. Together, SLAs, SLOs, and SLIs should help teams generate more user trust in their services with an added emphasis on continuous improvement to incident management and response processes.</p>
<h2 id="sla">SLA</h2>
<p>An SLA, or Service Level Agreement, is an agreement made between a company and its users of a given service. The SLA defines the different promises that the company makes to users regarding specific metrics, such as service availability.</p>
<p><em>SLAs are often written by a company&rsquo;s business or legal team.</em></p>
<h2 id="slo">SLO</h2>
<p>An SLO, or Service Level Objective, is the promise that a company makes to users regarding a specific metric such as incident response or uptime. SLOs exist within an SLA as individual promises contained within the full user agreement. The SLO is the specific goal that the service must meet in order to comply with the SLA. SLOs should always be simple, clearly defined, and easily measured to determine whether or not the objective is being fulfilled.</p>
<h2 id="sli">SLI</h2>
<p>An SLI, or Service Level Indicator, is a key metric used to determine whether or not the SLO is being met. It is the measured value of the metric described within the SLO. In order to remain in compliance with the SLA, the SLI&rsquo;s value must always meet or exceed the value determined by the SLO.</p>
<h1 id="disaster-recovery">Disaster recovery</h1>
<p>Disaster recovery (DR) is a process of regaining access and functionality of the infrastructure after events like a natural disaster, cyber attack, or even business disruptions.</p>
<p>Disaster recovery relies upon the replication of data and computer processing in an off-premises location not affected by the disaster. When servers go down because of a disaster, a business needs to recover lost data from a second location where the data is backed up. Ideally, an organization can transfer its computer processing to that remote location as well in order to continue operations.</p>
<p><em>Disaster Recovery is often not actively discussed during system design interviews but it&rsquo;s important to have some basic understanding of this topic. You can learn more about disaster recovery from <a href="https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/plan-for-disaster-recovery-dr.html" target="_blank" rel="noopener noreffer ">AWS Well-Architected Framework</a>.</em></p>
<h2 id="why-is-disaster-recovery-important">Why is disaster recovery important?</h2>
<p>Disaster recovery can have the following benefits:</p>
<ul>
<li>Minimize interruption and downtime</li>
<li>Limit damages</li>
<li>Fast restoration</li>
<li>Better customer retention</li>
</ul>
<h2 id="terms-1">Terms</h2>
<p>Let&rsquo;s discuss some important terms relevantly for disaster recovery:</p>
<p></p>
<h3 id="rto">RTO</h3>
<p>Recovery Time Objective (RTO) is the maximum acceptable delay between the interruption of service and restoration of service. This determines what is considered an acceptable time window when service is unavailable.</p>
<h3 id="rpo">RPO</h3>
<p>Recovery Point Objective (RPO) is the maximum acceptable amount of time since the last data recovery point. This determines what is considered an acceptable loss of data between the last recovery point and the interruption of service.</p>
<h2 id="strategies">Strategies</h2>
<p>A variety of disaster recovery (DR) strategies can be part of a disaster recovery plan.</p>
<h3 id="back-up">Back-up</h3>
<p>This is the simplest type of disaster recovery and involves storing data off-site or on a removable drive.</p>
<h3 id="cold-site">Cold Site</h3>
<p>In this type of disaster recovery, an organization sets up basic infrastructure in a second site.</p>
<h3 id="hot-site">Hot site</h3>
<p>A hot site maintains up-to-date copies of data at all times. Hot sites are time-consuming to set up and more expensive than cold sites, but they dramatically reduce downtime.</p>
<h1 id="virtual-machines-vms-and-containers">Virtual Machines (VMs) and Containers</h1>
<p>Before we discuss virtualization vs containerization, let&rsquo;s learn what are virtual machines (VMs) and Containers.</p>
<h2 id="virtual-machines-vm">Virtual Machines (VM)</h2>
<p>A Virtual Machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system. A software called a hypervisor separates the machine&rsquo;s resources from the hardware and provisions them appropriately so they can be used by the VM.</p>
<p>VMs are isolated from the rest of the system, and multiple VMs can exist on a single piece of hardware, like a server. They can be moved between host servers depending on the demand or to use resources more efficiently.</p>
<h3 id="what-is-a-hypervisor">What is a Hypervisor?</h3>
<p>A Hypervisor sometimes called a Virtual Machine Monitor (VMM), isolates the operating system and resources from the virtual machines and enables the creation and management of those VMs. The hypervisor treats resources like CPU, memory, and storage as a pool of resources that can be easily reallocated between existing guests or new virtual machines.</p>
<h3 id="why-use-a-virtual-machine">Why use a Virtual Machine?</h3>
<p>Server consolidation is a top reason to use VMs. Most operating system and application deployments only use a small amount of the physical resources available. By virtualizing our servers, we can place many virtual servers onto each physical server to improve hardware utilization. This keeps us from needing to purchase additional physical resources.</p>
<p>A VM provides an environment that is isolated from the rest of a system, so whatever is running inside a VM won&rsquo;t interfere with anything else running on the host hardware. Because VMs are isolated, they are a good option for testing new applications or setting up a production environment. We can also run a single-purpose VM to support a specific use case.</p>
<h2 id="containers">Containers</h2>
<p>A container is a standard unit of software that packages up code and all its dependencies such as specific versions of runtimes and libraries so that the application runs quickly and reliably from one computing environment to another. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently, regardless of the target environment.</p>
<h3 id="why-do-we-need-containers">Why do we need containers?</h3>
<p>Let&rsquo;s discuss some advantages of using containers:</p>
<p><strong>Separation of responsibility</strong></p>
<p>Containerization provides a clear separation of responsibility, as developers focus on application logic and dependencies, while operations teams can focus on deployment and management.</p>
<p><strong>Workload portability</strong></p>
<p>Containers can run virtually anywhere, greatly easing development and deployment.</p>
<p><strong>Application isolation</strong></p>
<p>Containers virtualize CPU, memory, storage, and network resources at the operating system level, providing developers with a view of the OS logically isolated from other applications.</p>
<p><strong>Agile development</strong></p>
<p>Containers allow developers to move much more quickly by avoiding concerns about dependencies and environments.</p>
<p><strong>Efficient operations</strong></p>
<p>Containers are lightweight and allow us to use just the computing resources we need.</p>
<h2 id="virtualization-vs-containerization">Virtualization vs Containerization</h2>
<p></p>
<p>In traditional virtualization, a hypervisor virtualizes physical hardware. The result is that each virtual machine contains a guest OS, a virtual copy of the hardware that the OS requires to run, and an application and its associated libraries and dependencies.</p>
<p>Instead of virtualizing the underlying hardware, containers virtualize the operating system so each container contains only the application and its dependencies making them much more lightweight than VMs. Containers also share the OS kernel and use a fraction of the memory VMs require.</p>
<h1 id="oauth-20-and-openid-connect-oidc">OAuth 2.0 and OpenID Connect (OIDC)</h1>
<h2 id="oauth-20">OAuth 2.0</h2>
<p>OAuth 2.0, which stands for Open Authorization, is a standard designed to provide consented access to resources on behalf of the user, without ever sharing the user&rsquo;s credentials. OAuth 2.0 is an authorization protocol and not an authentication protocol, it is designed primarily as a means of granting access to a set of resources, for example, remote APIs or user&rsquo;s data.</p>
<h3 id="concepts-3">Concepts</h3>
<p>The OAuth 2.0 protocol defines the following entities:</p>
<ul>
<li><strong>Resource Owner</strong>: The user or system that owns the protected resources and can grant access to them.</li>
<li><strong>Client</strong>: The client is the system that requires access to the protected resources.</li>
<li><strong>Authorization Server</strong>: This server receives requests from the Client for Access Tokens and issues them upon successful authentication and consent by the Resource Owner.</li>
<li><strong>Resource Server</strong>: A server that protects the user&rsquo;s resources and receives access requests from the Client. It accepts and validates an Access Token from the Client and returns the appropriate resources.</li>
<li><strong>Scopes</strong>: They are used to specify exactly the reason for which access to resources may be granted. Acceptable scope values, and which resources they relate to, are dependent on the Resource Server.</li>
<li><strong>Access Token</strong>: A piece of data that represents the authorization to access resources on behalf of the end-user.</li>
</ul>
<h3 id="how-does-oauth-20-work">How does OAuth 2.0 work?</h3>
<p>Let&rsquo;s learn how OAuth 2.0 works:</p>
<p></p>
<ol>
<li>The client requests authorization from the Authorization Server, supplying the client id and secret as identification. It also provides the scopes and an endpoint URI to send the Access Token or the Authorization Code.</li>
<li>The Authorization Server authenticates the client and verifies that the requested scopes are permitted.</li>
<li>The resource owner interacts with the authorization server to grant access.</li>
<li>The Authorization Server redirects back to the client with either an Authorization Code or Access Token, depending on the grant type. A Refresh Token may also be returned.</li>
<li>With the Access Token, the client can request access to the resource from the Resource Server.</li>
</ol>
<h3 id="disadvantages-24">Disadvantages</h3>
<p>Here are the most common disadvantages of OAuth 2.0:</p>
<ul>
<li>Lacks built-in security features.</li>
<li>No standard implementation.</li>
<li>No common set of scopes.</li>
</ul>
<h2 id="openid-connect">OpenID Connect</h2>
<p>OAuth 2.0 is designed only for <em>authorization</em>, for granting access to data and features from one application to another. OpenID Connect (OIDC) is a thin layer that sits on top of OAuth 2.0 that adds login and profile information about the person who is logged in.</p>
<p>When an Authorization Server supports OIDC, it is sometimes called an identity provider (IdP), since it provides information about the Resource Owner back to the Client. OpenID Connect is relatively new, resulting in lower adoption and industry implementation of best practices compared to OAuth.</p>
<h3 id="concepts-4">Concepts</h3>
<p>The OpenID Connect (OIDC) protocol defines the following entities:</p>
<ul>
<li><strong>Relying Party</strong>: The current application.</li>
<li><strong>OpenID Provider</strong>: This is essentially an intermediate service that provides a one-time code to the Relying Party.</li>
<li><strong>Token Endpoint</strong>: A web server that accepts the One-Time Code (OTC) and provides an access code that&rsquo;s valid for an hour. The main difference between OIDC and OAuth 2.0 is that the token is provided using JSON Web Token (JWT).</li>
<li><strong>UserInfo Endpoint</strong>: The Relying Party communicates with this endpoint, providing a secure token and receiving information about the end-user</li>
</ul>
<p>Both OAuth 2.0 and OIDC are easy to implement and are JSON based, which is supported by most web and mobile applications. However, the OpenID Connect (OIDC) specification is more strict than that of basic OAuth.</p>
<h1 id="single-sign-on-sso">Single Sign-On (SSO)</h1>
<p>Single Sign-On (SSO) is an authentication process in which a user is provided access to multiple applications or websites by using only a single set of login credentials. This prevents the need for the user to log separately into the different applications.</p>
<p>The user credentials and other identifying information are stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider is a trusted system that provides access to other websites and applications.</p>
<p>Single Sign-On (SSO) based authentication systems are commonly used in enterprise environments where employees require access to multiple applications of their organizations.</p>
<h2 id="components-2">Components</h2>
<p>Let&rsquo;s discuss some key components of Single Sign-On (SSO).</p>
<h3 id="identity-provider-idp">Identity Provider (IdP)</h3>
<p>User Identity information is stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider authenticates the user and provides access to the service provider.</p>
<p>The identity provider can directly authenticate the user by validating a username and password or by validating an assertion about the user&rsquo;s identity as presented by a separate identity provider. The identity provider handles the management of user identities in order to free the service provider from this responsibility.</p>
<h3 id="service-provider">Service Provider</h3>
<p>A service provider provides services to the end-user. They rely on identity providers to assert the identity of a user, and typically certain attributes about the user are managed by the identity provider. Service providers may also maintain a local account for the user along with attributes that are unique to their service.</p>
<h3 id="identity-broker">Identity Broker</h3>
<p>An identity broker acts as an intermediary that connects multiple service providers with various different identity providers. Using Identity Broker, we can perform single sign-on over any application without the hassle of the protocol it follows.</p>
<h2 id="saml">SAML</h2>
<p>Security Assertion Markup Language is an open standard that allows clients to share security information about identity, authentication, and permission across different systems. SAML is implemented with the Extensible Markup Language (XML) standard for sharing data.</p>
<p>SAML specifically enables identity federation, making it possible for identity providers (IdPs) to seamlessly and securely pass authenticated identities and their attributes to service providers.</p>
<h2 id="how-does-sso-work">How does SSO work?</h2>
<p>Now, let&rsquo;s discuss how Single Sign-On works:</p>
<p></p>
<ol>
<li>The user requests a resource from their desired application.</li>
<li>The application redirects the user to the Identity Provider (IdP) for authentication.</li>
<li>The user signs in with their credentials (usually, username and password).</li>
<li>Identity Provider (IdP) sends a Single Sign-On response back to the client application.</li>
<li>The application grants access to the user.</li>
</ol>
<h2 id="saml-vs-oauth-20-and-openid-connect-oidc">SAML vs OAuth 2.0 and OpenID Connect (OIDC)</h2>
<p>There are many differences between SAML, OAuth, and OIDC. SAML uses XML to pass messages, while OAuth and OIDC use JSON. OAuth provides a simpler experience, while SAML is geared towards enterprise security.</p>
<p>OAuth and OIDC use RESTful communication extensively, which is why mobile, and modern web applications find OAuth and OIDC a better experience for the user. SAML, on the other hand, drops a session cookie in a browser that allows a user to access certain web pages. This is great for short-lived workloads.</p>
<p>OIDC is developer-friendly and simpler to implement, which broadens the use cases for which it might be implemented. It can be implemented from scratch pretty fast, via freely available libraries in all common programming languages. SAML can be complex to install and maintain, which only enterprise-size companies can handle well.</p>
<p>OpenID Connect is essentially a layer on top of the OAuth framework. Therefore, it can offer a built-in layer of permission that asks a user to agree to what the service provider might access. Although SAML is also capable of allowing consent flow, it achieves this by hard-coding carried out by a developer and not as part of its protocol.</p>
<p><em>Both of these authentication protocols are good at what they do. As always, a lot depends on our specific use cases and target audience.</em></p>
<h2 id="advantages-29">Advantages</h2>
<p>Following are the benefits of using Single Sign-On:</p>
<ul>
<li>Ease of use as users only need to remember one set of credentials.</li>
<li>Ease of access without having to go through a lengthy authorization process.</li>
<li>Enforced security and compliance to protect sensitive data.</li>
<li>Simplifying the management with reduced IT support cost and admin time.</li>
</ul>
<h2 id="disadvantages-25">Disadvantages</h2>
<p>Here are some disadvantages of Single Sign-On:</p>
<ul>
<li>Single Password Vulnerability, if the main SSO password gets compromised, all the supported applications get compromised.</li>
<li>The authentication process using Single Sign-On is slower than traditional authentication as every application has to request the SSO provider for verification.</li>
</ul>
<h2 id="examples-16">Examples</h2>
<p>These are some commonly used Identity Providers (IdP):</p>
<ul>
<li><a href="https://www.okta.com" target="_blank" rel="noopener noreffer ">Okta</a></li>
<li><a href="https://cloud.google.com/architecture/identity/single-sign-on" target="_blank" rel="noopener noreffer ">Google</a></li>
<li><a href="https://auth0.com" target="_blank" rel="noopener noreffer ">Auth0</a></li>
<li><a href="https://www.onelogin.com" target="_blank" rel="noopener noreffer ">OneLogin</a></li>
</ul>
<h1 id="ssl-tls-mtls">SSL, TLS, mTLS</h1>
<p>Let&rsquo;s briefly discuss some important communication security protocols such as SSL, TLS, and mTLS. I would say that from a <em>&ldquo;big picture&rdquo;</em> system design perspective, this topic is not very important but still good to know about.</p>
<h2 id="ssl">SSL</h2>
<p>SSL stands for Secure Sockets Layer, and it refers to a protocol for encrypting and securing communications that take place on the internet. It was first developed in 1995 but since has been deprecated in favor of TLS (Transport Layer Security).</p>
<h3 id="why-is-it-called-an-ssl-certificate-if-it-is-deprecated">Why is it called an SSL certificate if it is deprecated?</h3>
<p>Most major certificate providers still refer to certificates as SSL certificates, which is why the naming convention persists.</p>
<h3 id="why-was-ssl-so-important">Why was SSL so important?</h3>
<p>Originally, data on the web was transmitted in plaintext that anyone could read if they intercepted the message. SSL was created to correct this problem and protect user privacy. By encrypting any data that goes between the user and a web server, SSL also stops certain kinds of cyber attacks by preventing attackers from tampering with data in transit.</p>
<h2 id="tls">TLS</h2>
<p>Transport Layer Security, or TLS, is a widely adopted security protocol designed to facilitate privacy and data security for communications over the internet. TLS evolved from a previous encryption protocol called Secure Sockets Layer (SSL). A primary use case of TLS is encrypting the communication between web applications and servers.</p>
<p>There are three main components to what the TLS protocol accomplishes:</p>
<ul>
<li><strong>Encryption</strong>: hides the data being transferred from third parties.</li>
<li><strong>Authentication</strong>: ensures that the parties exchanging information are who they claim to be.</li>
<li><strong>Integrity</strong>: verifies that the data has not been forged or tampered with.</li>
</ul>
<h2 id="mtls">mTLS</h2>
<p>Mutual TLS, or mTLS, is a method for mutual authentication. mTLS ensures that the parties at each end of a network connection are who they claim to be by verifying that they both have the correct private key. The information within their respective TLS certificates provides additional verification.</p>
<h3 id="why-use-mtls">Why use mTLS?</h3>
<p>mTLS helps ensure that the traffic is secure and trusted in both directions between a client and server. This provides an additional layer of security for users who log in to an organization&rsquo;s network or applications. It also verifies connections with client devices that do not follow a login process, such as Internet of Things (IoT) devices.</p>
<p>Nowadays, mTLS is commonly used by microservices or distributed systems in a <a href="https://en.wikipedia.org/wiki/Zero_trust_security_model" target="_blank" rel="noopener noreffer ">zero trust security model</a> to verify each other.</p>
<h1 id="system-design-interviews">System Design Interviews</h1>
<p>System design is a very extensive topic and system design interviews are designed to evaluate your capability to produce technical solutions to abstract problems, as such, they&rsquo;re not designed for a specific answer. The unique aspect of system design interviews is the two-way nature between the candidate and the interviewer.</p>
<p>Expectations are quite different at different engineering levels as well. Because someone with a lot of practical experience will approach it quite differently from someone who&rsquo;s new in the industry. As a result, it&rsquo;s hard to come up with a single strategy that will help us stay organized during the interview.</p>
<p>Let&rsquo;s look at some common strategies for the system design interviews:</p>
<h2 id="requirements-clarifications">Requirements clarifications</h2>
<p>System design interview questions, by nature, are vague or abstract. Asking questions about the exact scope of the problem, and clarifying functional requirements early in the interview is essential. Usually, requirements are divided into three parts:</p>
<h3 id="functional-requirements">Functional requirements</h3>
<p>These are the requirements that the end user specifically demands as basic functionalities that the system should offer. All these functionalities need to be necessarily incorporated into the system as part of the contract.</p>
<p>For example:</p>
<ul>
<li>&ldquo;What are the features that we need to design for this system?&rdquo;</li>
<li>&ldquo;What are the edge cases we need to consider, if any, in our design?&rdquo;</li>
</ul>
<h3 id="non-functional-requirements">Non-functional requirements</h3>
<p>These are the quality constraints that the system must satisfy according to the project contract. The priority or extent to which these factors are implemented varies from one project to another. They are also called non-behavioral requirements. For example, portability, maintainability, reliability, scalability, security, etc.</p>
<p>For example:</p>
<ul>
<li>&ldquo;Each request should be processed with the minimum latency&rdquo;</li>
<li>&ldquo;System should be highly available&rdquo;</li>
</ul>
<h3 id="extended-requirements">Extended requirements</h3>
<p>These are basically &ldquo;nice to have&rdquo; requirements that might be out of the scope of the system.</p>
<p>For example:</p>
<ul>
<li>&ldquo;Our system should record metrics and analytics&rdquo;</li>
<li>&ldquo;Service health and performance monitoring?&rdquo;</li>
</ul>
<h2 id="estimation-and-constraints">Estimation and Constraints</h2>
<p>Estimate the scale of the system we&rsquo;re going to design. It is important to ask questions such as:</p>
<ul>
<li>&ldquo;What is the desired scale that this system will need to handle?&rdquo;</li>
<li>&ldquo;What is the read/write ratio of our system?&rdquo;</li>
<li>&ldquo;How many requests per second?&rdquo;</li>
<li>&ldquo;How much storage will be needed?&rdquo;</li>
</ul>
<p>These questions will help us scale our design later.</p>
<h2 id="data-model-design">Data model design</h2>
<p>Once we have the estimations, we can start with defining the database schema. Doing so in the early stages of the interview would help us to understand the data flow which is the core of every system. In this step, we basically define all the entities and relationships between them.</p>
<ul>
<li>&ldquo;What are the different entities in the system?&rdquo;</li>
<li>&ldquo;What are the relationships between these entities?&rdquo;</li>
<li>&ldquo;How many tables do we need?&rdquo;</li>
<li>&ldquo;Is NoSQL a better choice here?&rdquo;</li>
</ul>
<h2 id="api-design">API design</h2>
<p>Next, we can start designing APIs for the system. These APIs will help us define the expectations from the system explicitly. We don&rsquo;t have to write any code, just a simple interface defining the API requirements such as parameters, functions, classes, types, entities, etc.</p>
<p>For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">createUser</span><span class="p">(</span><span class="nx">name</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">email</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">User</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>It is advised to keep the interface as simple as possible and come back to it later when covering extended requirements.</p>
<h2 id="high-level-component-design">High-level component design</h2>
<p>Now we have established our data model and API design, it&rsquo;s time to identify system components (such as Load Balancers, API Gateway, etc.) that are needed to solve our problem and draft the first design of our system.</p>
<ul>
<li>&ldquo;Is it best to design a monolithic or a microservices architecture?&rdquo;</li>
<li>&ldquo;What type of database should we use?&rdquo;</li>
</ul>
<p>Once we have a basic diagram, we can start discussing with the interviewer how the system will work from the client&rsquo;s perspective.</p>
<h2 id="detailed-design">Detailed design</h2>
<p>Now it&rsquo;s time to go into detail about the major components of the system we designed. As always discuss with the interviewer which component may need further improvements.</p>
<p>Here is a good opportunity to demonstrate your experience in the areas of your expertise. Present different approaches, advantages, and disadvantages. Explain your design decisions, and back them up with examples. This is also a good time to discuss any additional features the system might be able to support, though this is optional.</p>
<ul>
<li>&ldquo;How should we partition our data?&rdquo;</li>
<li>&ldquo;What about load distribution?&rdquo;</li>
<li>&ldquo;Should we use cache?&rdquo;</li>
<li>&ldquo;How will we handle a sudden spike in traffic?&rdquo;</li>
</ul>
<p>Also, try not to be too opinionated about certain technologies, statements like &ldquo;I believe that NoSQL databases are just better, SQL databases are not scalable&rdquo; reflect poorly. As someone who has interviewed a lot of people over the years, my two cents here would be to be humble about what you know and what you do not. Use your existing knowledge with examples to navigate this part of the interview.</p>
<h2 id="identify-and-resolve-bottlenecks">Identify and resolve bottlenecks</h2>
<p>Finally, it&rsquo;s time to discuss bottlenecks and approaches to mitigate them. Here are some important questions to ask:</p>
<ul>
<li>&ldquo;Do we have enough database replicas?&rdquo;</li>
<li>&ldquo;Is there any single point of failure?&rdquo;</li>
<li>&ldquo;Is database sharding required?&rdquo;</li>
<li>&ldquo;How can we make our system more robust?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>Make sure to read the engineering blog of the company you&rsquo;re interviewing with. This will help you get a sense of what technology stack they&rsquo;re using and which problems are important to them.</p>
<h1 id="url-shortener">URL Shortener</h1>
<p>Let&rsquo;s design a URL shortener, similar to services like <a href="https://bitly.com" target="_blank" rel="noopener noreffer ">Bitly</a>, <a href="https://tinyurl.com/app" target="_blank" rel="noopener noreffer ">TinyURL</a>.</p>
<h2 id="what-is-a-url-shortener">What is a URL Shortener?</h2>
<p>A URL shortener service creates an alias or a short URL for a long URL. Users are redirected to the original URL when they visit these short links.</p>
<p>For example, the following long URL can be changed to a shorter URL.</p>
<p><strong>Long URL</strong>: <a href="https://karanpratapsingh.com/courses/system-design/url-shortener" target="_blank" rel="noopener noreffer ">https://karanpratapsingh.com/courses/system-design/url-shortener</a></p>
<p><strong>Short URL</strong>: <a href="https://bit.ly/3I71d3o" target="_blank" rel="noopener noreffer ">https://bit.ly/3I71d3o</a></p>
<h2 id="why-do-we-need-a-url-shortener">Why do we need a URL shortener?</h2>
<p>URL shortener saves space in general when we are sharing URLs. Users are also less likely to mistype shorter URLs. Moreover, we can also optimize links across devices, this allows us to track individual links.</p>
<h2 id="requirements">Requirements</h2>
<p>Our URL shortening system should meet the following requirements:</p>
<h3 id="functional-requirements-1">Functional requirements</h3>
<ul>
<li>Given a URL, our service should generate a <em>shorter and unique</em> alias for it.</li>
<li>Users should be redirected to the original URL when they visit the short link.</li>
<li>Links should expire after a default timespan.</li>
</ul>
<h3 id="non-functional-requirements-1">Non-functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-1">Extended requirements</h3>
<ul>
<li>Prevent abuse of services.</li>
<li>Record analytics and metrics for redirections.</li>
</ul>
<h2 id="estimation-and-constraints-1">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic related assumptions with your interviewer.</em></p>
<h3 id="traffic">Traffic</h3>
<p>This will be a read-heavy system, so let&rsquo;s assume a <code>100:1</code> read/write ratio with 100 million links generated per month.</p>
<p><strong>Reads/Writes Per month</strong></p>
<p>For reads per month:</p>
<p>$$
100 \times 100 \space million = 10 \space billion/month
$$</p>
<p>Similarly for writes:</p>
<p>$$
1 \times 100 \space million = 100 \space million/month
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>100 million requests per month translate into 40 requests per second.</p>
<p>$$
\frac{100 \space million}{(30 \space days \times 24 \space hrs \times 3600 \space seconds)} = \sim 40 \space URLs/second
$$</p>
<p>And with a <code>100:1</code> read/write ratio, the number of redirections will be:</p>
<p>$$
100 \times 40 \space URLs/second = 4000 \space requests/second
$$</p>
<h3 id="bandwidth">Bandwidth</h3>
<p>Since we expect about 40 URLs every second, and if we assume each request is of size 500 bytes then the total incoming data for then write requests would be:</p>
<p>$$
40 \times 500 \space bytes = 20 \space KB/second
$$</p>
<p>Similarly, for the read requests, since we expect about 4K redirections, the total outgoing data would be:</p>
<p>$$
4000 \space URLs/second \times 500 \space bytes = \sim 2 \space MB/second
$$</p>
<h3 id="storage-2">Storage</h3>
<p>For storage, we will assume we store each link or record in our database for 10 years. Since we expect around 100M new requests every month, the total number of records we will need to store would be:</p>
<p>$$
100 \space million \times 10\space years \times 12 \space months = 12 \space billion
$$</p>
<p>Like earlier, if we assume each stored recorded will be approximately 500 bytes. We will need around 6TB of storage:</p>
<p>$$
12 \space billion \times 500 \space bytes = 6 \space TB
$$</p>
<h3 id="cache">Cache</h3>
<p>For caching, we will follow the classic <a href="https://en.wikipedia.org/wiki/Pareto_principle" target="_blank" rel="noopener noreffer ">Pareto principle</a> also known as the 80/20 rule. This means that 80% of the requests are for 20% of the data, so we can cache around 20% of our requests.</p>
<p>Since we get around 4K read or redirection requests each second. This translates into 350M requests per day.</p>
<p>$$
4000 \space URLs/second \times 24 \space hours \times 3600 \space seconds = \sim 350 \space million \space requests/day
$$</p>
<p>Hence, we will need around 35GB of memory per day.</p>
<p>$$
20 \space percent \times 350 \space million \times 500 \space bytes = 35 \space GB/day
$$</p>
<h3 id="high-level-estimate">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Writes (New URLs)</td>
<td>40/s</td>
</tr>
<tr>
<td>Reads (Redirection)</td>
<td>4K/s</td>
</tr>
<tr>
<td>Bandwidth (Incoming)</td>
<td>20 KB/s</td>
</tr>
<tr>
<td>Bandwidth (Outgoing)</td>
<td>2 MB/s</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>6 TB</td>
</tr>
<tr>
<td>Memory (Caching)</td>
<td>~35 GB/day</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-1">Data model design</h2>
<p>Next, we will focus on the data model design. Here is our database schema:</p>
<p></p>
<p>Initially, we can get started with just two tables:</p>
<p><strong>users</strong></p>
<p>Stores user&rsquo;s details such as <code>name</code>, <code>email</code>, <code>createdAt</code>, etc.</p>
<p><strong>urls</strong></p>
<p>Contains the new short URL&rsquo;s properties such as <code>expiration</code>, <code>hash</code>, <code>originalURL</code>, and <code>userID</code> of the user who created the short URL. We can also use the <code>hash</code> column as an <a href="https://karanpratapsingh.com/courses/system-design/indexes" target="_blank" rel="noopener noreffer ">index</a> to improve the query performance.</p>
<h3 id="what-kind-of-database-should-we-use">What kind of database should we use?</h3>
<p>Since the data is not strongly relational, NoSQL databases such as <a href="https://aws.amazon.com/dynamodb" target="_blank" rel="noopener noreffer ">Amazon DynamoDB</a>, <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Apache Cassandra</a>, or <a href="https://www.mongodb.com" target="_blank" rel="noopener noreffer ">MongoDB</a> will be a better choice here, if we do decide to use an SQL database then we can use something like <a href="https://azure.microsoft.com/en-in/products/azure-sql/database" target="_blank" rel="noopener noreffer ">Azure SQL Database</a> or <a href="https://aws.amazon.com/rds" target="_blank" rel="noopener noreffer ">Amazon RDS</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases" target="_blank" rel="noopener noreffer ">SQL vs NoSQL</a>.</em></p>
<h2 id="api-design-1">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="create-url">Create URL</h3>
<p>This API should create a new short URL in our system given an original URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">createURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">originalURL</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">expiration?</span>: <span class="kt">Date</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Original Url (<code>string</code>): Original URL to be shortened.</p>
<p>Expiration (<code>Date</code>): Expiration date of the new URL <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Short URL (<code>string</code>): New shortened URL.</p>
<h3 id="get-url">Get URL</h3>
<p>This API should retrieve the original URL from a given short URL.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">shortURL</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Short Url (<code>string</code>): Short URL mapped to the original URL.</p>
<p><strong>Returns</strong></p>
<p>Original URL (<code>string</code>): Original URL to be retrieved.</p>
<h3 id="delete-url">Delete URL</h3>
<p>This API should delete a given shortURL from our system.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">deleteURL</span><span class="p">(</span><span class="nx">apiKey</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">shortURL</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>API Key (<code>string</code>): API key provided by the user.</p>
<p>Short Url (<code>string</code>): Short URL to be deleted.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="why-do-we-need-an-api-key">Why do we need an API key?</h3>
<p>As you must&rsquo;ve noticed, we&rsquo;re using an API key to prevent abuse of our services. Using this API key we can limit the users to a certain number of requests per second or minute. This is quite a standard practice for developer APIs and should cover our extended requirement.</p>
<h2 id="high-level-design">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="url-encoding">URL Encoding</h3>
<p>Our system&rsquo;s primary goal is to shorten a given URL, let&rsquo;s look at different approaches:</p>
<p><strong>Base62 Approach</strong></p>
<p>In this approach, we can encode the original URL using <a href="https://en.wikipedia.org/wiki/Base62" target="_blank" rel="noopener noreffer ">Base62</a> which consists of the capital letters A-Z, the lower case letters a-z, and the numbers 0-9.</p>
<p>$$
Number \space of \space URLs = 62^N
$$</p>
<p>Where,</p>
<p><code>N</code>: Number of characters in the generated URL.</p>
<p>So, if we want to generate a URL that is 7 characters long, we will generate ~3.5 trillion different URLs.</p>
<p>$$
\begin{gather*}
62^5 = \sim 916 \space million \space URLs \
62^6 = \sim 56.8 \space billion \space URLs \
62^7 = \sim 3.5 \space trillion \space URLs
\end{gather*}
$$</p>
<p>This is the simplest solution here, but it does not guarantee non-duplicate or collision-resistant keys.</p>
<p><strong>MD5 Approach</strong></p>
<p>The <a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreffer ">MD5 message-digest algorithm</a> is a widely used hash function producing a 128-bit hash value (or 32 hexadecimal digits). We can use these 32 hexadecimal digits for generating 7 characters long URL.</p>
<p>$$
MD5(original_url) \rightarrow base62encode \rightarrow hash
$$</p>
<p>However, this creates a new issue for us, which is duplication and collision. We can try to re-compute the hash until we find a unique one but that will increase the overhead of our systems. It&rsquo;s better to look for more scalable approaches.</p>
<p><strong>Counter Approach</strong></p>
<p>In this approach, we will start with a single server which will maintain the count of the keys generated. Once our service receives a request, it can reach out to the counter which returns a unique number and increments the counter. When the next request comes the counter again returns the unique number and this goes on.</p>
<p>$$
Counter(0-3.5 \space trillion) \rightarrow base62encode \rightarrow hash
$$</p>
<p>The problem with this approach is that it can quickly become a single point for failure. And if we run multiple instances of the counter we can have collision as it&rsquo;s essentially a distributed system.</p>
<p>To solve this issue we can use a distributed system manager such as <a href="https://zookeeper.apache.org" target="_blank" rel="noopener noreffer ">Zookeeper</a> which can provide distributed synchronization. Zookeeper can maintain multiple ranges for our servers.</p>
<p>$$
\begin{align*}
&amp; Range \space 1: \space 1 \rightarrow 1,000,000 \
&amp; Range \space 2: \space 1,000,001 \rightarrow 2,000,000 \
&amp; Range \space 3: \space 2,000,001 \rightarrow 3,000,000 \
&amp; &hellip;
\end{align*}
$$</p>
<p>Once a server reaches its maximum range Zookeeper will assign an unused counter range to the new server. This approach can guarantee non-duplicate and collision-resistant URLs. Also, we can run multiple instances of Zookeeper to remove the single point of failure.</p>
<h3 id="key-generation-service-kgs">Key Generation Service (KGS)</h3>
<p>As we discussed, generating a unique key at scale without duplication and collisions can be a bit of a challenge. To solve this problem, we can create a standalone Key Generation Service (KGS) that generates a unique key ahead of time and stores it in a separate database for later use. This approach can make things simple for us.</p>
<p><strong>How to handle concurrent access?</strong></p>
<p>Once the key is used, we can mark it in the database to make sure we don&rsquo;t reuse it, however, if there are multiple server instances reading data concurrently, two or more servers might try to use the same key.</p>
<p>The easiest way to solve this would be to store keys in two tables. As soon as a key is used, we move it to a separate table with appropriate locking in place. Also, to improve reads, we can keep some of the keys in memory.</p>
<p><strong>KGS database estimations</strong></p>
<p>As per our discussion, we can generate up to ~56.8 billion unique 6 character long keys which will result in us having to store 300 GB of keys.</p>
<p>$$
6 \space characters \times 56.8 \space billion = \sim 390 \space GB
$$</p>
<p>While 390 GB seems like a lot for this simple use case, it is important to remember this is for the entirety of our service lifetime and the size of the keys database would not increase like our main database.</p>
<h3 id="caching-1">Caching</h3>
<p>Now, let&rsquo;s talk about <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">caching</a>. As per our estimations, we will require around ~35 GB of memory per day to cache 20% of the incoming requests to our services. For this use case, we can use <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> servers alongside our API server.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">caching</a>.</em></p>
<h3 id="design">Design</h3>
<p>Now that we have identified some core components, let&rsquo;s do the first draft of our system design.</p>
<p></p>
<p>Here&rsquo;s how it works:</p>
<p><strong>Creating a new URL</strong></p>
<ol>
<li>When a user creates a new URL, our API server requests a new unique key from the Key Generation Service (KGS).</li>
<li>Key Generation Service provides a unique key to the API server and marks the key as used.</li>
<li>API server writes the new URL entry to the database and cache.</li>
<li>Our service returns an HTTP 201 (Created) response to the user.</li>
</ol>
<p><strong>Accessing a URL</strong></p>
<ol>
<li>When a client navigates to a certain short URL, the request is sent to the API servers.</li>
<li>The request first hits the cache, and if the entry is not found there then it is retrieved from the database and an HTTP 301 (Redirect) is issued to the original URL.</li>
<li>If the key is still not found in the database, an HTTP 404 (Not found) error is sent to the user.</li>
</ol>
<h2 id="detailed-design-1">Detailed design</h2>
<p>It&rsquo;s time to discuss the finer details of our design.</p>
<h3 id="data-partitioning-1">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent Hashing</a>.</em></p>
<h3 id="database-cleanup">Database cleanup</h3>
<p>This is more of a maintenance step for our services and depends on whether we keep the expired entries or remove them. If we do decide to remove expired entries, we can approach this in two different ways:</p>
<p><strong>Active cleanup</strong></p>
<p>In active cleanup, we will run a separate cleanup service which will periodically remove expired links from our storage and cache. This will be a very lightweight service like a <a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener noreffer ">cron job</a>.</p>
<p><strong>Passive cleanup</strong></p>
<p>For passive cleanup, we can remove the entry when a user tries to access an expired link. This can ensure a lazy cleanup of our database and cache.</p>
<h3 id="cache-1">Cache</h3>
<p>Now let us talk about <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">caching</a>.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>As we discussed before, we can use solutions like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_%28LRU%29" target="_blank" rel="noopener noreffer ">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<h3 id="metrics-and-analytics">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can store and update metadata like visitor&rsquo;s country, platform, the number of views, etc alongside the URL entry in our database.</p>
<h3 id="security-2">Security</h3>
<p>For security, we can introduce private URLs and authorization. A separate table can be used to store user ids that have permission to access a specific URL. If a user does not have proper permissions, we can return an HTTP 401 (Unauthorized) error.</p>
<p>We can also use an <a href="https://karanpratapsingh.com/courses/system-design/api-gateway" target="_blank" rel="noopener noreffer ">API Gateway</a> as they can support capabilities like authorization, rate limiting, and load balancing out of the box.</p>
<h2 id="identify-and-resolve-bottlenecks-1">Identify and resolve bottlenecks</h2>
<p></p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if the API service or Key Generation Service crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;What if the key database used by KGS fails?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of our Servers and Key Generation Service.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our database as it&rsquo;s a read-heavy system.</li>
<li>Standby replica for our key database in case it fails.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
</ul>
<h1 id="whatsapp">WhatsApp</h1>
<p>Let&rsquo;s design a <a href="https://whatsapp.com" target="_blank" rel="noopener noreffer ">WhatsApp</a> like instant messaging service, similar to services like <a href="https://www.whatsapp.com" target="_blank" rel="noopener noreffer ">WhatsApp</a>, <a href="https://www.messenger.com" target="_blank" rel="noopener noreffer ">Facebook Messenger</a>, and <a href="https://www.wechat.com" target="_blank" rel="noopener noreffer ">WeChat</a>.</p>
<h2 id="what-is-whatsapp">What is WhatsApp?</h2>
<p>WhatsApp is a chat application that provides instant messaging services to its users. It is one of the most used mobile applications on the planet connecting over 2 billion users in 180+ countries. WhatsApp is also available on the web.</p>
<h2 id="requirements-1">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-2">Functional requirements</h3>
<ul>
<li>Should support one-on-one chat.</li>
<li>Group chats (max 100 people).</li>
<li>Should support file sharing (image, video, etc.).</li>
</ul>
<h3 id="non-functional-requirements-2">Non-functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-2">Extended requirements</h3>
<ul>
<li>Sent, Delivered, and Read receipts of the messages.</li>
<li>Show the last seen time of users.</li>
<li>Push notifications.</li>
</ul>
<h2 id="estimation-and-constraints-2">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-1">Traffic</h3>
<p>Let us assume we have 50 million daily active users (DAU) and on average each user sends at least 10 messages to 4 different people every day. This gives us 2 billion messages per day.</p>
<p>$$
50 \space million \times 20 \space messages = 2 \space billion/day
$$</p>
<p>Messages can also contain media such as images, videos, or other files. We can assume that 5 percent of messages are media files shared by the users, which gives us additional 200 million files we would need to store.</p>
<p>$$
5 \space percent \times 2 \space billion = 200 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>2 billion requests per day translate into 24K requests per second.</p>
<p>$$
\frac{2 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 24K \space requests/second
$$</p>
<h3 id="storage-3">Storage</h3>
<p>If we assume each message on average is 100 bytes, we will require about 200 GB of database storage every day.</p>
<p>$$
2 \space billion \times 100 \space bytes = \sim 200 \space GB/day
$$</p>
<p>As per our requirements, we also know that around 5 percent of our daily messages (100 million) are media files. If we assume each file is 50 KB on average, we will require 10 TB of storage every day.</p>
<p>$$
100 \space million \times 100 \space KB = 10 \space TB/day
$$</p>
<p>And for 10 years, we will require about 38 PB of storage.</p>
<p>$$
(10 \space TB + 0.2 \space TB) \times 10 \space years \times 365 \space days = \sim 38 \space PB
$$</p>
<h3 id="bandwidth-1">Bandwidth</h3>
<p>As our system is handling 10.2 TB of ingress every day, we will require a minimum bandwidth of around 120 MB per second.</p>
<p>$$
\frac{10.2 \space TB}{(24 \space hrs \times 3600 \space seconds)} = \sim 120 \space MB/second
$$</p>
<h3 id="high-level-estimate-1">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>50 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>24K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~10.2 TB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~38 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~120 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-2">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p></p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>phoneNumber</code>, and other details.</p>
<p><strong>messages</strong></p>
<p>As the name suggests, this table will store messages with properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, and timestamps for message delivery. The message will also have a corresponding <code>chatID</code> or <code>groupID</code>.</p>
<p><strong>chats</strong></p>
<p>This table basically represents a private chat between two users and can contain multiple messages.</p>
<p><strong>users_chats</strong></p>
<p>This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.</p>
<p><strong>groups</strong></p>
<p>This table represents a group between multiple users.</p>
<p><strong>users_groups</strong></p>
<p>This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.</p>
<h3 id="what-kind-of-database-should-we-use-1">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-2">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="get-all-chats-or-groups">Get all chats or groups</h3>
<p>This API will get all chats or groups for a given <code>userID</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getAll</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Chat</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">Group</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>Chat[] | Group[]</code>): All the chats and groups the user is a part of.</p>
<h3 id="get-messages">Get messages</h3>
<p>Get all messages for a user given the <code>channelID</code> (chat or group id).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getMessages</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Message</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) from which messages need to be retrieved.</p>
<p><strong>Returns</strong></p>
<p>Messages (<code>Message[]</code>): All the messages in a given chat or group.</p>
<h3 id="send-message">Send message</h3>
<p>Send a message from a user to a channel (chat or group).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">sendMessage</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">message</span>: <span class="kt">Message</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) user wants to send a message to.</p>
<p>Message (<code>Message</code>): The message (text, image, video, etc.) that the user wants to send.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="join-or-leave-a-group">Join or leave a group</h3>
<p>Send a message from a user to a channel (chat or group).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">joinGroup</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">leaveGroup</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">channelID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the current user.</p>
<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) the user wants to join or leave.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-1">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices" target="_blank" rel="noopener noreffer ">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This is an HTTP-based service that handles user-related concerns such as authentication and user information.</p>
<p><strong>Chat Service</strong></p>
<p>The chat service will use WebSockets and establish connections with the client to handle chat and group message-related functionality. We can also use cache to keep track of all the active connections sort of like sessions which will help us determine if the user is online or not.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>
<p><strong>Presence Service</strong></p>
<p>The presence service will keep track of the last seen status of all users. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc" target="_blank" rel="noopener noreffer ">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery" target="_blank" rel="noopener noreffer ">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc" target="_blank" rel="noopener noreffer ">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="real-time-messaging">Real-time messaging</h3>
<p>How do we efficiently send and receive messages? We have two different options:</p>
<p><strong>Pull model</strong></p>
<p>The client can periodically send an HTTP request to servers to check if there are any new messages. This can be achieved via something like <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling" target="_blank" rel="noopener noreffer ">Long polling</a>.</p>
<p><strong>Push model</strong></p>
<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets" target="_blank" rel="noopener noreffer ">WebSockets</a> or <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse" target="_blank" rel="noopener noreffer ">Server-Sent Events (SSE)</a> for this.</p>
<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets" target="_blank" rel="noopener noreffer ">WebSockets</a> is a better choice because then we can push data to the client once it&rsquo;s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse" target="_blank" rel="noopener noreffer ">Server-Sent Events (SSE)</a> which are only unidirectional.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events" target="_blank" rel="noopener noreffer ">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>
<h3 id="last-seen">Last seen</h3>
<p>To implement the last seen functionality, we can use a <a href="https://en.wikipedia.org/wiki/Heartbeat_%28computing%29" target="_blank" rel="noopener noreffer ">heartbeat</a> mechanism, where the client can periodically ping the servers indicating its liveness. Since this needs to be as low overhead as possible, we can store the last active timestamp in the cache as follows:</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>User A</td>
<td>2022-07-01T14:32:50</td>
</tr>
<tr>
<td>User B</td>
<td>2022-07-05T05:10:35</td>
</tr>
<tr>
<td>User C</td>
<td>2022-07-10T04:33:25</td>
</tr>
</tbody>
</table>
<p>This will give us the last time the user was active. This functionality will be handled by the presence service combined with <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> as our cache.</p>
<p>Another way to implement this is to track the latest action of the user, once the last activity crosses a certain threshold, such as <em>&ldquo;user hasn&rsquo;t performed any action in the last 30 seconds&rdquo;</em>, we can show the user as offline and last seen with the last recorded timestamp. This will be more of a lazy update approach and might benefit us over heartbeat in certain cases.</p>
<h3 id="notifications">Notifications</h3>
<p>Once a message is sent in a chat or a group, we will first check if the recipient is active or not, we can get this information by taking the user&rsquo;s active connection and last seen into consideration.</p>
<p>If the recipient is not active, the chat service will add an event to a <a href="https://karanpratapsingh.com/courses/system-design/message-queues" target="_blank" rel="noopener noreffer ">message queue</a> with additional metadata such as the client&rsquo;s device platform which will be used to route the notification to the correct platform later on.</p>
<p>The notification service will then consume the event from the message queue and forward the request to <a href="https://firebase.google.com/docs/cloud-messaging" target="_blank" rel="noopener noreffer ">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications" target="_blank" rel="noopener noreffer ">Apple Push Notification Service (APNS)</a> based on the client&rsquo;s device platform (Android, iOS, web, etc). We can also add support for email and SMS.</p>
<p><strong>Why are we using a message queue?</strong></p>
<p>Since most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they&rsquo;re sent and that a message is delivered at least once which is an important part of our service functionality.</p>
<p>While this seems like a classic <a href="https://karanpratapsingh.com/courses/system-design/publish-subscribe" target="_blank" rel="noopener noreffer ">publish-subscribe</a> use case, it is actually not as mobile devices and browsers each have their own way of handling push notifications. Usually, notifications are handled externally via Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) unlike message fan-out which we commonly see in backend services. We can use something like <a href="https://aws.amazon.com/sqs" target="_blank" rel="noopener noreffer ">Amazon SQS</a> or <a href="https://www.rabbitmq.com" target="_blank" rel="noopener noreffer ">RabbitMQ</a> to support this functionality.</p>
<h3 id="read-receipts">Read receipts</h3>
<p>Handling read receipts can be tricky, for this use case we can wait for some sort of <a href="https://en.wikipedia.org/wiki/Acknowledgement_%28data_networks%29" target="_blank" rel="noopener noreffer ">Acknowledgment (ACK)</a> from the client to determine if the message was delivered and update the corresponding <code>deliveredAt</code> field. Similarly, we will mark message the message seen once the user opens the chat and update the corresponding <code>seenAt</code> timestamp field.</p>
<h3 id="design-1">Design</h3>
<p>Now that we have identified some core components, let&rsquo;s do the first draft of our system design.</p>
<p></p>
<h2 id="detailed-design-2">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-2">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent Hashing</a>.</em></p>
<h3 id="caching-2">Caching</h3>
<p>In a messaging application, we have to be careful about using cache as our users expect the latest data, but many users will be requesting the same messages, especially in a group chat. So, to prevent usage spikes from our resources we can cache older messages.</p>
<p>Some group chats can have thousands of messages and sending that over the network will be really inefficient, to improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won&rsquo;t have to retrieve old messages unless requested.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>We can use solutions like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_%28LRU%29" target="_blank" rel="noopener noreffer ">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">Caching</a>.</em></p>
<h3 id="media-access-and-storage">Media access and storage</h3>
<p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>
<p>But where can we store files at scale? Well, <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage" target="_blank" rel="noopener noreffer ">object storage</a> is what we&rsquo;re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs" target="_blank" rel="noopener noreffer ">HDFS</a> or <a href="https://www.gluster.org" target="_blank" rel="noopener noreffer ">GlusterFS</a>.</p>
<p><em>Fun fact: WhatsApp deletes media on its servers once it has been downloaded by the user.</em></p>
<p>We can use object stores like <a href="https://aws.amazon.com/s3" target="_blank" rel="noopener noreffer ">Amazon S3</a>, <a href="https://azure.microsoft.com/en-in/services/storage/blobs" target="_blank" rel="noopener noreffer ">Azure Blob Storage</a>, or <a href="https://cloud.google.com/storage" target="_blank" rel="noopener noreffer ">Google Cloud Storage</a> for this use case.</p>
<h3 id="content-delivery-network-cdn-1">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network" target="_blank" rel="noopener noreffer ">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront" target="_blank" rel="noopener noreffer ">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn" target="_blank" rel="noopener noreffer ">Cloudflare CDN</a> for this use case.</p>
<h3 id="api-gateway-1">API gateway</h3>
<p>Since we will be using multiple protocols like HTTP, WebSocket, TCP/IP, deploying multiple L4 (transport layer) or L7 (application layer) type load balancers separately for each protocol will be expensive. Instead, we can use an <a href="https://karanpratapsingh.com/courses/system-design/api-gateway" target="_blank" rel="noopener noreffer ">API Gateway</a> that supports multiple protocols without any issues.</p>
<p>API Gateway can also offer other features such as authentication, authorization, rate limiting, throttling, and API versioning which will improve the quality of our services.</p>
<p>We can use services like <a href="https://aws.amazon.com/api-gateway" target="_blank" rel="noopener noreffer ">Amazon API Gateway</a> or <a href="https://azure.microsoft.com/en-in/services/api-management" target="_blank" rel="noopener noreffer ">Azure API Gateway</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-2">Identify and resolve bottlenecks</h2>
<p></p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;Wouldn&rsquo;t API Gateway be a single point of failure?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
<li>&ldquo;How can we reduce media storage costs&rdquo;?</li>
<li>&ldquo;Does chat service has too much responsibility?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>We can have a standby replica of our API Gateway.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers" target="_blank" rel="noopener noreffer ">message broker</a> such as <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> or <a href="https://nats.io" target="_blank" rel="noopener noreffer ">NATS</a> to make our notification system more robust.</li>
<li>We can add media processing and compression capabilities to the media service to compress large files similar to WhatsApp which will save a lot of storage space and reduce cost.</li>
<li>We can create a group service separate from the chat service to further decouple our services.</li>
</ul>
<h1 id="twitter">Twitter</h1>
<p>Let&rsquo;s design a <a href="https://twitter.com" target="_blank" rel="noopener noreffer ">Twitter</a> like social media service, similar to services like <a href="https://facebook.com" target="_blank" rel="noopener noreffer ">Facebook</a>, <a href="https://instagram.com" target="_blank" rel="noopener noreffer ">Instagram</a>, etc.</p>
<h2 id="what-is-twitter">What is Twitter?</h2>
<p>Twitter is a social media service where users can read or post short messages (up to 280 characters) called tweets. It is available on the web and mobile platforms such as Android and iOS.</p>
<h2 id="requirements-2">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-3">Functional requirements</h3>
<ul>
<li>Should be able to post new tweets (can be text, image, video, etc.).</li>
<li>Should be able to follow other users.</li>
<li>Should have a newsfeed feature consisting of tweets from the people the user is following.</li>
<li>Should be able to search tweets.</li>
</ul>
<h3 id="non-functional-requirements-3">Non-Functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-3">Extended requirements</h3>
<ul>
<li>Metrics and analytics.</li>
<li>Retweet functionality.</li>
<li>Favorite tweets.</li>
</ul>
<h2 id="estimation-and-constraints-3">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-2">Traffic</h3>
<p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user tweets 5 times a day. This gives us 1 billion tweets per day.</p>
<p>$$
200 \space million \times 5 \space messages = 1 \space billion/day
$$</p>
<p>Tweets can also contain media such as images, or videos. We can assume that 10 percent of tweets are media files shared by the users, which gives us additional 100 million files we would need to store.</p>
<p>$$
10 \space percent \times 1 \space billion = 100 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-4">Storage</h3>
<p>If we assume each message on average is 100 bytes, we will require about 100 GB of database storage every day.</p>
<p>$$
1 \space billion \times 100 \space bytes = \sim 100 \space GB/day
$$</p>
<p>We also know that around 10 percent of our daily messages (100 million) are media files per our requirements. If we assume each file is 50 KB on average, we will require 5 TB of storage every day.</p>
<p>$$
100 \space million \times 100 \space KB = 5 \space TB/day
$$</p>
<p>And for 10 years, we will require about 19 PB of storage.</p>
<p>$$
(5 \space TB + 0.1 \space TB) \times 365 \space days \times 10 \space years = \sim 19 \space PB
$$</p>
<h3 id="bandwidth-2">Bandwidth</h3>
<p>As our system is handling 5.1 TB of ingress every day, we will require a minimum bandwidth of around 60 MB per second.</p>
<p>$$
\frac{5.1 \space TB}{(24 \space hrs \times 3600 \space seconds)} = \sim 60 \space MB/second
$$</p>
<h3 id="high-level-estimate-2">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>100 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~5.1 TB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~19 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~60 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-3">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p></p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>
<p><strong>tweets</strong></p>
<p>As the name suggests, this table will store tweets and their properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, etc. We will also store the corresponding <code>userID</code>.</p>
<p><strong>favorites</strong></p>
<p>This table maps tweets with users for the favorite tweets functionality in our application.</p>
<p><strong>followers</strong></p>
<p>This table maps the followers and <a href="https://en.wiktionary.org/wiki/followee" target="_blank" rel="noopener noreffer ">followees</a> as users can follow each other (N:M relationship).</p>
<p><strong>feeds</strong></p>
<p>This table stores feed properties with the corresponding <code>userID</code>.</p>
<p><strong>feeds_tweets</strong></p>
<p>This table maps tweets and feed (N:M relationship).</p>
<h3 id="what-kind-of-database-should-we-use-2">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-3">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="post-a-tweet">Post a tweet</h3>
<p>This API will allow the user to post a tweet on the platform.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">postTweet</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">content</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">mediaURL?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the user.</p>
<p>Content (<code>string</code>): Contents of the tweet.</p>
<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="follow-or-unfollow-a-user">Follow or unfollow a user</h3>
<p>This API will allow the user to follow or unfollow another user.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">follow</span><span class="p">(</span><span class="nx">followerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">followeeID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">unfollow</span><span class="p">(</span><span class="nx">followerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">followeeID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Follower ID (<code>UUID</code>): ID of the current user.</p>
<p>Followee ID (<code>UUID</code>): ID of the user we want to follow or unfollow.</p>
<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="get-newsfeed">Get newsfeed</h3>
<p>This API will return all the tweets to be shown within a given newsfeed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">getNewsfeed</span><span class="p">(</span><span class="nx">userID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="nx">Tweet</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>User ID (<code>UUID</code>): ID of the user.</p>
<p><strong>Returns</strong></p>
<p>Tweets (<code>Tweet[]</code>): All the tweets to be shown within a given newsfeed.</p>
<h2 id="high-level-design-2">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-1">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices" target="_blank" rel="noopener noreffer ">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This service handles user-related concerns such as authentication and user information.</p>
<p><strong>Newsfeed Service</strong></p>
<p>This service will handle the generation and publishing of user newsfeeds. It will be discussed in detail separately.</p>
<p><strong>Tweet Service</strong></p>
<p>The tweet service will handle tweet-related use cases such as posting a tweet, favorites, etc.</p>
<p><strong>Search Service</strong></p>
<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc" target="_blank" rel="noopener noreffer ">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery" target="_blank" rel="noopener noreffer ">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc" target="_blank" rel="noopener noreffer ">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="newsfeed">Newsfeed</h3>
<p>When it comes to the newsfeed, it seems easy enough to implement, but there are a lot of things that can make or break this feature. So, let&rsquo;s divide our problem into two parts:</p>
<p><strong>Generation</strong></p>
<p>Let&rsquo;s assume we want to generate the feed for user A, we will perform the following steps:</p>
<ol>
<li>Retrieve the IDs of all the users and entities (hashtags, topics, etc.) user A follows.</li>
<li>Fetch the relevant tweets for each of the retrieved IDs.</li>
<li>Use a ranking algorithm to rank the tweets based on parameters such as relevance, time, engagement, etc.</li>
<li>Return the ranked tweets data to the client in a paginated manner.</li>
</ol>
<p>Feed generation is an intensive process and can take quite a lot of time, especially for users following a lot of people. To improve the performance, the feed can be pre-generated and stored in the cache, then we can have a mechanism to periodically update the feed and apply our ranking algorithm to the new tweets.</p>
<p><strong>Publishing</strong></p>
<p>Publishing is the step where the feed data is pushed according to each specific user. This can be a quite heavy operation, as a user may have millions of friends or followers. To deal with this, we have three different approaches:</p>
<ul>
<li>Pull Model (or Fan-out on load)</li>
</ul>
<p></p>
<p>When a user creates a tweet, and a follower reloads their newsfeed, the feed is created and stored in memory. The most recent feed is only loaded when the user requests it. This approach reduces the number of write operations on our database.</p>
<p>The downside of this approach is that the users will not be able to view recent feeds unless they &ldquo;pull&rdquo; the data from the server, which will increase the number of read operations on the server.</p>
<ul>
<li>Push Model (or Fan-out on write)</li>
</ul>
<p></p>
<p>In this model, once a user creates a tweet, it is &ldquo;pushed&rdquo; to all the follower&rsquo;s feeds immediately. This prevents the system from having to go through a user&rsquo;s entire followers list to check for updates.</p>
<p>However, the downside of this approach is that it would increase the number of write operations on the database.</p>
<ul>
<li>Hybrid Model</li>
</ul>
<p>A third approach is a hybrid model between the pull and push model. It combines the beneficial features of the above two models and tries to provide a balanced approach between the two.</p>
<p>The hybrid model allows only users with a lesser number of followers to use the push model and for users with a higher number of followers celebrities, the pull model will be used.</p>
<h3 id="ranking-algorithm">Ranking Algorithm</h3>
<p>As we discussed, we will need a ranking algorithm to rank each tweet according to its relevance to each specific user.</p>
<p>For example, Facebook used to utilize an <a href="https://en.wikipedia.org/wiki/EdgeRank" target="_blank" rel="noopener noreffer ">EdgeRank</a> algorithm, here, the rank of each feed item is described by:</p>
<p>$$
Rank = Affinity \times Weight \times Decay
$$</p>
<p>Where,</p>
<p><code>Affinity</code>: is the &ldquo;closeness&rdquo; of the user to the creator of the edge. If a user frequently likes, comments, or messages the edge creator, then the value of affinity will be higher, resulting in a higher rank for the post.</p>
<p><code>Weight</code>: is the value assigned according to each edge. A comment can have a higher weightage than likes, and thus a post with more comments is more likely to get a higher rank.</p>
<p><code>Decay</code>: is the measure of the creation of the edge. The older the edge, the lesser will be the value of decay and eventually the rank.</p>
<p>Nowadays, algorithms are much more complex and ranking is done using machine learning models which can take thousands of factors into consideration.</p>
<h3 id="retweets">Retweets</h3>
<p>Retweets are one of our extended requirements. To implement this feature we can simply create a new tweet with the user id of the user retweeting the original tweet and then modify the <code>type</code> enum and <code>content</code> property of the new tweet to link it with the original tweet.</p>
<p>For example, the <code>type</code> enum property can be of type tweet, similar to text, video, etc and <code>content</code> can be the id of the original tweet. Here the first row indicates the original tweet while the second row is how we can represent a retweet.</p>
<table>
<thead>
<tr>
<th>id</th>
<th>userID</th>
<th>type</th>
<th>content</th>
<th>createdAt</th>
</tr>
</thead>
<tbody>
<tr>
<td>ad34-291a-45f6-b36c</td>
<td>7a2c-62c4-4dc8-b1bb</td>
<td>text</td>
<td>Hey, this is my first tweet…</td>
<td>1658905644054</td>
</tr>
<tr>
<td>f064-49ad-9aa2-84a6</td>
<td>6aa2-2bc9-4331-879f</td>
<td>tweet</td>
<td>ad34-291a-45f6-b36c</td>
<td>1658906165427</td>
</tr>
</tbody>
</table>
<p>This is a very basic implementation, to improve this we can create a separate table itself to store retweets.</p>
<h3 id="search">Search</h3>
<p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href="https://www.elastic.co" target="_blank" rel="noopener noreffer ">Elasticsearch</a> can help us with this use case.</p>
<p><a href="https://www.elastic.co" target="_blank" rel="noopener noreffer ">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href="https://lucene.apache.org" target="_blank" rel="noopener noreffer ">Apache Lucene</a>.</p>
<p><strong>How do we identify trending topics?</strong></p>
<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries, hashtags, and topics in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism. Our ranking algorithm can also be applied to the trending topics to give them more weight and personalize them for the user.</p>
<h3 id="notifications-1">Notifications</h3>
<p>Push notifications are an integral part of any social media platform. We can use a message queue or a message broker such as <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> with the notification service to dispatch requests to <a href="https://firebase.google.com/docs/cloud-messaging" target="_blank" rel="noopener noreffer ">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications" target="_blank" rel="noopener noreffer ">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/whatsapp#notifications" target="_blank" rel="noopener noreffer ">WhatsApp</a> system design where we discuss push notifications.</em></p>
<h2 id="detailed-design-3">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-3">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent Hashing</a>.</em></p>
<h3 id="mutual-friends">Mutual friends</h3>
<p>For mutual friends, we can build a social graph for every user. Each node in the graph will represent a user and a directional edge will represent followers and followees. After that, we can traverse the followers of a user to find and suggest a mutual friend. This would require a graph database such as <a href="https://neo4j.com" target="_blank" rel="noopener noreffer ">Neo4j</a> and <a href="https://www.arangodb.com" target="_blank" rel="noopener noreffer ">ArangoDB</a>.</p>
<p>This is a pretty simple algorithm, to improve our suggestion accuracy, we will need to incorporate a recommendation model which uses machine learning as part of our algorithm.</p>
<h3 id="metrics-and-analytics-1">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. As we will be using <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> to publish all sorts of events, we can process these events and run analytics on the data using <a href="https://spark.apache.org" target="_blank" rel="noopener noreffer ">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing.</p>
<h3 id="caching-3">Caching</h3>
<p>In a social media application, we have to be careful about using cache as our users expect the latest data. So, to prevent usage spikes from our resources we can cache the top 20% of the tweets.</p>
<p>To further improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won&rsquo;t have to retrieve old messages unless requested.</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p>We can use solutions like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_%28LRU%29" target="_blank" rel="noopener noreffer ">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">Caching</a>.</em></p>
<h3 id="media-access-and-storage-1">Media access and storage</h3>
<p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>
<p>But where can we store files at scale? Well, <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage" target="_blank" rel="noopener noreffer ">object storage</a> is what we&rsquo;re looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs" target="_blank" rel="noopener noreffer ">HDFS</a> or <a href="https://www.gluster.org" target="_blank" rel="noopener noreffer ">GlusterFS</a>.</p>
<h3 id="content-delivery-network-cdn-2">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network" target="_blank" rel="noopener noreffer ">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront" target="_blank" rel="noopener noreffer ">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn" target="_blank" rel="noopener noreffer ">Cloudflare CDN</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-3">Identify and resolve bottlenecks</h2>
<p></p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
<li>&ldquo;How can we reduce media storage costs&rdquo;?</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers" target="_blank" rel="noopener noreffer ">message broker</a> such as <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> or <a href="https://nats.io" target="_blank" rel="noopener noreffer ">NATS</a> to make our notification system more robust.</li>
<li>We can add media processing and compression capabilities to the media service to compress large files which will save a lot of storage space and reduce cost.</li>
</ul>
<h1 id="netflix">Netflix</h1>
<p>Let&rsquo;s design a <a href="https://netflix.com" target="_blank" rel="noopener noreffer ">Netflix</a> like video streaming service, similar to services like <a href="https://www.primevideo.com" target="_blank" rel="noopener noreffer ">Amazon Prime Video</a>, <a href="https://www.disneyplus.com" target="_blank" rel="noopener noreffer ">Disney Plus</a>, <a href="https://www.hulu.com" target="_blank" rel="noopener noreffer ">Hulu</a>, <a href="https://youtube.com" target="_blank" rel="noopener noreffer ">Youtube</a>, <a href="https://vimeo.com" target="_blank" rel="noopener noreffer ">Vimeo</a>, etc.</p>
<h2 id="what-is-netflix">What is Netflix?</h2>
<p>Netflix is a subscription-based streaming service that allows its members to watch TV shows and movies on an internet-connected device. It is available on platforms such as the Web, iOS, Android, TV, etc.</p>
<h2 id="requirements-3">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-4">Functional requirements</h3>
<ul>
<li>Users should be able to stream and share videos.</li>
<li>The content team (or users in YouTube&rsquo;s case) should be able to upload new videos (movies, tv shows episodes, and other content).</li>
<li>Users should be able to search for videos using titles or tags.</li>
<li>Users should be able to comment on a video similar to YouTube.</li>
</ul>
<h3 id="non-functional-requirements-4">Non-Functional requirements</h3>
<ul>
<li>High availability with minimal latency.</li>
<li>High reliability, no uploads should be lost.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-4">Extended requirements</h3>
<ul>
<li>Certain content should be <a href="https://en.wikipedia.org/wiki/Geo-blocking" target="_blank" rel="noopener noreffer ">geo-blocked</a>.</li>
<li>Resume video playback from the point user left off.</li>
<li>Record metrics and analytics of videos.</li>
</ul>
<h2 id="estimation-and-constraints-4">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-3">Traffic</h3>
<p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user watches 5 videos a day. This gives us 1 billion videos watched per day.</p>
<p>$$
200 \space million \times 5 \space videos = 1 \space billion/day
$$</p>
<p>Assuming, a <code>200:1</code> read/write ratio, about 50 million videos will be uploaded every day.</p>
<p>$$
\frac{1}{200} \times 1 \space billion = 50 \space million/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-5">Storage</h3>
<p>If we assume each video is 100 MB on average, we will require about 5 PB of storage every day.</p>
<p>$$
50 \space million \times 100 \space MB = 5 \space PB/day
$$</p>
<p>And for 10 years, we will require an astounding 18,250 PB of storage.</p>
<p>$$
5 \space PB \times 365 \space days \times 10 \space years = \sim 18,250 \space PB
$$</p>
<h3 id="bandwidth-3">Bandwidth</h3>
<p>As our system is handling 5 PB of ingress every day, we will require a minimum bandwidth of around 58 GB per second.</p>
<p>$$
\frac{5 \space PB}{(24 \space hrs \times 3600 \space seconds)} = \sim 58 \space GB/second
$$</p>
<h3 id="high-level-estimate-3">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>200 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~5 PB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~18,250 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~58 GB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-4">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p></p>
<p>We have the following tables:</p>
<p><strong>users</strong></p>
<p>This table will contain a user&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>
<p><strong>videos</strong></p>
<p>As the name suggests, this table will store videos and their properties such as <code>title</code>, <code>streamURL</code>, <code>tags</code>, etc. We will also store the corresponding <code>userID</code>.</p>
<p><strong>tags</strong></p>
<p>This table will simply store tags associated with a video.</p>
<p><strong>views</strong></p>
<p>This table helps us to store all the views received on a video.</p>
<p><strong>comments</strong></p>
<p>This table stores all the comments received on a video (like YouTube).</p>
<h3 id="what-kind-of-database-should-we-use-3">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-4">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="upload-a-video">Upload a video</h3>
<p>Given a byte stream, this API enables video to be uploaded to our service.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">uploadVideo</span><span class="p">(</span><span class="nx">title</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">description</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">data</span>: <span class="kt">Stream</span><span class="p">&lt;</span><span class="nt">byte</span><span class="p">&gt;,</span> <span class="nx">tags?</span>: <span class="kt">string</span><span class="p">[])</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Title (<code>string</code>): Title of the new video.</p>
<p>Description (<code>string</code>): Description of the new video.</p>
<p>Data (<code>Byte[]</code>): Byte stream of the video data.</p>
<p>Tags (<code>string[]</code>): Tags for the video <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="streaming-a-video">Streaming a video</h3>
<p>This API allows our users to stream a video with the preferred codec and resolution.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">streamVideo</span><span class="p">(</span><span class="nx">videoID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">codec</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;,</span> <span class="nx">resolution</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">int</span><span class="p">&gt;,</span> <span class="nx">offset?</span>: <span class="kt">int</span><span class="p">)</span><span class="o">:</span> <span class="nx">VideoStream</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Video ID (<code>UUID</code>): ID of the video that needs to be streamed.</p>
<p>Codec (<code>Enum&lt;string&gt;</code>): Required <a href="https://en.wikipedia.org/wiki/Video_codec" target="_blank" rel="noopener noreffer ">codec</a> of the requested video, such as <code>h.265</code>, <code>h.264</code>, <code>VP9</code>, etc.</p>
<p>Resolution (<code>Tuple&lt;int&gt;</code>): <a href="https://en.wikipedia.org/wiki/Display_resolution" target="_blank" rel="noopener noreffer ">Resolution</a> of the requested video.</p>
<p>Offset (<code>int</code>): Offset of the video stream in seconds to stream data from any point in the video <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Stream (<code>VideoStream</code>): Data stream of the requested video.</p>
<h3 id="search-for-a-video">Search for a video</h3>
<p>This API will enable our users to search for a video based on its title or tags.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">searchVideo</span><span class="p">(</span><span class="nx">query</span>: <span class="kt">string</span><span class="p">,</span> <span class="nx">nextPage?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="nx">Video</span><span class="p">[]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Query (<code>string</code>): Search query from the user.</p>
<p>Next Page (<code>string</code>): Token for the next page, this can be used for pagination <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Videos (<code>Video[]</code>): All the videos available for a particular search query.</p>
<h3 id="add-a-comment">Add a comment</h3>
<p>This API will allow our users to post a comment on a video (like YouTube).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">comment</span><span class="p">(</span><span class="nx">videoID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">comment</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>VideoID (<code>UUID</code>): ID of the video user wants to comment on.</p>
<p>Comment (<code>string</code>): The text content of the comment.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-3">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-2">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices" target="_blank" rel="noopener noreffer ">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>User Service</strong></p>
<p>This service handles user-related concerns such as authentication and user information.</p>
<p><strong>Stream Service</strong></p>
<p>The tweet service will handle video streaming-related functionality.</p>
<p><strong>Search Service</strong></p>
<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>
<p><strong>Media service</strong></p>
<p>This service will handle the video uploads and processing. It will be discussed in detail separately.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc" target="_blank" rel="noopener noreffer ">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery" target="_blank" rel="noopener noreffer ">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc" target="_blank" rel="noopener noreffer ">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="video-processing">Video processing</h3>
<p>There are so many variables in play when it comes to processing a video. For example, an average data size of two-hour raw 8K footage from a high-end camera can easily be up to 4 TB, thus we need to have some kind of processing to reduce both storage and delivery costs.</p>
<p>Here&rsquo;s how we can process videos once they&rsquo;re uploaded by the content team (or users in YouTube&rsquo;s case) and are queued for processing in our <a href="https://karanpratapsingh.com/courses/system-design/message-queues" target="_blank" rel="noopener noreffer ">message queue</a>.</p>
<p></p>
<p>Let&rsquo;s discuss how this works:</p>
<ul>
<li><strong>File Chunker</strong></li>
</ul>
<p>This is the first step of our processing pipeline. File chunking is the process of splitting a file into smaller pieces called chunks. It can help us eliminate duplicate copies of repeating data on storage, and reduces the amount of data sent over the network by only selecting changed chunks.</p>
<p>Usually, a video file can be split into equal size chunks based on timestamps but Netflix instead splits chunks based on scenes, this slight variation becomes a huge factor for a better user experience as whenever the client requests a chunk from the server, there is a lower chance of interruption as a complete scene will be retrieved.</p>
<p></p>
<ul>
<li><strong>Content Filter</strong></li>
</ul>
<p>This step checks if the video adheres to the content policy of the platform, this can be pre-approved in the case of Netflix as per the <a href="https://en.wikipedia.org/wiki/Motion_picture_content_rating_system" target="_blank" rel="noopener noreffer ">content rating</a> of the media or can be strictly enforced like YouTube.</p>
<p>This entire step is done by a machine learning model which performs copyright, piracy, and NSFW checks. If issues are found, we can push the task to a <a href="https://karanpratapsingh.com/courses/system-design/message-queues#dead-letter-queues" target="_blank" rel="noopener noreffer ">dead-letter queue (DLQ)</a> and someone from the moderation team can do further inspection.</p>
<ul>
<li><strong>Transcoder</strong></li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Transcoding" target="_blank" rel="noopener noreffer ">Transcoding</a> is a process in which the original data is decoded to an intermediate uncompressed format, which is then encoded into the target format. This process uses different <a href="https://en.wikipedia.org/wiki/Video_codec" target="_blank" rel="noopener noreffer ">codecs</a> to perform bitrate adjustment, image downsampling, or re-encoding the media.</p>
<p>This results in a smaller size file and a much more optimized format for the target devices. Standalone solutions such as <a href="https://ffmpeg.org" target="_blank" rel="noopener noreffer ">FFmpeg</a> or cloud-based solutions like <a href="https://aws.amazon.com/mediaconvert" target="_blank" rel="noopener noreffer ">AWS Elemental MediaConvert</a> can be used to implement this step of the pipeline.</p>
<ul>
<li><strong>Quality Conversion</strong></li>
</ul>
<p>This is the last step of the processing pipeline and as the name suggests, this step handles the conversion of the transcoded media from the previous step into different resolutions such as 4K, 1440p, 1080p, 720p, etc.</p>
<p>This allows us to fetch the desired quality of the video as per the user&rsquo;s request, and once the media file finishes processing, it will be uploaded to a distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs" target="_blank" rel="noopener noreffer ">HDFS</a>, <a href="https://www.gluster.org" target="_blank" rel="noopener noreffer ">GlusterFS</a>, or an <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage" target="_blank" rel="noopener noreffer ">object storage</a> such as <a href="https://aws.amazon.com/s3" target="_blank" rel="noopener noreffer ">Amazon S3</a> for later retrieval during streaming.</p>
<p><em>Note: We can add additional steps such as subtitles and thumbnails generation as part of our pipeline.</em></p>
<p><strong>Why are we using a message queue?</strong></p>
<p>Processing videos as a long-running task makes much more sense, and a <a href="https://karanpratapsingh.com/courses/system-design/message-queues" target="_blank" rel="noopener noreffer ">message queue</a> also decouples our video processing pipeline from the uploads functionality. We can use something like <a href="https://aws.amazon.com/sqs" target="_blank" rel="noopener noreffer ">Amazon SQS</a> or <a href="https://www.rabbitmq.com" target="_blank" rel="noopener noreffer ">RabbitMQ</a> to support this.</p>
<h3 id="video-streaming">Video streaming</h3>
<p>Video streaming is a challenging task from both the client and server perspectives. Moreover, internet connection speeds vary quite a lot between different users. To make sure users don&rsquo;t re-fetch the same content, we can use a <a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network" target="_blank" rel="noopener noreffer ">Content Delivery Network (CDN)</a>.</p>
<p>Netflix takes this a step further with its <a href="https://openconnect.netflix.com" target="_blank" rel="noopener noreffer ">Open Connect</a> program. In this approach, they partner with thousands of Internet Service Providers (ISPs) to localize their traffic and deliver their content more efficiently.</p>
<p><strong>What is the difference between Netflix&rsquo;s Open Connect and a traditional Content Delivery Network (CDN)?</strong></p>
<p>Netflix Open Connect is our purpose-built <a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network" target="_blank" rel="noopener noreffer ">Content Delivery Network (CDN)</a> responsible for serving Netflix&rsquo;s video traffic. Around 95% of the traffic globally is delivered via direct connections between Open Connect and the ISPs their customers use to access the internet.</p>
<p>Currently, they have Open Connect Appliances (OCAs) in over 1000 separate locations around the world. In case of issues, Open Connect Appliances (OCAs) can failover, and the traffic can be re-routed to Netflix servers.</p>
<p>Additionally, we can use <a href="https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming" target="_blank" rel="noopener noreffer ">Adaptive bitrate streaming</a> protocols such as <a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener noreffer ">HTTP Live Streaming (HLS)</a> which is designed for reliability and it dynamically adapts to network conditions by optimizing playback for the available speed of the connections.</p>
<p>Lastly, for playing the video from where the user left off (part of our extended requirements), we can simply use the <code>offset</code> property we stored in the <code>views</code> table to retrieve the scene chunk at that particular timestamp and resume the playback for the user.</p>
<h3 id="searching">Searching</h3>
<p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href="https://www.elastic.co" target="_blank" rel="noopener noreffer ">Elasticsearch</a> can help us with this use case.</p>
<p><a href="https://www.elastic.co" target="_blank" rel="noopener noreffer ">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href="https://lucene.apache.org" target="_blank" rel="noopener noreffer ">Apache Lucene</a>.</p>
<p><strong>How do we identify trending content?</strong></p>
<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism.</p>
<h3 id="sharing">Sharing</h3>
<p>Sharing content is an important part of any platform, for this, we can have some sort of URL shortener service in place that can generate short URLs for the users to share.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/url-shortener" target="_blank" rel="noopener noreffer ">URL Shortener</a> system design.</em></p>
<h2 id="detailed-design-4">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-4">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>
<ul>
<li>Hash-Based Partitioning</li>
<li>List-Based Partitioning</li>
<li>Range Based Partitioning</li>
<li>Composite Partitioning</li>
</ul>
<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent Hashing</a>.</em></p>
<h3 id="geo-blocking">Geo-blocking</h3>
<p>Platforms like Netflix and YouTube use <a href="https://en.wikipedia.org/wiki/Geo-blocking" target="_blank" rel="noopener noreffer ">Geo-blocking</a> to restrict content in certain geographical areas or countries. This is primarily done due to legal distribution laws that Netflix has to adhere to when they make a deal with the production and distribution companies. In the case of YouTube, this will be controlled by the user during the publishing of the content.</p>
<p>We can determine the user&rsquo;s location either using their <a href="https://karanpratapsingh.com/courses/system-design/ip" target="_blank" rel="noopener noreffer ">IP</a> or region settings in their profile then use services like <a href="https://aws.amazon.com/cloudfront" target="_blank" rel="noopener noreffer ">Amazon CloudFront</a> which supports a geographic restrictions feature or a <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html" target="_blank" rel="noopener noreffer ">geolocation routing policy</a> with <a href="https://aws.amazon.com/route53" target="_blank" rel="noopener noreffer ">Amazon Route53</a> to restrict the content and re-route the user to an error page if the content is not available in that particular region or country.</p>
<h3 id="recommendations">Recommendations</h3>
<p>Netflix uses a machine learning model which uses the user&rsquo;s viewing history to predict what the user might like to watch next, an algorithm like <a href="https://en.wikipedia.org/wiki/Collaborative_filtering" target="_blank" rel="noopener noreffer ">Collaborative Filtering</a> can be used.</p>
<p>However, Netflix (like YouTube) uses its own algorithm called Netflix Recommendation Engine which can track several data points such as:</p>
<ul>
<li>User profile information like age, gender, and location.</li>
<li>Browsing and scrolling behavior of the user.</li>
<li>Time and date a user watched a title.</li>
<li>The device which was used to stream the content.</li>
<li>The number of searches and what terms were searched.</li>
</ul>
<p><em>For more detail, refer to <a href="https://research.netflix.com/research-area/recommendations" target="_blank" rel="noopener noreffer ">Netflix recommendation research</a>.</em></p>
<h3 id="metrics-and-analytics-2">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href="https://spark.apache.org" target="_blank" rel="noopener noreffer ">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>
<h3 id="caching-4">Caching</h3>
<p>In a streaming platform, caching is important. We have to be able to cache as much static media content as possible to improve user experience. We can use solutions like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_%28LRU%29" target="_blank" rel="noopener noreffer ">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">Caching</a>.</em></p>
<h3 id="media-streaming-and-storage">Media streaming and storage</h3>
<p>As most of our storage space will be used for storing media files such as thumbnails and videos. Per our discussion earlier, the media service will be handling both the upload and processing of media files.</p>
<p>We will use distributed file storage such as <a href="https://karanpratapsingh.com/courses/system-design/storage#hdfs" target="_blank" rel="noopener noreffer ">HDFS</a>, <a href="https://www.gluster.org" target="_blank" rel="noopener noreffer ">GlusterFS</a>, or an <a href="https://karanpratapsingh.com/courses/system-design/storage#object-storage" target="_blank" rel="noopener noreffer ">object storage</a> such as <a href="https://aws.amazon.com/s3" target="_blank" rel="noopener noreffer ">Amazon S3</a> for storage and streaming of the content.</p>
<h3 id="content-delivery-network-cdn-3">Content Delivery Network (CDN)</h3>
<p><a href="https://karanpratapsingh.com/courses/system-design/content-delivery-network" target="_blank" rel="noopener noreffer ">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href="https://aws.amazon.com/cloudfront" target="_blank" rel="noopener noreffer ">Amazon CloudFront</a> or <a href="https://www.cloudflare.com/cdn" target="_blank" rel="noopener noreffer ">Cloudflare CDN</a> for this use case.</p>
<h2 id="identify-and-resolve-bottlenecks-4">Identify and resolve bottlenecks</h2>
<p></p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
</ul>
<h1 id="uber">Uber</h1>
<p>Let&rsquo;s design an <a href="https://uber.com" target="_blank" rel="noopener noreffer ">Uber</a> like ride-hailing service, similar to services like <a href="https://www.lyft.com" target="_blank" rel="noopener noreffer ">Lyft</a>, <a href="https://www.olacabs.com" target="_blank" rel="noopener noreffer ">OLA Cabs</a>, etc.</p>
<h2 id="what-is-uber">What is Uber?</h2>
<p>Uber is a mobility service provider, allowing users to book rides and a driver to transport them in a way similar to a taxi. It is available on the web and mobile platforms such as Android and iOS.</p>
<h2 id="requirements-4">Requirements</h2>
<p>Our system should meet the following requirements:</p>
<h3 id="functional-requirements-5">Functional requirements</h3>
<p>We will design our system for two types of users: Customers and Drivers.</p>
<p><strong>Customers</strong></p>
<ul>
<li>Customers should be able to see all the cabs in the vicinity with an ETA and pricing information.</li>
<li>Customers should be able to book a cab to a destination.</li>
<li>Customers should be able to see the location of the driver.</li>
</ul>
<p><strong>Drivers</strong></p>
<ul>
<li>Drivers should be able to accept or deny the customer requested ride.</li>
<li>Once a driver accepts the ride, they should see the pickup location of the customer.</li>
<li>Drivers should be able to mark the trip as complete on reaching the destination.</li>
</ul>
<h3 id="non-functional-requirements-5">Non-Functional requirements</h3>
<ul>
<li>High reliability.</li>
<li>High availability with minimal latency.</li>
<li>The system should be scalable and efficient.</li>
</ul>
<h3 id="extended-requirements-5">Extended requirements</h3>
<ul>
<li>Customers can rate the trip after it&rsquo;s completed.</li>
<li>Payment processing.</li>
<li>Metrics and analytics.</li>
</ul>
<h2 id="estimation-and-constraints-5">Estimation and Constraints</h2>
<p>Let&rsquo;s start with the estimation and constraints.</p>
<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>
<h3 id="traffic-4">Traffic</h3>
<p>Let us assume we have 100 million daily active users (DAU) with 1 million drivers and on average our platform enables 10 million rides daily.</p>
<p>If on average each user performs 10 actions (such as request a check available rides, fares, book rides, etc.) we will have to handle 1 billion requests daily.</p>
<p>$$
100 \space million \times 10 \space actions = 1 \space billion/day
$$</p>
<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>
<p>1 billion requests per day translate into 12K requests per second.</p>
<p>$$
\frac{1 \space billion}{(24 \space hrs \times 3600 \space seconds)} = \sim 12K \space requests/second
$$</p>
<h3 id="storage-6">Storage</h3>
<p>If we assume each message on average is 400 bytes, we will require about 400 GB of database storage every day.</p>
<p>$$
1 \space billion \times 400 \space bytes = \sim 400 \space GB/day
$$</p>
<p>And for 10 years, we will require about 1.4 PB of storage.</p>
<p>$$
400 \space GB \times 10 \space years \times 365 \space days = \sim 1.4 \space PB
$$</p>
<h3 id="bandwidth-4">Bandwidth</h3>
<p>As our system is handling 400 GB of ingress every day, we will require a minimum bandwidth of around 4 MB per second.</p>
<p>$$
\frac{400 \space GB}{(24 \space hrs \times 3600 \space seconds)} = \sim 5 \space MB/second
$$</p>
<h3 id="high-level-estimate-4">High-level estimate</h3>
<p>Here is our high-level estimate:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Estimate</th>
</tr>
</thead>
<tbody>
<tr>
<td>Daily active users (DAU)</td>
<td>100 million</td>
</tr>
<tr>
<td>Requests per second (RPS)</td>
<td>12K/s</td>
</tr>
<tr>
<td>Storage (per day)</td>
<td>~400 GB</td>
</tr>
<tr>
<td>Storage (10 years)</td>
<td>~1.4 PB</td>
</tr>
<tr>
<td>Bandwidth</td>
<td>~5 MB/s</td>
</tr>
</tbody>
</table>
<h2 id="data-model-design-5">Data model design</h2>
<p>This is the general data model which reflects our requirements.</p>
<p></p>
<p>We have the following tables:</p>
<p><strong>customers</strong></p>
<p>This table will contain a customer&rsquo;s information such as <code>name</code>, <code>email</code>, and other details.</p>
<p><strong>drivers</strong></p>
<p>This table will contain a driver&rsquo;s information such as <code>name</code>, <code>email</code>, <code>dob</code> and other details.</p>
<p><strong>trips</strong></p>
<p>This table represents the trip taken by the customer and stores data such as <code>source</code>, <code>destination</code>, and <code>status</code> of the trip.</p>
<p><strong>cabs</strong></p>
<p>This table stores data such as the registration number, and type (like Uber Go, Uber XL, etc.) of the cab that the driver will be driving.</p>
<p><strong>ratings</strong></p>
<p>As the name suggests, this table stores the <code>rating</code> and <code>feedback</code> for the trip.</p>
<p><strong>payments</strong></p>
<p>The payments table contains the payment-related data with the corresponding <code>tripID</code>.</p>
<h3 id="what-kind-of-database-should-we-use-4">What kind of database should we use?</h3>
<p>While our data model seems quite relational, we don&rsquo;t necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>
<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a> or a distributed NoSQL database such as <a href="https://cassandra.apache.org/_/index.html" target="_blank" rel="noopener noreffer ">Apache Cassandra</a> for our use case.</p>
<h2 id="api-design-5">API design</h2>
<p>Let us do a basic API design for our services:</p>
<h3 id="request-a-ride">Request a Ride</h3>
<p>Through this API, customers will be able to request a ride.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">requestRide</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">source</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">float</span><span class="p">&gt;,</span> <span class="nx">destination</span>: <span class="kt">Tuple</span><span class="p">&lt;</span><span class="nt">float</span><span class="p">&gt;,</span> <span class="nx">cabType</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;,</span> <span class="nx">paymentMethod</span>: <span class="kt">Enum</span><span class="p">&lt;</span><span class="nt">string</span><span class="p">&gt;)</span><span class="o">:</span> <span class="nx">Ride</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Source (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip&rsquo;s starting location.</p>
<p>Destination (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip&rsquo;s destination.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="cancel-the-ride">Cancel the Ride</h3>
<p>This API will allow customers to cancel the ride.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">cancelRide</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">reason?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Reason (<code>UUID</code>): Reason for canceling the ride <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="accept-or-deny-the-ride">Accept or Deny the Ride</h3>
<p>This API will allow the driver to accept or deny the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">acceptRide</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rideID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">denyRide</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rideID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Driver ID (<code>UUID</code>): ID of the driver.</p>
<p>Ride ID (<code>UUID</code>): ID of the customer requested ride.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="start-or-end-the-trip">Start or End the Trip</h3>
<p>Using this API, a driver will be able to start and end the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">startTrip</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span><span class="line"><span class="cl"><span class="nx">endTrip</span><span class="p">(</span><span class="nx">driverID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Driver ID (<code>UUID</code>): ID of the driver.</p>
<p>Trip ID (<code>UUID</code>): ID of the requested trip.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h3 id="rate-the-trip">Rate the Trip</h3>
<p>This API will enable customers to rate the trip.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="nx">rateTrip</span><span class="p">(</span><span class="nx">customerID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">tripID</span>: <span class="kt">UUID</span><span class="p">,</span> <span class="nx">rating</span>: <span class="kt">int</span><span class="p">,</span> <span class="nx">feedback?</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Parameters</strong></p>
<p>Customer ID (<code>UUID</code>): ID of the customer.</p>
<p>Trip ID (<code>UUID</code>): ID of the completed trip.</p>
<p>Rating (<code>int</code>): Rating of the trip.</p>
<p>Feedback (<code>string</code>): Feedback about the trip by the customer <em>(optional)</em>.</p>
<p><strong>Returns</strong></p>
<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>
<h2 id="high-level-design-4">High-level design</h2>
<p>Now let us do a high-level design of our system.</p>
<h3 id="architecture-3">Architecture</h3>
<p>We will be using <a href="https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices" target="_blank" rel="noopener noreffer ">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let&rsquo;s try to divide our system into some core services.</p>
<p><strong>Customer Service</strong></p>
<p>This service handles customer-related concerns such as authentication and customer information.</p>
<p><strong>Driver Service</strong></p>
<p>This service handles driver-related concerns such as authentication and driver information.</p>
<p><strong>Ride Service</strong></p>
<p>This service will be responsible for ride matching and quadtree aggregation. It will be discussed in detail separately.</p>
<p><strong>Trip Service</strong></p>
<p>This service handles trip-related functionality in our system.</p>
<p><strong>Payment Service</strong></p>
<p>This service will be responsible for handling payments in our system.</p>
<p><strong>Notification Service</strong></p>
<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>
<p><strong>Analytics Service</strong></p>
<p>This service will be used for metrics and analytics use cases.</p>
<p><strong>What about inter-service communication and service discovery?</strong></p>
<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc" target="_blank" rel="noopener noreffer ">gRPC</a> which is more lightweight and efficient.</p>
<p><a href="https://karanpratapsingh.com/courses/system-design/service-discovery" target="_blank" rel="noopener noreffer ">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc" target="_blank" rel="noopener noreffer ">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>
<h3 id="how-is-the-service-expected-to-work">How is the service expected to work?</h3>
<p>Here&rsquo;s how our service is expected to work:</p>
<p></p>
<ol>
<li>Customer requests a ride by specifying the source, destination, cab type, payment method, etc.</li>
<li>Ride service registers this request, finds nearby drivers, and calculates the estimated time of arrival (ETA).</li>
<li>The request is then broadcasted to the nearby drivers for them to accept or deny.</li>
<li>If the driver accepts, the customer is notified about the live location of the driver with the estimated time of arrival (ETA) while they wait for pickup.</li>
<li>The customer is picked up and the driver can start the trip.</li>
<li>Once the destination is reached, the driver will mark the ride as complete and collect payment.</li>
<li>After the payment is complete, the customer can leave a rating and feedback for the trip if they like.</li>
</ol>
<h3 id="location-tracking">Location Tracking</h3>
<p>How do we efficiently send and receive live location data from the client (customers and drivers) to our backend? We have two different options:</p>
<p><strong>Pull model</strong></p>
<p>The client can periodically send an HTTP request to servers to report its current location and receive ETA and pricing information. This can be achieved via something like <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling" target="_blank" rel="noopener noreffer ">Long polling</a>.</p>
<p><strong>Push model</strong></p>
<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets" target="_blank" rel="noopener noreffer ">WebSockets</a> or <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse" target="_blank" rel="noopener noreffer ">Server-Sent Events (SSE)</a> for this.</p>
<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets" target="_blank" rel="noopener noreffer ">WebSockets</a> is a better choice because then we can push data to the client once it&rsquo;s available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse" target="_blank" rel="noopener noreffer ">Server-Sent Events (SSE)</a> which are only unidirectional.</p>
<p>Additionally, the client application should have some sort of background job mechanism to ping GPS location while the application is in the background.</p>
<p><em>Note: Learn more about <a href="https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events" target="_blank" rel="noopener noreffer ">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>
<h3 id="ride-matching">Ride Matching</h3>
<p>We need a way to efficiently store and query nearby drivers. Let&rsquo;s explore different solutions we can incorporate into our design.</p>
<p><strong>SQL</strong></p>
<p>We already have access to the latitude and longitude of our customers, and with databases like <a href="https://www.postgresql.org" target="_blank" rel="noopener noreffer ">PostgreSQL</a> and <a href="https://www.mysql.com" target="_blank" rel="noopener noreffer ">MySQL</a> we can perform a query to find nearby driver locations given a latitude and longitude (X, Y) within a radius (R).</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">locations</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">lat</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">X</span><span class="o">-</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">X</span><span class="o">+</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">long</span><span class="w"> </span><span class="k">BETWEEN</span><span class="w"> </span><span class="n">Y</span><span class="o">-</span><span class="n">R</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">Y</span><span class="o">+</span><span class="n">R</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>However, this is not scalable, and performing this query on large datasets will be quite slow.</p>
<p><strong>Geohashing</strong></p>
<p><a href="/courses/sytem-design/geohashing-and-quadtrees#geohashing" rel="">Geohashing</a> is a <a href="https://en.wikipedia.org/wiki/Address_geocoding" target="_blank" rel="noopener noreffer ">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href="https://twitter.com/gniemeyer" target="_blank" rel="noopener noreffer ">Gustavo Niemeyer</a> in 2008.</p>
<p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>
<p></p>
<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>
<p>Now, using the customer&rsquo;s geohash we can determine the nearest available driver by simply comparing it with the driver&rsquo;s geohash. For better performance, we will index and store the geohash of the driver in memory for faster retrieval.</p>
<p><strong>Quadtrees</strong></p>
<p>A <a href="/courses/sytem-design/geohashing-and-quadtrees#quadtrees" rel="">Quadtree</a> is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href="https://en.wikipedia.org/wiki/Octree" target="_blank" rel="noopener noreffer ">Octrees</a> which are used to partition three-dimensional space.</p>
<p></p>
<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude/longitude coordinates or as cartesian (x, y) coordinates.</p>
<p>We can save further computation by only subdividing a node after a certain threshold.</p>
<p></p>
<p><a href="/courses/sytem-design/geohashing-and-quadtrees#quadtrees" rel="">Quadtree</a> seems perfect for our use case, we can update the Quadtree every time we receive a new location update from the driver. To reduce the load on the quadtree servers we can use an in-memory datastore such as <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> to cache the latest updates. And with the application of mapping algorithms such as the <a href="https://en.wikipedia.org/wiki/Hilbert_curve" target="_blank" rel="noopener noreffer ">Hilbert curve</a>, we can perform efficient range queries to find nearby drivers for the customer.</p>
<p><strong>What about race conditions?</strong></p>
<p>Race conditions can easily occur when a large number of customers will be requesting rides simultaneously. To avoid this, we can wrap our ride matching logic in a <a href="https://en.wikipedia.org/wiki/Lock_%28computer_science%29" target="_blank" rel="noopener noreffer ">Mutex</a> to avoid any race conditions. Furthermore, every action should be transactional in nature.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/transactions" target="_blank" rel="noopener noreffer ">Transactions</a> and <a href="https://karanpratapsingh.com/courses/system-design/distributed-transactions" target="_blank" rel="noopener noreffer ">Distributed Transactions</a>.</em></p>
<p><strong>How to find the best drivers nearby?</strong></p>
<p>Once we have a list of nearby drivers from the Quadtree servers, we can perform some sort of ranking based on parameters like average ratings, relevance, past customer feedback, etc. This will allow us to broadcast notifications to the best available drivers first.</p>
<p><strong>Dealing with high demand</strong></p>
<p>In cases of high demand, we can use the concept of Surge Pricing. Surge pricing is a dynamic pricing method where prices are temporarily increased as a reaction to increased demand and mostly limited supply. This surge price can be added to the base price of the trip.</p>
<p><em>For more details, learn how <a href="https://www.uber.com/us/en/drive/driver-app/how-surge-works" target="_blank" rel="noopener noreffer ">surge pricing works</a> with Uber.</em></p>
<h3 id="payments">Payments</h3>
<p>Handling payments at scale is challenging, to simplify our system we can use a third-party payment processor like <a href="https://stripe.com" target="_blank" rel="noopener noreffer ">Stripe</a> or <a href="https://www.paypal.com" target="_blank" rel="noopener noreffer ">PayPal</a>. Once the payment is complete, the payment processor will redirect the user back to our application and we can set up a <a href="https://en.wikipedia.org/wiki/Webhook" target="_blank" rel="noopener noreffer ">webhook</a> to capture all the payment-related data.</p>
<h3 id="notifications-2">Notifications</h3>
<p>Push notifications will be an integral part of our platform. We can use a message queue or a message broker such as <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> with the notification service to dispatch requests to <a href="https://firebase.google.com/docs/cloud-messaging" target="_blank" rel="noopener noreffer ">Firebase Cloud Messaging (FCM)</a> or <a href="https://developer.apple.com/documentation/usernotifications" target="_blank" rel="noopener noreffer ">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>
<p><em>For more details, refer to the <a href="https://karanpratapsingh.com/courses/system-design/whatsapp#notifications" target="_blank" rel="noopener noreffer ">WhatsApp</a> system design where we discuss push notifications.</em></p>
<h2 id="detailed-design-5">Detailed design</h2>
<p>It&rsquo;s time to discuss our design decisions in detail.</p>
<h3 id="data-partitioning-5">Data Partitioning</h3>
<p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a>) can be a good first step. We can shard our database either based on existing <a href="https://karanpratapsingh.com/courses/system-design/sharding#partitioning-criteria" target="_blank" rel="noopener noreffer ">partition schemes</a> or regions. If we divide the locations into regions using let&rsquo;s say zip codes, we can effectively store all the data in a given region on a fixed node. But this can still cause uneven data and load distribution, we can solve this using <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent hashing</a>.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/sharding" target="_blank" rel="noopener noreffer ">Sharding</a> and <a href="https://karanpratapsingh.com/courses/system-design/consistent-hashing" target="_blank" rel="noopener noreffer ">Consistent Hashing</a>.</em></p>
<h3 id="metrics-and-analytics-3">Metrics and Analytics</h3>
<p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href="https://spark.apache.org" target="_blank" rel="noopener noreffer ">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>
<h3 id="caching-5">Caching</h3>
<p>In a location services-based platform, caching is important. We have to be able to cache the recent locations of the customers and drivers for fast retrieval. We can use solutions like <a href="https://redis.io" target="_blank" rel="noopener noreffer ">Redis</a> or <a href="https://memcached.org" target="_blank" rel="noopener noreffer ">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>
<p><strong>Which cache eviction policy to use?</strong></p>
<p><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_%28LRU%29" target="_blank" rel="noopener noreffer ">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>
<p><strong>How to handle cache miss?</strong></p>
<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>
<p><em>For more details, refer to <a href="https://karanpratapsingh.com/courses/system-design/caching" target="_blank" rel="noopener noreffer ">Caching</a>.</em></p>
<h2 id="identify-and-resolve-bottlenecks-5">Identify and resolve bottlenecks</h2>
<p></p>
<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>
<ul>
<li>&ldquo;What if one of our services crashes?&rdquo;</li>
<li>&ldquo;How will we distribute our traffic between our components?&rdquo;</li>
<li>&ldquo;How can we reduce the load on our database?&rdquo;</li>
<li>&ldquo;How to improve the availability of our cache?&rdquo;</li>
<li>&ldquo;How can we make our notification system more robust?&rdquo;</li>
</ul>
<p>To make our system more resilient we can do the following:</p>
<ul>
<li>Running multiple instances of each of our services.</li>
<li>Introducing <a href="https://karanpratapsingh.com/courses/system-design/load-balancing" target="_blank" rel="noopener noreffer ">load balancers</a> between clients, servers, databases, and cache servers.</li>
<li>Using multiple read replicas for our databases.</li>
<li>Multiple instances and replicas for our distributed cache.</li>
<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href="https://karanpratapsingh.com/courses/system-design/message-brokers" target="_blank" rel="noopener noreffer ">message broker</a> such as <a href="https://kafka.apache.org" target="_blank" rel="noopener noreffer ">Apache Kafka</a> or <a href="https://nats.io" target="_blank" rel="noopener noreffer ">NATS</a> to make our notification system more robust.</li>
</ul>
<h1 id="next-steps">Next Steps</h1>
<p>Congratulations, you&rsquo;ve finished the course!</p>
<p>Now that you know the fundamentals of System Design, here are some additional resources:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=UEAMfLPZZhE&amp;list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB" target="_blank" rel="noopener noreffer ">Distributed Systems</a> (by Dr. Martin Kleppmann)</li>
<li><a href="https://www.amazon.in/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" target="_blank" rel="noopener noreffer ">System Design Interview: An Insider&rsquo;s Guide</a></li>
<li><a href="https://microservices.io" target="_blank" rel="noopener noreffer ">Microservices</a> (by Chris Richardson)</li>
<li><a href="https://en.wikipedia.org/wiki/Serverless_computing" target="_blank" rel="noopener noreffer ">Serverless computing</a></li>
<li><a href="https://kubernetes.io" target="_blank" rel="noopener noreffer ">Kubernetes</a></li>
</ul>
<p>It is also recommended to actively follow engineering blogs of companies putting what we learned in the course into practice at scale:</p>
<ul>
<li><a href="https://engineering.microsoft.com" target="_blank" rel="noopener noreffer ">Microsoft Engineering</a></li>
<li><a href="http://googleresearch.blogspot.com" target="_blank" rel="noopener noreffer ">Google Research Blog</a></li>
<li><a href="http://techblog.netflix.com" target="_blank" rel="noopener noreffer ">Netflix Tech Blog</a></li>
<li><a href="https://aws.amazon.com/blogs/aws" target="_blank" rel="noopener noreffer ">AWS Blog</a></li>
<li><a href="https://www.facebook.com/Engineering" target="_blank" rel="noopener noreffer ">Facebook Engineering</a></li>
<li><a href="http://eng.uber.com" target="_blank" rel="noopener noreffer ">Uber Engineering Blog</a></li>
<li><a href="http://nerds.airbnb.com" target="_blank" rel="noopener noreffer ">Airbnb Engineering</a></li>
<li><a href="https://github.blog/category/engineering" target="_blank" rel="noopener noreffer ">GitHub Engineering Blog</a></li>
<li><a href="https://software.intel.com/en-us/blogs" target="_blank" rel="noopener noreffer ">Intel Software Blog</a></li>
<li><a href="http://engineering.linkedin.com/blog" target="_blank" rel="noopener noreffer ">LinkedIn Engineering</a></li>
<li><a href="https://medium.com/paypal-engineering" target="_blank" rel="noopener noreffer ">Paypal Developer Blog</a></li>
<li><a href="https://blog.twitter.com/engineering" target="_blank" rel="noopener noreffer ">Twitter Engineering</a></li>
</ul>
<p>Last but not least, volunteer for new projects at your company, and learn from senior engineers and architects to further improve your system design skills.</p>
<p>I hope this course was a great learning experience. I would love to hear feedback from you.</p>
<p>Wishing you all the best for further learning!</p>
<h1 id="references">References</h1>
<p>Here are the resources that were referenced while creating this course.</p>
<ul>
<li><a href="https://www.cloudflare.com/learning" target="_blank" rel="noopener noreffer ">Cloudflare learning center</a></li>
<li><a href="https://www.ibm.com/blogs" target="_blank" rel="noopener noreffer ">IBM Blogs</a></li>
<li><a href="https://www.fastly.com/blog" target="_blank" rel="noopener noreffer ">Fastly Blogs</a></li>
<li><a href="https://ns1.com/blog" target="_blank" rel="noopener noreffer ">NS1 Blogs</a></li>
<li><a href="https://www.educative.io/courses/grokking-the-system-design-interview" target="_blank" rel="noopener noreffer ">Grokking the System Design Interview</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener noreffer ">System Design Primer</a></li>
<li><a href="https://aws.amazon.com/blogs" target="_blank" rel="noopener noreffer ">AWS Blogs</a></li>
<li><a href="https://martinfowler.com" target="_blank" rel="noopener noreffer ">Martin Fowler</a></li>
<li><a href="https://www.pagerduty.com/resources" target="_blank" rel="noopener noreffer ">PagerDuty resources</a></li>
<li><a href="https://blogs.vmware.com/learning" target="_blank" rel="noopener noreffer ">VMWare Blogs</a></li>
</ul>
<p><sup> Blog Disclaimer: This webpage is a modification of <a href="https://github.com/karanpratapsingh" target="_blank" rel="noopener noreffer ">@karanpratapsingh</a>&rsquo;s <a href="https://github.com/karanpratapsingh/system-design" target="_blank" rel="noopener noreffer ">system-design</a> repository with <a href="https://github.com/karanpratapsingh/system-design/commits/main/LICENSE" target="_blank" rel="noopener noreffer ">CC BY-NC-ND 4.0</a> <a href="https://drive.google.com/file/d/1XNunkcoiM90bUjI3LbM8giyVPWc8xVNE/view" target="_blank" rel="noopener noreffer ">license</a>.</sup></p>
<p><em>All the diagrams were made using <a href="https://excalidraw.com" target="_blank" rel="noopener noreffer ">Excalidraw</a> and are available <a href="https://github.com/karanpratapsingh/system-design/tree/main/diagrams" target="_blank" rel="noopener noreffer ">here</a>.</em></p>
]]></description>
</item>
</channel>
</rss>
